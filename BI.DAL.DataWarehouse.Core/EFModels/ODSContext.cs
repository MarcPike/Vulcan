using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BI.DAL.DataWarehouse.Core.Models
{
    public partial class ODSContext : DbContext
    {
        public ODSContext()
        {
        }

        public ODSContext(DbContextOptions<ODSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountingPeriod> AccountingPeriod { get; set; }
        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<AfterSalesCarePersonnel> AfterSalesCarePersonnel { get; set; }
        public virtual DbSet<AgingCategory> AgingCategory { get; set; }
        public virtual DbSet<AmHeatTest> AmHeatTest { get; set; }
        public virtual DbSet<Apobl> Apobl { get; set; }
        public virtual DbSet<Apobp> Apobp { get; set; }
        public virtual DbSet<Appjd> Appjd { get; set; }
        public virtual DbSet<Appjh> Appjh { get; set; }
        public virtual DbSet<Appjs> Appjs { get; set; }
        public virtual DbSet<Aprta> Aprta { get; set; }
        public virtual DbSet<Apven> Apven { get; set; }
        public virtual DbSet<Apveno> Apveno { get; set; }
        public virtual DbSet<Apvgr> Apvgr { get; set; }
        public virtual DbSet<Apvsm> Apvsm { get; set; }
        public virtual DbSet<Arcsm> Arcsm { get; set; }
        public virtual DbSet<Arcsp> Arcsp { get; set; }
        public virtual DbSet<Arcus> Arcus { get; set; }
        public virtual DbSet<Arcuso> Arcuso { get; set; }
        public virtual DbSet<Argro> Argro { get; set; }
        public virtual DbSet<Arobl> Arobl { get; set; }
        public virtual DbSet<Arobp> Arobp { get; set; }
        public virtual DbSet<Arpjd> Arpjd { get; set; }
        public virtual DbSet<Arpjh> Arpjh { get; set; }
        public virtual DbSet<Arpjs> Arpjs { get; set; }
        public virtual DbSet<Arras> Arras { get; set; }
        public virtual DbSet<Arrta> Arrta { get; set; }
        public virtual DbSet<Arsap> Arsap { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AuditArchive> AuditArchive { get; set; }
        public virtual DbSet<AuditNew> AuditNew { get; set; }
        public virtual DbSet<BakerImportedForecast> BakerImportedForecast { get; set; }
        public virtual DbSet<BaseCurrencyAndWeightUnitForCoid> BaseCurrencyAndWeightUnitForCoid { get; set; }
        public virtual DbSet<BasicRefCodes> BasicRefCodes { get; set; }
        public virtual DbSet<Batches> Batches { get; set; }
        public virtual DbSet<Bkjenth> Bkjenth { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<BrinellEquipment> BrinellEquipment { get; set; }
        public virtual DbSet<Buyers> Buyers { get; set; }
        public virtual DbSet<CertificationRequirements> CertificationRequirements { get; set; }
        public virtual DbSet<Coiddefaults> Coiddefaults { get; set; }
        public virtual DbSet<CommodityCodes> CommodityCodes { get; set; }
        public virtual DbSet<Companies> Companies { get; set; }
        public virtual DbSet<CompanyCreditRules> CompanyCreditRules { get; set; }
        public virtual DbSet<CompanyNoteTemplates> CompanyNoteTemplates { get; set; }
        public virtual DbSet<CompanySubAddresses> CompanySubAddresses { get; set; }
        public virtual DbSet<CompanyTotals> CompanyTotals { get; set; }
        public virtual DbSet<CompanyTypeCodes> CompanyTypeCodes { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<CostGroupCodes> CostGroupCodes { get; set; }
        public virtual DbSet<CostItems> CostItems { get; set; }
        public virtual DbSet<CostItemsPivot> CostItemsPivot { get; set; }
        public virtual DbSet<CostLineItems> CostLineItems { get; set; }
        public virtual DbSet<CountryCodes> CountryCodes { get; set; }
        public virtual DbSet<CreditHoldReasons> CreditHoldReasons { get; set; }
        public virtual DbSet<Csccd> Csccd { get; set; }
        public virtual DbSet<Cscom> Cscom { get; set; }
        public virtual DbSet<Cscrd> Cscrd { get; set; }
        public virtual DbSet<Csfsc> Csfsc { get; set; }
        public virtual DbSet<CumbernauldTargetBudget> CumbernauldTargetBudget { get; set; }
        public virtual DbSet<CurrencyCodes> CurrencyCodes { get; set; }
        public virtual DbSet<CustomerAnalysisCodes> CustomerAnalysisCodes { get; set; }
        public virtual DbSet<CustomerPartDemand> CustomerPartDemand { get; set; }
        public virtual DbSet<CustomerPartLengthLookup> CustomerPartLengthLookup { get; set; }
        public virtual DbSet<CustomerPartMappingExternalToiMetal> CustomerPartMappingExternalToiMetal { get; set; }
        public virtual DbSet<CustomerPartPlants> CustomerPartPlants { get; set; }
        public virtual DbSet<CustomerPartWarehouses> CustomerPartWarehouses { get; set; }
        public virtual DbSet<DespatchHeaders> DespatchHeaders { get; set; }
        public virtual DbSet<DespatchInstructions> DespatchInstructions { get; set; }
        public virtual DbSet<DespatchItems> DespatchItems { get; set; }
        public virtual DbSet<DespatchStatusCodes> DespatchStatusCodes { get; set; }
        public virtual DbSet<DimensionValues> DimensionValues { get; set; }
        public virtual DbSet<DropPolicy> DropPolicy { get; set; }
        public virtual DbSet<EndUses> EndUses { get; set; }
        public virtual DbSet<EominvoiceReconciliations> EominvoiceReconciliations { get; set; }
        public virtual DbSet<EomstockItems> EomstockItems { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<FinancialCalendar> FinancialCalendar { get; set; }
        public virtual DbSet<FiscalMonthConversion> FiscalMonthConversion { get; set; }
        public virtual DbSet<Glabk> Glabk { get; set; }
        public virtual DbSet<Glabrx> Glabrx { get; set; }
        public virtual DbSet<Glacgrp> Glacgrp { get; set; }
        public virtual DbSet<Glamf> Glamf { get; set; }
        public virtual DbSet<Glasv> Glasv { get; set; }
        public virtual DbSet<Glbctl> Glbctl { get; set; }
        public virtual DbSet<GlbctlUsaarc> GlbctlUsaarc { get; set; }
        public virtual DbSet<Gljec> Gljec { get; set; }
        public virtual DbSet<GljecUsaarc> GljecUsaarc { get; set; }
        public virtual DbSet<Gljed> Gljed { get; set; }
        public virtual DbSet<GljedUsaarc> GljedUsaarc { get; set; }
        public virtual DbSet<Gljeh> Gljeh { get; set; }
        public virtual DbSet<GljehUsaarc> GljehUsaarc { get; set; }
        public virtual DbSet<Glpost> Glpost { get; set; }
        public virtual DbSet<Glposto> Glposto { get; set; }
        public virtual DbSet<Glsrce> Glsrce { get; set; }
        public virtual DbSet<GoLiveDates> GoLiveDates { get; set; }
        public virtual DbSet<GoodsInwardsCosts> GoodsInwardsCosts { get; set; }
        public virtual DbSet<GoodsInwardsHeaders> GoodsInwardsHeaders { get; set; }
        public virtual DbSet<GoodsInwardsItems> GoodsInwardsItems { get; set; }
        public virtual DbSet<GoodsInwardsProducts> GoodsInwardsProducts { get; set; }
        public virtual DbSet<HalliburtonBillingImportBatches> HalliburtonBillingImportBatches { get; set; }
        public virtual DbSet<HalliburtonBillingItems> HalliburtonBillingItems { get; set; }
        public virtual DbSet<HalliburtonBillingMovementCodes> HalliburtonBillingMovementCodes { get; set; }
        public virtual DbSet<HalliburtonBillingStatusCodes> HalliburtonBillingStatusCodes { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartDemand> HalliburtonSupplyOptimizationPartDemand { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartLengthLookup> HalliburtonSupplyOptimizationPartLengthLookup { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartMappingExternalToiMetal> HalliburtonSupplyOptimizationPartMappingExternalToiMetal { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartMappingExternalToiMetalImport> HalliburtonSupplyOptimizationPartMappingExternalToiMetalImport { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartPlants> HalliburtonSupplyOptimizationPartPlants { get; set; }
        public virtual DbSet<HalliburtonSupplyOptimizationPartWarehouses> HalliburtonSupplyOptimizationPartWarehouses { get; set; }
        public virtual DbSet<IMetalAuditLogSpec> IMetalAuditLogSpec { get; set; }
        public virtual DbSet<IMetalColumnCompare> IMetalColumnCompare { get; set; }
        public virtual DbSet<InboundAllocations> InboundAllocations { get; set; }
        public virtual DbSet<InboundAllocations1> InboundAllocations1 { get; set; }
        public virtual DbSet<InvoiceReconciliations> InvoiceReconciliations { get; set; }
        public virtual DbSet<InvoiceReconciliationsArchive> InvoiceReconciliationsArchive { get; set; }
        public virtual DbSet<LoggedActions> LoggedActions { get; set; }
        public virtual DbSet<Mills> Mills { get; set; }
        public virtual DbSet<NdtutcertEquipmentDetails> NdtutcertEquipmentDetails { get; set; }
        public virtual DbSet<NdtutcertMaintenanceDetails> NdtutcertMaintenanceDetails { get; set; }
        public virtual DbSet<NdtutcertSignatureDetails> NdtutcertSignatureDetails { get; set; }
        public virtual DbSet<NdtutscanPlanDetails> NdtutscanPlanDetails { get; set; }
        public virtual DbSet<NominalAccounts> NominalAccounts { get; set; }
        public virtual DbSet<NoteTemplates> NoteTemplates { get; set; }
        public virtual DbSet<OrderClassifications> OrderClassifications { get; set; }
        public virtual DbSet<PartNumberSpecificationCharges> PartNumberSpecificationCharges { get; set; }
        public virtual DbSet<PartNumberSpecificationCosts> PartNumberSpecificationCosts { get; set; }
        public virtual DbSet<PartNumberSpecifications> PartNumberSpecifications { get; set; }
        public virtual DbSet<Personnel> Personnel { get; set; }
        public virtual DbSet<PersonnelGroups> PersonnelGroups { get; set; }
        public virtual DbSet<ProcessAllocations> ProcessAllocations { get; set; }
        public virtual DbSet<ProcessGroupConsumption> ProcessGroupConsumption { get; set; }
        public virtual DbSet<ProcessGroupProcessingTimes> ProcessGroupProcessingTimes { get; set; }
        public virtual DbSet<ProcessGroupStatusCodes> ProcessGroupStatusCodes { get; set; }
        public virtual DbSet<ProcessGroups> ProcessGroups { get; set; }
        public virtual DbSet<ProcessGroupsExt> ProcessGroupsExt { get; set; }
        public virtual DbSet<ProcessPlanProductSpecifications> ProcessPlanProductSpecifications { get; set; }
        public virtual DbSet<ProcessPlans> ProcessPlans { get; set; }
        public virtual DbSet<ProcessRequests> ProcessRequests { get; set; }
        public virtual DbSet<Processes> Processes { get; set; }
        public virtual DbSet<ProductBalances> ProductBalances { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductControls> ProductControls { get; set; }
        public virtual DbSet<ProductLevelAllocation> ProductLevelAllocation { get; set; }
        public virtual DbSet<ProductSubGroups> ProductSubGroups { get; set; }
        public virtual DbSet<ProductionAllocations> ProductionAllocations { get; set; }
        public virtual DbSet<ProductionCostingRules> ProductionCostingRules { get; set; }
        public virtual DbSet<ProductionCostingTotals> ProductionCostingTotals { get; set; }
        public virtual DbSet<ProductionJobConsumption> ProductionJobConsumption { get; set; }
        public virtual DbSet<ProductionJobPersonnel> ProductionJobPersonnel { get; set; }
        public virtual DbSet<ProductionJobs> ProductionJobs { get; set; }
        public virtual DbSet<ProductionScheduleItems> ProductionScheduleItems { get; set; }
        public virtual DbSet<ProductionSchedules> ProductionSchedules { get; set; }
        public virtual DbSet<ProductionStatusCodes> ProductionStatusCodes { get; set; }
        public virtual DbSet<ProductionStepProductSpecifications> ProductionStepProductSpecifications { get; set; }
        public virtual DbSet<ProductionSteps> ProductionSteps { get; set; }
        public virtual DbSet<ProductionStepsExt> ProductionStepsExt { get; set; }
        public virtual DbSet<ProductionStepsSequence> ProductionStepsSequence { get; set; }
        public virtual DbSet<ProductionStepsSequenceArchive> ProductionStepsSequenceArchive { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductsTheoreticalWeight> ProductsTheoreticalWeight { get; set; }
        public virtual DbSet<PurchaseCategoryCodes> PurchaseCategoryCodes { get; set; }
        public virtual DbSet<PurchaseEnquiryDeletionReasons> PurchaseEnquiryDeletionReasons { get; set; }
        public virtual DbSet<PurchaseGroups> PurchaseGroups { get; set; }
        public virtual DbSet<PurchaseOrderHeaders> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<PurchaseOrderItems> PurchaseOrderItems { get; set; }
        public virtual DbSet<PurchaseOrderItemsExt> PurchaseOrderItemsExt { get; set; }
        public virtual DbSet<PurchaseOrderTotals> PurchaseOrderTotals { get; set; }
        public virtual DbSet<PurchaseStatusCodes> PurchaseStatusCodes { get; set; }
        public virtual DbSet<PurchaseTypeCodes> PurchaseTypeCodes { get; set; }
        public virtual DbSet<QbusinessUnit> QbusinessUnit { get; set; }
        public virtual DbSet<QbusinessUnitSalesCategory> QbusinessUnitSalesCategory { get; set; }
        public virtual DbSet<QbusinessUnitWarehouse> QbusinessUnitWarehouse { get; set; }
        public virtual DbSet<QngVAccountingPeriod> QngVAccountingPeriod { get; set; }
        public virtual DbSet<QngVCostItemsPivot> QngVCostItemsPivot { get; set; }
        public virtual DbSet<QngVCostLineItems> QngVCostLineItems { get; set; }
        public virtual DbSet<QngVExchangeRate> QngVExchangeRate { get; set; }
        public virtual DbSet<QngVFiscalMonthConversion> QngVFiscalMonthConversion { get; set; }
        public virtual DbSet<QngVQbusinessUnit> QngVQbusinessUnit { get; set; }
        public virtual DbSet<QngVQbusinessUnitSalesCategory> QngVQbusinessUnitSalesCategory { get; set; }
        public virtual DbSet<QngVQbusinessUnitWarehouse> QngVQbusinessUnitWarehouse { get; set; }
        public virtual DbSet<QngVSalesChargesPivot> QngVSalesChargesPivot { get; set; }
        public virtual DbSet<QngVSalesHeadersExt> QngVSalesHeadersExt { get; set; }
        public virtual DbSet<QngVStockItemAllocations> QngVStockItemAllocations { get; set; }
        public virtual DbSet<QngVStockItemsExt> QngVStockItemsExt { get; set; }
        public virtual DbSet<SageVApobl> SageVApobl { get; set; }
        public virtual DbSet<SageVApobp> SageVApobp { get; set; }
        public virtual DbSet<SageVAppjd> SageVAppjd { get; set; }
        public virtual DbSet<SageVAppjh> SageVAppjh { get; set; }
        public virtual DbSet<SageVAppjs> SageVAppjs { get; set; }
        public virtual DbSet<SageVAprta> SageVAprta { get; set; }
        public virtual DbSet<SageVApven> SageVApven { get; set; }
        public virtual DbSet<SageVApveno> SageVApveno { get; set; }
        public virtual DbSet<SageVApvgr> SageVApvgr { get; set; }
        public virtual DbSet<SageVApvsm> SageVApvsm { get; set; }
        public virtual DbSet<SageVArcsm> SageVArcsm { get; set; }
        public virtual DbSet<SageVArcsp> SageVArcsp { get; set; }
        public virtual DbSet<SageVArcus> SageVArcus { get; set; }
        public virtual DbSet<SageVArcuso> SageVArcuso { get; set; }
        public virtual DbSet<SageVArgro> SageVArgro { get; set; }
        public virtual DbSet<SageVArobl> SageVArobl { get; set; }
        public virtual DbSet<SageVArobp> SageVArobp { get; set; }
        public virtual DbSet<SageVArpjd> SageVArpjd { get; set; }
        public virtual DbSet<SageVArpjh> SageVArpjh { get; set; }
        public virtual DbSet<SageVArpjs> SageVArpjs { get; set; }
        public virtual DbSet<SageVArras> SageVArras { get; set; }
        public virtual DbSet<SageVArrta> SageVArrta { get; set; }
        public virtual DbSet<SageVArsap> SageVArsap { get; set; }
        public virtual DbSet<SageVBkjenth> SageVBkjenth { get; set; }
        public virtual DbSet<SageVCsccd> SageVCsccd { get; set; }
        public virtual DbSet<SageVCscom> SageVCscom { get; set; }
        public virtual DbSet<SageVCscrd> SageVCscrd { get; set; }
        public virtual DbSet<SageVCsfsc> SageVCsfsc { get; set; }
        public virtual DbSet<SageVGlabk> SageVGlabk { get; set; }
        public virtual DbSet<SageVGlabrx> SageVGlabrx { get; set; }
        public virtual DbSet<SageVGlacgrp> SageVGlacgrp { get; set; }
        public virtual DbSet<SageVGlamf> SageVGlamf { get; set; }
        public virtual DbSet<SageVGlasv> SageVGlasv { get; set; }
        public virtual DbSet<SageVGlbctl> SageVGlbctl { get; set; }
        public virtual DbSet<SageVGljec> SageVGljec { get; set; }
        public virtual DbSet<SageVGljed> SageVGljed { get; set; }
        public virtual DbSet<SageVGljeh> SageVGljeh { get; set; }
        public virtual DbSet<SageVGlpost> SageVGlpost { get; set; }
        public virtual DbSet<SageVGlposto> SageVGlposto { get; set; }
        public virtual DbSet<SageVGlsrce> SageVGlsrce { get; set; }
        public virtual DbSet<SageVTxauth> SageVTxauth { get; set; }
        public virtual DbSet<SageVTxclass> SageVTxclass { get; set; }
        public virtual DbSet<SageVTxgrp> SageVTxgrp { get; set; }
        public virtual DbSet<SageVTxrate> SageVTxrate { get; set; }
        public virtual DbSet<SalesAnalysisDetails> SalesAnalysisDetails { get; set; }
        public virtual DbSet<SalesAnalysisMonthly> SalesAnalysisMonthly { get; set; }
        public virtual DbSet<SalesAnalysisYearly> SalesAnalysisYearly { get; set; }
        public virtual DbSet<SalesCategoriesToExcludeFromSsandScm> SalesCategoriesToExcludeFromSsandScm { get; set; }
        public virtual DbSet<SalesChargeDiscounts> SalesChargeDiscounts { get; set; }
        public virtual DbSet<SalesChargeTypes> SalesChargeTypes { get; set; }
        public virtual DbSet<SalesCharges> SalesCharges { get; set; }
        public virtual DbSet<SalesChargesPivot> SalesChargesPivot { get; set; }
        public virtual DbSet<SalesGroupCharges> SalesGroupCharges { get; set; }
        public virtual DbSet<SalesGroupTypes> SalesGroupTypes { get; set; }
        public virtual DbSet<SalesGroups> SalesGroups { get; set; }
        public virtual DbSet<SalesHeaders> SalesHeaders { get; set; }
        public virtual DbSet<SalesHeaders1> SalesHeaders1 { get; set; }
        public virtual DbSet<SalesHeadersExt> SalesHeadersExt { get; set; }
        public virtual DbSet<SalesItemLateReasonLinks> SalesItemLateReasonLinks { get; set; }
        public virtual DbSet<SalesItemLateReasons> SalesItemLateReasons { get; set; }
        public virtual DbSet<SalesItemSubLateReasons> SalesItemSubLateReasons { get; set; }
        public virtual DbSet<SalesItems> SalesItems { get; set; }
        public virtual DbSet<SalesItemsDrillingCharges> SalesItemsDrillingCharges { get; set; }
        public virtual DbSet<SalesItemsExt> SalesItemsExt { get; set; }
        public virtual DbSet<SalesItemsStatusHistory> SalesItemsStatusHistory { get; set; }
        public virtual DbSet<SalesProductionSummary> SalesProductionSummary { get; set; }
        public virtual DbSet<SalesStatusCodes> SalesStatusCodes { get; set; }
        public virtual DbSet<SalesTotals> SalesTotals { get; set; }
        public virtual DbSet<SalesTypes> SalesTypes { get; set; }
        public virtual DbSet<ScmManualForecast> ScmManualForecast { get; set; }
        public virtual DbSet<ServerPreferences> ServerPreferences { get; set; }
        public virtual DbSet<SpecCerthead> SpecCerthead { get; set; }
        public virtual DbSet<SpecChargehead> SpecChargehead { get; set; }
        public virtual DbSet<SpecChargeresults> SpecChargeresults { get; set; }
        public virtual DbSet<SpecExtras> SpecExtras { get; set; }
        public virtual DbSet<SpecHeader> SpecHeader { get; set; }
        public virtual DbSet<SpecStepheat> SpecStepheat { get; set; }
        public virtual DbSet<SpecSteptargets> SpecSteptargets { get; set; }
        public virtual DbSet<SqlagentJobsStatus> SqlagentJobsStatus { get; set; }
        public virtual DbSet<StockAllocations> StockAllocations { get; set; }
        public virtual DbSet<StockAnalysisCodes> StockAnalysisCodes { get; set; }
        public virtual DbSet<StockCasts> StockCasts { get; set; }
        public virtual DbSet<StockConditionCodes> StockConditionCodes { get; set; }
        public virtual DbSet<StockConditions> StockConditions { get; set; }
        public virtual DbSet<StockDimensionTypes> StockDimensionTypes { get; set; }
        public virtual DbSet<StockGrades> StockGrades { get; set; }
        public virtual DbSet<StockHoldReasons> StockHoldReasons { get; set; }
        public virtual DbSet<StockItemAllocations> StockItemAllocations { get; set; }
        public virtual DbSet<StockItemAllocations1> StockItemAllocations1 { get; set; }
        public virtual DbSet<StockItems> StockItems { get; set; }
        public virtual DbSet<StockItemsArchive> StockItemsArchive { get; set; }
        public virtual DbSet<StockItemsExt> StockItemsExt { get; set; }
        public virtual DbSet<StockRejectReasons> StockRejectReasons { get; set; }
        public virtual DbSet<StockStatusCodes> StockStatusCodes { get; set; }
        public virtual DbSet<StockTestSpecifications> StockTestSpecifications { get; set; }
        public virtual DbSet<StockTransactionItems> StockTransactionItems { get; set; }
        public virtual DbSet<StockTransactionType> StockTransactionType { get; set; }
        public virtual DbSet<StockTransactionTypeLedgerSegments> StockTransactionTypeLedgerSegments { get; set; }
        public virtual DbSet<StockTransactions> StockTransactions { get; set; }
        public virtual DbSet<SupplierDocuments> SupplierDocuments { get; set; }
        public virtual DbSet<TemplateProcessPlanProcesses> TemplateProcessPlanProcesses { get; set; }
        public virtual DbSet<TemplateProcessPlans> TemplateProcessPlans { get; set; }
        public virtual DbSet<Terms> Terms { get; set; }
        public virtual DbSet<TestSpecificationCodes> TestSpecificationCodes { get; set; }
        public virtual DbSet<TransientCosts> TransientCosts { get; set; }
        public virtual DbSet<TransportAreas> TransportAreas { get; set; }
        public virtual DbSet<TransportTypeCodes> TransportTypeCodes { get; set; }
        public virtual DbSet<Txauth> Txauth { get; set; }
        public virtual DbSet<Txclass> Txclass { get; set; }
        public virtual DbSet<Txgrp> Txgrp { get; set; }
        public virtual DbSet<Txrate> Txrate { get; set; }
        public virtual DbSet<UnitOfMeasure> UnitOfMeasure { get; set; }
        public virtual DbSet<Uomconversion> Uomconversion { get; set; }
        public virtual DbSet<UomtypeCodes> UomtypeCodes { get; set; }
        public virtual DbSet<UserNotesForOrdersWithCurrentProcessStep> UserNotesForOrdersWithCurrentProcessStep { get; set; }
        public virtual DbSet<VAudit> VAudit { get; set; }
        public virtual DbSet<VAuditArchive> VAuditArchive { get; set; }
        public virtual DbSet<VAuditNew> VAuditNew { get; set; }
        public virtual DbSet<VCustomerPartNumberSpecifications> VCustomerPartNumberSpecifications { get; set; }
        public virtual DbSet<VCustomers> VCustomers { get; set; }
        public virtual DbSet<VDeliveryPerformanceReport> VDeliveryPerformanceReport { get; set; }
        public virtual DbSet<VDespatchInstructions> VDespatchInstructions { get; set; }
        public virtual DbSet<VDistinctPurchaseCategoryCodes> VDistinctPurchaseCategoryCodes { get; set; }
        public virtual DbSet<VHalliburtonBillingItems> VHalliburtonBillingItems { get; set; }
        public virtual DbSet<VLookupBranches> VLookupBranches { get; set; }
        public virtual DbSet<VLookupCompanySubAddress> VLookupCompanySubAddress { get; set; }
        public virtual DbSet<VLookupCustomers> VLookupCustomers { get; set; }
        public virtual DbSet<VLookupOrderTypeDescriptions> VLookupOrderTypeDescriptions { get; set; }
        public virtual DbSet<VPartNumberSpecificationChargesPivot> VPartNumberSpecificationChargesPivot { get; set; }
        public virtual DbSet<VPentagonShippingHeaders> VPentagonShippingHeaders { get; set; }
        public virtual DbSet<VPentagonShippingItems> VPentagonShippingItems { get; set; }
        public virtual DbSet<VPentagonShippingItemsAllocations> VPentagonShippingItemsAllocations { get; set; }
        public virtual DbSet<VSalesItemsStatusHistory> VSalesItemsStatusHistory { get; set; }
        public virtual DbSet<VSuppliers> VSuppliers { get; set; }
        public virtual DbSet<VehicleStopDetails> VehicleStopDetails { get; set; }
        public virtual DbSet<VulcanCrmQuote> VulcanCrmQuote { get; set; }
        public virtual DbSet<VulcanCrmQuoteItem> VulcanCrmQuoteItem { get; set; }
        public virtual DbSet<VulcanCrmQuoteItemProductionCost> VulcanCrmQuoteItemProductionCost { get; set; }
        public virtual DbSet<VulcanCrmQuoteItemTestPieces> VulcanCrmQuoteItemTestPieces { get; set; }
        public virtual DbSet<WarehouseTypeCodes> WarehouseTypeCodes { get; set; }
        public virtual DbSet<Warehouses> Warehouses { get; set; }
        public virtual DbSet<WorkCentreRecoveryTypeMapping> WorkCentreRecoveryTypeMapping { get; set; }
        public virtual DbSet<WorkCentres> WorkCentres { get; set; }
        public virtual DbSet<WorkCentresForCapacityPlanning> WorkCentresForCapacityPlanning { get; set; }
        public virtual DbSet<WorkCentresWeeklyCapacityPlanning> WorkCentresWeeklyCapacityPlanning { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=S-US-DW01;Database=ODS;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountingPeriod>(entity =>
            {
                entity.HasKey(e => new { e.PeriodBeginDate, e.PeriodEndDate, e.AccountingPeriod1, e.FiscalPeriod })
                    .HasName("PK_QNG_AccountingPeriod");

                entity.ToTable("AccountingPeriod", "QNG");

                entity.Property(e => e.PeriodBeginDate).HasColumnType("date");

                entity.Property(e => e.PeriodEndDate).HasColumnType("date");

                entity.Property(e => e.AccountingPeriod1)
                    .HasColumnName("AccountingPeriod")
                    .HasColumnType("date");

                entity.Property(e => e.AccountingPeriodName).HasMaxLength(34);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IMetalPeriod).HasColumnName("iMetalPeriod");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Addresses>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Addresses", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Addresses_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(4000);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.County)
                    .HasColumnName("county")
                    .HasMaxLength(60);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Postcode)
                    .HasColumnName("postcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Town)
                    .HasColumnName("town")
                    .HasMaxLength(60);

                entity.Property(e => e.TransportAreaId).HasColumnName("transport_area_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<AfterSalesCarePersonnel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AfterSalesCarePersonnel", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Personnel)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<AgingCategory>(entity =>
            {
                entity.ToTable("AgingCategory", "QNG");

                entity.Property(e => e.AgingCategoryId).HasColumnName("AgingCategoryID");

                entity.Property(e => e.Aging)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AmHeatTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AM_HeatTest", "QNG");

                entity.Property(e => e.Heat).HasMaxLength(30);

                entity.Property(e => e.Plant).HasMaxLength(100);

                entity.Property(e => e.Warehouse).HasMaxLength(50);
            });

            modelBuilder.Entity<Apobl>(entity =>
            {
                entity.HasKey(e => new { e.Idvend, e.Idinvc, e.Coid });

                entity.ToTable("APOBL", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_APOBL_COID");

                entity.Property(e => e.Idvend)
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Amt1099org)
                    .HasColumnName("AMT1099ORG")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amt1099rem)
                    .HasColumnName("AMT1099REM")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1hc)
                    .HasColumnName("AMTBASE1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1tc)
                    .HasColumnName("AMTBASE1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2hc)
                    .HasColumnName("AMTBASE2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2tc)
                    .HasColumnName("AMTBASE2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3hc)
                    .HasColumnName("AMTBASE3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3tc)
                    .HasColumnName("AMTBASE3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4hc)
                    .HasColumnName("AMTBASE4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4tc)
                    .HasColumnName("AMTBASE4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5hc)
                    .HasColumnName("AMTBASE5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5tc)
                    .HasColumnName("AMTBASE5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduehc)
                    .HasColumnName("AMTDUEHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduetc)
                    .HasColumnName("AMTDUETC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxhc)
                    .HasColumnName("AMTNONTXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxtc)
                    .HasColumnName("AMTNONTXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtremit)
                    .HasColumnName("AMTREMIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1hc)
                    .HasColumnName("AMTTAX1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1tc)
                    .HasColumnName("AMTTAX1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2hc)
                    .HasColumnName("AMTTAX2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2tc)
                    .HasColumnName("AMTTAX2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3hc)
                    .HasColumnName("AMTTAX3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3tc)
                    .HasColumnName("AMTTAX3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4hc)
                    .HasColumnName("AMTTAX4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4tc)
                    .HasColumnName("AMTTAX4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5hc)
                    .HasColumnName("AMTTAX5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5tc)
                    .HasColumnName("AMTTAX5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxblhc)
                    .HasColumnName("AMTTXBLHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxbltc)
                    .HasColumnName("AMTTXBLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht1hc)
                    .HasColumnName("AMTWHT1HC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht1tc)
                    .HasColumnName("AMTWHT1TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht2hc)
                    .HasColumnName("AMTWHT2HC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht2tc)
                    .HasColumnName("AMTWHT2TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht3hc)
                    .HasColumnName("AMTWHT3HC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht3tc)
                    .HasColumnName("AMTWHT3TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht4hc)
                    .HasColumnName("AMTWHT4HC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht4tc)
                    .HasColumnName("AMTWHT4TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht5hc)
                    .HasColumnName("AMTWHT5HC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Amtwht5tc)
                    .HasColumnName("AMTWHT5TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Apversion)
                    .IsRequired()
                    .HasColumnName("APVERSION")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntlastsch)
                    .HasColumnName("CNTLASTSCH")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpaym)
                    .HasColumnName("CNTLSTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpyst)
                    .HasColumnName("CNTLSTPYST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntoblj).HasColumnName("CNTOBLJ");

                entity.Property(e => e.Cnttotpaym)
                    .HasColumnName("CNTTOTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurnrc)
                    .IsRequired()
                    .HasColumnName("CODECURNRC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax1)
                    .IsRequired()
                    .HasColumnName("CODETAX1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax2)
                    .IsRequired()
                    .HasColumnName("CODETAX2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax3)
                    .IsRequired()
                    .HasColumnName("CODETAX3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax4)
                    .IsRequired()
                    .HasColumnName("CODETAX4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax5)
                    .IsRequired()
                    .HasColumnName("CODETAX5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateasof)
                    .HasColumnName("DATEASOF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datefrstbk)
                    .HasColumnName("DATEFRSTBK")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvcdu)
                    .HasColumnName("DATEINVCDU")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstact)
                    .HasColumnName("DATELSTACT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstrvl)
                    .HasColumnName("DATELSTRVL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepaid)
                    .HasColumnName("DATEPAID")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepystts)
                    .HasColumnName("DATEPYSTTS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descinvc)
                    .IsRequired()
                    .HasColumnName("DESCINVC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Exchratehc)
                    .HasColumnName("EXCHRATEHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id1099clas)
                    .IsRequired()
                    .HasColumnName("ID1099CLAS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idordernbr)
                    .IsRequired()
                    .HasColumnName("IDORDERNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idponbr)
                    .IsRequired()
                    .HasColumnName("IDPONBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepay)
                    .IsRequired()
                    .HasColumnName("IDPREPAY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitto)
                    .IsRequired()
                    .HasColumnName("IDRMITTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrxtype).HasColumnName("IDTRXTYPE");

                entity.Property(e => e.Idvendgrp)
                    .IsRequired()
                    .HasColumnName("IDVENDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Oamtwht1tc)
                    .HasColumnName("OAMTWHT1TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Oamtwht2tc)
                    .HasColumnName("OAMTWHT2TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Oamtwht3tc)
                    .HasColumnName("OAMTWHT3TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Oamtwht4tc)
                    .HasColumnName("OAMTWHT4TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Oamtwht5tc)
                    .HasColumnName("OAMTWHT5TC")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Orate)
                    .HasColumnName("ORATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Oratedate)
                    .HasColumnName("ORATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Orateop).HasColumnName("ORATEOP");

                entity.Property(e => e.Oratetype)
                    .IsRequired()
                    .HasColumnName("ORATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Oswrate).HasColumnName("OSWRATE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedaterc)
                    .HasColumnName("RATEDATERC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Rateoprc).HasColumnName("RATEOPRC");

                entity.Property(e => e.Raterc)
                    .HasColumnName("RATERC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetyperc)
                    .IsRequired()
                    .HasColumnName("RATETYPERC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgoamthc)
                    .HasColumnName("RTGOAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgoamttc)
                    .HasColumnName("RTGOAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceappl)
                    .IsRequired()
                    .HasColumnName("SRCEAPPL")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swpaid).HasColumnName("SWPAID");

                entity.Property(e => e.Swpystts).HasColumnName("SWPYSTTS");

                entity.Property(e => e.Swrateovrd).HasColumnName("SWRATEOVRD");

                entity.Property(e => e.Swraterc).HasColumnName("SWRATERC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgout).HasColumnName("SWRTGOUT");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxincl1).HasColumnName("SWTAXINCL1");

                entity.Property(e => e.Swtaxincl2).HasColumnName("SWTAXINCL2");

                entity.Property(e => e.Swtaxincl3).HasColumnName("SWTAXINCL3");

                entity.Property(e => e.Swtaxincl4).HasColumnName("SWTAXINCL4");

                entity.Property(e => e.Swtaxincl5).HasColumnName("SWTAXINCL5");

                entity.Property(e => e.Swtaxovrd).HasColumnName("SWTAXOVRD");

                entity.Property(e => e.Swtxbsectl).HasColumnName("SWTXBSECTL");

                entity.Property(e => e.Swtxctlrc).HasColumnName("SWTXCTLRC");

                entity.Property(e => e.Swtxrtgrpt).HasColumnName("SWTXRTGRPT");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxversion).HasColumnName("TAXVERSION");

                entity.Property(e => e.Txamtrt1tc)
                    .HasColumnName("TXAMTRT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt2tc)
                    .HasColumnName("TXAMTRT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt3tc)
                    .HasColumnName("TXAMTRT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt4tc)
                    .HasColumnName("TXAMTRT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt5tc)
                    .HasColumnName("TXAMTRT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert1tc)
                    .HasColumnName("TXBSERT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert2tc)
                    .HasColumnName("TXBSERT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert3tc)
                    .HasColumnName("TXBSERT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert4tc)
                    .HasColumnName("TXBSERT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert5tc)
                    .HasColumnName("TXBSERT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txttrxtype).HasColumnName("TXTTRXTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Yplastact)
                    .IsRequired()
                    .HasColumnName("YPLASTACT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Apobp>(entity =>
            {
                entity.HasKey(e => new { e.Idinvc, e.Idrmit, e.Idvend, e.Datebus, e.Cntseqnce, e.Transtype, e.Coid, e.Cntpaymnbr });

                entity.ToTable("APOBP", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_APOBP_COID");

                entity.Property(e => e.Idinvc)
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idvend)
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntseqnce)
                    .HasColumnName("CNTSEQNCE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cntpaymnbr)
                    .HasColumnName("CNTPAYMNBR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Amt1099)
                    .HasColumnName("AMT1099")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Code1099)
                    .IsRequired()
                    .HasColumnName("CODE1099")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax)
                    .IsRequired()
                    .HasColumnName("CODETAX")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datermit)
                    .HasColumnName("DATERMIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idmemoxref)
                    .IsRequired()
                    .HasColumnName("IDMEMOXREF")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitvend)
                    .IsRequired()
                    .HasColumnName("IDRMITVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Swovrdrate).HasColumnName("SWOVRDRATE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");
            });

            modelBuilder.Entity<Appjd>(entity =>
            {
                entity.HasKey(e => new { e.Cntbtch, e.Cntitem, e.Postseqnce, e.Cntseqence, e.Typebtch, e.Coid });

                entity.ToTable("APPJD", "SAGE");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntseqence).HasColumnName("CNTSEQENCE");

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype).HasColumnName("ACCTTYPE");

                entity.Property(e => e.Amtadjhcur)
                    .HasColumnName("AMTADJHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtcur)
                    .HasColumnName("AMTADJTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdschcur)
                    .HasColumnName("AMTDSCHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdsctcur)
                    .HasColumnName("AMTDSCTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndhc)
                    .HasColumnName("AMTEXTNDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndtc)
                    .HasColumnName("AMTEXTNDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Basetaxhc)
                    .HasColumnName("BASETAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Basetaxtc)
                    .HasColumnName("BASETAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntline)
                    .HasColumnName("CNTLINE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descomp)
                    .IsRequired()
                    .HasColumnName("DESCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glcomment)
                    .IsRequired()
                    .HasColumnName("GLCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gldesc)
                    .IsRequired()
                    .HasColumnName("GLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glref)
                    .IsRequired()
                    .HasColumnName("GLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacct)
                    .IsRequired()
                    .HasColumnName("IDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddist)
                    .IsRequired()
                    .HasColumnName("IDDIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrans).HasColumnName("IDTRANS");

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedoc)
                    .HasColumnName("RATEDOC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Route).HasColumnName("ROUTE");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxtype).HasColumnName("SWTAXTYPE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Appjh>(entity =>
            {
                entity.HasKey(e => new { e.Cntbtch, e.Cntitem, e.Postseqnce, e.Typebtch, e.Coid });

                entity.ToTable("APPJH", "SAGE");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Amtbc)
                    .HasColumnName("AMTBC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amthc)
                    .HasColumnName("AMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttc)
                    .HasColumnName("AMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurnbc)
                    .IsRequired()
                    .HasColumnName("CODECURNBC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurntc)
                    .IsRequired()
                    .HasColumnName("CODECURNTC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Enteredby)
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddistset)
                    .IsRequired()
                    .HasColumnName("IDDISTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvcappl)
                    .IsRequired()
                    .HasColumnName("IDINVCAPPL")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idn)
                    .HasColumnName("IDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitto)
                    .IsRequired()
                    .HasColumnName("IDRMITTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Miscrmitto)
                    .IsRequired()
                    .HasColumnName("MISCRMITTO")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Origcomp)
                    .IsRequired()
                    .HasColumnName("ORIGCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Pctdisc)
                    .HasColumnName("PCTDISC")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Ratedatebc)
                    .HasColumnName("RATEDATEBC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatetc)
                    .HasColumnName("RATEDATETC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchbc)
                    .HasColumnName("RATEEXCHBC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchtc)
                    .HasColumnName("RATEEXCHTC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateopbc).HasColumnName("RATEOPBC");

                entity.Property(e => e.Rateoptc).HasColumnName("RATEOPTC");

                entity.Property(e => e.Ratetypebc)
                    .IsRequired()
                    .HasColumnName("RATETYPEBC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratetypetc)
                    .IsRequired()
                    .HasColumnName("RATETYPETC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revinvc).HasColumnName("REVINVC");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swratebc).HasColumnName("SWRATEBC");

                entity.Property(e => e.Swratetc).HasColumnName("SWRATETC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swstatus).HasColumnName("SWSTATUS");

                entity.Property(e => e.Textref)
                    .IsRequired()
                    .HasColumnName("TEXTREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Appjs>(entity =>
            {
                entity.HasKey(e => new { e.Postseqnce, e.Typebtch, e.Coid });

                entity.ToTable("APPJS", "SAGE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateposted)
                    .HasColumnName("DATEPOSTED")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepostgl)
                    .HasColumnName("DATEPOSTGL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Pgmver)
                    .IsRequired()
                    .HasColumnName("PGMVER")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swglconsl).HasColumnName("SWGLCONSL");

                entity.Property(e => e.Swpostgl).HasColumnName("SWPOSTGL");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");
            });

            modelBuilder.Entity<Aprta>(entity =>
            {
                entity.HasKey(e => new { e.Termscode, e.Coid });

                entity.ToTable("APRTA", "SAGE");

                entity.Property(e => e.Termscode)
                    .HasColumnName("TERMSCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntentered)
                    .HasColumnName("CNTENTERED")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codedesc)
                    .IsRequired()
                    .HasColumnName("CODEDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedistyp).HasColumnName("CODEDISTYP");

                entity.Property(e => e.Codeduetyp).HasColumnName("CODEDUETYP");

                entity.Property(e => e.Codevat).HasColumnName("CODEVAT");

                entity.Property(e => e.Dateinactv)
                    .HasColumnName("DATEINACTV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Disdayend1)
                    .HasColumnName("DISDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend2)
                    .HasColumnName("DISDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend3)
                    .HasColumnName("DISDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend4)
                    .HasColumnName("DISDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr1)
                    .HasColumnName("DISDAYSTR1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr2)
                    .HasColumnName("DISDAYSTR2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr3)
                    .HasColumnName("DISDAYSTR3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr4)
                    .HasColumnName("DISDAYSTR4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse1)
                    .HasColumnName("DISDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse2)
                    .HasColumnName("DISDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse3)
                    .HasColumnName("DISDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse4)
                    .HasColumnName("DISDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd1)
                    .HasColumnName("DISMTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd2)
                    .HasColumnName("DISMTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd3)
                    .HasColumnName("DISMTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd4)
                    .HasColumnName("DISMTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend1)
                    .HasColumnName("DUEDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend2)
                    .HasColumnName("DUEDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend3)
                    .HasColumnName("DUEDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend4)
                    .HasColumnName("DUEDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr1)
                    .HasColumnName("DUEDAYSTR1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr2)
                    .HasColumnName("DUEDAYSTR2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr3)
                    .HasColumnName("DUEDAYSTR3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr4)
                    .HasColumnName("DUEDAYSTR4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse1)
                    .HasColumnName("DUEDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse2)
                    .HasColumnName("DUEDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse3)
                    .HasColumnName("DUEDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse4)
                    .HasColumnName("DUEDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd1)
                    .HasColumnName("DUEMTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd2)
                    .HasColumnName("DUEMTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd3)
                    .HasColumnName("DUEMTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd4)
                    .HasColumnName("DUEMTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Pctduetot)
                    .HasColumnName("PCTDUETOT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swmultpaym).HasColumnName("SWMULTPAYM");
            });

            modelBuilder.Entity<Apven>(entity =>
            {
                entity.HasKey(e => new { e.Vendorid, e.Coid });

                entity.ToTable("APVEN", "SAGE");

                entity.Property(e => e.Vendorid)
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Amtbaldueh)
                    .HasColumnName("AMTBALDUEH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalduet)
                    .HasColumnName("AMTBALDUET")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhih)
                    .HasColumnName("AMTBALHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilh)
                    .HasColumnName("AMTBALHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilt)
                    .HasColumnName("AMTBALHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhit)
                    .HasColumnName("AMTBALHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtballarv)
                    .HasColumnName("AMTBALLARV")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrlimt)
                    .HasColumnName("AMTCRLIMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhih)
                    .HasColumnName("AMTINVHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilh)
                    .HasColumnName("AMTINVHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilt)
                    .HasColumnName("AMTINVHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhit)
                    .HasColumnName("AMTINVHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdtc)
                    .HasColumnName("AMTINVPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadh)
                    .HasColumnName("AMTLASTADH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadt)
                    .HasColumnName("AMTLASTADT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrh)
                    .HasColumnName("AMTLASTCRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrt)
                    .HasColumnName("AMTLASTCRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdih)
                    .HasColumnName("AMTLASTDIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdit)
                    .HasColumnName("AMTLASTDIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrh)
                    .HasColumnName("AMTLASTDRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrt)
                    .HasColumnName("AMTLASTDRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivh)
                    .HasColumnName("AMTLASTIVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivt)
                    .HasColumnName("AMTLASTIVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyh)
                    .HasColumnName("AMTLASTPYH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyt)
                    .HasColumnName("AMTLASTPYT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvh)
                    .HasColumnName("AMTPPDINVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvt)
                    .HasColumnName("AMTPPDINVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthhcur)
                    .HasColumnName("AMTWTHHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthlyhc)
                    .HasColumnName("AMTWTHLYHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthlytc)
                    .HasColumnName("AMTWTHLYTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthtcur)
                    .HasColumnName("AMTWTHTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Avgpayment)
                    .HasColumnName("AVGPAYMENT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Bankid)
                    .IsRequired()
                    .HasColumnName("BANKID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Brn)
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Chk1099amt).HasColumnName("CHK1099AMT");

                entity.Property(e => e.Clasid)
                    .IsRequired()
                    .HasColumnName("CLASID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntinvpaid)
                    .HasColumnName("CNTINVPAID")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntnbrchks)
                    .HasColumnName("CNTNBRCHKS")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntopeninv)
                    .HasColumnName("CNTOPENINV")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntppdinvc)
                    .HasColumnName("CNTPPDINVC")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codecheck)
                    .IsRequired()
                    .HasColumnName("CODECHECK")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebalhi)
                    .HasColumnName("DATEBALHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebalhil)
                    .HasColumnName("DATEBALHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvchi)
                    .HasColumnName("DATEINVCHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvhil)
                    .HasColumnName("DATEINVHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastac)
                    .HasColumnName("DATELASTAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastcr)
                    .HasColumnName("DATELASTCR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdi)
                    .HasColumnName("DATELASTDI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdr)
                    .HasColumnName("DATELASTDR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastpa)
                    .HasColumnName("DATELASTPA")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstadj)
                    .HasColumnName("DATELSTADJ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datestart)
                    .HasColumnName("DATESTART")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Daystopay)
                    .HasColumnName("DAYSTOPAY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Delmethod).HasColumnName("DELMETHOD");

                entity.Property(e => e.Distcode)
                    .IsRequired()
                    .HasColumnName("DISTCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distsetid)
                    .IsRequired()
                    .HasColumnName("DISTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dtlastrval)
                    .HasColumnName("DTLASTRVAL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dupamtcode).HasColumnName("DUPAMTCODE");

                entity.Property(e => e.Dupdatecd).HasColumnName("DUPDATECD");

                entity.Property(e => e.Dupinvccd).HasColumnName("DUPINVCCD");

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasColumnName("EMAIL1")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email2)
                    .IsRequired()
                    .HasColumnName("EMAIL2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Glaccnt)
                    .IsRequired()
                    .HasColumnName("GLACCNT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchi)
                    .IsRequired()
                    .HasColumnName("IDINVCHI")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchily)
                    .IsRequired()
                    .HasColumnName("IDINVCHILY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idppnt)
                    .IsRequired()
                    .HasColumnName("IDPPNT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Legalname)
                    .IsRequired()
                    .HasColumnName("LEGALNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nextcuid).HasColumnName("NEXTCUID");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Primrmit)
                    .IsRequired()
                    .HasColumnName("PRIMRMIT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Prtsepchks).HasColumnName("PRTSEPCHKS");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdays).HasColumnName("RTGDAYS");

                entity.Property(e => e.Rtgpercent)
                    .HasColumnName("RTGPERCENT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shortname)
                    .IsRequired()
                    .HasColumnName("SHORTNAME")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Subjtowthh).HasColumnName("SUBJTOWTHH");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swdistby).HasColumnName("SWDISTBY");

                entity.Property(e => e.Swhold).HasColumnName("SWHOLD");

                entity.Property(e => e.Swtxinc1).HasColumnName("SWTXINC1");

                entity.Property(e => e.Swtxinc2).HasColumnName("SWTXINC2");

                entity.Property(e => e.Swtxinc3).HasColumnName("SWTXINC3");

                entity.Property(e => e.Swtxinc4).HasColumnName("SWTXINC4");

                entity.Property(e => e.Swtxinc5).HasColumnName("SWTXINC5");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxidtype).HasColumnName("TAXIDTYPE");

                entity.Property(e => e.Taxnbr)
                    .IsRequired()
                    .HasColumnName("TAXNBR")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxnote2sw).HasColumnName("TAXNOTE2SW");

                entity.Property(e => e.Taxrptsw).HasColumnName("TAXRPTSW");

                entity.Property(e => e.Termscode)
                    .IsRequired()
                    .HasColumnName("TERMSCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Vendname)
                    .IsRequired()
                    .HasColumnName("VENDNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Apveno>(entity =>
            {
                entity.HasKey(e => new { e.Vendorid, e.Optfield, e.Coid });

                entity.ToTable("APVENO", "SAGE");

                entity.Property(e => e.Vendorid)
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Optfield)
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Swset).HasColumnName("SWSET");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Apvgr>(entity =>
            {
                entity.HasKey(e => new { e.Groupid, e.Coid });

                entity.ToTable("APVGR", "SAGE");

                entity.Property(e => e.Groupid)
                    .HasColumnName("GROUPID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctsetid)
                    .IsRequired()
                    .HasColumnName("ACCTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bankid)
                    .IsRequired()
                    .HasColumnName("BANKID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Classid)
                    .IsRequired()
                    .HasColumnName("CLASSID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descriptn)
                    .IsRequired()
                    .HasColumnName("DESCRIPTN")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distcode)
                    .IsRequired()
                    .HasColumnName("DISTCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distsetid)
                    .IsRequired()
                    .HasColumnName("DISTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Duplamt).HasColumnName("DUPLAMT");

                entity.Property(e => e.Dupldate).HasColumnName("DUPLDATE");

                entity.Property(e => e.Duplinvc).HasColumnName("DUPLINVC");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Glacctid)
                    .IsRequired()
                    .HasColumnName("GLACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Inactivedt)
                    .HasColumnName("INACTIVEDT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Lstmntdate)
                    .HasColumnName("LSTMNTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Prtsepchks).HasColumnName("PRTSEPCHKS");

                entity.Property(e => e.Ratetypeid)
                    .IsRequired()
                    .HasColumnName("RATETYPEID")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Subjwthhsw).HasColumnName("SUBJWTHHSW");

                entity.Property(e => e.Swdistby).HasColumnName("SWDISTBY");

                entity.Property(e => e.Swtxinc1).HasColumnName("SWTXINC1");

                entity.Property(e => e.Swtxinc2).HasColumnName("SWTXINC2");

                entity.Property(e => e.Swtxinc3).HasColumnName("SWTXINC3");

                entity.Property(e => e.Swtxinc4).HasColumnName("SWTXINC4");

                entity.Property(e => e.Swtxinc5).HasColumnName("SWTXINC5");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxgrp)
                    .IsRequired()
                    .HasColumnName("TAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxrptsw).HasColumnName("TAXRPTSW");

                entity.Property(e => e.Termcode)
                    .IsRequired()
                    .HasColumnName("TERMCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Apvsm>(entity =>
            {
                entity.HasKey(e => new { e.Vendorid, e.Cntperd, e.Cntyr, e.Coid });

                entity.ToTable("APVSM", "SAGE");

                entity.Property(e => e.Vendorid)
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntperd)
                    .HasColumnName("CNTPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntyr)
                    .HasColumnName("CNTYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Amtadjhc)
                    .HasColumnName("AMTADJHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtc)
                    .HasColumnName("AMTADJTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtblrvltc)
                    .HasColumnName("AMTBLRVLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrhc)
                    .HasColumnName("AMTCRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrtc)
                    .HasColumnName("AMTCRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrhc)
                    .HasColumnName("AMTDRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrtc)
                    .HasColumnName("AMTDRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinpdtc)
                    .HasColumnName("AMTINPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlosthc)
                    .HasColumnName("AMTLOSTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlosttc)
                    .HasColumnName("AMTLOSTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpurhc)
                    .HasColumnName("AMTPURHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpurtc)
                    .HasColumnName("AMTPURTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Cntadj)
                    .HasColumnName("CNTADJ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntcr)
                    .HasColumnName("CNTCR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdisc)
                    .HasColumnName("CNTDISC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdr)
                    .HasColumnName("CNTDR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdtopay)
                    .HasColumnName("CNTDTOPAY")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvc)
                    .HasColumnName("CNTINVC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvcpd)
                    .HasColumnName("CNTINVCPD")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlost)
                    .HasColumnName("CNTLOST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpur)
                    .HasColumnName("CNTPUR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");
            });

            modelBuilder.Entity<Arcsm>(entity =>
            {
                entity.HasKey(e => new { e.Idcust, e.Cntperd, e.Cntyr, e.Coid });

                entity.ToTable("ARCSM", "SAGE");

                entity.Property(e => e.Idcust)
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntperd)
                    .HasColumnName("CNTPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntyr)
                    .HasColumnName("CNTYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Amtadjhc)
                    .HasColumnName("AMTADJHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtc)
                    .HasColumnName("AMTADJTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbarvalt)
                    .HasColumnName("AMTBARVALT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrhc)
                    .HasColumnName("AMTCRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrtc)
                    .HasColumnName("AMTCRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrhc)
                    .HasColumnName("AMTDRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrtc)
                    .HasColumnName("AMTDRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtintthc)
                    .HasColumnName("AMTINTTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtintttc)
                    .HasColumnName("AMTINTTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdtc)
                    .HasColumnName("AMTINVPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrfhc)
                    .HasColumnName("AMTRFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrftc)
                    .HasColumnName("AMTRFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrifhc)
                    .HasColumnName("AMTRIFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtriftc)
                    .HasColumnName("AMTRIFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwrofhc)
                    .HasColumnName("AMTWROFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwroftc)
                    .HasColumnName("AMTWROFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Cntadj)
                    .HasColumnName("CNTADJ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntcr)
                    .HasColumnName("CNTCR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdisc)
                    .HasColumnName("CNTDISC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdr)
                    .HasColumnName("CNTDR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdtopay)
                    .HasColumnName("CNTDTOPAY")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntintt)
                    .HasColumnName("CNTINTT")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvc)
                    .HasColumnName("CNTINVC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvcpd)
                    .HasColumnName("CNTINVCPD")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntrf)
                    .HasColumnName("CNTRF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntrif)
                    .HasColumnName("CNTRIF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntwrof)
                    .HasColumnName("CNTWROF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");
            });

            modelBuilder.Entity<Arcsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ARCSP", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacemail)
                    .IsRequired()
                    .HasColumnName("CTACEMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fob)
                    .IsRequired()
                    .HasColumnName("FOB")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshpt)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHPT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("LOCATION")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namelocn)
                    .IsRequired()
                    .HasColumnName("NAMELOCN")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Priclist)
                    .IsRequired()
                    .HasColumnName("PRICLIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shipvia)
                    .IsRequired()
                    .HasColumnName("SHIPVIA")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviacode)
                    .IsRequired()
                    .HasColumnName("SHPVIACODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviadesc)
                    .IsRequired()
                    .HasColumnName("SHPVIADESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Spclinst)
                    .IsRequired()
                    .HasColumnName("SPCLINST")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Arcus>(entity =>
            {
                entity.HasKey(e => new { e.Idcust, e.Coid });

                entity.ToTable("ARCUS", "SAGE");

                entity.Property(e => e.Idcust)
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Amtbaldueh)
                    .HasColumnName("AMTBALDUEH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalduet)
                    .HasColumnName("AMTBALDUET")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalfwdh)
                    .HasColumnName("AMTBALFWDH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalfwdt)
                    .HasColumnName("AMTBALFWDT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhih)
                    .HasColumnName("AMTBALHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilh)
                    .HasColumnName("AMTBALHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilt)
                    .HasColumnName("AMTBALHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhit)
                    .HasColumnName("AMTBALHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtballarv)
                    .HasColumnName("AMTBALLARV")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrlimt)
                    .HasColumnName("AMTCRLIMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhih)
                    .HasColumnName("AMTINVHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilh)
                    .HasColumnName("AMTINVHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilt)
                    .HasColumnName("AMTINVHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhit)
                    .HasColumnName("AMTINVHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadh)
                    .HasColumnName("AMTLASTADH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadt)
                    .HasColumnName("AMTLASTADT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrh)
                    .HasColumnName("AMTLASTCRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrt)
                    .HasColumnName("AMTLASTCRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdih)
                    .HasColumnName("AMTLASTDIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdit)
                    .HasColumnName("AMTLASTDIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrh)
                    .HasColumnName("AMTLASTDRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrt)
                    .HasColumnName("AMTLASTDRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastinh)
                    .HasColumnName("AMTLASTINH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastint)
                    .HasColumnName("AMTLASTINT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivh)
                    .HasColumnName("AMTLASTIVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivt)
                    .HasColumnName("AMTLASTIVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyh)
                    .HasColumnName("AMTLASTPYH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyt)
                    .HasColumnName("AMTLASTPYT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrfh)
                    .HasColumnName("AMTLASTRFH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrft)
                    .HasColumnName("AMTLASTRFT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrih)
                    .HasColumnName("AMTLASTRIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrit)
                    .HasColumnName("AMTLASTRIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlaststh)
                    .HasColumnName("AMTLASTSTH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlaststt)
                    .HasColumnName("AMTLASTSTT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastwrh)
                    .HasColumnName("AMTLASTWRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastwrt)
                    .HasColumnName("AMTLASTWRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpdue)
                    .HasColumnName("AMTPDUE")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvh)
                    .HasColumnName("AMTPPDINVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvt)
                    .HasColumnName("AMTPPDINVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Billmethod).HasColumnName("BILLMETHOD");

                entity.Property(e => e.Brn)
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Category).HasColumnName("CATEGORY");

                entity.Property(e => e.Cntinvpaid)
                    .HasColumnName("CNTINVPAID")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntopeninv)
                    .HasColumnName("CNTOPENINV")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntppdinvc)
                    .HasColumnName("CNTPPDINVC")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codecheck)
                    .IsRequired()
                    .HasColumnName("CODECHECK")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedab)
                    .IsRequired()
                    .HasColumnName("CODEDAB")
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedabrtg)
                    .IsRequired()
                    .HasColumnName("CODEDABRTG")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Custtype).HasColumnName("CUSTTYPE");

                entity.Property(e => e.Datebalhi)
                    .HasColumnName("DATEBALHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebalhil)
                    .HasColumnName("DATEBALHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedab)
                    .HasColumnName("DATEDAB")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvchi)
                    .HasColumnName("DATEINVCHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvhil)
                    .HasColumnName("DATEINVHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastac)
                    .HasColumnName("DATELASTAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastad)
                    .HasColumnName("DATELASTAD")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastcr)
                    .HasColumnName("DATELASTCR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdi)
                    .HasColumnName("DATELASTDI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdq)
                    .HasColumnName("DATELASTDQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdr)
                    .HasColumnName("DATELASTDR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastin)
                    .HasColumnName("DATELASTIN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastpa)
                    .HasColumnName("DATELASTPA")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastrf)
                    .HasColumnName("DATELASTRF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastri)
                    .HasColumnName("DATELASTRI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastst)
                    .HasColumnName("DATELASTST")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastwr)
                    .HasColumnName("DATELASTWR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datestart)
                    .HasColumnName("DATESTART")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Daystopay)
                    .HasColumnName("DAYSTOPAY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Delmethod).HasColumnName("DELMETHOD");

                entity.Property(e => e.Dtbegbalfw)
                    .HasColumnName("DTBEGBALFW")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dtlastrval)
                    .HasColumnName("DTLASTRVAL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasColumnName("EMAIL1")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email2)
                    .IsRequired()
                    .HasColumnName("EMAIL2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fob)
                    .IsRequired()
                    .HasColumnName("FOB")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idautocash)
                    .IsRequired()
                    .HasColumnName("IDAUTOCASH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcycl)
                    .IsRequired()
                    .HasColumnName("IDBILLCYCL")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddlnq)
                    .IsRequired()
                    .HasColumnName("IDDLNQ")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchi)
                    .IsRequired()
                    .HasColumnName("IDINVCHI")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchily)
                    .IsRequired()
                    .HasColumnName("IDINVCHILY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idnatacct)
                    .IsRequired()
                    .HasColumnName("IDNATACCT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idppnt)
                    .IsRequired()
                    .HasColumnName("IDPPNT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsvcchrg)
                    .IsRequired()
                    .HasColumnName("IDSVCCHRG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("LOCATION")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecust)
                    .IsRequired()
                    .HasColumnName("NAMECUST")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nextcuid).HasColumnName("NEXTCUID");

                entity.Property(e => e.Overamt)
                    .HasColumnName("OVERAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overdays).HasColumnName("OVERDAYS");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Priclist)
                    .IsRequired()
                    .HasColumnName("PRICLIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Primshipto)
                    .IsRequired()
                    .HasColumnName("PRIMSHIPTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdays).HasColumnName("RTGDAYS");

                entity.Property(e => e.Rtgpercent)
                    .HasColumnName("RTGPERCENT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviacode)
                    .IsRequired()
                    .HasColumnName("SHPVIACODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviadesc)
                    .IsRequired()
                    .HasColumnName("SHPVIADESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swbackordr).HasColumnName("SWBACKORDR");

                entity.Property(e => e.Swbalfwd).HasColumnName("SWBALFWD");

                entity.Property(e => e.Swchkduppo).HasColumnName("SWCHKDUPPO");

                entity.Property(e => e.Swchklimit).HasColumnName("SWCHKLIMIT");

                entity.Property(e => e.Swchkover).HasColumnName("SWCHKOVER");

                entity.Property(e => e.Swhold).HasColumnName("SWHOLD");

                entity.Property(e => e.Swpartship).HasColumnName("SWPARTSHIP");

                entity.Property(e => e.Swprtdlnq).HasColumnName("SWPRTDLNQ");

                entity.Property(e => e.Swprtstmt).HasColumnName("SWPRTSTMT");

                entity.Property(e => e.Swwebshop).HasColumnName("SWWEBSHOP");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textsnam)
                    .IsRequired()
                    .HasColumnName("TEXTSNAM")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Arcuso>(entity =>
            {
                entity.HasKey(e => new { e.Idcust, e.Optfield, e.Coid });

                entity.ToTable("ARCUSO", "SAGE");

                entity.Property(e => e.Idcust)
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Optfield)
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Swset).HasColumnName("SWSET");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Argro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ARGRO", "SAGE");

                entity.Property(e => e.Amcrlmcur1)
                    .HasColumnName("AMCRLMCUR1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur2)
                    .HasColumnName("AMCRLMCUR2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur3)
                    .HasColumnName("AMCRLMCUR3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur4)
                    .HasColumnName("AMCRLMCUR4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur5)
                    .HasColumnName("AMCRLMCUR5")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur1)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR1")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur2)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR2")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur3)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR3")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur4)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR4")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur5)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR5")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idautocash)
                    .IsRequired()
                    .HasColumnName("IDAUTOCASH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcycl)
                    .IsRequired()
                    .HasColumnName("IDBILLCYCL")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddlnq)
                    .IsRequired()
                    .HasColumnName("IDDLNQ")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsvcchg)
                    .IsRequired()
                    .HasColumnName("IDSVCCHG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Overamt1)
                    .HasColumnName("OVERAMT1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt2)
                    .HasColumnName("OVERAMT2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt3)
                    .HasColumnName("OVERAMT3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt4)
                    .HasColumnName("OVERAMT4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt5)
                    .HasColumnName("OVERAMT5")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overdays).HasColumnName("OVERDAYS");

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swbalfwd).HasColumnName("SWBALFWD");

                entity.Property(e => e.Swchklimit).HasColumnName("SWCHKLIMIT");

                entity.Property(e => e.Swchkover).HasColumnName("SWCHKOVER");

                entity.Property(e => e.Swcrovrd).HasColumnName("SWCROVRD");

                entity.Property(e => e.Swprtstmt).HasColumnName("SWPRTSTMT");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Arobl>(entity =>
            {
                entity.HasKey(e => new { e.Idinvc, e.Idcust, e.Coid });

                entity.ToTable("AROBL", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_AROBL_COID");

                entity.Property(e => e.Idinvc)
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Amtbase1hc)
                    .HasColumnName("AMTBASE1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1tc)
                    .HasColumnName("AMTBASE1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2hc)
                    .HasColumnName("AMTBASE2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2tc)
                    .HasColumnName("AMTBASE2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3hc)
                    .HasColumnName("AMTBASE3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3tc)
                    .HasColumnName("AMTBASE3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4hc)
                    .HasColumnName("AMTBASE4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4tc)
                    .HasColumnName("AMTBASE4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5hc)
                    .HasColumnName("AMTBASE5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5tc)
                    .HasColumnName("AMTBASE5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduehc)
                    .HasColumnName("AMTDUEHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduetc)
                    .HasColumnName("AMTDUETC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxhc)
                    .HasColumnName("AMTNONTXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxtc)
                    .HasColumnName("AMTNONTXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtremit)
                    .HasColumnName("AMTREMIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1hc)
                    .HasColumnName("AMTTAX1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1tc)
                    .HasColumnName("AMTTAX1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2hc)
                    .HasColumnName("AMTTAX2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2tc)
                    .HasColumnName("AMTTAX2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3hc)
                    .HasColumnName("AMTTAX3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3tc)
                    .HasColumnName("AMTTAX3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4hc)
                    .HasColumnName("AMTTAX4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4tc)
                    .HasColumnName("AMTTAX4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5hc)
                    .HasColumnName("AMTTAX5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5tc)
                    .HasColumnName("AMTTAX5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxblhc)
                    .HasColumnName("AMTTXBLHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxbltc)
                    .HasColumnName("AMTTXBLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Arversion)
                    .IsRequired()
                    .HasColumnName("ARVERSION")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntlastseq)
                    .HasColumnName("CNTLASTSEQ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpaid)
                    .HasColumnName("CNTLSTPAID")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpyst)
                    .HasColumnName("CNTLSTPYST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntoblj).HasColumnName("CNTOBLJ");

                entity.Property(e => e.Cnttotpaym)
                    .HasColumnName("CNTTOTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurnrc)
                    .IsRequired()
                    .HasColumnName("CODECURNRC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedlqsts).HasColumnName("CODEDLQSTS");

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax1)
                    .IsRequired()
                    .HasColumnName("CODETAX1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax2)
                    .IsRequired()
                    .HasColumnName("CODETAX2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax3)
                    .IsRequired()
                    .HasColumnName("CODETAX3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax4)
                    .IsRequired()
                    .HasColumnName("CODETAX4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax5)
                    .IsRequired()
                    .HasColumnName("CODETAX5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateasof)
                    .HasColumnName("DATEASOF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datefrstbk)
                    .HasColumnName("DATEFRSTBK")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstact)
                    .HasColumnName("DATELSTACT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstdlq)
                    .HasColumnName("DATELSTDLQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstrvl)
                    .HasColumnName("DATELSTRVL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepaid)
                    .HasColumnName("DATEPAID")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descinvc)
                    .IsRequired()
                    .HasColumnName("DESCINVC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Exchratehc)
                    .HasColumnName("EXCHRATEHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustpo)
                    .IsRequired()
                    .HasColumnName("IDCUSTPO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshpt)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHPT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idnatacct)
                    .IsRequired()
                    .HasColumnName("IDNATACCT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idordernbr)
                    .IsRequired()
                    .HasColumnName("IDORDERNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idshipnbr)
                    .IsRequired()
                    .HasColumnName("IDSHIPNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Invctype).HasColumnName("INVCTYPE");

                entity.Property(e => e.Orate)
                    .HasColumnName("ORATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Oratedate)
                    .HasColumnName("ORATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Orateop).HasColumnName("ORATEOP");

                entity.Property(e => e.Oratetype)
                    .IsRequired()
                    .HasColumnName("ORATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Oswrate).HasColumnName("OSWRATE");

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedaterc)
                    .HasColumnName("RATEDATERC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Rateoprc).HasColumnName("RATEOPRC");

                entity.Property(e => e.Raterc)
                    .HasColumnName("RATERC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetyperc)
                    .IsRequired()
                    .HasColumnName("RATETYPERC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgoamthc)
                    .HasColumnName("RTGOAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgoamttc)
                    .HasColumnName("RTGOAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceappl)
                    .IsRequired()
                    .HasColumnName("SRCEAPPL")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swpaid).HasColumnName("SWPAID");

                entity.Property(e => e.Swrateovrd).HasColumnName("SWRATEOVRD");

                entity.Property(e => e.Swraterc).HasColumnName("SWRATERC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgout).HasColumnName("SWRTGOUT");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxinput).HasColumnName("SWTAXINPUT");

                entity.Property(e => e.Swtxctlrc).HasColumnName("SWTXCTLRC");

                entity.Property(e => e.Swtxrtgrpt).HasColumnName("SWTXRTGRPT");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxversion).HasColumnName("TAXVERSION");

                entity.Property(e => e.Trxtypeid).HasColumnName("TRXTYPEID");

                entity.Property(e => e.Trxtypetxt).HasColumnName("TRXTYPETXT");

                entity.Property(e => e.Txamtrt1tc)
                    .HasColumnName("TXAMTRT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt2tc)
                    .HasColumnName("TXAMTRT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt3tc)
                    .HasColumnName("TXAMTRT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt4tc)
                    .HasColumnName("TXAMTRT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt5tc)
                    .HasColumnName("TXAMTRT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert1tc)
                    .HasColumnName("TXBSERT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert2tc)
                    .HasColumnName("TXBSERT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert3tc)
                    .HasColumnName("TXBSERT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert4tc)
                    .HasColumnName("TXBSERT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert5tc)
                    .HasColumnName("TXBSERT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Yplastact)
                    .IsRequired()
                    .HasColumnName("YPLASTACT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Arobp>(entity =>
            {
                entity.HasKey(e => new { e.Idinvc, e.Coid, e.Idrmit, e.Cntseqnce, e.Idcust, e.Datebus, e.Transtype, e.Cntpaymnbr });

                entity.ToTable("AROBP", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_AROBP_COID");

                entity.HasIndex(e => new { e.Coid, e.Idcust, e.Idinvc, e.Amtpaymhc, e.Amtpaymtc, e.Datebus })
                    .HasName("IDX_AROBP_DATEBUS");

                entity.Property(e => e.Idinvc)
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntseqnce)
                    .HasColumnName("CNTSEQNCE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Idcust)
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Cntpaymnbr)
                    .HasColumnName("CNTPAYMNBR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datermit)
                    .HasColumnName("DATERMIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustrmit)
                    .IsRequired()
                    .HasColumnName("IDCUSTRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idmemoxref)
                    .IsRequired()
                    .HasColumnName("IDMEMOXREF")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pymcuid).HasColumnName("PYMCUID");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Stmtseq).HasColumnName("STMTSEQ");

                entity.Property(e => e.Swinvcdel).HasColumnName("SWINVCDEL");

                entity.Property(e => e.Swovrdrate).HasColumnName("SWOVRDRATE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");
            });

            modelBuilder.Entity<Arpjd>(entity =>
            {
                entity.HasKey(e => new { e.Cntbtch, e.Cntitem, e.Cntseqence, e.Postseqnce, e.Coid, e.Typebtch });

                entity.ToTable("ARPJD", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ARPJD_COID");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntseqence).HasColumnName("CNTSEQENCE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype).HasColumnName("ACCTTYPE");

                entity.Property(e => e.Amtadjhcur)
                    .HasColumnName("AMTADJHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtcur)
                    .HasColumnName("AMTADJTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcosthc)
                    .HasColumnName("AMTCOSTHC")
                    .HasColumnType("numeric(19, 6)");

                entity.Property(e => e.Amtcosttc)
                    .HasColumnName("AMTCOSTTC")
                    .HasColumnType("numeric(19, 6)");

                entity.Property(e => e.Amtdschcur)
                    .HasColumnName("AMTDSCHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdsctcur)
                    .HasColumnName("AMTDSCTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndhc)
                    .HasColumnName("AMTEXTNDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndtc)
                    .HasColumnName("AMTEXTNDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Basetaxhc)
                    .HasColumnName("BASETAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Basetaxtc)
                    .HasColumnName("BASETAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntline)
                    .HasColumnName("CNTLINE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Edn)
                    .IsRequired()
                    .HasColumnName("EDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glcomment)
                    .IsRequired()
                    .HasColumnName("GLCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gldesc)
                    .IsRequired()
                    .HasColumnName("GLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glref)
                    .IsRequired()
                    .HasColumnName("GLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacct)
                    .IsRequired()
                    .HasColumnName("IDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddist)
                    .IsRequired()
                    .HasColumnName("IDDIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .IsRequired()
                    .HasColumnName("IDITEM")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrans).HasColumnName("IDTRANS");

                entity.Property(e => e.Itemdesc)
                    .IsRequired()
                    .HasColumnName("ITEMDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Qtyinvc)
                    .HasColumnName("QTYINVC")
                    .HasColumnType("numeric(19, 5)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedoc)
                    .HasColumnName("RATEDOC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Typedetl).HasColumnName("TYPEDETL");

                entity.Property(e => e.Unitmeas)
                    .IsRequired()
                    .HasColumnName("UNITMEAS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Arpjh>(entity =>
            {
                entity.HasKey(e => new { e.Cntbtch, e.Cntitem, e.Postseqnce, e.Coid, e.Typebtch });

                entity.ToTable("ARPJH", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ARPJH_COID");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Amtbc)
                    .HasColumnName("AMTBC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amthc)
                    .HasColumnName("AMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttc)
                    .HasColumnName("AMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurnbc)
                    .IsRequired()
                    .HasColumnName("CODECURNBC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurntc)
                    .IsRequired()
                    .HasColumnName("CODECURNTC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedepst)
                    .HasColumnName("DATEDEPST")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Edn)
                    .IsRequired()
                    .HasColumnName("EDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Enteredby)
                    .IsRequired()
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcyc)
                    .IsRequired()
                    .HasColumnName("IDBILLCYC")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshp)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvcappl)
                    .IsRequired()
                    .HasColumnName("IDINVCAPPL")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namermit)
                    .IsRequired()
                    .HasColumnName("NAMERMIT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Pctdisc)
                    .HasColumnName("PCTDISC")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Ratedatebc)
                    .HasColumnName("RATEDATEBC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatetc)
                    .HasColumnName("RATEDATETC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchbc)
                    .HasColumnName("RATEEXCHBC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchtc)
                    .HasColumnName("RATEEXCHTC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateopbc).HasColumnName("RATEOPBC");

                entity.Property(e => e.Rateoptc).HasColumnName("RATEOPTC");

                entity.Property(e => e.Ratetypebc)
                    .IsRequired()
                    .HasColumnName("RATETYPEBC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratetypetc)
                    .IsRequired()
                    .HasColumnName("RATETYPETC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revinvc).HasColumnName("REVINVC");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swratebc).HasColumnName("SWRATEBC");

                entity.Property(e => e.Swratetc).HasColumnName("SWRATETC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Textref)
                    .IsRequired()
                    .HasColumnName("TEXTREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Arpjs>(entity =>
            {
                entity.HasKey(e => new { e.Postseqnce, e.Typebtch, e.Coid });

                entity.ToTable("ARPJS", "SAGE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Typebtch)
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateposted)
                    .HasColumnName("DATEPOSTED")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepostgl)
                    .HasColumnName("DATEPOSTGL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Pgmver)
                    .IsRequired()
                    .HasColumnName("PGMVER")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swglconsl).HasColumnName("SWGLCONSL");

                entity.Property(e => e.Swpostgl).HasColumnName("SWPOSTGL");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");
            });

            modelBuilder.Entity<Arras>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ARRAS", "SAGE");

                entity.Property(e => e.Acctadj)
                    .IsRequired()
                    .HasColumnName("ACCTADJ")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctdisc)
                    .IsRequired()
                    .HasColumnName("ACCTDISC")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctwrof)
                    .IsRequired()
                    .HasColumnName("ACCTWROF")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Actvsw).HasColumnName("ACTVSW");

                entity.Property(e => e.Aridacct)
                    .IsRequired()
                    .HasColumnName("ARIDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cashliab)
                    .IsRequired()
                    .HasColumnName("CASHLIAB")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateainac)
                    .HasColumnName("DATEAINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsusp)
                    .IsRequired()
                    .HasColumnName("IDSUSP")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmntn)
                    .HasColumnName("LASTMNTN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rlzdgain)
                    .IsRequired()
                    .HasColumnName("RLZDGAIN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rlzdloss)
                    .IsRequired()
                    .HasColumnName("RLZDLOSS")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rndacct)
                    .IsRequired()
                    .HasColumnName("RNDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgacct)
                    .IsRequired()
                    .HasColumnName("RTGACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unrlgain)
                    .IsRequired()
                    .HasColumnName("UNRLGAIN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unrlloss)
                    .IsRequired()
                    .HasColumnName("UNRLLOSS")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Arrta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ARRTA", "SAGE");

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntdueday)
                    .HasColumnName("CNTDUEDAY")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Cntentered)
                    .HasColumnName("CNTENTERED")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Ddayend1)
                    .HasColumnName("DDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend2)
                    .HasColumnName("DDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend3)
                    .HasColumnName("DDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend4)
                    .HasColumnName("DDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt1)
                    .HasColumnName("DDAYSTRT1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt2)
                    .HasColumnName("DDAYSTRT2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt3)
                    .HasColumnName("DDAYSTRT3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt4)
                    .HasColumnName("DDAYSTRT4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse1)
                    .HasColumnName("DDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse2)
                    .HasColumnName("DDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse3)
                    .HasColumnName("DDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse4)
                    .HasColumnName("DDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discday)
                    .HasColumnName("DISCDAY")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discnbr)
                    .HasColumnName("DISCNBR")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discpct)
                    .HasColumnName("DISCPCT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Disctype).HasColumnName("DISCTYPE");

                entity.Property(e => e.Dmnthadd1)
                    .HasColumnName("DMNTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd2)
                    .HasColumnName("DMNTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd3)
                    .HasColumnName("DMNTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd4)
                    .HasColumnName("DMNTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dtedscsync).HasColumnName("DTEDSCSYNC");

                entity.Property(e => e.Dteduesync).HasColumnName("DTEDUESYNC");

                entity.Property(e => e.Dudayend1)
                    .HasColumnName("DUDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend2)
                    .HasColumnName("DUDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend3)
                    .HasColumnName("DUDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend4)
                    .HasColumnName("DUDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst1)
                    .HasColumnName("DUDAYST1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst2)
                    .HasColumnName("DUDAYST2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst3)
                    .HasColumnName("DUDAYST3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst4)
                    .HasColumnName("DUDAYST4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse1)
                    .HasColumnName("DUDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse2)
                    .HasColumnName("DUDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse3)
                    .HasColumnName("DUDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse4)
                    .HasColumnName("DUDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duenbrdays)
                    .HasColumnName("DUENBRDAYS")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duetype).HasColumnName("DUETYPE");

                entity.Property(e => e.Dumnthad1)
                    .HasColumnName("DUMNTHAD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad2)
                    .HasColumnName("DUMNTHAD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad3)
                    .HasColumnName("DUMNTHAD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad4)
                    .HasColumnName("DUMNTHAD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Inacdate)
                    .HasColumnName("INACDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Lastmntn)
                    .HasColumnName("LASTMNTN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Multipaym).HasColumnName("MULTIPAYM");

                entity.Property(e => e.Pctduetot)
                    .HasColumnName("PCTDUETOT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vatcodem).HasColumnName("VATCODEM");
            });

            modelBuilder.Entity<Arsap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ARSAP", "SAGE");

                entity.Property(e => e.Amtanltarg)
                    .HasColumnName("AMTANLTARG")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeempl)
                    .IsRequired()
                    .HasColumnName("CODEEMPL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp)
                    .IsRequired()
                    .HasColumnName("CODESLSP")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateclrd)
                    .HasColumnName("DATECLRD")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Nameempl)
                    .IsRequired()
                    .HasColumnName("NAMEEMPL")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Salesbase1)
                    .HasColumnName("SALESBASE1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase2)
                    .HasColumnName("SALESBASE2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase3)
                    .HasColumnName("SALESBASE3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase4)
                    .HasColumnName("SALESBASE4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salescomm)
                    .HasColumnName("SALESCOMM")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salescost)
                    .HasColumnName("SALESCOST")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesrate1)
                    .HasColumnName("SALESRATE1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate2)
                    .HasColumnName("SALESRATE2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate3)
                    .HasColumnName("SALESRATE3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate4)
                    .HasColumnName("SALESRATE4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate5)
                    .HasColumnName("SALESRATE5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swcomm).HasColumnName("SWCOMM");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.ToTable("Audit", "ETL");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.LoadHoursOffset).HasDefaultValueSql("((-16))");

                entity.Property(e => e.ReloadData).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReloadDataThreshold)
                    .HasColumnType("decimal(9, 3)")
                    .HasDefaultValueSql("((5.0))");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<AuditArchive>(entity =>
            {
                entity.ToTable("AuditArchive", "ETL");

                entity.Property(e => e.AuditArchiveId).HasColumnName("AuditArchiveID");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.LoadType).HasMaxLength(50);

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.ReloadDataThreshold).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<AuditNew>(entity =>
            {
                entity.HasKey(e => e.AuditId)
                    .HasName("PK_Audit2");

                entity.ToTable("AuditNew", "ETL");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.LoadHoursOffset).HasDefaultValueSql("((-2))");

                entity.Property(e => e.LoadType).HasMaxLength(50);

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.ReloadData).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReloadDataThreshold)
                    .HasColumnType("decimal(9, 3)")
                    .HasDefaultValueSql("((5.0))");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<BakerImportedForecast>(entity =>
            {
                entity.ToTable("BakerImportedForecast", "QNG");

                entity.Property(e => e.BusinessUnit).HasMaxLength(25);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultUom)
                    .IsRequired()
                    .HasColumnName("DefaultUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.ForecastBase).HasColumnType("decimal(19, 3)");

                entity.Property(e => e.ForecastKgs)
                    .HasColumnName("ForecastKGS")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.ForecastLbs)
                    .HasColumnName("ForecastLBS")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(24);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<BaseCurrencyAndWeightUnitForCoid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BaseCurrencyAndWeightUnitForCOID", "QNG");

                entity.Property(e => e.BaseCoid)
                    .IsRequired()
                    .HasColumnName("BaseCOID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Coiddescription)
                    .IsRequired()
                    .HasColumnName("COIDDescription")
                    .HasMaxLength(50);

                entity.Property(e => e.ConversionFactor).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CurrencyType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<BasicRefCodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("basic_ref_codes", "MSS");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Codetype)
                    .HasColumnName("codetype")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ShortName)
                    .HasColumnName("short_name")
                    .HasMaxLength(20);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Batches>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Batches", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Batches_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Bkjenth>(entity =>
            {
                entity.HasKey(e => new { e.Pstseq, e.Sequenceno, e.Coid });

                entity.ToTable("BKJENTH", "SAGE");

                entity.Property(e => e.Pstseq)
                    .HasColumnName("PSTSEQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Sequenceno).HasColumnName("SEQUENCENO");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Agerecld).HasColumnName("AGERECLD");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bank)
                    .IsRequired()
                    .HasColumnName("BANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bankd)
                    .IsRequired()
                    .HasColumnName("BANKD")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bigcomment)
                    .IsRequired()
                    .HasColumnName("BIGCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bkacct)
                    .IsRequired()
                    .HasColumnName("BKACCT")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bkstmtcur)
                    .IsRequired()
                    .HasColumnName("BKSTMTCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("COMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Completed).HasColumnName("COMPLETED");

                entity.Property(e => e.Defentnum)
                    .IsRequired()
                    .HasColumnName("DEFENTNUM")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dsetcode)
                    .IsRequired()
                    .HasColumnName("DSETCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dsetcoded)
                    .IsRequired()
                    .HasColumnName("DSETCODED")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Entrynbr)
                    .IsRequired()
                    .HasColumnName("ENTRYNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Entrytype).HasColumnName("ENTRYTYPE");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Lines).HasColumnName("LINES");

                entity.Property(e => e.Ofxtid)
                    .IsRequired()
                    .HasColumnName("OFXTID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postdate)
                    .HasColumnName("POSTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Postperiod).HasColumnName("POSTPERIOD");

                entity.Property(e => e.Postyear)
                    .IsRequired()
                    .HasColumnName("POSTYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Processcmd).HasColumnName("PROCESSCMD");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Recdate)
                    .HasColumnName("RECDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Recpent)
                    .HasColumnName("RECPENT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Recpentrec)
                    .HasColumnName("RECPENTREC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Recperiod).HasColumnName("RECPERIOD");

                entity.Property(e => e.Recyear)
                    .IsRequired()
                    .HasColumnName("RECYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Retentno).HasColumnName("RETENTNO");

                entity.Property(e => e.Runid).HasColumnName("RUNID");

                entity.Property(e => e.Serial).HasColumnName("SERIAL");

                entity.Property(e => e.Srcecurn)
                    .IsRequired()
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Totfuncamt)
                    .HasColumnName("TOTFUNCAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totfuncgro)
                    .HasColumnName("TOTFUNCGRO")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totsrceamt)
                    .HasColumnName("TOTSRCEAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totsrcegro)
                    .HasColumnName("TOTSRCEGRO")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totstmtamt)
                    .HasColumnName("TOTSTMTAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transcur)
                    .IsRequired()
                    .HasColumnName("TRANSCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transdate)
                    .HasColumnName("TRANSDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Type).HasColumnName("TYPE");
            });

            modelBuilder.Entity<Branches>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Branches", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ClaimWarehouseId).HasColumnName("claim_warehouse_id");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CompanyRegistration)
                    .HasColumnName("company_registration")
                    .HasMaxLength(30);

                entity.Property(e => e.CorporateEntityId).HasColumnName("corporate_entity_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustownWarehouseId).HasColumnName("custown_warehouse_id");

                entity.Property(e => e.CuttingGroupCostingDefaultsId).HasColumnName("cutting_group_costing_defaults_id");

                entity.Property(e => e.DefaultBuyerId).HasColumnName("default_buyer_id");

                entity.Property(e => e.DefaultCertPrinterId).HasColumnName("default_cert_printer_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExternalCreditMaterialTransferGl)
                    .HasColumnName("external_credit_material_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalCreditMiscellaneousTransferGl)
                    .HasColumnName("external_credit_miscellaneous_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalCreditProductionTransferGl)
                    .HasColumnName("external_credit_production_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalCreditSurchargeTransferGl)
                    .HasColumnName("external_credit_surcharge_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalCreditTransportTransferGl)
                    .HasColumnName("external_credit_transport_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalMaterialTransferGl)
                    .HasColumnName("external_material_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalMiscellaneousTransferGl)
                    .HasColumnName("external_miscellaneous_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalProductionTransferGl)
                    .HasColumnName("external_production_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalSurchargeTransferGl)
                    .HasColumnName("external_surcharge_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalTransportTransferGl)
                    .HasColumnName("external_transport_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(20);

                entity.Property(e => e.FinishedWarehouseId).HasColumnName("finished_warehouse_id");

                entity.Property(e => e.InboundAllocationManagerId).HasColumnName("inbound_allocation_manager_id");

                entity.Property(e => e.InternalCreditMaterialTransferGl)
                    .HasColumnName("internal_credit_material_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalCreditMiscellaneousTransferGl)
                    .HasColumnName("internal_credit_miscellaneous_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalCreditProductionTransferGl)
                    .HasColumnName("internal_credit_production_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalCreditSurchargeTransferGl)
                    .HasColumnName("internal_credit_surcharge_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalCreditTransportTransferGl)
                    .HasColumnName("internal_credit_transport_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalMaterialTransferGl)
                    .HasColumnName("internal_material_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalMiscellaneousTransferGl)
                    .HasColumnName("internal_miscellaneous_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalProductionTransferGl)
                    .HasColumnName("internal_production_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalSurchargeTransferGl)
                    .HasColumnName("internal_surcharge_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalTransportTransferGl)
                    .HasColumnName("internal_transport_transfer_gl")
                    .HasMaxLength(64);

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60);

                entity.Property(e => e.NominalBranchId).HasColumnName("nominal_branch_id");

                entity.Property(e => e.OffcutWarehouseId).HasColumnName("offcut_warehouse_id");

                entity.Property(e => e.OutworkWarehouseId).HasColumnName("outwork_warehouse_id");

                entity.Property(e => e.QuarantineWarehouseId).HasColumnName("quarantine_warehouse_id");

                entity.Property(e => e.ScrapWarehouseId).HasColumnName("scrap_warehouse_id");

                entity.Property(e => e.SequenceBranchId).HasColumnName("sequence_branch_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockNumberingPrefix)
                    .HasColumnName("stock_numbering_prefix")
                    .HasMaxLength(3);

                entity.Property(e => e.StockTransferClearsOriginalParent).HasColumnName("stock_transfer_clears_original_parent");

                entity.Property(e => e.StockWarehouseId).HasColumnName("stock_warehouse_id");

                entity.Property(e => e.TaxReference)
                    .HasColumnName("tax_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(20);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WebAddress)
                    .HasColumnName("web_address")
                    .HasMaxLength(255);

                entity.Property(e => e.WipWarehouseId).HasColumnName("wip_warehouse_id");
            });

            modelBuilder.Entity<BrinellEquipment>(entity =>
            {
                entity.ToTable("BrinellEquipment", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CalibrationDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EquipmentLocation)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EquipmentName).HasMaxLength(30);

                entity.Property(e => e.EquipmentType).HasMaxLength(30);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");
            });

            modelBuilder.Entity<Buyers>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Buyers", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonnelId).HasColumnName("personnel_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CertificationRequirements>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CertificationRequirements", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_CertificationRequirements_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificateOfConformityRule).HasColumnName("certificate_of_conformity_rule");

                entity.Property(e => e.ChemicalCert).HasColumnName("chemical_cert");

                entity.Property(e => e.ComplianceCert).HasColumnName("compliance_cert");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeliveryCopies).HasColumnName("delivery_copies");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvoiceCopies).HasColumnName("invoice_copies");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MechanicalCert).HasColumnName("mechanical_cert");

                entity.Property(e => e.MillCert).HasColumnName("mill_cert");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.SeparateCertificatesRequired).HasColumnName("separate_certificates_required");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Coiddefaults>(entity =>
            {
                entity.HasKey(e => e.Coid)
                    .HasName("PK_QNG_COIDDefaults");

                entity.ToTable("COIDDefaults", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Coiddescription)
                    .IsRequired()
                    .HasColumnName("COIDDescription")
                    .HasMaxLength(50);

                entity.Property(e => e.DefaultCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .IsRequired()
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CommodityCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CommodityCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(20);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Companies>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Companies", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Companies_COID");

                entity.HasIndex(e => new { e.Id, e.TypeId, e.Coid })
                    .HasName("IDX_Companies_TypeID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AcceptCalls).HasColumnName("accept_calls");

                entity.Property(e => e.AcceptEmail).HasColumnName("accept_email");

                entity.Property(e => e.AcceptFax).HasColumnName("accept_fax");

                entity.Property(e => e.AcceptMail).HasColumnName("accept_mail");

                entity.Property(e => e.AcceptVisits).HasColumnName("accept_visits");

                entity.Property(e => e.AccessMethod)
                    .HasColumnName("access_method")
                    .HasMaxLength(60);

                entity.Property(e => e.AccountsNote).HasColumnName("accounts_note");

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.AnalysisCode1Id).HasColumnName("analysis_code_1_id");

                entity.Property(e => e.AnalysisCode2Id).HasColumnName("analysis_code_2_id");

                entity.Property(e => e.AnalysisCode3Id).HasColumnName("analysis_code_3_id");

                entity.Property(e => e.AnalysisCode4Id).HasColumnName("analysis_code_4_id");

                entity.Property(e => e.AnalysisCode5Id).HasColumnName("analysis_code_5_id");

                entity.Property(e => e.AnalysisCode6Id).HasColumnName("analysis_code_6_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Categories).HasColumnName("categories");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificationsId).HasColumnName("certifications_id");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CompanyCreditRulesId).HasColumnName("company_credit_rules_id");

                entity.Property(e => e.CompanyTotalsId).HasColumnName("company_totals_id");

                entity.Property(e => e.CompetitionNote).HasColumnName("competition_note");

                entity.Property(e => e.ContactFrequency).HasColumnName("contact_frequency");

                entity.Property(e => e.ContractJobRequired).HasColumnName("contract_job_required");

                entity.Property(e => e.CounterSalesDefault)
                    .HasColumnName("counter_sales_default")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditComments).HasColumnName("credit_comments");

                entity.Property(e => e.CrmAccountId).HasColumnName("crm_account_id");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DateAppointed)
                    .HasColumnName("date_appointed")
                    .HasColumnType("date");

                entity.Property(e => e.DefaultBuyerId).HasColumnName("default_buyer_id");

                entity.Property(e => e.DefaultContactId).HasColumnName("default_contact_id");

                entity.Property(e => e.DefaultItemClass1).HasColumnName("default_item_class1");

                entity.Property(e => e.DefaultItemClass2).HasColumnName("default_item_class2");

                entity.Property(e => e.DefaultItemClass3).HasColumnName("default_item_class3");

                entity.Property(e => e.DefaultItemClass4).HasColumnName("default_item_class4");

                entity.Property(e => e.DefaultItemClass5).HasColumnName("default_item_class5");

                entity.Property(e => e.DefaultNominalCode).HasColumnName("default_nominal_code");

                entity.Property(e => e.DefaultOrderClassificationId).HasColumnName("default_order_classification_id");

                entity.Property(e => e.DefaultTransportTypeId).HasColumnName("default_transport_type_id");

                entity.Property(e => e.DespatchNoteItemRuleId).HasColumnName("despatch_note_item_rule_id");

                entity.Property(e => e.DocumentDeliveryTypeId).HasColumnName("document_delivery_type_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FabricationPricingCategory).HasColumnName("fabrication_pricing_category");

                entity.Property(e => e.FastDial)
                    .HasColumnName("fast_dial")
                    .HasMaxLength(20);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(20);

                entity.Property(e => e.GeneralNote).HasColumnName("general_note");

                entity.Property(e => e.Idxfti).HasColumnName("idxfti");

                entity.Property(e => e.InsideDiameter)
                    .HasColumnName("inside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum)
                    .HasColumnName("inside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum)
                    .HasColumnName("inside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.IntercompanyAccount).HasColumnName("intercompany_account");

                entity.Property(e => e.InvoiceBaseCurrencyFlag).HasColumnName("invoice_base_currency_flag");

                entity.Property(e => e.InvoiceCompanyId).HasColumnName("invoice_company_id");

                entity.Property(e => e.InvoicePacking).HasColumnName("invoice_packing");

                entity.Property(e => e.InvoiceWeightRoundingMode)
                    .HasColumnName("invoice_weight_rounding_mode")
                    .HasMaxLength(1);

                entity.Property(e => e.LastContactDate)
                    .HasColumnName("last_contact_date")
                    .HasColumnType("date");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MinimumCashSalePaymentPercentage)
                    .HasColumnName("minimum_cash_sale_payment_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60);

                entity.Property(e => e.OutsideDiameter)
                    .HasColumnName("outside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum)
                    .HasColumnName("outside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum)
                    .HasColumnName("outside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutworkBranchId).HasColumnName("outwork_branch_id");

                entity.Property(e => e.PackCountMaximum).HasColumnName("pack_count_maximum");

                entity.Property(e => e.PackCountMinimum).HasColumnName("pack_count_minimum");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum)
                    .HasColumnName("pack_height_maximum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum)
                    .HasColumnName("pack_height_minimum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("pack_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum)
                    .HasColumnName("pack_weight_maximum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum)
                    .HasColumnName("pack_weight_minimum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackingWeightPercentage)
                    .HasColumnName("packing_weight_percentage")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.ParentCompanyId).HasColumnName("parent_company_id");

                entity.Property(e => e.PartnerCode)
                    .HasColumnName("partner_code")
                    .HasMaxLength(10);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(20);

                entity.Property(e => e.PaymentHold).HasColumnName("payment_hold");

                entity.Property(e => e.PersonnelId).HasColumnName("personnel_id");

                entity.Property(e => e.PopupNotes).HasColumnName("popup_notes");

                entity.Property(e => e.PriceBookLevel)
                    .HasColumnName("price_book_level")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductsNote).HasColumnName("products_note");

                entity.Property(e => e.Rank)
                    .HasColumnName("rank")
                    .HasMaxLength(3);

                entity.Property(e => e.RegistrationNumber)
                    .HasColumnName("registration_number")
                    .HasMaxLength(20);

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.RequireProforma).HasColumnName("require_proforma");

                entity.Property(e => e.RequireSalesAcknowledgement).HasColumnName("require_sales_acknowledgement");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.ShortName)
                    .HasColumnName("short_name")
                    .HasMaxLength(30);

                entity.Property(e => e.ShowPrices).HasColumnName("show_prices");

                entity.Property(e => e.StatementRequired).HasColumnName("statement_required");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StockItemPrefix)
                    .HasColumnName("stock_item_prefix")
                    .HasMaxLength(3);

                entity.Property(e => e.SupplierRollingDays).HasColumnName("supplier_rolling_days");

                entity.Property(e => e.SynchronisationDate)
                    .HasColumnName("synchronisation_date")
                    .HasColumnType("date");

                entity.Property(e => e.TaxAuthority1)
                    .HasColumnName("tax_authority1")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority2)
                    .HasColumnName("tax_authority2")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority3)
                    .HasColumnName("tax_authority3")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority4)
                    .HasColumnName("tax_authority4")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority5)
                    .HasColumnName("tax_authority5")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class5");

                entity.Property(e => e.TaxExempt1).HasColumnName("tax_exempt1");

                entity.Property(e => e.TaxExempt2).HasColumnName("tax_exempt2");

                entity.Property(e => e.TaxExempt3).HasColumnName("tax_exempt3");

                entity.Property(e => e.TaxExempt4).HasColumnName("tax_exempt4");

                entity.Property(e => e.TaxExempt5).HasColumnName("tax_exempt5");

                entity.Property(e => e.TaxGroup)
                    .HasColumnName("tax_group")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxRegistration1)
                    .HasColumnName("tax_registration1")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration2)
                    .HasColumnName("tax_registration2")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration3)
                    .HasColumnName("tax_registration3")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration4)
                    .HasColumnName("tax_registration4")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration5)
                    .HasColumnName("tax_registration5")
                    .HasMaxLength(20);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(20);

                entity.Property(e => e.TermsId).HasColumnName("terms_id");

                entity.Property(e => e.TerritoryId).HasColumnName("territory_id");

                entity.Property(e => e.TestCertificateDestination)
                    .HasColumnName("test_certificate_destination")
                    .HasMaxLength(255);

                entity.Property(e => e.TestCertificateHold)
                    .HasColumnName("test_certificate_hold")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.TestCertificateSendMethod)
                    .HasColumnName("test_certificate_send_method")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'D')");

                entity.Property(e => e.TransportComment)
                    .HasColumnName("transport_comment")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WebAddress)
                    .HasColumnName("web_address")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CompanyCreditRules>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("CompanyCreditRules", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CreditLimit)
                    .HasColumnName("credit_limit")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CreditLimitCheckOption)
                    .HasColumnName("credit_limit_check_option")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreditLimitDate)
                    .HasColumnName("credit_limit_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditLimitExpiry)
                    .HasColumnName("credit_limit_expiry")
                    .HasColumnType("date");

                entity.Property(e => e.CreditLimitPercentage)
                    .HasColumnName("credit_limit_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("insurance_company_id");

                entity.Property(e => e.InsuredLimit)
                    .HasColumnName("insured_limit")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OverdueDaysAllowed).HasColumnName("overdue_days_allowed");

                entity.Property(e => e.OverduePercentageAllowed)
                    .HasColumnName("overdue_percentage_allowed")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CompanyNoteTemplates>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("CompanyNoteTemplates", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.CompanySubAddressId).HasColumnName("company_sub_address_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.NoteTypeId).HasColumnName("note_type_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CompanySubAddresses>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CompanySubAddresses", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_CompanySubAddresses_COID");

                entity.HasIndex(e => new { e.Code, e.Coid })
                    .HasName("IDX_CompanySubAddresses_code_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CommercialTermsMandatory).HasColumnName("commercial_terms_mandatory");

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.ConsignmentBranchId).HasColumnName("consignment_branch_id");

                entity.Property(e => e.ConsignmentWarehouseId).HasColumnName("consignment_warehouse_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultAddress)
                    .HasColumnName("default_address")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DefaultCommercialTermsId).HasColumnName("default_commercial_terms_id");

                entity.Property(e => e.DefaultItemClass1).HasColumnName("default_item_class1");

                entity.Property(e => e.DefaultItemClass2).HasColumnName("default_item_class2");

                entity.Property(e => e.DefaultItemClass3).HasColumnName("default_item_class3");

                entity.Property(e => e.DefaultItemClass4).HasColumnName("default_item_class4");

                entity.Property(e => e.DefaultItemClass5).HasColumnName("default_item_class5");

                entity.Property(e => e.DefaultTransportTypeId).HasColumnName("default_transport_type_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FastDial)
                    .HasColumnName("fast_dial")
                    .HasMaxLength(20);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(20);

                entity.Property(e => e.InsideDiameter)
                    .HasColumnName("inside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum)
                    .HasColumnName("inside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum)
                    .HasColumnName("inside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InvoicePacking)
                    .HasColumnName("invoice_packing")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60);

                entity.Property(e => e.OutsideDiameter)
                    .HasColumnName("outside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum)
                    .HasColumnName("outside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum)
                    .HasColumnName("outside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutworkWarehouseId).HasColumnName("outwork_warehouse_id");

                entity.Property(e => e.PackCountMaximum).HasColumnName("pack_count_maximum");

                entity.Property(e => e.PackCountMinimum).HasColumnName("pack_count_minimum");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum)
                    .HasColumnName("pack_height_maximum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum)
                    .HasColumnName("pack_height_minimum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("pack_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum)
                    .HasColumnName("pack_weight_maximum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum)
                    .HasColumnName("pack_weight_minimum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PartnerCode)
                    .HasColumnName("partner_code")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TaxAuthority1)
                    .HasColumnName("tax_authority1")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority2)
                    .HasColumnName("tax_authority2")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority3)
                    .HasColumnName("tax_authority3")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority4)
                    .HasColumnName("tax_authority4")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority5)
                    .HasColumnName("tax_authority5")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class5");

                entity.Property(e => e.TaxGroup)
                    .HasColumnName("tax_group")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxRegistration1)
                    .HasColumnName("tax_registration1")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration2)
                    .HasColumnName("tax_registration2")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration3)
                    .HasColumnName("tax_registration3")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration4)
                    .HasColumnName("tax_registration4")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxRegistration5)
                    .HasColumnName("tax_registration5")
                    .HasMaxLength(20);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(20);

                entity.Property(e => e.TerritoryId).HasColumnName("territory_id");

                entity.Property(e => e.TestCertificateDestination)
                    .HasColumnName("test_certificate_destination")
                    .HasMaxLength(255);

                entity.Property(e => e.TestCertificateHold)
                    .IsRequired()
                    .HasColumnName("test_certificate_hold")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.TestCertificateSendMethod)
                    .HasColumnName("test_certificate_send_method")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'D')");

                entity.Property(e => e.TestCertificateUseCompany)
                    .IsRequired()
                    .HasColumnName("test_certificate_use_company")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TransportComment)
                    .HasColumnName("transport_comment")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TransportRateCode)
                    .HasColumnName("transport_rate_code")
                    .HasMaxLength(16);

                entity.Property(e => e.UseCompanyProductionRequirements)
                    .HasColumnName("use_company_production_requirements")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseCompanyTaxes).HasColumnName("use_company_taxes");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WebAddress)
                    .HasColumnName("web_address")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CompanyTotals>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("CompanyTotals", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExternalOpenOrderTax)
                    .HasColumnName("external_open_order_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ExternalOpenOrderValue)
                    .HasColumnName("external_open_order_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.HeldOrderTax)
                    .HasColumnName("held_order_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.HeldOrderValue)
                    .HasColumnName("held_order_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OpenOrderTax)
                    .HasColumnName("open_order_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.OpenOrderValue)
                    .HasColumnName("open_order_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TotalCostMtd)
                    .HasColumnName("total_cost_mtd")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TotalCostYtd)
                    .HasColumnName("total_cost_ytd")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TotalSalesMtd)
                    .HasColumnName("total_sales_mtd")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TotalSalesYtd)
                    .HasColumnName("total_sales_ytd")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TotalWeightMtd)
                    .HasColumnName("total_weight_mtd")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TotalWeightYtd)
                    .HasColumnName("total_weight_ytd")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.UncheckedOrderTax)
                    .HasColumnName("unchecked_order_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.UncheckedOrderValue)
                    .HasColumnName("unchecked_order_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.UnexportedInvoiceTax)
                    .HasColumnName("unexported_invoice_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.UnexportedInvoiceValue)
                    .HasColumnName("unexported_invoice_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CompanyTypeCodes>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("CompanyTypeCodes", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Contacts>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Contacts", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Contacts_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AcceptCalls).HasColumnName("accept_calls");

                entity.Property(e => e.AcceptEmail).HasColumnName("accept_email");

                entity.Property(e => e.AcceptFax).HasColumnName("accept_fax");

                entity.Property(e => e.AcceptMail).HasColumnName("accept_mail");

                entity.Property(e => e.AcceptVisits).HasColumnName("accept_visits");

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Categories)
                    .HasColumnName("categories")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.ContactFrequency).HasColumnName("contact_frequency");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EmploymentNote)
                    .HasColumnName("employment_note")
                    .HasColumnType("ntext");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FastDial)
                    .HasColumnName("fast_dial")
                    .HasMaxLength(20);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(20);

                entity.Property(e => e.Forename)
                    .HasColumnName("forename")
                    .HasMaxLength(50);

                entity.Property(e => e.GeneralNote)
                    .HasColumnName("general_note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Idxfti)
                    .HasColumnName("idxfti")
                    .HasColumnType("ntext");

                entity.Property(e => e.InterestsNote)
                    .HasColumnName("interests_note")
                    .HasColumnType("ntext");

                entity.Property(e => e.LastContactDate)
                    .HasColumnName("last_contact_date")
                    .HasColumnType("date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mobile)
                    .HasColumnName("mobile")
                    .HasMaxLength(20);

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Nickname)
                    .HasColumnName("nickname")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonalNote)
                    .HasColumnName("personal_note")
                    .HasColumnType("ntext");

                entity.Property(e => e.PersonnelId).HasColumnName("personnel_id");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductsNote)
                    .HasColumnName("products_note")
                    .HasColumnType("ntext");

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(50);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(20);

                entity.Property(e => e.TerritoryId).HasColumnName("territory_id");

                entity.Property(e => e.TitleId).HasColumnName("title_id");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WebAddress)
                    .HasColumnName("web_address")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CostGroupCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CostGroupCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CostItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CostItems", "iMetal");

                entity.HasIndex(e => new { e.CostGroupId, e.ItemId, e.Coid })
                    .HasName("IDX_CostItems_item_id_COID");

                entity.HasIndex(e => new { e.Coid, e.Id, e.CostGroupId, e.CostUnitId, e.CostQuantity, e.CostQuantityUnitId, e.ExchangeRate, e.ItemId, e.SystemCost, e.BaseCost, e.BaseValue, e.ExchangeRateType, e.Description, e.Visibility, e.ItemType })
                    .HasName("IDX_CostItems_ItemType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualCost).HasColumnName("actual_cost");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BillingReference)
                    .HasColumnName("billing_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostFixStatus)
                    .HasColumnName("cost_fix_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CostGroupId).HasColumnName("cost_group_id");

                entity.Property(e => e.CostPurchaseItemId).HasColumnName("cost_purchase_item_id");

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantityUnitId).HasColumnName("cost_quantity_unit_id");

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.DutyItem).HasColumnName("duty_item");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateType).HasColumnName("exchange_rate_type");

                entity.Property(e => e.FabricationChargeCodePriceId).HasColumnName("fabrication_charge_code_price_id");

                entity.Property(e => e.FabricationSource)
                    .HasColumnName("fabrication_source")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FromHeaderCost).HasColumnName("from_header_cost");

                entity.Property(e => e.InternalCost).HasColumnName("internal_cost");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PoBranchId).HasColumnName("po_branch_id");

                entity.Property(e => e.PoItem).HasColumnName("po_item");

                entity.Property(e => e.PoNumber).HasColumnName("po_number");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseItemLumpSumCost)
                    .HasColumnName("purchase_item_lump_sum_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuantityTypeCode).HasColumnName("quantity_type_code");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SystemCost).HasColumnName("system_cost");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Visibility)
                    .HasColumnName("visibility")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<CostItemsPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CostItemsPivot", "QNG");

                entity.HasIndex(e => new { e.Coid, e.ItemId, e.DefaultBaseCurrency, e.ItemType, e.PobranchCode, e.Ponumber, e.PoitemNumber, e.SobranchCode, e.Sonumber, e.SoitemNumber, e.GibranchCode, e.Ginumber, e.GiitemNumber, e.CostQuantity, e.CostQuantityUom, e.BaseMaterialCost, e.BaseTransportCost, e.BaseProductionCost, e.BaseMiscellaneousCost, e.BaseSurchargeCost, e.BaseTotalCost, e.BaseCostUom, e.OrderedMaterialValue, e.OrderedTransportValue, e.OrderedProductionValue, e.OrderedMiscellaneousValue, e.OrderedSurchargeValue, e.OrderedTotalValue, e.BalanceMaterialValue, e.BalanceTransportValue, e.BalanceProductionValue, e.BalanceMiscellaneousValue, e.BalanceSurchargeValue, e.BalanceTotalValue, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_CostItemsPivot");

                entity.Property(e => e.BalanceMaterialValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceMiscellaneousValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceProductionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceSurchargeValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceTotalValue).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.BalanceTransportValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseCostUom)
                    .HasColumnName("BaseCostUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.BaseMaterialCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseMiscellaneousCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseProductionCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseSurchargeCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseTotalCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseTransportCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CostQuantity).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantityUom)
                    .HasColumnName("CostQuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.GibranchCode)
                    .HasColumnName("GIBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.GiitemNumber).HasColumnName("GIItemNumber");

                entity.Property(e => e.Ginumber).HasColumnName("GINumber");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderedMaterialValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedMiscellaneousValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedProductionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedSurchargeValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedTotalValue).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.OrderedTransportValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PobranchCode)
                    .HasColumnName("POBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemNumber).HasColumnName("POItemNumber");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SobranchCode)
                    .HasColumnName("SOBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");
            });

            modelBuilder.Entity<CostLineItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CostLineItems", "QNG");

                entity.HasIndex(e => new { e.ItemId, e.Coid, e.ItemType })
                    .HasName("IDX_CostLineItems_item_id_COID_item_type");

                entity.HasIndex(e => new { e.Coid, e.Id, e.ViewId, e.RowNumber, e.ItemId, e.DefaultWeightUom, e.DefaultBaseCurrency, e.ItemType, e.PobranchCode, e.Ponumber, e.PoitemNumber, e.SobranchCode, e.Sonumber, e.SoitemNumber, e.GibranchCode, e.Ginumber, e.GiitemNumber, e.CostGroupCode, e.CostGroupDescription, e.CostUnitCode, e.CostUnitDescription, e.CostUnitScale, e.CostUnitQuantityCode, e.CostQuantityUnitCode, e.CostQuantityUnitDescription, e.CostQuantity, e.BaseCost, e.BaseValue, e.ExchangeRate, e.ExchangeRateType, e.Description, e.Visibility, e.SystemCost, e.ItemScale, e.CostLineQuantity2, e.CostLineQuantity2Uom, e.OrderedBaseValue2, e.BalanceBaseValue2, e.CostQuantity2, e.CostQuantity2Uom, e.OrderedBaseUnitCost2, e.BalanceBaseUnitCost2, e.UnitCost2Uom, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_CostLineItems");

                entity.Property(e => e.BalanceBaseUnitCost2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BalanceBaseValue2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CostGroupCode).HasMaxLength(3);

                entity.Property(e => e.CostGroupDescription).HasMaxLength(255);

                entity.Property(e => e.CostLineQuantity2).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostLineQuantity2Uom)
                    .HasColumnName("CostLineQuantity2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantity2).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantity2Uom)
                    .HasColumnName("CostQuantity2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CostQuantityUnitCode).HasMaxLength(10);

                entity.Property(e => e.CostQuantityUnitDescription).HasMaxLength(255);

                entity.Property(e => e.CostUnitCode).HasMaxLength(10);

                entity.Property(e => e.CostUnitDescription).HasMaxLength(255);

                entity.Property(e => e.CostUnitQuantityCode).HasMaxLength(1);

                entity.Property(e => e.CostUnitScale).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .IsRequired()
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateType).HasColumnName("exchange_rate_type");

                entity.Property(e => e.GibranchCode)
                    .HasColumnName("GIBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.GiitemNumber).HasColumnName("GIItemNumber");

                entity.Property(e => e.Ginumber).HasColumnName("GINumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemScale).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderedBaseUnitCost2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OrderedBaseValue2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PobranchCode)
                    .HasColumnName("POBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemNumber).HasColumnName("POItemNumber");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SobranchCode)
                    .HasColumnName("SOBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");

                entity.Property(e => e.SystemCost).HasColumnName("system_cost");

                entity.Property(e => e.UnitCost2Uom)
                    .HasColumnName("UnitCost2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(67);

                entity.Property(e => e.Visibility)
                    .HasColumnName("visibility")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CountryCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CountryCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('CAN')");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CreditHoldReasons>(entity =>
            {
                entity.ToTable("CreditHoldReasons", "QNG");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");
            });

            modelBuilder.Entity<Csccd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSCCD", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curid)
                    .IsRequired()
                    .HasColumnName("CURID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curname)
                    .IsRequired()
                    .HasColumnName("CURNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.Decsep)
                    .IsRequired()
                    .HasColumnName("DECSEP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Negdisp).HasColumnName("NEGDISP");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasColumnName("SYMBOL")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Symbolpos).HasColumnName("SYMBOLPOS");

                entity.Property(e => e.Thoussep)
                    .IsRequired()
                    .HasColumnName("THOUSSEP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Cscom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSCOM", "SAGE");

                entity.Property(e => e.Addr01)
                    .IsRequired()
                    .HasColumnName("ADDR01")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr02)
                    .IsRequired()
                    .HasColumnName("ADDR02")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr03)
                    .IsRequired()
                    .HasColumnName("ADDR03")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr04)
                    .IsRequired()
                    .HasColumnName("ADDR04")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bccaddr)
                    .IsRequired()
                    .HasColumnName("BCCADDR")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasColumnName("BRANCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Brn)
                    .IsRequired()
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ccaddr)
                    .IsRequired()
                    .HasColumnName("CCADDR")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntrycode)
                    .IsRequired()
                    .HasColumnName("CNTRYCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Coname)
                    .IsRequired()
                    .HasColumnName("CONAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasColumnName("CONTACT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailaddr)
                    .IsRequired()
                    .HasColumnName("EMAILADDR")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailhost)
                    .IsRequired()
                    .HasColumnName("EMAILHOST")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailport).HasColumnName("EMAILPORT");

                entity.Property(e => e.Emailpswd)
                    .IsRequired()
                    .HasColumnName("EMAILPSWD")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Emailssl).HasColumnName("EMAILSSL");

                entity.Property(e => e.Emailuser)
                    .IsRequired()
                    .HasColumnName("EMAILUSER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Eurocursw).HasColumnName("EUROCURSW");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gnlssmthd).HasColumnName("GNLSSMTHD");

                entity.Property(e => e.Hndinaacct).HasColumnName("HNDINAACCT");

                entity.Property(e => e.Hndlckfsc).HasColumnName("HNDLCKFSC");

                entity.Property(e => e.Hndnexacct).HasColumnName("HNDNEXACCT");

                entity.Property(e => e.Homecur)
                    .IsRequired()
                    .HasColumnName("HOMECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Legalname)
                    .IsRequired()
                    .HasColumnName("LEGALNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Loccode)
                    .IsRequired()
                    .HasColumnName("LOCCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Loctype)
                    .IsRequired()
                    .HasColumnName("LOCTYPE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Multicursw).HasColumnName("MULTICURSW");

                entity.Property(e => e.Orgid)
                    .IsRequired()
                    .HasColumnName("ORGID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Perdfsc).HasColumnName("PERDFSC");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Phonefmt).HasColumnName("PHONEFMT");

                entity.Property(e => e.Postal)
                    .IsRequired()
                    .HasColumnName("POSTAL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Qtr4perd).HasColumnName("QTR4PERD");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Reportcur)
                    .IsRequired()
                    .HasColumnName("REPORTCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxnbr)
                    .IsRequired()
                    .HasColumnName("TAXNBR")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usesmtp).HasColumnName("USESMTP");

                entity.Property(e => e.Warndays).HasColumnName("WARNDAYS");
            });

            modelBuilder.Entity<Cscrd>(entity =>
            {
                entity.HasKey(e => new { e.Ratedate, e.Sourcecur, e.Homecur, e.Ratetype });

                entity.ToTable("CSCRD", "SAGE");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Sourcecur)
                    .HasColumnName("SOURCECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Homecur)
                    .HasColumnName("HOMECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratetype)
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datematch).HasColumnName("DATEMATCH");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateoper).HasColumnName("RATEOPER");

                entity.Property(e => e.Spread)
                    .HasColumnName("SPREAD")
                    .HasColumnType("numeric(15, 7)");
            });

            modelBuilder.Entity<Csfsc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSFSC", "SAGE");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bgndate1)
                    .HasColumnName("BGNDATE1")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate10)
                    .HasColumnName("BGNDATE10")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate11)
                    .HasColumnName("BGNDATE11")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate12)
                    .HasColumnName("BGNDATE12")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate13)
                    .HasColumnName("BGNDATE13")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate2)
                    .HasColumnName("BGNDATE2")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate3)
                    .HasColumnName("BGNDATE3")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate4)
                    .HasColumnName("BGNDATE4")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate5)
                    .HasColumnName("BGNDATE5")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate6)
                    .HasColumnName("BGNDATE6")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate7)
                    .HasColumnName("BGNDATE7")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate8)
                    .HasColumnName("BGNDATE8")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate9)
                    .HasColumnName("BGNDATE9")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Enddate1)
                    .HasColumnName("ENDDATE1")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate10)
                    .HasColumnName("ENDDATE10")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate11)
                    .HasColumnName("ENDDATE11")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate12)
                    .HasColumnName("ENDDATE12")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate13)
                    .HasColumnName("ENDDATE13")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate2)
                    .HasColumnName("ENDDATE2")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate3)
                    .HasColumnName("ENDDATE3")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate4)
                    .HasColumnName("ENDDATE4")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate5)
                    .HasColumnName("ENDDATE5")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate6)
                    .HasColumnName("ENDDATE6")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate7)
                    .HasColumnName("ENDDATE7")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate8)
                    .HasColumnName("ENDDATE8")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate9)
                    .HasColumnName("ENDDATE9")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fscyear)
                    .IsRequired()
                    .HasColumnName("FSCYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Periods).HasColumnName("PERIODS");

                entity.Property(e => e.Qtr4perd).HasColumnName("QTR4PERD");

                entity.Property(e => e.Statusadj).HasColumnName("STATUSADJ");

                entity.Property(e => e.Statuscls).HasColumnName("STATUSCLS");
            });

            modelBuilder.Entity<CumbernauldTargetBudget>(entity =>
            {
                entity.ToTable("CumbernauldTargetBudget", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.Budget).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CurrencyCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CurrencyCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('CAN')");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DateLastSynchronised)
                    .HasColumnName("date_last_synchronised")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateOperator)
                    .HasColumnName("exchange_rate_operator")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'D')");

                entity.Property(e => e.InvoiceBaseCurrencyExchangeRate)
                    .HasColumnName("invoice_base_currency_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(3);

                entity.Property(e => e.SymbolCodeLocation)
                    .HasColumnName("symbol_code_location")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CustomerAnalysisCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("CustomerAnalysisCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(60);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<CustomerPartDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CustomerPartDemand", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerDemandBalanceInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIdiMetalInternal).HasColumnName("CustomerIDiMetalInternal");

                entity.Property(e => e.CustomerIncomingBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIncomingInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIncomingUom)
                    .IsRequired()
                    .HasColumnName("CustomerIncomingUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.CustomerPartNumber).HasMaxLength(35);

                entity.Property(e => e.CustomerPartNumberWithDescription).HasMaxLength(250);

                entity.Property(e => e.CustomerStockOnSiteBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerStockOnSiteInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerStockOnSiteUom)
                    .IsRequired()
                    .HasColumnName("CustomerStockOnSiteUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.DemandBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.DemandInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.DemandUom)
                    .IsRequired()
                    .HasColumnName("DemandUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MonthOf).HasColumnType("date");

                entity.Property(e => e.Plant).HasMaxLength(100);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductIdiMetalInternal).HasColumnName("ProductIDiMetalInternal");

                entity.Property(e => e.SafetyStockBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SafetyStockInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SafetyStockUom)
                    .IsRequired()
                    .HasColumnName("SafetyStockUOM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<CustomerPartLengthLookup>(entity =>
            {
                entity.ToTable("CustomerPartLengthLookup", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(N'ImportedByIT')");

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CustomerPartNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.IsConsignment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LengthPerPieceInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(N'ImportedByIT')");

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(100);
            });

            modelBuilder.Entity<CustomerPartMappingExternalToiMetal>(entity =>
            {
                entity.ToTable("CustomerPartMappingExternalToiMetal", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('INC')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('ImportedByIT')");

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CustomerPartNumber).HasMaxLength(35);

                entity.Property(e => e.IsConsignment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('ImportedByIT')");

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Plant).HasMaxLength(60);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductIdiMetalInternal).HasColumnName("ProductIDiMetalInternal");

                entity.Property(e => e.ProductSpec).HasMaxLength(30);
            });

            modelBuilder.Entity<CustomerPartPlants>(entity =>
            {
                entity.ToTable("CustomerPartPlants", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('INC')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('ImportedByIT')");

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CustomerIdiMetalInternal).HasColumnName("CustomerIDiMetalInternal");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IsConsignment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('ImportedByIT')");

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Plant)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.PlantCode).HasMaxLength(10);

                entity.Property(e => e.Warehouse).HasMaxLength(10);
            });

            modelBuilder.Entity<CustomerPartWarehouses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CustomerPartWarehouses", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
            });

            modelBuilder.Entity<DespatchHeaders>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("DespatchHeaders", "iMetal");

                entity.HasIndex(e => e.CreditHoldReason);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CarrierId).HasColumnName("carrier_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificateOfConformityId).HasColumnName("certificate_of_conformity_id");

                entity.Property(e => e.CertificationsId).HasColumnName("certifications_id");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConditionNotes)
                    .HasColumnName("condition_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreditHold).HasColumnName("credit_hold");

                entity.Property(e => e.CreditHoldDate)
                    .HasColumnName("credit_hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditHoldReason).HasColumnName("credit_hold_reason");

                entity.Property(e => e.CreditReleaseAmount)
                    .HasColumnName("credit_release_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CreditReleaseDate)
                    .HasColumnName("credit_release_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditReleaseNotes).HasColumnName("credit_release_notes");

                entity.Property(e => e.CreditReleaseUserId).HasColumnName("credit_release_user_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeliverFromAddressId).HasColumnName("deliver_from_address_id");

                entity.Property(e => e.DeliverFromBranchId).HasColumnName("deliver_from_branch_id");

                entity.Property(e => e.DeliverFromNameOverride)
                    .HasColumnName("deliver_from_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliverFromWarehouseId).HasColumnName("deliver_from_warehouse_id");

                entity.Property(e => e.DeliverToAddressId).HasColumnName("deliver_to_address_id");

                entity.Property(e => e.DeliverToId).HasColumnName("deliver_to_id");

                entity.Property(e => e.DeliverToNameOverride)
                    .HasColumnName("deliver_to_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryPoint)
                    .HasColumnName("delivery_point")
                    .HasMaxLength(60);

                entity.Property(e => e.DespatchNoteTaxValue)
                    .HasColumnName("despatch_note_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DespatchNoteValue)
                    .HasColumnName("despatch_note_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DespatchText).HasColumnName("despatch_text");

                entity.Property(e => e.DespatchedDate)
                    .HasColumnName("despatched_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtaDate)
                    .HasColumnName("eta_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");

                entity.Property(e => e.LoadingNotePrintDate).HasColumnName("loading_note_print_date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OrderHeaderText).HasColumnName("order_header_text");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.Printed).HasColumnName("printed");

                entity.Property(e => e.PrintedDate).HasColumnName("printed_date");

                entity.Property(e => e.ProductSpecificationNotes)
                    .HasColumnName("product_specification_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.Proforma).HasColumnName("proforma");

                entity.Property(e => e.RaisedDate)
                    .HasColumnName("raised_date")
                    .HasColumnType("date");

                entity.Property(e => e.Ready).HasColumnName("ready");

                entity.Property(e => e.ReadyDate)
                    .HasColumnName("ready_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReleaseRequirementNotes)
                    .HasColumnName("release_requirement_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.RemarksNotes)
                    .HasColumnName("remarks_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.RunReference).HasColumnName("run_reference");

                entity.Property(e => e.SignatureNotes)
                    .HasColumnName("signature_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TrailerReference)
                    .HasColumnName("trailer_reference")
                    .HasMaxLength(20);

                entity.Property(e => e.TransportChargeAmount)
                    .HasColumnName("transport_charge_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportChargeRate)
                    .HasColumnName("transport_charge_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportChargeRateUnitId).HasColumnName("transport_charge_rate_unit_id");

                entity.Property(e => e.TransportChargeTax)
                    .HasColumnName("transport_charge_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCostAmount)
                    .HasColumnName("transport_cost_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCostRate)
                    .HasColumnName("transport_cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportCostRateUnitId).HasColumnName("transport_cost_rate_unit_id");

                entity.Property(e => e.TransportExchangeRate)
                    .HasColumnName("transport_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.TransportExchangeRateTypeId).HasColumnName("transport_exchange_rate_type_id");

                entity.Property(e => e.TransportTypeId).HasColumnName("transport_type_id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1);

                entity.Property(e => e.VehicleRegistration)
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(16);

                entity.Property(e => e.VehicleRunStopId).HasColumnName("vehicle_run_stop_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<DespatchInstructions>(entity =>
            {
                entity.ToTable("DespatchInstructions", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Details).HasMaxLength(2000);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");
            });

            modelBuilder.Entity<DespatchItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("DespatchItems", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_DespatchItems_COID");

                entity.HasIndex(e => new { e.DespatchHeaderId, e.ItemNumber, e.OrderItemId, e.StatusId, e.Coid })
                    .HasName("IX_DespatchItems_OrderItemID_StatusID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DespatchHeaderId).HasColumnName("despatch_header_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InvoiceWeight)
                    .HasColumnName("invoice_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ItemNumber).HasColumnName("item_number");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MechanicalCert).HasColumnName("mechanical_cert");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ShowCountryOfFinalProcessing).HasColumnName("show_country_of_final_processing");

                entity.Property(e => e.ShowCountryOfMaterialOrigin).HasColumnName("show_country_of_material_origin");

                entity.Property(e => e.ShowCountryOfPrimaryProcessing).HasColumnName("show_country_of_primary_processing");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<DespatchStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("DespatchStatusCodes", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<DimensionValues>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("DimensionValues", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_DimensionValues_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CuttingType)
                    .HasColumnName("cutting_type")
                    .HasMaxLength(1);

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1Entry)
                    .HasColumnName("dim1_entry")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2Entry)
                    .HasColumnName("dim2_entry")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3Entry)
                    .HasColumnName("dim3_entry")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4Entry)
                    .HasColumnName("dim4_entry")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5Entry)
                    .HasColumnName("dim5_entry")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DrillingRequired).HasColumnName("drilling_required");

                entity.Property(e => e.DrillsPerPiece).HasColumnName("drills_per_piece");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mark)
                    .HasColumnName("mark")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<DropPolicy>(entity =>
            {
                entity.ToTable("DropPolicy", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Imported by IT')");

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Discardlength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MaximumOd)
                    .HasColumnName("MaximumOD")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.MinimumOd)
                    .HasColumnName("MinimumOD")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Imported by IT')");

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");
            });

            modelBuilder.Entity<EndUses>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("EndUses", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('CAN')");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<EominvoiceReconciliations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EOMInvoiceReconciliations", "iMetal");

                entity.HasIndex(e => new { e.Id, e.AccountingPeriod, e.Coid })
                    .HasName("PK_EOMInvoiceReconciliations")
                    .IsClustered();

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AdjustmentValue)
                    .HasColumnName("adjustment_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.AuditArchiveId).HasColumnName("AuditArchiveID");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BillingReference)
                    .HasColumnName("billing_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostGroup).HasColumnName("cost_group");

                entity.Property(e => e.CostItemId).HasColumnName("cost_item_id");

                entity.Property(e => e.CostItemPurchaseReference)
                    .HasColumnName("cost_item_purchase_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.CostQuantityUnitId).HasColumnName("cost_quantity_unit_id");

                entity.Property(e => e.CostSource)
                    .HasColumnName("cost_source")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CostingWeight)
                    .HasColumnName("costing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CreationReference)
                    .HasColumnName("creation_reference")
                    .HasMaxLength(32);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DespatchId).HasColumnName("despatch_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.GoodsItemId).HasColumnName("goods_item_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MatchedStatus)
                    .HasColumnName("matched_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProcessedDate)
                    .HasColumnName("processed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReconciledValue)
                    .HasColumnName("reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockTransactionId).HasColumnName("stock_transaction_id");

                entity.Property(e => e.StockTransactionItemId).HasColumnName("stock_transaction_item_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.UpdatedReconciledValue)
                    .HasColumnName("updated_reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VehicleRunId).HasColumnName("vehicle_run_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<EomstockItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EOMStockItems", "iMetal");

                entity.HasIndex(e => new { e.Id, e.AccountingPeriod, e.Coid })
                    .HasName("PK_EOMStockItems")
                    .IsClustered();

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AdviceNoteReference)
                    .HasColumnName("advice_note_reference")
                    .HasMaxLength(40);

                entity.Property(e => e.AdvisedQuantity)
                    .HasColumnName("advised_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AgedDate)
                    .HasColumnName("aged_date")
                    .HasColumnType("date");

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.AuditArchiveId).HasColumnName("AuditArchiveID");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CalculatedQuantity)
                    .HasColumnName("calculated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificateOfConformityReference)
                    .HasColumnName("certificate_of_conformity_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTransactionId).HasColumnName("creation_transaction_id");

                entity.Property(e => e.CreationTransactionItemId).HasColumnName("creation_transaction_item_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomersOwn).HasColumnName("customers_own");

                entity.Property(e => e.Density)
                    .HasColumnName("density")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4TypeId).HasColumnName("dim4_type_id");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5TypeId).HasColumnName("dim5_type_id");

                entity.Property(e => e.DutyPercentage)
                    .HasColumnName("duty_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDate)
                    .HasColumnName("hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDescription).HasColumnName("hold_description");

                entity.Property(e => e.HoldReasonId).HasColumnName("hold_reason_id");

                entity.Property(e => e.HoldUserId).HasColumnName("hold_user_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdentifyingMarkId).HasColumnName("identifying_mark_id");

                entity.Property(e => e.IncomingDate)
                    .HasColumnName("incoming_date")
                    .HasColumnType("date");

                entity.Property(e => e.LastCheckedDate)
                    .HasColumnName("last_checked_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(16);

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonTraceable).HasColumnName("non_traceable");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasMaxLength(16);

                entity.Property(e => e.OriginalMaterialCost)
                    .HasColumnName("original_material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalMiscellaneousCost)
                    .HasColumnName("original_miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalParentId).HasColumnName("original_parent_id");

                entity.Property(e => e.OriginalProductionCost)
                    .HasColumnName("original_production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalSurchargeCost)
                    .HasColumnName("original_surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalTransportCost)
                    .HasColumnName("original_transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OtherNumber)
                    .HasColumnName("other_number")
                    .HasMaxLength(25);

                entity.Property(e => e.PackingReference)
                    .HasColumnName("packing_reference")
                    .HasMaxLength(20);

                entity.Property(e => e.PackingTypeId).HasColumnName("packing_type_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PiecesPerPack).HasColumnName("pieces_per_pack");

                entity.Property(e => e.Printed)
                    .HasColumnName("printed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductSubGroupId).HasColumnName("product_sub_group_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionItem).HasColumnName("production_item");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PurchaseBranchId).HasColumnName("purchase_branch_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.PurchaseOrder).HasColumnName("purchase_order");

                entity.Property(e => e.PurchaseOrderItem).HasColumnName("purchase_order_item");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("received_date")
                    .HasColumnType("date");

                entity.Property(e => e.RejectDescription).HasColumnName("reject_description");

                entity.Property(e => e.RejectReasonId).HasColumnName("reject_reason_id");

                entity.Property(e => e.RejectedDate)
                    .HasColumnName("rejected_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReservedPieces).HasColumnName("reserved_pieces");

                entity.Property(e => e.ReservedQuantity)
                    .HasColumnName("reserved_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReservedWeight)
                    .HasColumnName("reserved_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockCastId).HasColumnName("stock_cast_id");

                entity.Property(e => e.StockStatusId).HasColumnName("stock_status_id");

                entity.Property(e => e.StorageDate)
                    .HasColumnName("storage_date")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierReference)
                    .HasColumnName("supplier_reference")
                    .HasMaxLength(25);

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TestCertReference)
                    .HasColumnName("test_cert_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasMaxLength(30);

                entity.Property(e => e.TransientId).HasColumnName("transient_id");

                entity.Property(e => e.TransientType)
                    .HasColumnName("transient_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TreatmentNumber)
                    .HasColumnName("treatment_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.HasKey(e => new { e.AccountingPeriod, e.ToCurrency, e.FromCurrency })
                    .HasName("PK_QNG_ExchangeRate");

                entity.ToTable("ExchangeRate", "QNG");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.ToCurrency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.FromCurrency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AverageExRate).HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Avrate)
                    .HasColumnName("AVRate")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExRate).HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Mbrate)
                    .HasColumnName("MBRate")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Merate)
                    .HasColumnName("MERate")
                    .HasColumnType("numeric(15, 7)");
            });

            modelBuilder.Entity<FinancialCalendar>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("FinancialCalendar", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<FiscalMonthConversion>(entity =>
            {
                entity.ToTable("FiscalMonthConversion", "QNG");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CalendarMonth).HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.PeriodBeginDate).HasColumnType("date");

                entity.Property(e => e.PeriodEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<Glabk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLABK", "SAGE");

                entity.Property(e => e.Ablkdelm)
                    .IsRequired()
                    .HasColumnName("ABLKDELM")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdesc)
                    .IsRequired()
                    .HasColumnName("ABLKDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablklen)
                    .HasColumnName("ABLKLEN")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Ablktype)
                    .IsRequired()
                    .HasColumnName("ABLKTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkvalue)
                    .IsRequired()
                    .HasColumnName("ABLKVALUE")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkusage)
                    .HasColumnName("ABRKUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Acctblkid)
                    .IsRequired()
                    .HasColumnName("ACCTBLKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Arhusage)
                    .HasColumnName("ARHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avhusage)
                    .HasColumnName("AVHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Closesw).HasColumnName("CLOSESW");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateeff)
                    .HasColumnName("DATEEFF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Numofkey)
                    .IsRequired()
                    .HasColumnName("NUMOFKEY")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Reqdsw).HasColumnName("REQDSW");

                entity.Property(e => e.Statusactv)
                    .IsRequired()
                    .HasColumnName("STATUSACTV")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Glabrx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLABRX", "SAGE");

                entity.Property(e => e.Ablkdelm1)
                    .IsRequired()
                    .HasColumnName("ABLKDELM1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm10)
                    .IsRequired()
                    .HasColumnName("ABLKDELM10")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm2)
                    .IsRequired()
                    .HasColumnName("ABLKDELM2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm3)
                    .IsRequired()
                    .HasColumnName("ABLKDELM3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm4)
                    .IsRequired()
                    .HasColumnName("ABLKDELM4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm5)
                    .IsRequired()
                    .HasColumnName("ABLKDELM5")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm6)
                    .IsRequired()
                    .HasColumnName("ABLKDELM6")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm7)
                    .IsRequired()
                    .HasColumnName("ABLKDELM7")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm8)
                    .IsRequired()
                    .HasColumnName("ABLKDELM8")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm9)
                    .IsRequired()
                    .HasColumnName("ABLKDELM9")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkdesc)
                    .IsRequired()
                    .HasColumnName("ABRKDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid1)
                    .IsRequired()
                    .HasColumnName("ABRKID1")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid10)
                    .IsRequired()
                    .HasColumnName("ABRKID10")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid2)
                    .IsRequired()
                    .HasColumnName("ABRKID2")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid3)
                    .IsRequired()
                    .HasColumnName("ABRKID3")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid4)
                    .IsRequired()
                    .HasColumnName("ABRKID4")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid5)
                    .IsRequired()
                    .HasColumnName("ABRKID5")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid6)
                    .IsRequired()
                    .HasColumnName("ABRKID6")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid7)
                    .IsRequired()
                    .HasColumnName("ABRKID7")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid8)
                    .IsRequired()
                    .HasColumnName("ABRKID8")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid9)
                    .IsRequired()
                    .HasColumnName("ABRKID9")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrklen1)
                    .HasColumnName("ABRKLEN1")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen10)
                    .HasColumnName("ABRKLEN10")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen2)
                    .HasColumnName("ABRKLEN2")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen3)
                    .HasColumnName("ABRKLEN3")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen4)
                    .HasColumnName("ABRKLEN4")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen5)
                    .HasColumnName("ABRKLEN5")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen6)
                    .HasColumnName("ABRKLEN6")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen7)
                    .HasColumnName("ABRKLEN7")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen8)
                    .HasColumnName("ABRKLEN8")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen9)
                    .HasColumnName("ABRKLEN9")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrkstrt1)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT1")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt10)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT10")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt2)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT2")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt3)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT3")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt4)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT4")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt5)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT5")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt6)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT6")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt7)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT7")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt8)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT8")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt9)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT9")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrktitle)
                    .IsRequired()
                    .HasColumnName("ABRKTITLE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrktype)
                    .IsRequired()
                    .HasColumnName("ABRKTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq1)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ1")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq10)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ10")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq2)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ2")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq3)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ3")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq4)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ4")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq5)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ5")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq6)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ6")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq7)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ7")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq8)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ8")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq9)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ9")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctbrkid)
                    .IsRequired()
                    .HasColumnName("ACCTBRKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype)
                    .IsRequired()
                    .HasColumnName("ACCTTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Adhusage)
                    .HasColumnName("ADHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Aitusage)
                    .HasColumnName("AITUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Asdusage)
                    .HasColumnName("ASDUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Astusage)
                    .HasColumnName("ASTUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Dateeff)
                    .HasColumnName("DATEEFF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Pahusage)
                    .HasColumnName("PAHUSAGE")
                    .HasColumnType("numeric(7, 0)");
            });

            modelBuilder.Entity<Glacgrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLACGRP", "SAGE");

                entity.Property(e => e.Acctgrpcod)
                    .IsRequired()
                    .HasColumnName("ACCTGRPCOD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpdes)
                    .IsRequired()
                    .HasColumnName("ACCTGRPDES")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Grpcod).HasColumnName("GRPCOD");

                entity.Property(e => e.Sortcode)
                    .IsRequired()
                    .HasColumnName("SORTCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Glamf>(entity =>
            {
                entity.HasKey(e => new { e.Acctid, e.Coid });

                entity.ToTable("GLAMF", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLAMF_COID");

                entity.Property(e => e.Acctid)
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid)
                    .IsRequired()
                    .HasColumnName("ABRKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctbal)
                    .IsRequired()
                    .HasColumnName("ACCTBAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctdesc)
                    .IsRequired()
                    .HasColumnName("ACCTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctfmttd)
                    .IsRequired()
                    .HasColumnName("ACCTFMTTD")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpcod)
                    .IsRequired()
                    .HasColumnName("ACCTGRPCOD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpscd)
                    .IsRequired()
                    .HasColumnName("ACCTGRPSCD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctofset)
                    .IsRequired()
                    .HasColumnName("ACCTOFSET")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctsegval)
                    .IsRequired()
                    .HasColumnName("ACCTSEGVAL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctsrty)
                    .IsRequired()
                    .HasColumnName("ACCTSRTY")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype)
                    .IsRequired()
                    .HasColumnName("ACCTTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval01)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL01")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval02)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL02")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval03)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL03")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval04)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL04")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval05)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL05")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval06)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL06")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval07)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL07")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval08)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL08")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval09)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL09")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval10)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL10")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Allocsw).HasColumnName("ALLOCSW");

                entity.Property(e => e.Alloctot)
                    .HasColumnName("ALLOCTOT")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consldsw).HasColumnName("CONSLDSW");

                entity.Property(e => e.Createdate)
                    .HasColumnName("CREATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ctrlacctsw).HasColumnName("CTRLACCTSW");

                entity.Property(e => e.Defcurncod)
                    .IsRequired()
                    .HasColumnName("DEFCURNCOD")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mcsw).HasColumnName("MCSW");

                entity.Property(e => e.Ovalues).HasColumnName("OVALUES");

                entity.Property(e => e.Postosegid)
                    .IsRequired()
                    .HasColumnName("POSTOSEGID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Qtysw).HasColumnName("QTYSW");

                entity.Property(e => e.Rollupsw).HasColumnName("ROLLUPSW");

                entity.Property(e => e.Specsw).HasColumnName("SPECSW");

                entity.Property(e => e.Srceldgid)
                    .IsRequired()
                    .HasColumnName("SRCELDGID")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tovalues).HasColumnName("TOVALUES");

                entity.Property(e => e.Uom)
                    .IsRequired()
                    .HasColumnName("UOM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Yracctclos)
                    .HasColumnName("YRACCTCLOS")
                    .HasColumnType("numeric(7, 0)");
            });

            modelBuilder.Entity<Glasv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLASV", "SAGE");

                entity.Property(e => e.Acctretern)
                    .IsRequired()
                    .HasColumnName("ACCTRETERN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Idseg)
                    .IsRequired()
                    .HasColumnName("IDSEG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Segval)
                    .IsRequired()
                    .HasColumnName("SEGVAL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Segvaldesc)
                    .IsRequired()
                    .HasColumnName("SEGVALDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Glbctl>(entity =>
            {
                entity.HasKey(e => new { e.Batchid, e.Coid });

                entity.ToTable("GLBCTL", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLBCTL_COID");

                entity.Property(e => e.Batchid)
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchstat)
                    .IsRequired()
                    .HasColumnName("BATCHSTAT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchtype)
                    .IsRequired()
                    .HasColumnName("BATCHTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchdesc)
                    .IsRequired()
                    .HasColumnName("BTCHDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Credittot)
                    .HasColumnName("CREDITTOT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Datecreat)
                    .HasColumnName("DATECREAT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateedit)
                    .HasColumnName("DATEEDIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Debittot)
                    .HasColumnName("DEBITTOT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Entrycnt)
                    .HasColumnName("ENTRYCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Errorcnt)
                    .HasColumnName("ERRORCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Nextentry)
                    .HasColumnName("NEXTENTRY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Origstatus)
                    .IsRequired()
                    .HasColumnName("ORIGSTATUS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postngseq)
                    .HasColumnName("POSTNGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Qtytotal)
                    .HasColumnName("QTYTOTAL")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Srceledgr)
                    .IsRequired()
                    .HasColumnName("SRCELEDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swict).HasColumnName("SWICT");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");

                entity.Property(e => e.Swrvrecog).HasColumnName("SWRVRECOG");
            });

            modelBuilder.Entity<GlbctlUsaarc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLBCTL_USAARC", "SAGE");

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchid)
                    .IsRequired()
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchstat)
                    .IsRequired()
                    .HasColumnName("BATCHSTAT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchtype)
                    .IsRequired()
                    .HasColumnName("BATCHTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchdesc)
                    .IsRequired()
                    .HasColumnName("BTCHDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Credittot)
                    .HasColumnName("CREDITTOT")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Datecreat)
                    .HasColumnName("DATECREAT")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Dateedit)
                    .HasColumnName("DATEEDIT")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Debittot)
                    .HasColumnName("DEBITTOT")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Entrycnt)
                    .HasColumnName("ENTRYCNT")
                    .HasColumnType("decimal(7, 0)");

                entity.Property(e => e.Errorcnt)
                    .HasColumnName("ERRORCNT")
                    .HasColumnType("decimal(7, 0)");

                entity.Property(e => e.Nextentry)
                    .HasColumnName("NEXTENTRY")
                    .HasColumnType("decimal(7, 0)");

                entity.Property(e => e.Origstatus)
                    .IsRequired()
                    .HasColumnName("ORIGSTATUS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postngseq)
                    .HasColumnName("POSTNGSEQ")
                    .HasColumnType("decimal(7, 0)");

                entity.Property(e => e.Qtytotal)
                    .HasColumnName("QTYTOTAL")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Srceledgr)
                    .IsRequired()
                    .HasColumnName("SRCELEDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swict).HasColumnName("SWICT");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");

                entity.Property(e => e.Swrvrecog).HasColumnName("SWRVRECOG");
            });

            modelBuilder.Entity<Gljec>(entity =>
            {
                entity.HasKey(e => new { e.Batchnbr, e.Journalid, e.Transnbr, e.Coid });

                entity.ToTable("GLJEC", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLJEC_COID");

                entity.Property(e => e.Batchnbr)
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Jecomment)
                    .IsRequired()
                    .HasColumnName("JECOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<GljecUsaarc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLJEC_USAARC", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jecomment)
                    .IsRequired()
                    .HasColumnName("JECOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .IsRequired()
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .IsRequired()
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Gljed>(entity =>
            {
                entity.HasKey(e => new { e.Batchnbr, e.Journalid, e.Transnbr, e.Coid });

                entity.ToTable("GLJED", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLJED_COID");

                entity.Property(e => e.Batchnbr)
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Companyid)
                    .IsRequired()
                    .HasColumnName("COMPANYID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Convrate)
                    .HasColumnName("CONVRATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Datemtchcd)
                    .IsRequired()
                    .HasColumnName("DATEMTCHCD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descomp)
                    .IsRequired()
                    .HasColumnName("DESCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Hcurncode)
                    .IsRequired()
                    .HasColumnName("HCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateoper)
                    .IsRequired()
                    .HasColumnName("RATEOPER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Route).HasColumnName("ROUTE");

                entity.Property(e => e.Scurnamt)
                    .HasColumnName("SCURNAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurncode)
                    .IsRequired()
                    .HasColumnName("SCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurndec)
                    .IsRequired()
                    .HasColumnName("SCURNDEC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceldgr)
                    .IsRequired()
                    .HasColumnName("SRCELDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transamt)
                    .HasColumnName("TRANSAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transdate)
                    .HasColumnName("TRANSDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Transdesc)
                    .IsRequired()
                    .HasColumnName("TRANSDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transqty)
                    .HasColumnName("TRANSQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transref)
                    .IsRequired()
                    .HasColumnName("TRANSREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<GljedUsaarc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLJED_USAARC", "SAGE");

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Companyid)
                    .IsRequired()
                    .HasColumnName("COMPANYID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Convrate)
                    .HasColumnName("CONVRATE")
                    .HasColumnType("decimal(15, 7)");

                entity.Property(e => e.Datemtchcd)
                    .IsRequired()
                    .HasColumnName("DATEMTCHCD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descomp)
                    .IsRequired()
                    .HasColumnName("DESCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Hcurncode)
                    .IsRequired()
                    .HasColumnName("HCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .IsRequired()
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Rateoper)
                    .IsRequired()
                    .HasColumnName("RATEOPER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("decimal(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Route).HasColumnName("ROUTE");

                entity.Property(e => e.Scurnamt)
                    .HasColumnName("SCURNAMT")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Scurncode)
                    .IsRequired()
                    .HasColumnName("SCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurndec)
                    .IsRequired()
                    .HasColumnName("SCURNDEC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceldgr)
                    .IsRequired()
                    .HasColumnName("SRCELDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transamt)
                    .HasColumnName("TRANSAMT")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Transdate)
                    .HasColumnName("TRANSDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Transdesc)
                    .IsRequired()
                    .HasColumnName("TRANSDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .IsRequired()
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transqty)
                    .HasColumnName("TRANSQTY")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Transref)
                    .IsRequired()
                    .HasColumnName("TRANSREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Gljeh>(entity =>
            {
                entity.HasKey(e => new { e.Batchid, e.Btchentry, e.Coid });

                entity.ToTable("GLJEH", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLJEH_COID");

                entity.Property(e => e.Batchid)
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchentry)
                    .HasColumnName("BTCHENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateentry)
                    .HasColumnName("DATEENTRY")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Detailcnt)
                    .HasColumnName("DETAILCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("DOCDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Drilapp)
                    .IsRequired()
                    .HasColumnName("DRILAPP")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Drilldwnlk)
                    .HasColumnName("DRILLDWNLK")
                    .HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Drilsrcty).HasColumnName("DRILSRCTY");

                entity.Property(e => e.Enteredby)
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Errbatch).HasColumnName("ERRBATCH");

                entity.Property(e => e.Errentry).HasColumnName("ERRENTRY");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fscsperd)
                    .IsRequired()
                    .HasColumnName("FSCSPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fscsyr)
                    .IsRequired()
                    .HasColumnName("FSCSYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnlcr)
                    .HasColumnName("JRNLCR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Jrnldesc)
                    .IsRequired()
                    .HasColumnName("JRNLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnldr)
                    .HasColumnName("JRNLDR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Jrnlqty)
                    .HasColumnName("JRNLQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Origcomp)
                    .IsRequired()
                    .HasColumnName("ORIGCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revperd)
                    .IsRequired()
                    .HasColumnName("REVPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revyr)
                    .IsRequired()
                    .HasColumnName("REVYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swedit).HasColumnName("SWEDIT");

                entity.Property(e => e.Swreverse).HasColumnName("SWREVERSE");
            });

            modelBuilder.Entity<GljehUsaarc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLJEH_USAARC", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchid)
                    .IsRequired()
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchentry)
                    .IsRequired()
                    .HasColumnName("BTCHENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateentry)
                    .HasColumnName("DATEENTRY")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Detailcnt)
                    .HasColumnName("DETAILCNT")
                    .HasColumnType("decimal(7, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("DOCDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Drilapp)
                    .IsRequired()
                    .HasColumnName("DRILAPP")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Drilldwnlk)
                    .HasColumnName("DRILLDWNLK")
                    .HasColumnType("decimal(19, 0)");

                entity.Property(e => e.Drilsrcty).HasColumnName("DRILSRCTY");

                entity.Property(e => e.Enteredby)
                    .IsRequired()
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Errbatch).HasColumnName("ERRBATCH");

                entity.Property(e => e.Errentry).HasColumnName("ERRENTRY");

                entity.Property(e => e.Fscsperd)
                    .IsRequired()
                    .HasColumnName("FSCSPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fscsyr)
                    .IsRequired()
                    .HasColumnName("FSCSYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnlcr)
                    .HasColumnName("JRNLCR")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Jrnldesc)
                    .IsRequired()
                    .HasColumnName("JRNLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnldr)
                    .HasColumnName("JRNLDR")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Jrnlqty)
                    .HasColumnName("JRNLQTY")
                    .HasColumnType("decimal(19, 3)");

                entity.Property(e => e.Origcomp)
                    .IsRequired()
                    .HasColumnName("ORIGCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revperd)
                    .IsRequired()
                    .HasColumnName("REVPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revyr)
                    .IsRequired()
                    .HasColumnName("REVYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swedit).HasColumnName("SWEDIT");

                entity.Property(e => e.Swreverse).HasColumnName("SWREVERSE");
            });

            modelBuilder.Entity<Glpost>(entity =>
            {
                entity.HasKey(e => new { e.Postingseq, e.Cntdetail, e.Acctid, e.Coid, e.Fiscalyr, e.Fiscalperd, e.Srcecurn, e.Srceledger, e.Srcetype });

                entity.ToTable("GLPOST", "SAGE");

                entity.HasIndex(e => e.Fiscalperd)
                    .HasName("IDX_GLPOST_FISCALPERD");

                entity.HasIndex(e => new { e.Coid, e.Acctid, e.Fiscalyr, e.Fiscalperd, e.Srcecurn, e.Srceledger, e.Srcetype, e.Postingseq, e.Cntdetail, e.Audtdate, e.Audttime, e.Audtuser, e.Audtorg, e.Jrnldate, e.Batchnbr, e.Entrynbr, e.Transnbr, e.Editallowd, e.Consolidat, e.Companyid, e.Jnldtldesc, e.Jnldtlref, e.Transamt, e.Transqty, e.Scurndec, e.Scurnamt, e.Hcurncode, e.Ratetype, e.Scurncode, e.Ratedate, e.Convrate, e.Ratespread, e.Datemtchcd, e.Rateoper, e.Drilsrcty, e.Drilldwnlk, e.Drilapp, e.Rptamt, e.Values, e.Docdate })
                    .HasName("CSI_SAGE_GLPOST");

                entity.Property(e => e.Postingseq)
                    .HasColumnName("POSTINGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntdetail)
                    .HasColumnName("CNTDETAIL")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Acctid)
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalyr)
                    .HasColumnName("FISCALYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalperd)
                    .HasColumnName("FISCALPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcecurn)
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Companyid)
                    .IsRequired()
                    .HasColumnName("COMPANYID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consolidat).HasColumnName("CONSOLIDAT");

                entity.Property(e => e.Convrate)
                    .HasColumnName("CONVRATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Datemtchcd)
                    .IsRequired()
                    .HasColumnName("DATEMTCHCD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Docdate)
                    .HasColumnName("DOCDATE")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Drilapp)
                    .IsRequired()
                    .HasColumnName("DRILAPP")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Drilldwnlk)
                    .HasColumnName("DRILLDWNLK")
                    .HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Drilsrcty).HasColumnName("DRILSRCTY");

                entity.Property(e => e.Editallowd).HasColumnName("EDITALLOWD");

                entity.Property(e => e.Entrynbr)
                    .IsRequired()
                    .HasColumnName("ENTRYNBR")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Hcurncode)
                    .IsRequired()
                    .HasColumnName("HCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jnldtldesc)
                    .IsRequired()
                    .HasColumnName("JNLDTLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jnldtlref)
                    .IsRequired()
                    .HasColumnName("JNLDTLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnldate)
                    .HasColumnName("JRNLDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateoper)
                    .IsRequired()
                    .HasColumnName("RATEOPER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rptamt)
                    .HasColumnName("RPTAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurnamt)
                    .HasColumnName("SCURNAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurncode)
                    .IsRequired()
                    .HasColumnName("SCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurndec)
                    .IsRequired()
                    .HasColumnName("SCURNDEC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transamt)
                    .HasColumnName("TRANSAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transnbr)
                    .HasColumnName("TRANSNBR")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("TRANSQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<Glposto>(entity =>
            {
                entity.HasKey(e => new { e.Postingseq, e.Cntdetail, e.Acctid, e.Coid, e.Fiscalyr, e.Fiscalperd, e.Srcecurn, e.Srceledger, e.Srcetype, e.Optfield });

                entity.ToTable("GLPOSTO", "SAGE");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GLPOSTO_COID");

                entity.HasIndex(e => new { e.Coid, e.Acctid, e.Fiscalyr, e.Fiscalperd, e.Srcecurn, e.Srceledger, e.Srcetype, e.Postingseq, e.Cntdetail, e.Optfield, e.Audtdate, e.Audttime, e.Audtuser, e.Audtorg, e.Value, e.Type, e.Length, e.Decimals, e.Allownull, e.Validate })
                    .HasName("CSI_SAGE_GLPOSTO");

                entity.Property(e => e.Postingseq)
                    .HasColumnName("POSTINGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntdetail)
                    .HasColumnName("CNTDETAIL")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Acctid)
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalyr)
                    .HasColumnName("FISCALYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalperd)
                    .HasColumnName("FISCALPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcecurn)
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Optfield)
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Glsrce>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLSRCE", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Srcedesc)
                    .IsRequired()
                    .HasColumnName("SRCEDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<GoLiveDates>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GoLiveDates", "ETL");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.GoLiveDate).HasColumnType("date");
            });

            modelBuilder.Entity<GoodsInwardsCosts>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("GoodsInwardsCosts", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CostItemId).HasColumnName("cost_item_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<GoodsInwardsHeaders>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("GoodsInwardsHeaders", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GoodsInwardsHeaders_COID");

                entity.HasIndex(e => new { e.Number, e.Coid });

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CarrierId).HasColumnName("carrier_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.DeliveryReference)
                    .HasColumnName("delivery_reference")
                    .HasMaxLength(40);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.PurchaseHeaderId).HasColumnName("purchase_header_id");

                entity.Property(e => e.ReceiptDate)
                    .HasColumnName("receipt_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReceiptType).HasColumnName("receipt_type");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Updated).HasColumnName("updated");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleRunId).HasColumnName("vehicle_run_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.VesselId).HasColumnName("vessel_id");
            });

            modelBuilder.Entity<GoodsInwardsItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("GoodsInwardsItems", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_GoodsInwardsItems_COID");

                entity.HasIndex(e => new { e.Id, e.Item, e.HeaderId, e.Coid })
                    .HasName("IDX_GoodsInwardsItems_HeaderID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Costed).HasColumnName("costed");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ForceItemCompletion).HasColumnName("force_item_completion");

                entity.Property(e => e.HeaderId).HasColumnName("header_id");

                entity.Property(e => e.InvoiceItemId).HasColumnName("invoice_item_id");

                entity.Property(e => e.Item).HasColumnName("item");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialStockCost)
                    .HasColumnName("material_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousStockCost)
                    .HasColumnName("miscellaneous_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PoBranchId).HasColumnName("po_branch_id");

                entity.Property(e => e.PoItem).HasColumnName("po_item");

                entity.Property(e => e.PoNumber).HasColumnName("po_number");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionStockCost)
                    .HasColumnName("production_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.ServiceItem).HasColumnName("service_item");

                entity.Property(e => e.ServicePieces).HasColumnName("service_pieces");

                entity.Property(e => e.ServiceQuantity)
                    .HasColumnName("service_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ServiceWeight)
                    .HasColumnName("service_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SourceCreditStockItemId).HasColumnName("source_credit_stock_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeStockCost)
                    .HasColumnName("surcharge_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransientPieces).HasColumnName("transient_pieces");

                entity.Property(e => e.TransientQuantity)
                    .HasColumnName("transient_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransientWeight)
                    .HasColumnName("transient_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportPieces).HasColumnName("transport_pieces");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportStockCost)
                    .HasColumnName("transport_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportWeight)
                    .HasColumnName("transport_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<GoodsInwardsProducts>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("GoodsInwardsProducts", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<HalliburtonBillingImportBatches>(entity =>
            {
                entity.ToTable("HalliburtonBillingImportBatches", "QNG");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.JobNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Salesperson)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Spreadsheet)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<HalliburtonBillingItems>(entity =>
            {
                entity.ToTable("HalliburtonBillingItems", "QNG");

                entity.HasIndex(e => e.ViewId)
                    .HasName("IX_UniqueViewID")
                    .IsUnique();

                entity.Property(e => e.BatchNumber).HasMaxLength(50);

                entity.Property(e => e.BillOfLading).HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.HalliburtonPartNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeatNumber).HasMaxLength(50);

                entity.Property(e => e.HowcoStatusCode1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.HowcoStatusCode2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ImetalImportBatchNumber).HasColumnName("IMetalImportBatchNumber");

                entity.Property(e => e.ImetalImportCompanyReference)
                    .HasColumnName("IMetalImportCompanyReference")
                    .HasMaxLength(30);

                entity.Property(e => e.ImetalLineNumber).HasColumnName("IMetalLineNumber");

                entity.Property(e => e.ImetalOrderNumber)
                    .HasColumnName("IMetalOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.ImetalStatusCode)
                    .HasColumnName("IMetalStatusCode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImetalStatusNotes).HasColumnName("IMetalStatusNotes");

                entity.Property(e => e.ImetalStatusUpdateTimeUtc)
                    .HasColumnName("IMetalStatusUpdateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ind).HasMaxLength(50);

                entity.Property(e => e.ManualProcessing).HasComment("0 = None, 1 = Required, 2 = Completed.");

                entity.Property(e => e.MaterialDoc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(50);

                entity.Property(e => e.PoitemNumber)
                    .HasColumnName("POItemNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PostDate).HasColumnType("date");

                entity.Property(e => e.Price).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PriceUom)
                    .HasColumnName("PriceUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Quantity).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuantityUom)
                    .IsRequired()
                    .HasColumnName("QuantityUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.Sloc)
                    .HasColumnName("SLoc")
                    .HasMaxLength(50);

                entity.Property(e => e.StockItemId).HasColumnName("StockItemID");

                entity.Property(e => e.StorBin).HasMaxLength(50);

                entity.Property(e => e.VendorNumber).HasMaxLength(50);

                entity.Property(e => e.ViewId)
                    .IsRequired()
                    .HasColumnName("ViewID")
                    .HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(5);
            });

            modelBuilder.Entity<HalliburtonBillingMovementCodes>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("HalliburtonBillingMovementCodes", "QNG");

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<HalliburtonBillingStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Type });

                entity.ToTable("HalliburtonBillingStatusCodes", "QNG");

                entity.Property(e => e.Code)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartDemand", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerDemandBalanceInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIdiMetalInternal).HasColumnName("CustomerIDiMetalInternal");

                entity.Property(e => e.CustomerIncomingBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIncomingInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerIncomingUom)
                    .IsRequired()
                    .HasColumnName("CustomerIncomingUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.CustomerPartNumber).HasMaxLength(35);

                entity.Property(e => e.CustomerPartNumberWithDescription).HasMaxLength(250);

                entity.Property(e => e.CustomerStockOnSiteBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerStockOnSiteInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CustomerStockOnSiteUom)
                    .IsRequired()
                    .HasColumnName("CustomerStockOnSiteUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.DemandBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.DemandInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.DemandUom)
                    .IsRequired()
                    .HasColumnName("DemandUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MonthOf).HasColumnType("date");

                entity.Property(e => e.Plant).HasMaxLength(60);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductIdiMetalInternal).HasColumnName("ProductIDiMetalInternal");

                entity.Property(e => e.SafetyStockBase).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SafetyStockInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SafetyStockUom)
                    .IsRequired()
                    .HasColumnName("SafetyStockUOM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartLengthLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartLengthLookup", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Customer)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CustomerPartNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsConsignment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LengthPerPieceInches).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(60);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(100);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartMappingExternalToiMetal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartMappingExternalToiMetal", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerPartNumber).HasMaxLength(35);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsConsignment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(60);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductIdiMetalInternal).HasColumnName("ProductIDiMetalInternal");

                entity.Property(e => e.ProductSpec).HasMaxLength(30);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartMappingExternalToiMetalImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartMappingExternalToiMetal_Import", "QNG");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerPartNumber).HasMaxLength(35);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsConsignment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(60);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductIdiMetalInternal).HasColumnName("ProductIDiMetalInternal");

                entity.Property(e => e.ProductSpec).HasMaxLength(30);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartPlants>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartPlants", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerIdiMetalInternal).HasColumnName("CustomerIDiMetalInternal");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsConsignment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.PlantCode).HasMaxLength(10);

                entity.Property(e => e.Warehouse).HasMaxLength(10);
            });

            modelBuilder.Entity<HalliburtonSupplyOptimizationPartWarehouses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HalliburtonSupplyOptimizationPartWarehouses", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
            });

            modelBuilder.Entity<IMetalAuditLogSpec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("iMetalAuditLogSpec", "QNG");

                entity.Property(e => e.ColumnBasedOn).HasMaxLength(3);

                entity.Property(e => e.ColumnFromSourceTableToJoin).HasMaxLength(150);

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SourceTableForId)
                    .HasColumnName("SourceTableForID")
                    .HasMaxLength(150);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<IMetalColumnCompare>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iMetalColumnCompare", "ETL");

                entity.Property(e => e.QngTableName)
                    .HasColumnName("QNG_TABLE_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.ServerName)
                    .HasColumnName("SERVER_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.TableCatalog)
                    .HasColumnName("TABLE_CATALOG")
                    .HasMaxLength(128);

                entity.Property(e => e.TableCharacterMaximumLength).HasColumnName("TABLE_CHARACTER_MAXIMUM_LENGTH");

                entity.Property(e => e.TableCollationName)
                    .HasColumnName("TABLE_COLLATION_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.TableColumnName)
                    .HasColumnName("TABLE_COLUMN_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.TableDataType)
                    .HasColumnName("TABLE_DATA_TYPE")
                    .HasMaxLength(128);

                entity.Property(e => e.TableDatetimePrecision).HasColumnName("TABLE_DATETIME_PRECISION");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnName("TABLE_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.TableNumericPrecision).HasColumnName("TABLE_NUMERIC_PRECISION");

                entity.Property(e => e.TableSchema)
                    .HasColumnName("TABLE_SCHEMA")
                    .HasMaxLength(128);

                entity.Property(e => e.ViewCharacterMaximumLength).HasColumnName("VIEW_CHARACTER_MAXIMUM_LENGTH");

                entity.Property(e => e.ViewCollationName)
                    .HasColumnName("VIEW_COLLATION_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.ViewColumnName)
                    .HasColumnName("VIEW_COLUMN_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.ViewDataType)
                    .HasColumnName("VIEW_DATA_TYPE")
                    .HasMaxLength(128);

                entity.Property(e => e.ViewDatetimePrecision).HasColumnName("VIEW_DATETIME_PRECISION");

                entity.Property(e => e.ViewNumericPrecision).HasColumnName("VIEW_NUMERIC_PRECISION");
            });

            modelBuilder.Entity<InboundAllocations>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("InboundAllocations", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocationType)
                    .HasColumnName("allocation_type")
                    .HasMaxLength(1);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Cuts).HasColumnName("cuts");

                entity.Property(e => e.EnhancedInboundAllocationId).HasColumnName("enhanced_inbound_allocation_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("expiry_date")
                    .HasColumnType("date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductionItemId).HasColumnName("production_item_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReserveOnly).HasColumnName("reserve_only");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TransferItemId).HasColumnName("transfer_item_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<InboundAllocations1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("InboundAllocations", "QNG");

                entity.HasIndex(e => new { e.Id, e.Coid, e.DefaultWeightUom, e.DefaultBaseCurrency, e.InboundAllocationId, e.InboundAllocationType, e.InboundHeaderId, e.InboundItemId, e.InboundOrderBranchCode, e.InboundOrderBranchName, e.InboundOrderNumber, e.InboundOrderItemNumber, e.InboundItemReferenceNumber, e.VendorNumber, e.VendorName, e.BuyerCode, e.BuyerName, e.InboundOrderItemDueDate, e.InboundOrderItemOriginalDueDate, e.InboundItemStatusCode, e.InboundItemStatusDescription, e.InboundProductCode, e.InboundProductDescription, e.InboundOrderWarehouseCode, e.InboundOrderWarehouseName, e.AllocatedPieces, e.AllocatedQuantity, e.AllocatedWeight, e.ReservedByHeaderId, e.ReservedByItemId, e.ReservedByDiscrimnitor, e.ReservedByOrderBranchCode, e.ReservedByOrderBranchName, e.ReservedByOrderNumber, e.ReservedByItemNumber, e.ReservedByItemReferenceNumber, e.ReservedByOrderType, e.ReservedByOrderTypeDescription, e.ReservedByItemStatusCode, e.ReservedByItemStatusDescription, e.CustomerNumber, e.CustomerName, e.CustomerOrderNumber, e.ReservedByWarehouseCode, e.ReservedByWarehouseName, e.ReservedByProductCode, e.ReservedByProductDescription, e.ReservedByProductCategory, e.ReservedByProductSize, e.ReservedByProductSizeDescription, e.ReservedByProductCondition, e.ReservedByProductGrade, e.ReservedByProductLength, e.ReservedByItemPartNumber, e.ReservedByDueDate, e.ReservedByReference, e.Cdate, e.Mdate, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_InboundAllocations");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BuyerCode).HasMaxLength(16);

                entity.Property(e => e.BuyerName).HasMaxLength(255);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DefaultBaseCurrency).HasMaxLength(3);

                entity.Property(e => e.DefaultWeightUom)
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.InboundAllocationId).HasColumnName("InboundAllocationID");

                entity.Property(e => e.InboundAllocationType)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.InboundHeaderId).HasColumnName("InboundHeaderID");

                entity.Property(e => e.InboundItemId).HasColumnName("InboundItemID");

                entity.Property(e => e.InboundItemReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.InboundItemStatusCode).HasMaxLength(6);

                entity.Property(e => e.InboundItemStatusDescription).HasMaxLength(255);

                entity.Property(e => e.InboundOrderBranchCode).HasMaxLength(6);

                entity.Property(e => e.InboundOrderBranchName).HasMaxLength(60);

                entity.Property(e => e.InboundOrderItemDueDate).HasColumnType("date");

                entity.Property(e => e.InboundOrderItemOriginalDueDate).HasColumnType("date");

                entity.Property(e => e.InboundOrderWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.InboundOrderWarehouseName).HasMaxLength(60);

                entity.Property(e => e.InboundProductCode).HasMaxLength(24);

                entity.Property(e => e.InboundProductDescription).HasMaxLength(4000);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.ReservedByDiscrimnitor).HasMaxLength(1);

                entity.Property(e => e.ReservedByDueDate).HasColumnType("date");

                entity.Property(e => e.ReservedByHeaderId).HasColumnName("ReservedByHeaderID");

                entity.Property(e => e.ReservedByItemId).HasColumnName("ReservedByItemID");

                entity.Property(e => e.ReservedByItemPartNumber).HasMaxLength(35);

                entity.Property(e => e.ReservedByItemReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.ReservedByItemStatusCode).HasMaxLength(3);

                entity.Property(e => e.ReservedByItemStatusDescription).HasMaxLength(255);

                entity.Property(e => e.ReservedByOrderBranchCode).HasMaxLength(6);

                entity.Property(e => e.ReservedByOrderBranchName).HasMaxLength(60);

                entity.Property(e => e.ReservedByOrderType).HasMaxLength(3);

                entity.Property(e => e.ReservedByOrderTypeDescription).HasMaxLength(255);

                entity.Property(e => e.ReservedByProductCategory).HasMaxLength(16);

                entity.Property(e => e.ReservedByProductCode).HasMaxLength(24);

                entity.Property(e => e.ReservedByProductCondition).HasMaxLength(30);

                entity.Property(e => e.ReservedByProductDescription).HasMaxLength(4000);

                entity.Property(e => e.ReservedByProductGrade).HasMaxLength(16);

                entity.Property(e => e.ReservedByProductLength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ReservedByProductSize).HasMaxLength(19);

                entity.Property(e => e.ReservedByProductSizeDescription).HasMaxLength(255);

                entity.Property(e => e.ReservedByReference).HasMaxLength(38);

                entity.Property(e => e.ReservedByWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.ReservedByWarehouseName).HasMaxLength(60);

                entity.Property(e => e.VendorName).HasMaxLength(60);

                entity.Property(e => e.VendorNumber).HasMaxLength(10);
            });

            modelBuilder.Entity<InvoiceReconciliations>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("InvoiceReconciliations", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_InvoiceReconciliations_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AdjustmentValue)
                    .HasColumnName("adjustment_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BillingReference)
                    .HasColumnName("billing_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostGroup).HasColumnName("cost_group");

                entity.Property(e => e.CostItemId).HasColumnName("cost_item_id");

                entity.Property(e => e.CostItemPurchaseReference)
                    .HasColumnName("cost_item_purchase_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.CostQuantityUnitId).HasColumnName("cost_quantity_unit_id");

                entity.Property(e => e.CostSource)
                    .HasColumnName("cost_source")
                    .HasMaxLength(1);

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CostingWeight)
                    .HasColumnName("costing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CreationReference)
                    .HasColumnName("creation_reference")
                    .HasMaxLength(32);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DespatchId).HasColumnName("despatch_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.GoodsItemId).HasColumnName("goods_item_id");

                entity.Property(e => e.MatchedStatus)
                    .HasColumnName("matched_status")
                    .HasMaxLength(1);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProcessedDate)
                    .HasColumnName("processed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReconciledValue)
                    .HasColumnName("reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockTransactionId).HasColumnName("stock_transaction_id");

                entity.Property(e => e.StockTransactionItemId).HasColumnName("stock_transaction_item_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.UpdatedReconciledValue)
                    .HasColumnName("updated_reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VehicleRunId).HasColumnName("vehicle_run_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<InvoiceReconciliationsArchive>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SnapshotDate, e.Coid });

                entity.ToTable("InvoiceReconciliationsArchive", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SnapshotDate).HasColumnType("date");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AdjustmentValue)
                    .HasColumnName("adjustment_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BillingReference)
                    .HasColumnName("billing_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostGroup).HasColumnName("cost_group");

                entity.Property(e => e.CostItemId).HasColumnName("cost_item_id");

                entity.Property(e => e.CostItemPurchaseReference)
                    .HasColumnName("cost_item_purchase_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.CostQuantityUnitId).HasColumnName("cost_quantity_unit_id");

                entity.Property(e => e.CostSource)
                    .HasColumnName("cost_source")
                    .HasMaxLength(1);

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CostingWeight)
                    .HasColumnName("costing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CreationReference)
                    .HasColumnName("creation_reference")
                    .HasMaxLength(32);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DespatchId).HasColumnName("despatch_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.GoodsItemId).HasColumnName("goods_item_id");

                entity.Property(e => e.MatchedStatus)
                    .HasColumnName("matched_status")
                    .HasMaxLength(1);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProcessedDate)
                    .HasColumnName("processed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReconciledValue)
                    .HasColumnName("reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockTransactionId).HasColumnName("stock_transaction_id");

                entity.Property(e => e.StockTransactionItemId).HasColumnName("stock_transaction_item_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.UpdatedReconciledValue)
                    .HasColumnName("updated_reconciled_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VehicleRunId).HasColumnName("vehicle_run_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<LoggedActions>(entity =>
            {
                entity.HasKey(e => new { e.EventId, e.Coid });

                entity.ToTable("LoggedActions", "iMetal");

                entity.HasIndex(e => new { e.Coid, e.EventId })
                    .HasName("IDX_LoggedActions_COID_EventID");

                entity.Property(e => e.EventId).HasColumnName("event_id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasColumnName("action")
                    .HasColumnType("ntext");

                entity.Property(e => e.ActionTstampTx).HasColumnName("action_tstamp_tx");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NewValues)
                    .HasColumnName("new_values")
                    .HasColumnType("ntext");

                entity.Property(e => e.OldValues)
                    .HasColumnName("old_values")
                    .HasColumnType("ntext");

                entity.Property(e => e.RecordId).HasColumnName("record_id");

                entity.Property(e => e.RecordReference)
                    .HasColumnName("record_reference")
                    .HasColumnType("ntext");

                entity.Property(e => e.TableName)
                    .HasColumnName("table_name")
                    .HasColumnType("ntext");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Mills>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Mills", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultCountryOfOriginId).HasColumnName("default_country_of_origin_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<NdtutcertEquipmentDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NDTUTCertEquipmentDetails", "QNG");

                entity.Property(e => e.CalibrationDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'EUR')");

                entity.Property(e => e.Equipment).HasMaxLength(300);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<NdtutcertMaintenanceDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NDTUTCertMaintenanceDetails", "QNG");

                entity.Property(e => e.AcceptanceProcedure).HasMaxLength(300);

                entity.Property(e => e.Couplant).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'EUR')");

                entity.Property(e => e.ExaminationProcedure).HasMaxLength(300);

                entity.Property(e => e.Frequency).HasMaxLength(300);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Probe).HasMaxLength(300);

                entity.Property(e => e.Result).HasMaxLength(300);

                entity.Property(e => e.ScanPlan).HasMaxLength(100);

                entity.Property(e => e.SurfaceCondition).HasMaxLength(100);

                entity.Property(e => e.TestBlocks).HasMaxLength(300);

                entity.Property(e => e.TestGain).HasMaxLength(25);

                entity.Property(e => e.TestRange).HasMaxLength(50);

                entity.Property(e => e.TransferLoss).HasMaxLength(50);
            });

            modelBuilder.Entity<NdtutcertSignatureDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NDTUTCertSignatureDetails", "QNG");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DigitallySignedBy).HasMaxLength(100);

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'EUR')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Inspector).HasMaxLength(100);

                entity.Property(e => e.InspectorT1).HasMaxLength(300);

                entity.Property(e => e.InspectorT2).HasMaxLength(300);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.SignatureImage).HasColumnType("image");
            });

            modelBuilder.Entity<NdtutscanPlanDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NDTUTScanPlanDetails", "QNG");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'EUR')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.ScanCoverage).HasMaxLength(300);
            });

            modelBuilder.Entity<NominalAccounts>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("NominalAccounts", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicationSource)
                    .HasColumnName("application_source")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(30);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExternalCode)
                    .HasColumnName("external_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<NoteTemplates>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("NoteTemplates", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.NoteTypeId).HasColumnName("note_type_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<OrderClassifications>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("OrderClassifications", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('INC')");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PartNumberSpecificationCharges>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PartNumberSpecificationCharges", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_PartNumberSpecificationCharges_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Charge)
                    .HasColumnName("charge")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ChargeFixStatus)
                    .IsRequired()
                    .HasColumnName("charge_fix_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ChargeItem).HasColumnName("charge_item");

                entity.Property(e => e.ChargeUnitId).HasColumnName("charge_unit_id");

                entity.Property(e => e.ChargeVisibility)
                    .IsRequired()
                    .HasColumnName("charge_visibility")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ConfirmAtInvoicing).HasColumnName("confirm_at_invoicing");

                entity.Property(e => e.CostGroupCode)
                    .HasColumnName("cost_group_code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.DiscountItem).HasColumnName("discount_item");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PartNumberSpecificationId).HasColumnName("part_number_specification_id");

                entity.Property(e => e.SalesGroupChargeId).HasColumnName("sales_group_charge_id");

                entity.Property(e => e.ShowCustomer).HasColumnName("show_customer");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PartNumberSpecificationCosts>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PartNumberSpecificationCosts", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BillingReference)
                    .HasColumnName("billing_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostFixStatus)
                    .IsRequired()
                    .HasColumnName("cost_fix_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CostGroupCodeId).HasColumnName("cost_group_code_id");

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PartNumberSpecificationId).HasColumnName("part_number_specification_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Visibility)
                    .IsRequired()
                    .HasColumnName("visibility")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PartNumberSpecifications>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PartNumberSpecifications", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_PartNumberSpecifications_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AcknowledgementNotes).HasColumnName("acknowledgement_notes");

                entity.Property(e => e.AdditionalSpecification1)
                    .HasColumnName("additional_specification1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdditionalSpecification2)
                    .HasColumnName("additional_specification2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdditionalSpecification3)
                    .HasColumnName("additional_specification3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdditionalSpecification4)
                    .HasColumnName("additional_specification4")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentPrice)
                    .HasColumnName("adjustment_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnName("approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApprovedById).HasColumnName("approved_by_id");

                entity.Property(e => e.BaseSpecification)
                    .HasColumnName("base_specification")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompositeKey)
                    .HasColumnName("composite_key")
                    .HasMaxLength(50);

                entity.Property(e => e.ConsumptionDimensionsId).HasColumnName("consumption_dimensions_id");

                entity.Property(e => e.ConsumptionProductId).HasColumnName("consumption_product_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomerOrderNumber)
                    .HasColumnName("customer_order_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DescriptionFormula).HasColumnName("description_formula");

                entity.Property(e => e.DespatchNotes).HasColumnName("despatch_notes");

                entity.Property(e => e.DimensionsId).HasColumnName("dimensions_id");

                entity.Property(e => e.DocumentNumber)
                    .HasColumnName("document_number")
                    .HasMaxLength(30);

                entity.Property(e => e.DrawingNumber)
                    .HasColumnName("drawing_number")
                    .HasMaxLength(30);

                entity.Property(e => e.EndUseId).HasColumnName("end_use_id");

                entity.Property(e => e.EntryQuantity)
                    .HasColumnName("entry_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.EntryQuantityUnitId).HasColumnName("entry_quantity_unit_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExpectedScrap)
                    .HasColumnName("expected_scrap")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.FabricationId).HasColumnName("fabrication_id");

                entity.Property(e => e.FabricationProcessId).HasColumnName("fabrication_process_id");

                entity.Property(e => e.FabricationWorkCentreId).HasColumnName("fabrication_work_centre_id");

                entity.Property(e => e.GoodsInwardsNotes).HasColumnName("goods_inwards_notes");

                entity.Property(e => e.InsideDiameter)
                    .HasColumnName("inside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum)
                    .HasColumnName("inside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum)
                    .HasColumnName("inside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InternalNotes).HasColumnName("internal_notes");

                entity.Property(e => e.InvoiceNotes).HasColumnName("invoice_notes");

                entity.Property(e => e.InvoicePacking).HasColumnName("invoice_packing");

                entity.Property(e => e.LastUsedDate)
                    .HasColumnName("last_used_date")
                    .HasColumnType("date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MechanicalCert).HasColumnName("mechanical_cert");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasMaxLength(35);

                entity.Property(e => e.OutsideDiameter)
                    .HasColumnName("outside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum)
                    .HasColumnName("outside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum)
                    .HasColumnName("outside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OverrideAllowed).HasColumnName("override_allowed");

                entity.Property(e => e.PackCountMaximum).HasColumnName("pack_count_maximum");

                entity.Property(e => e.PackCountMinimum).HasColumnName("pack_count_minimum");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum)
                    .HasColumnName("pack_height_maximum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum)
                    .HasColumnName("pack_height_minimum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("pack_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum)
                    .HasColumnName("pack_weight_maximum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum)
                    .HasColumnName("pack_weight_minimum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PartCompanyType)
                    .HasColumnName("part_company_type")
                    .HasMaxLength(1);

                entity.Property(e => e.PartNotes).HasColumnName("part_notes");

                entity.Property(e => e.PartProcessTypeId).HasColumnName("part_process_type_id");

                entity.Property(e => e.PartSpecification)
                    .HasColumnName("part_specification")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PartStatus)
                    .HasColumnName("part_status")
                    .HasMaxLength(1);

                entity.Property(e => e.PriceCode)
                    .HasColumnName("price_code")
                    .HasMaxLength(3);

                entity.Property(e => e.ProcessPlanId).HasColumnName("process_plan_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionFactor)
                    .HasColumnName("production_factor")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.ProductionNotes).HasColumnName("production_notes");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.RevisionNumber)
                    .HasColumnName("revision_number")
                    .HasMaxLength(30);

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.ShowCountryOfFinalProcessing).HasColumnName("show_country_of_final_processing");

                entity.Property(e => e.ShowCountryOfMaterialOrigin).HasColumnName("show_country_of_material_origin");

                entity.Property(e => e.ShowCountryOfPrimaryProcessing).HasColumnName("show_country_of_primary_processing");

                entity.Property(e => e.ShowPrices).HasColumnName("show_prices");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.StandardPieces).HasColumnName("standard_pieces");

                entity.Property(e => e.StandardQuantity)
                    .HasColumnName("standard_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.StandardWeight)
                    .HasColumnName("standard_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.UseMinimumGrade).HasColumnName("use_minimum_grade");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WorksNotes).HasColumnName("works_notes");

                entity.Property(e => e.YieldPercentage)
                    .HasColumnName("yield_percentage")
                    .HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<Personnel>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Personnel", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Personnel_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultCustomerId).HasColumnName("default_customer_id");

                entity.Property(e => e.DefaultLabelPrinterId).HasColumnName("default_label_printer_id");

                entity.Property(e => e.DefaultPrinterId).HasColumnName("default_printer_id");

                entity.Property(e => e.DefaultSalesGroupId).HasColumnName("default_sales_group_id");

                entity.Property(e => e.DiaryGroupsCode)
                    .HasColumnName("diary_groups_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled)
                    .HasColumnName("enabled")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FastDial)
                    .HasColumnName("fast_dial")
                    .HasMaxLength(20);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(20);

                entity.Property(e => e.GoogleCalendarPassword)
                    .HasColumnName("google_calendar_password")
                    .HasMaxLength(128);

                entity.Property(e => e.GoogleCalendarUser)
                    .HasColumnName("google_calendar_user")
                    .HasMaxLength(255);

                entity.Property(e => e.GuiConfigurator).HasColumnName("gui_configurator");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.LocaleCountry)
                    .HasColumnName("locale_country")
                    .HasMaxLength(2);

                entity.Property(e => e.LocaleLanguage)
                    .HasColumnName("locale_language")
                    .HasMaxLength(2);

                entity.Property(e => e.LocaleVariant)
                    .HasColumnName("locale_variant")
                    .HasMaxLength(10);

                entity.Property(e => e.LoginName)
                    .HasColumnName("login_name")
                    .HasMaxLength(50);

                entity.Property(e => e.MaxSupplierDocumentValue)
                    .HasColumnName("max_supplier_document_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MemberOfPickupCallsGroup).HasColumnName("member_of_pickup_calls_group");

                entity.Property(e => e.Mobile)
                    .HasColumnName("mobile")
                    .HasMaxLength(20);

                entity.Property(e => e.MssSettingsId).HasColumnName("mss_settings_id");

                entity.Property(e => e.MssUserFlag)
                    .HasColumnName("mss_user_flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonnelGroupId).HasColumnName("personnel_group_id");

                entity.Property(e => e.ReconciliationVariancePercentage)
                    .HasColumnName("reconciliation_variance_percentage")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.ReconciliationVarianceValue)
                    .HasColumnName("reconciliation_variance_value")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SecurityRoles).HasColumnName("security_roles");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StrongPassword)
                    .HasColumnName("strong_password")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.SupportUser).HasColumnName("support_user");

                entity.Property(e => e.TableEditingPermissionLevel)
                    .HasColumnName("table_editing_permission_level")
                    .HasMaxLength(1);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(20);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.ViewAllEnquiryItemsAllowed).HasColumnName("view_all_enquiry_items_allowed");
            });

            modelBuilder.Entity<PersonnelGroups>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PersonnelGroups", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BasePreferenceGroup).HasColumnName("base_preference_group");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessAllocations>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessAllocations", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProcessAllocations_COID");

                entity.HasIndex(e => new { e.ProductLevelAllocationId, e.ProcessRequestId, e.Coid })
                    .HasName("IDX_ProcessAllocation_COID_ProcessRequestID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.AutoGenerated).HasColumnName("auto_generated");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProcessRequestId).HasColumnName("process_request_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessGroupConsumption>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessGroupConsumption", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProcessGroupConsumption_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CoilRuns).HasColumnName("coil_runs");

                entity.Property(e => e.Consumable).HasColumnName("consumable");

                entity.Property(e => e.ConsumedStockItemId).HasColumnName("consumed_stock_item_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PlannedStockItemId).HasColumnName("planned_stock_item_id");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProcessedPercentage)
                    .HasColumnName("processed_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.ProcessedWeight)
                    .HasColumnName("processed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProducedPlannedItemId).HasColumnName("produced_planned_item_id");

                entity.Property(e => e.RipFinishedLength)
                    .HasColumnName("rip_finished_length")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.RipLocation)
                    .HasColumnName("rip_location")
                    .HasMaxLength(16);

                entity.Property(e => e.RipProducedPieces).HasColumnName("rip_produced_pieces");

                entity.Property(e => e.RipRtsLength)
                    .HasColumnName("rip_rts_length")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.RipRtsType).HasColumnName("rip_rts_type");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockAllocationId).HasColumnName("stock_allocation_id");

                entity.Property(e => e.UnprocessedComments)
                    .HasColumnName("unprocessed_comments")
                    .HasColumnType("ntext");

                entity.Property(e => e.UnprocessedCuts).HasColumnName("unprocessed_cuts");

                entity.Property(e => e.UnprocessedPieces).HasColumnName("unprocessed_pieces");

                entity.Property(e => e.UnprocessedQuantity)
                    .HasColumnName("unprocessed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.UnprocessedWeight)
                    .HasColumnName("unprocessed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessGroupProcessingTimes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessGroupProcessingTimes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ComponentReference)
                    .HasColumnName("component_reference")
                    .HasMaxLength(16);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Passes).HasColumnName("passes");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.RunTime)
                    .HasColumnName("run_time")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.RunTimeUnitId).HasColumnName("run_time_unit_id");

                entity.Property(e => e.SetupTime)
                    .HasColumnName("setup_time")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SetupTimeUnitId).HasColumnName("setup_time_unit_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightThroughput)
                    .HasColumnName("weight_throughput")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<ProcessGroupStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessGroupStatusCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessGroups>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessGroups", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProcessGroups_COID");

                entity.HasIndex(e => new { e.ProductionScheduleItemId, e.Coid })
                    .HasName("IDX_ProcessGroups_ProductionScheduleItemID_COID");

                entity.HasIndex(e => new { e.Id, e.Number, e.ProcessNotes, e.WorkCentreId, e.CompletedDate, e.Coid })
                    .HasName("IDX_ProcessGroups_CompletedDate_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocatedCoilPieces).HasColumnName("allocated_coil_pieces");

                entity.Property(e => e.AutoCompletable).HasColumnName("auto_completable");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.BulkConsumption).HasColumnName("bulk_consumption");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CoilInsideDiameter)
                    .HasColumnName("coil_inside_diameter")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsumedDim1)
                    .HasColumnName("consumed_dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim1NegativeTolerance)
                    .HasColumnName("consumed_dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim1PositiveTolerance)
                    .HasColumnName("consumed_dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim2)
                    .HasColumnName("consumed_dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim2NegativeTolerance)
                    .HasColumnName("consumed_dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim2PositiveTolerance)
                    .HasColumnName("consumed_dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim3)
                    .HasColumnName("consumed_dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim3NegativeTolerance)
                    .HasColumnName("consumed_dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim3PositiveTolerance)
                    .HasColumnName("consumed_dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim4)
                    .HasColumnName("consumed_dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim4NegativeTolerance)
                    .HasColumnName("consumed_dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim4PositiveTolerance)
                    .HasColumnName("consumed_dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim5)
                    .HasColumnName("consumed_dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim5NegativeTolerance)
                    .HasColumnName("consumed_dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim5PositiveTolerance)
                    .HasColumnName("consumed_dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedProductId).HasColumnName("consumed_product_id");

                entity.Property(e => e.ConsumedSpecification1)
                    .HasColumnName("consumed_specification1")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification10)
                    .HasColumnName("consumed_specification10")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification2)
                    .HasColumnName("consumed_specification2")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification3)
                    .HasColumnName("consumed_specification3")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification4)
                    .HasColumnName("consumed_specification4")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification5)
                    .HasColumnName("consumed_specification5")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification6)
                    .HasColumnName("consumed_specification6")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification7)
                    .HasColumnName("consumed_specification7")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification8)
                    .HasColumnName("consumed_specification8")
                    .HasMaxLength(30);

                entity.Property(e => e.ConsumedSpecification9)
                    .HasColumnName("consumed_specification9")
                    .HasMaxLength(30);

                entity.Property(e => e.CostOnProduced).HasColumnName("cost_on_produced");

                entity.Property(e => e.CostingTotalsId).HasColumnName("costing_totals_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DateStarted)
                    .HasColumnName("date_started")
                    .HasColumnType("date");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Finalised).HasColumnName("finalised");

                entity.Property(e => e.FlatRolledOutworkCost)
                    .HasColumnName("flat_rolled_outwork_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FlatRolledOutworkCostUnitId).HasColumnName("flat_rolled_outwork_cost_unit_id");

                entity.Property(e => e.FlatRolledOutworkProductId).HasColumnName("flat_rolled_outwork_product_id");

                entity.Property(e => e.FlatRolledOutworkSupplierId).HasColumnName("flat_rolled_outwork_supplier_id");

                entity.Property(e => e.FlatRolledOutworkValue)
                    .HasColumnName("flat_rolled_outwork_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.IncludeConsumables).HasColumnName("include_consumables");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonProduction).HasColumnName("non_production");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OutsideProcess).HasColumnName("outside_process");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.ProcessNotes)
                    .HasColumnName("process_notes")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductionFactor).HasColumnName("production_factor");

                entity.Property(e => e.ProductionPlannerId).HasColumnName("production_planner_id");

                entity.Property(e => e.ProductionScheduleItemId).HasColumnName("production_schedule_item_id");

                entity.Property(e => e.ProductionState)
                    .HasColumnName("production_state")
                    .HasMaxLength(1);

                entity.Property(e => e.Reprinted).HasColumnName("reprinted");

                entity.Property(e => e.RequestSalesHeaderId).HasColumnName("request_sales_header_id");

                entity.Property(e => e.ScrapPercentage)
                    .HasColumnName("scrap_percentage")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.State).HasColumnName("state");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TimeStarted)
                    .HasColumnName("time_started")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TransportNoteId).HasColumnName("transport_note_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<ProcessGroupsExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProcessGroupsExt", "QNG");

                entity.HasIndex(e => new { e.Coid, e.Id, e.BranchCode, e.Number, e.ProcessGroupReference, e.State, e.ProcessGroupStateDescription, e.ProcessGroupStatusCode, e.ProcessGroupStatusDescription, e.ProductionScheduleDate, e.ProductionScheduleShift, e.WorkCentreId, e.WorkCentreCode, e.WorkCentreDescription, e.RecoveryType, e.CreatedBy, e.ModifiedBy, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_ProcessGroupsExt");

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(6);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.ProcessGroupReference).HasMaxLength(255);

                entity.Property(e => e.ProcessGroupStateDescription)
                    .HasColumnName("process_group_state_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessGroupStatusCode)
                    .HasColumnName("process_group_status_code")
                    .HasMaxLength(6);

                entity.Property(e => e.ProcessGroupStatusDescription)
                    .HasColumnName("process_group_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductionScheduleDate)
                    .HasColumnName("production_schedule_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductionScheduleShift).HasColumnName("production_schedule_shift");

                entity.Property(e => e.RecoveryType).HasMaxLength(20);

                entity.Property(e => e.State).HasColumnName("state");

                entity.Property(e => e.WorkCentreCode)
                    .HasColumnName("work_centre_code")
                    .HasMaxLength(16);

                entity.Property(e => e.WorkCentreDescription)
                    .HasColumnName("work_centre_description")
                    .HasMaxLength(255);

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<ProcessPlanProductSpecifications>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessPlanProductSpecifications", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProcessPlanProductSpecifications_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DimensionsId).HasColumnName("dimensions_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OutputStepId).HasColumnName("output_step_id");

                entity.Property(e => e.ProcessPlanId).HasColumnName("process_plan_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessPlans>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessPlans", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_ProcessPlans_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.OutputProductId).HasColumnName("output_product_id");

                entity.Property(e => e.RequiredProductId).HasColumnName("required_product_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProcessRequests>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProcessRequests", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProcessRequests_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocatedCoilPieces).HasColumnName("allocated_coil_pieces");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ConsumedDim1)
                    .HasColumnName("consumed_dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim2)
                    .HasColumnName("consumed_dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim3)
                    .HasColumnName("consumed_dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim4)
                    .HasColumnName("consumed_dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedDim5)
                    .HasColumnName("consumed_dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedProductId).HasColumnName("consumed_product_id");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.ProcessAllocationId).HasColumnName("process_allocation_id");

                entity.Property(e => e.ProcessNotes).HasColumnName("process_notes");

                entity.Property(e => e.ProcessPlanId).HasColumnName("process_plan_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Processes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Processes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualTimesRequired).HasColumnName("actual_times_required");

                entity.Property(e => e.ApplyKerfDimension1).HasColumnName("apply_kerf_dimension1");

                entity.Property(e => e.ApplyKerfDimension2).HasColumnName("apply_kerf_dimension2");

                entity.Property(e => e.ApplyKerfDimension3).HasColumnName("apply_kerf_dimension3");

                entity.Property(e => e.ApplyKerfDimension4).HasColumnName("apply_kerf_dimension4");

                entity.Property(e => e.ApplyKerfDimension5).HasColumnName("apply_kerf_dimension5");

                entity.Property(e => e.AutoCompleteStepAllowed).HasColumnName("auto_complete_step_allowed");

                entity.Property(e => e.BottomEdgeTrim)
                    .HasColumnName("bottom_edge_trim")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.BulkConsumption).HasColumnName("bulk_consumption");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CopyAdviceNoteReference).HasColumnName("copy_advice_note_reference");

                entity.Property(e => e.CopyAllSpecifications).HasColumnName("copy_all_specifications");

                entity.Property(e => e.CopyConditions).HasColumnName("copy_conditions");

                entity.Property(e => e.CopyIdentifyingMark).HasColumnName("copy_identifying_mark");

                entity.Property(e => e.CopyLinkedDocuments).HasColumnName("copy_linked_documents");

                entity.Property(e => e.CopyMechanicalSpecifications).HasColumnName("copy_mechanical_specifications");

                entity.Property(e => e.CopyNotes).HasColumnName("copy_notes");

                entity.Property(e => e.CopyOtherNumber).HasColumnName("copy_other_number");

                entity.Property(e => e.CopyPackingReference).HasColumnName("copy_packing_reference");

                entity.Property(e => e.CopyPackingType).HasColumnName("copy_packing_type");

                entity.Property(e => e.CopyPackingWeight).HasColumnName("copy_packing_weight");

                entity.Property(e => e.CopyPiecesPerPack).HasColumnName("copy_pieces_per_pack");

                entity.Property(e => e.CopyProductionItem).HasColumnName("copy_production_item");

                entity.Property(e => e.CopyRejectionDetails).HasColumnName("copy_rejection_details");

                entity.Property(e => e.CopySupplierReference).HasColumnName("copy_supplier_reference");

                entity.Property(e => e.CopyTestCertReference).HasColumnName("copy_test_cert_reference");

                entity.Property(e => e.CopyVessel)
                    .HasColumnName("copy_vessel")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultLeadTime)
                    .HasColumnName("default_lead_time")
                    .HasColumnType("numeric(10, 2)");

                entity.Property(e => e.DefaultLeadTimeUnitId).HasColumnName("default_lead_time_unit_id");

                entity.Property(e => e.DefaultWorkCentreFromSchedule)
                    .HasColumnName("default_work_centre_from_schedule")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DefaultWorkCentreId).HasColumnName("default_work_centre_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EstimatedRunMinutesPerQuantity).HasColumnName("estimated_run_minutes_per_quantity");

                entity.Property(e => e.EstimatedRunMinutesPerQuantityUnitId).HasColumnName("estimated_run_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantity).HasColumnName("estimated_setup_minutes_per_quantity");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantityUnitId).HasColumnName("estimated_setup_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedTimesRequired).HasColumnName("estimated_times_required");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FlatRolledAllocationsFixed)
                    .HasColumnName("flat_rolled_allocations_fixed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlatRolledCostOnProduced).HasColumnName("flat_rolled_cost_on_produced");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonProductionStep).HasColumnName("non_production_step");

                entity.Property(e => e.OperatorCostRate)
                    .HasColumnName("operator_cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OperatorCostUnitId).HasColumnName("operator_cost_unit_id");

                entity.Property(e => e.OutsideProcessing).HasColumnName("outside_processing");

                entity.Property(e => e.OutworkProductId).HasColumnName("outwork_product_id");

                entity.Property(e => e.OverrideStockSpecifications).HasColumnName("override_stock_specifications");

                entity.Property(e => e.ProcessType)
                    .HasColumnName("process_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ProductionFactor).HasColumnName("production_factor");

                entity.Property(e => e.ProductionWipDefaultingRule).HasColumnName("production_wip_defaulting_rule");

                entity.Property(e => e.RapidEntryAllowed).HasColumnName("rapid_entry_allowed");

                entity.Property(e => e.RecordPackedWeight).HasColumnName("record_packed_weight");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.ScrapPercentage)
                    .HasColumnName("scrap_percentage")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.StandardCost)
                    .HasColumnName("standard_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StandardCostUnitId).HasColumnName("standard_cost_unit_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TimeCapacity).HasColumnName("time_capacity");

                entity.Property(e => e.TopEdgeTrim)
                    .HasColumnName("top_edge_trim")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TransportStep)
                    .HasColumnName("transport_step")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightCapacity)
                    .HasColumnName("weight_capacity")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.WeightCapacityUnitId).HasColumnName("weight_capacity_unit_id");
            });

            modelBuilder.Entity<ProductBalances>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductBalances", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductBalances_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AveragingPieces).HasColumnName("averaging_pieces");

                entity.Property(e => e.AveragingQuantity)
                    .HasColumnName("averaging_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AveragingValue)
                    .HasColumnName("averaging_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.AveragingWeight)
                    .HasColumnName("averaging_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IncomingPieces).HasColumnName("incoming_pieces");

                entity.Property(e => e.IncomingQuantity)
                    .HasColumnName("incoming_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.IncomingTransferAllocatedPieces)
                    .HasColumnName("incoming_transfer_allocated_pieces")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingTransferAllocatedQuantity)
                    .HasColumnName("incoming_transfer_allocated_quantity")
                    .HasColumnType("numeric(12, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingTransferAllocatedWeight)
                    .HasColumnName("incoming_transfer_allocated_weight")
                    .HasColumnType("numeric(11, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingTransferPieces)
                    .HasColumnName("incoming_transfer_pieces")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingTransferQuantity)
                    .HasColumnName("incoming_transfer_quantity")
                    .HasColumnType("numeric(12, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingTransferWeight)
                    .HasColumnName("incoming_transfer_weight")
                    .HasColumnType("numeric(11, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingValue)
                    .HasColumnName("incoming_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.IncomingWeight)
                    .HasColumnName("incoming_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.LastAverageCost)
                    .HasColumnName("last_average_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalValue)
                    .HasColumnName("physical_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionAllocatedPieces).HasColumnName("production_allocated_pieces");

                entity.Property(e => e.ProductionAllocatedQuantity)
                    .HasColumnName("production_allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ProductionAllocatedWeight)
                    .HasColumnName("production_allocated_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.ProductionDueAllocatedPieces).HasColumnName("production_due_allocated_pieces");

                entity.Property(e => e.ProductionDueAllocatedQuantity)
                    .HasColumnName("production_due_allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ProductionDueAllocatedWeight)
                    .HasColumnName("production_due_allocated_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.ProductionDuePieces).HasColumnName("production_due_pieces");

                entity.Property(e => e.ProductionDueQuantity)
                    .HasColumnName("production_due_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ProductionDueWeight)
                    .HasColumnName("production_due_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.QuarantinePieces).HasColumnName("quarantine_pieces");

                entity.Property(e => e.QuarantineQuantity)
                    .HasColumnName("quarantine_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.QuarantineWeight)
                    .HasColumnName("quarantine_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.ReservedPieces).HasColumnName("reserved_pieces");

                entity.Property(e => e.ReservedQuantity)
                    .HasColumnName("reserved_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReservedWeight)
                    .HasColumnName("reserved_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.SalesAllocatedPieces).HasColumnName("sales_allocated_pieces");

                entity.Property(e => e.SalesAllocatedQuantity)
                    .HasColumnName("sales_allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesAllocatedWeight)
                    .HasColumnName("sales_allocated_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.SalesOrderPieces).HasColumnName("sales_order_pieces");

                entity.Property(e => e.SalesOrderQuantity)
                    .HasColumnName("sales_order_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesOrderWeight)
                    .HasColumnName("sales_order_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.SalesReservedPieces).HasColumnName("sales_reserved_pieces");

                entity.Property(e => e.SalesReservedQuantity)
                    .HasColumnName("sales_reserved_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesReservedWeight)
                    .HasColumnName("sales_reserved_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockUnavailablePieces).HasColumnName("stock_unavailable_pieces");

                entity.Property(e => e.StockUnavailableQuantity)
                    .HasColumnName("stock_unavailable_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.StockUnavailableWeight)
                    .HasColumnName("stock_unavailable_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.TransientAllocPieces).HasColumnName("transient_alloc_pieces");

                entity.Property(e => e.TransientAllocQuantity)
                    .HasColumnName("transient_alloc_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransientAllocWeight)
                    .HasColumnName("transient_alloc_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.TransientPieces).HasColumnName("transient_pieces");

                entity.Property(e => e.TransientQuantity)
                    .HasColumnName("transient_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransientWeight)
                    .HasColumnName("transient_weight")
                    .HasColumnType("numeric(11, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductCategories>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductCategories", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductCategories_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Analysis1Id).HasColumnName("analysis1_id");

                entity.Property(e => e.Analysis2Id).HasColumnName("analysis2_id");

                entity.Property(e => e.AutoAllocate).HasColumnName("auto_allocate");

                entity.Property(e => e.AverageCost).HasColumnName("average_cost");

                entity.Property(e => e.Base)
                    .HasColumnName("base")
                    .HasMaxLength(8);

                entity.Property(e => e.BuyUnitId).HasColumnName("buy_unit_id");

                entity.Property(e => e.BuyingQuantityUnitId).HasColumnName("buying_quantity_unit_id");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(16);

                entity.Property(e => e.CategoryLevelTaxes).HasColumnName("category_level_taxes");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChargeBasis)
                    .HasColumnName("charge_basis")
                    .HasMaxLength(1);

                entity.Property(e => e.CostCostCentreId).HasColumnName("cost_cost_centre_id");

                entity.Property(e => e.CostNominalId).HasColumnName("cost_nominal_id");

                entity.Property(e => e.CostUnitId).HasColumnName("cost_unit_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultDimensionDescriptionFormat1)
                    .HasColumnName("default_dimension_description_format1")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultDimensionDescriptionFormat2)
                    .HasColumnName("default_dimension_description_format2")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultDimensionDescriptionFormat3)
                    .HasColumnName("default_dimension_description_format3")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultDimensionDescriptionFormat4)
                    .HasColumnName("default_dimension_description_format4")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultDimensionDescriptionFormat5)
                    .HasColumnName("default_dimension_description_format5")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultQuantityDisplayFormat)
                    .HasColumnName("default_quantity_display_format")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.DefaultStockStatusId).HasColumnName("default_stock_status_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(40);

                entity.Property(e => e.DespatchAllocationVariance)
                    .HasColumnName("despatch_allocation_variance")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Dim1Decimals).HasColumnName("dim1_decimals");

                entity.Property(e => e.Dim1GrainFlow).HasColumnName("dim1_grain_flow");

                entity.Property(e => e.Dim1Kerf)
                    .HasColumnName("dim1_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim1Print).HasColumnName("dim1_print");

                entity.Property(e => e.Dim1UseDimName).HasColumnName("dim1_use_dim_name");

                entity.Property(e => e.Dim1UseInDescription).HasColumnName("dim1_use_in_description");

                entity.Property(e => e.Dim2Decimals).HasColumnName("dim2_decimals");

                entity.Property(e => e.Dim2GrainFlow).HasColumnName("dim2_grain_flow");

                entity.Property(e => e.Dim2Kerf)
                    .HasColumnName("dim2_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim2Print).HasColumnName("dim2_print");

                entity.Property(e => e.Dim2UseDimName).HasColumnName("dim2_use_dim_name");

                entity.Property(e => e.Dim2UseInDescription).HasColumnName("dim2_use_in_description");

                entity.Property(e => e.Dim3Decimals).HasColumnName("dim3_decimals");

                entity.Property(e => e.Dim3GrainFlow).HasColumnName("dim3_grain_flow");

                entity.Property(e => e.Dim3Kerf)
                    .HasColumnName("dim3_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim3Print).HasColumnName("dim3_print");

                entity.Property(e => e.Dim3UseDimName).HasColumnName("dim3_use_dim_name");

                entity.Property(e => e.Dim3UseInDescription).HasColumnName("dim3_use_in_description");

                entity.Property(e => e.Dim4Decimals).HasColumnName("dim4_decimals");

                entity.Property(e => e.Dim4GrainFlow).HasColumnName("dim4_grain_flow");

                entity.Property(e => e.Dim4Kerf)
                    .HasColumnName("dim4_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim4Print).HasColumnName("dim4_print");

                entity.Property(e => e.Dim4UseDimName).HasColumnName("dim4_use_dim_name");

                entity.Property(e => e.Dim4UseInDescription).HasColumnName("dim4_use_in_description");

                entity.Property(e => e.Dim5Decimals).HasColumnName("dim5_decimals");

                entity.Property(e => e.Dim5GrainFlow).HasColumnName("dim5_grain_flow");

                entity.Property(e => e.Dim5Kerf)
                    .HasColumnName("dim5_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(7, 4)");

                entity.Property(e => e.Dim5Print).HasColumnName("dim5_print");

                entity.Property(e => e.Dim5UseDimName).HasColumnName("dim5_use_dim_name");

                entity.Property(e => e.Dim5UseInDescription).HasColumnName("dim5_use_in_description");

                entity.Property(e => e.DynamicDensity).HasColumnName("dynamic_density");

                entity.Property(e => e.EnquiryCostShownId).HasColumnName("enquiry_cost_shown_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FlagStockItemsWithNotes).HasColumnName("flag_stock_items_with_notes");

                entity.Property(e => e.Form)
                    .HasColumnName("form")
                    .HasMaxLength(8);

                entity.Property(e => e.GoodsInwardsQuantityEntryId).HasColumnName("goods_inwards_quantity_entry_id");

                entity.Property(e => e.GuideCostUpliftPercentage)
                    .HasColumnName("guide_cost_uplift_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.InvoiceWeightUpdatesItemBalance).HasColumnName("invoice_weight_updates_item_balance");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.MandatorySpecification1).HasColumnName("mandatory_specification1");

                entity.Property(e => e.MandatorySpecification10).HasColumnName("mandatory_specification10");

                entity.Property(e => e.MandatorySpecification2).HasColumnName("mandatory_specification2");

                entity.Property(e => e.MandatorySpecification3).HasColumnName("mandatory_specification3");

                entity.Property(e => e.MandatorySpecification4).HasColumnName("mandatory_specification4");

                entity.Property(e => e.MandatorySpecification5).HasColumnName("mandatory_specification5");

                entity.Property(e => e.MandatorySpecification6).HasColumnName("mandatory_specification6");

                entity.Property(e => e.MandatorySpecification7).HasColumnName("mandatory_specification7");

                entity.Property(e => e.MandatorySpecification8).HasColumnName("mandatory_specification8");

                entity.Property(e => e.MandatorySpecification9).HasColumnName("mandatory_specification9");

                entity.Property(e => e.ManualGuideCost).HasColumnName("manual_guide_cost");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MinimumMargin)
                    .HasColumnName("minimum_margin")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonTraceable).HasColumnName("non_traceable");

                entity.Property(e => e.NonTraceableFlagOnSubGroups)
                    .HasColumnName("non_traceable_flag_on_sub_groups")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderQuantityEntryId).HasColumnName("order_quantity_entry_id");

                entity.Property(e => e.PiecesLabel)
                    .HasColumnName("pieces_label")
                    .HasMaxLength(16);

                entity.Property(e => e.PiecesPluralLabel)
                    .HasColumnName("pieces_plural_label")
                    .HasMaxLength(16);

                entity.Property(e => e.PriceDecimals).HasColumnName("price_decimals");

                entity.Property(e => e.PriceUnitId).HasColumnName("price_unit_id");

                entity.Property(e => e.PrintSpecification1).HasColumnName("print_specification1");

                entity.Property(e => e.PrintSpecification10).HasColumnName("print_specification10");

                entity.Property(e => e.PrintSpecification2).HasColumnName("print_specification2");

                entity.Property(e => e.PrintSpecification3).HasColumnName("print_specification3");

                entity.Property(e => e.PrintSpecification4).HasColumnName("print_specification4");

                entity.Property(e => e.PrintSpecification5).HasColumnName("print_specification5");

                entity.Property(e => e.PrintSpecification6).HasColumnName("print_specification6");

                entity.Property(e => e.PrintSpecification7).HasColumnName("print_specification7");

                entity.Property(e => e.PrintSpecification8).HasColumnName("print_specification8");

                entity.Property(e => e.PrintSpecification9).HasColumnName("print_specification9");

                entity.Property(e => e.ProductControlId).HasColumnName("product_control_id");

                entity.Property(e => e.ProductionMixedCastsAllowed).HasColumnName("production_mixed_casts_allowed");

                entity.Property(e => e.ProductionQuantityEntryId).HasColumnName("production_quantity_entry_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.QuantityEntryId).HasColumnName("quantity_entry_id");

                entity.Property(e => e.RequireCertification).HasColumnName("require_certification");

                entity.Property(e => e.SalesCostCentreId).HasColumnName("sales_cost_centre_id");

                entity.Property(e => e.SalesCostingTypeId).HasColumnName("sales_costing_type_id");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesNominalId).HasColumnName("sales_nominal_id");

                entity.Property(e => e.SalesPriceUnitId).HasColumnName("sales_price_unit_id");

                entity.Property(e => e.SalesQuantityUnitId).HasColumnName("sales_quantity_unit_id");

                entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");

                entity.Property(e => e.SourceCategoryId).HasColumnName("source_category_id");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.SpecificationCheck).HasColumnName("specification_check");

                entity.Property(e => e.SpecificationTemplateId).HasColumnName("specification_template_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockCostCentreId).HasColumnName("stock_cost_centre_id");

                entity.Property(e => e.StockNominalId).HasColumnName("stock_nominal_id");

                entity.Property(e => e.StockTypeId).HasColumnName("stock_type_id");

                entity.Property(e => e.ValidateDynamicDensity).HasColumnName("validate_dynamic_density");

                entity.Property(e => e.ValidateSpecification1).HasColumnName("validate_specification1");

                entity.Property(e => e.ValidateSpecification10).HasColumnName("validate_specification10");

                entity.Property(e => e.ValidateSpecification2).HasColumnName("validate_specification2");

                entity.Property(e => e.ValidateSpecification3).HasColumnName("validate_specification3");

                entity.Property(e => e.ValidateSpecification4).HasColumnName("validate_specification4");

                entity.Property(e => e.ValidateSpecification5).HasColumnName("validate_specification5");

                entity.Property(e => e.ValidateSpecification6).HasColumnName("validate_specification6");

                entity.Property(e => e.ValidateSpecification7).HasColumnName("validate_specification7");

                entity.Property(e => e.ValidateSpecification8).HasColumnName("validate_specification8");

                entity.Property(e => e.ValidateSpecification9).HasColumnName("validate_specification9");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.VolumeDensity)
                    .HasColumnName("volume_density")
                    .HasColumnType("numeric(16, 6)");
            });

            modelBuilder.Entity<ProductControls>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductControls", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Area2weightCalc)
                    .HasColumnName("area2weight_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.ControlPieces).HasColumnName("control_pieces");

                entity.Property(e => e.ControlQuantity)
                    .HasColumnName("control_quantity")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DensityCalc)
                    .IsRequired()
                    .HasColumnName("density_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.DensityFactor)
                    .HasColumnName("density_factor")
                    .HasColumnType("numeric(12, 6)");

                entity.Property(e => e.DensityLabel)
                    .HasColumnName("density_label")
                    .HasMaxLength(16);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.DiameterCalc)
                    .HasColumnName("diameter_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Dim1Locked).HasColumnName("dim1_locked");

                entity.Property(e => e.Dim1ToleranceUnitsId).HasColumnName("dim1_tolerance_units_id");

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim1UnitsId).HasColumnName("dim1_units_id");

                entity.Property(e => e.Dim2Locked).HasColumnName("dim2_locked");

                entity.Property(e => e.Dim2ToleranceUnitsId).HasColumnName("dim2_tolerance_units_id");

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim2UnitsId).HasColumnName("dim2_units_id");

                entity.Property(e => e.Dim3Locked).HasColumnName("dim3_locked");

                entity.Property(e => e.Dim3ToleranceUnitsId).HasColumnName("dim3_tolerance_units_id");

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.Dim3UnitsId).HasColumnName("dim3_units_id");

                entity.Property(e => e.Dim4Locked).HasColumnName("dim4_locked");

                entity.Property(e => e.Dim4ToleranceUnitsId).HasColumnName("dim4_tolerance_units_id");

                entity.Property(e => e.Dim4TypeId).HasColumnName("dim4_type_id");

                entity.Property(e => e.Dim4UnitsId).HasColumnName("dim4_units_id");

                entity.Property(e => e.Dim5Locked).HasColumnName("dim5_locked");

                entity.Property(e => e.Dim5ToleranceUnitsId).HasColumnName("dim5_tolerance_units_id");

                entity.Property(e => e.Dim5TypeId).HasColumnName("dim5_type_id");

                entity.Property(e => e.Dim5UnitsId).HasColumnName("dim5_units_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FirstOptimisableDimension).HasColumnName("first_optimisable_dimension");

                entity.Property(e => e.HeightCalc)
                    .HasColumnName("height_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Length2weightCalc)
                    .HasColumnName("length2weight_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.LengthCalc)
                    .HasColumnName("length_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OutsideDiameterUnitId).HasColumnName("outside_diameter_unit_id");

                entity.Property(e => e.Pcs2qtyCalc)
                    .HasColumnName("pcs2qty_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcs2wgtCalc)
                    .HasColumnName("pcs2wgt_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.PiecesUnitId).HasColumnName("pieces_unit_id");

                entity.Property(e => e.Qty2pcsCalc)
                    .HasColumnName("qty2pcs_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Qty2wgtCalc)
                    .HasColumnName("qty2wgt_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.QuantityDecimals).HasColumnName("quantity_decimals");

                entity.Property(e => e.QuantityUnitId).HasColumnName("quantity_unit_id");

                entity.Property(e => e.SecondOptimisableDimension).HasColumnName("second_optimisable_dimension");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TotalAreaCalc)
                    .HasColumnName("total_area_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalAreaUnitId).HasColumnName("total_area_unit_id");

                entity.Property(e => e.TotalLengthCalc)
                    .HasColumnName("total_length_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalLengthUnitId).HasColumnName("total_length_unit_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.VolumeCalc)
                    .HasColumnName("volume_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.WeightDecimals).HasColumnName("weight_decimals");

                entity.Property(e => e.WeightUnitId).HasColumnName("weight_unit_id");

                entity.Property(e => e.WeightWidthCalc)
                    .HasColumnName("weight_width_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Wgt2pcsCalc)
                    .HasColumnName("wgt2pcs_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.Wgt2qtyCalc)
                    .HasColumnName("wgt2qty_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.WidthCalc)
                    .HasColumnName("width_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.ZeroStockTrigger)
                    .HasColumnName("zero_stock_trigger")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ProductLevelAllocation>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductLevelAllocation", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductLevelAllocation_COID");

                entity.HasIndex(e => new { e.ProcessGroupId, e.Coid })
                    .HasName("IDX_ProductionLevelAllocation_ProcessGroupID_COID");

                entity.HasIndex(e => new { e.AllocationType, e.ProcessGroupId, e.Coid, e.ProcessRequestId })
                    .HasName("IDX_ProductionLevelAllocation_AllocationType_ProcessGroupID_COID_ProcessRequestID");

                entity.HasIndex(e => new { e.Coid, e.Id, e.SalesItemId, e.ProcessRequestId, e.ProcessGroupId, e.AllocationType })
                    .HasName("IDX_ProductionLevelAllocation_AllocationType_includes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocationType)
                    .HasColumnName("allocation_type")
                    .HasMaxLength(1);

                entity.Property(e => e.CacheOfBranchIdForSearching).HasColumnName("cache_of_branch_id_for_searching");

                entity.Property(e => e.CacheOfDim1ForSearching)
                    .HasColumnName("cache_of_dim1_for_searching")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CacheOfDim2ForSearching)
                    .HasColumnName("cache_of_dim2_for_searching")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CacheOfDim3ForSearching)
                    .HasColumnName("cache_of_dim3_for_searching")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CacheOfDim4ForSearching)
                    .HasColumnName("cache_of_dim4_for_searching")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CacheOfDim5ForSearching)
                    .HasColumnName("cache_of_dim5_for_searching")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CacheOfProductIdForSearching).HasColumnName("cache_of_product_id_for_searching");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProcessRequestId).HasColumnName("process_request_id");

                entity.Property(e => e.ReadyStockAllocated).HasColumnName("ready_stock_allocated");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockAllocated).HasColumnName("stock_allocated");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductSubGroups>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductSubGroups", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductSubGroups_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('CAN')");

                entity.Property(e => e.AlternateSupplierId).HasColumnName("alternate_supplier_id");

                entity.Property(e => e.AlternateSupplierLead).HasColumnName("alternate_supplier_lead");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(30);

                entity.Property(e => e.CommodityId).HasColumnName("commodity_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultLocation)
                    .HasColumnName("default_location")
                    .HasMaxLength(16);

                entity.Property(e => e.Dimension1)
                    .HasColumnName("dimension1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension1Max)
                    .HasColumnName("dimension1_max")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension1Min)
                    .HasColumnName("dimension1_min")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension2)
                    .HasColumnName("dimension2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension2Max)
                    .HasColumnName("dimension2_max")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension2Min)
                    .HasColumnName("dimension2_min")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension3)
                    .HasColumnName("dimension3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension3Max)
                    .HasColumnName("dimension3_max")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension3Min)
                    .HasColumnName("dimension3_min")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension4)
                    .HasColumnName("dimension4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension4Max)
                    .HasColumnName("dimension4_max")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension4Min)
                    .HasColumnName("dimension4_min")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension5)
                    .HasColumnName("dimension5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension5Max)
                    .HasColumnName("dimension5_max")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension5Min)
                    .HasColumnName("dimension5_min")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.GuideCost)
                    .HasColumnName("guide_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GuidePrice)
                    .HasColumnName("guide_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MainBuyingGroup)
                    .HasColumnName("main_buying_group")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MainSupplierId).HasColumnName("main_supplier_id");

                entity.Property(e => e.MainSupplierLead).HasColumnName("main_supplier_lead");

                entity.Property(e => e.MaxReorder)
                    .HasColumnName("max_reorder")
                    .HasColumnType("numeric(8, 3)");

                entity.Property(e => e.MaxReorderUnitId).HasColumnName("max_reorder_unit_id");

                entity.Property(e => e.MaxStock)
                    .HasColumnName("max_stock")
                    .HasColumnType("numeric(8, 3)");

                entity.Property(e => e.MaxStockUnitId).HasColumnName("max_stock_unit_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MinReorder)
                    .HasColumnName("min_reorder")
                    .HasColumnType("numeric(8, 3)");

                entity.Property(e => e.MinReorderUnitId).HasColumnName("min_reorder_unit_id");

                entity.Property(e => e.MinStock)
                    .HasColumnName("min_stock")
                    .HasColumnType("numeric(8, 3)");

                entity.Property(e => e.MinStockPeriod)
                    .HasColumnName("min_stock_period")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.MinStockPeriodUnitId).HasColumnName("min_stock_period_unit_id");

                entity.Property(e => e.MinStockUnitId).HasColumnName("min_stock_unit_id");

                entity.Property(e => e.MinimumPrice)
                    .HasColumnName("minimum_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.NonTraceable)
                    .HasColumnName("non_traceable")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionProductId).HasColumnName("production_product_id");

                entity.Property(e => e.PurchasingNotes).HasColumnName("purchasing_notes");

                entity.Property(e => e.SourceSubGroupId).HasColumnName("source_sub_group_id");

                entity.Property(e => e.StandardCost)
                    .HasColumnName("standard_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionAllocations>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionAllocations", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductionAllocations_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductionStepId).HasColumnName("production_step_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionCostingRules>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ProductionCostingRules", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ConsumableCostingType)
                    .HasColumnName("consumable_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ConsumableRollupType)
                    .HasColumnName("consumable_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MaterialCostingType)
                    .HasColumnName("material_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MaterialMarkupPercentage)
                    .HasColumnName("material_markup_percentage")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.MaterialMarkupType)
                    .HasColumnName("material_markup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MaterialRollupType)
                    .HasColumnName("material_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MaterialStandardCostProduct)
                    .HasColumnName("material_standard_cost_product")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MaterialStandardCostSource)
                    .HasColumnName("material_standard_cost_source")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCostingType)
                    .HasColumnName("miscellaneous_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MiscellaneousRollupType)
                    .HasColumnName("miscellaneous_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OutworkCostingType)
                    .HasColumnName("outwork_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.OutworkRollupType)
                    .HasColumnName("outwork_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ProductionCostingType)
                    .HasColumnName("production_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ProductionRollupType)
                    .HasColumnName("production_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ProductionStandardCostSource)
                    .HasColumnName("production_standard_cost_source")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ProductionType)
                    .HasColumnName("production_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockStatusId).HasColumnName("stock_status_id");

                entity.Property(e => e.SurchargeCostingType)
                    .HasColumnName("surcharge_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SurchargeRollupType)
                    .HasColumnName("surcharge_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TransportCostingType)
                    .HasColumnName("transport_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TransportRollupType)
                    .HasColumnName("transport_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TransportStepCostingType)
                    .HasColumnName("transport_step_costing_type")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'F')");

                entity.Property(e => e.TransportStepRollupType)
                    .HasColumnName("transport_step_rollup_type")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'T')");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionCostingTotals>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionCostingTotals", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_ProductionCostingTotals_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualRunTime).HasColumnName("actual_run_time");

                entity.Property(e => e.ActualSetupTime).HasColumnName("actual_setup_time");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ConsumablesPieces).HasColumnName("consumables_pieces");

                entity.Property(e => e.ConsumablesQuantity)
                    .HasColumnName("consumables_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumablesValue)
                    .HasColumnName("consumables_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ConsumablesWeight)
                    .HasColumnName("consumables_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedValue)
                    .HasColumnName("consumed_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EstimatedRunTime).HasColumnName("estimated_run_time");

                entity.Property(e => e.EstimatedSetupTime).HasColumnName("estimated_setup_time");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.LostPieces).HasColumnName("lost_pieces");

                entity.Property(e => e.LostQuantity)
                    .HasColumnName("lost_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.LostWeight)
                    .HasColumnName("lost_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousCostUnitId).HasColumnName("miscellaneous_cost_unit_id");

                entity.Property(e => e.MiscellaneousQuantity)
                    .HasColumnName("miscellaneous_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.MiscellaneousQuantityUnitId).HasColumnName("miscellaneous_quantity_unit_id");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OutworkValue)
                    .HasColumnName("outwork_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProducedPieces).HasColumnName("produced_pieces");

                entity.Property(e => e.ProducedQuantity)
                    .HasColumnName("produced_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ProducedValue)
                    .HasColumnName("produced_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProducedWeight)
                    .HasColumnName("produced_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.RejectedPieces).HasColumnName("rejected_pieces");

                entity.Property(e => e.RejectedQuantity)
                    .HasColumnName("rejected_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.RejectedValue)
                    .HasColumnName("rejected_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.RejectedWeight)
                    .HasColumnName("rejected_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.RunValue)
                    .HasColumnName("run_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ScrapPieces).HasColumnName("scrap_pieces");

                entity.Property(e => e.ScrapQuantity)
                    .HasColumnName("scrap_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ScrapValue)
                    .HasColumnName("scrap_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ScrapWeight)
                    .HasColumnName("scrap_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.SetupValue)
                    .HasColumnName("setup_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeCostUnitId).HasColumnName("surcharge_cost_unit_id");

                entity.Property(e => e.SurchargeQuantity)
                    .HasColumnName("surcharge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SurchargeQuantityUnitId).HasColumnName("surcharge_quantity_unit_id");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportCostUnitId).HasColumnName("transport_cost_unit_id");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportQuantityUnitId).HasColumnName("transport_quantity_unit_id");

                entity.Property(e => e.TransportStepValue)
                    .HasColumnName("transport_step_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.UnprocessedPieces).HasColumnName("unprocessed_pieces");

                entity.Property(e => e.UnprocessedQuantity)
                    .HasColumnName("unprocessed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.UnprocessedValue)
                    .HasColumnName("unprocessed_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.UnprocessedWeight)
                    .HasColumnName("unprocessed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionJobConsumption>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ProductionJobConsumption", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Consumable).HasColumnName("consumable");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProductionJobId).HasColumnName("production_job_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionJobPersonnel>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ProductionJobPersonnel", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PersonnelId).HasColumnName("personnel_id");

                entity.Property(e => e.ProductionJobId).HasColumnName("production_job_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionJobs>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ProductionJobs", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualRun).HasColumnName("actual_run");

                entity.Property(e => e.ActualSetup).HasColumnName("actual_setup");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.BulkConsumption).HasColumnName("bulk_consumption");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CompletedTime)
                    .HasColumnName("completed_time")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ConsumableWeight)
                    .HasColumnName("consumable_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ConsumablesPieces).HasColumnName("consumables_pieces");

                entity.Property(e => e.ConsumablesQuantity)
                    .HasColumnName("consumables_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumablesValue)
                    .HasColumnName("consumables_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ConsumablesWeight)
                    .HasColumnName("consumables_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedValue)
                    .HasColumnName("consumed_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CostOnProduced).HasColumnName("cost_on_produced");

                entity.Property(e => e.Costed).HasColumnName("costed");

                entity.Property(e => e.CostingTotalsId).HasColumnName("costing_totals_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.EstimatedRun).HasColumnName("estimated_run");

                entity.Property(e => e.EstimatedSetup).HasColumnName("estimated_setup");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Hirework).HasColumnName("hirework");

                entity.Property(e => e.IncludeConsumables).HasColumnName("include_consumables");

                entity.Property(e => e.LostPieces).HasColumnName("lost_pieces");

                entity.Property(e => e.LostQuantity)
                    .HasColumnName("lost_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.LostWeight)
                    .HasColumnName("lost_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousCostUnitId).HasColumnName("miscellaneous_cost_unit_id");

                entity.Property(e => e.MiscellaneousQuantity)
                    .HasColumnName("miscellaneous_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.MiscellaneousQuantityUnitId).HasColumnName("miscellaneous_quantity_unit_id");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.ProducedPieces).HasColumnName("produced_pieces");

                entity.Property(e => e.ProducedQuantity)
                    .HasColumnName("produced_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ProducedValue)
                    .HasColumnName("produced_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProducedWeight)
                    .HasColumnName("produced_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.RejectedPieces).HasColumnName("rejected_pieces");

                entity.Property(e => e.RejectedQuantity)
                    .HasColumnName("rejected_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.RejectedValue)
                    .HasColumnName("rejected_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.RejectedWeight)
                    .HasColumnName("rejected_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.RunValue)
                    .HasColumnName("run_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SalesJob)
                    .HasColumnName("sales_job")
                    .HasMaxLength(30);

                entity.Property(e => e.ScheduledDate)
                    .HasColumnName("scheduled_date")
                    .HasColumnType("date");

                entity.Property(e => e.ScheduledTime)
                    .HasColumnName("scheduled_time")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ScrapPieces).HasColumnName("scrap_pieces");

                entity.Property(e => e.ScrapQuantity)
                    .HasColumnName("scrap_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ScrapValue)
                    .HasColumnName("scrap_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ScrapWeight)
                    .HasColumnName("scrap_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.SetupValue)
                    .HasColumnName("setup_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StartedDate)
                    .HasColumnName("started_date")
                    .HasColumnType("date");

                entity.Property(e => e.StartedTime)
                    .HasColumnName("started_time")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeCostUnitId).HasColumnName("surcharge_cost_unit_id");

                entity.Property(e => e.SurchargeQuantity)
                    .HasColumnName("surcharge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SurchargeQuantityUnitId).HasColumnName("surcharge_quantity_unit_id");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransferJob).HasColumnName("transfer_job");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportCostUnitId).HasColumnName("transport_cost_unit_id");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportQuantityUnitId).HasColumnName("transport_quantity_unit_id");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<ProductionScheduleItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionScheduleItems", "iMetal");

                entity.HasIndex(e => new { e.ProductionScheduleId, e.Coid })
                    .HasName("IDX_ProductionScheduleItems_ProductionScheduleID_COID");

                entity.HasIndex(e => new { e.Id, e.ProductionScheduleId, e.Coid })
                    .HasName("IDX_ProductionScheduleItems_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousItemId).HasColumnName("miscellaneous_item_id");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProductionScheduleId).HasColumnName("production_schedule_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionSchedules>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionSchedules", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductionSchedules_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.ScheduleDate)
                    .HasColumnName("schedule_date")
                    .HasColumnType("date");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Shift).HasColumnName("shift");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TimeCapacity).HasColumnName("time_capacity");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightCapacity)
                    .HasColumnName("weight_capacity")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<ProductionStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ProductionStatusCodes", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(2);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionStepProductSpecifications>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionStepProductSpecifications", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductionStepProductSpecifications_COID");

                entity.HasIndex(e => new { e.Id, e.ProductId, e.SpecificationValue1, e.SpecificationValue2, e.SpecificationValue3, e.SpecificationValue4, e.SpecificationValue5, e.DimensionsId, e.Coid })
                    .HasName("IDX_ProductionStepProductSpecifications_dimensionid_COID_include");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DimensionsId).HasColumnName("dimensions_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionSteps>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("ProductionSteps", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_ProductionSteps_COID");

                entity.HasIndex(e => new { e.SalesItemId, e.Coid })
                    .HasName("IDX_ProductionSteps_SalesItemID_COID");

                entity.HasIndex(e => new { e.RequiredProductSpecificationId, e.OutworkPurchaseItemId, e.Coid })
                    .HasName("IDX_ProductionSteps_OutworkPurchaseItemID_COID");

                entity.HasIndex(e => new { e.PreviousStepId, e.NextStepId, e.ProcessGroupId, e.Coid })
                    .HasName("IDX_ProductionSteps_process_group_id_COID");

                entity.HasIndex(e => new { e.Id, e.Cdate, e.CuserId, e.Mdate, e.MuserId, e.BranchId, e.Number, e.ProductionAllocationId, e.ProcessGroupId, e.ConsumedPieces, e.ConsumedQuantity, e.ConsumedWeight, e.RequiredProductSpecificationId, e.DueDate, e.PreviousStepId, e.CompletionDate, e.CommitmentSequenceNumber, e.ReplacementStepId, e.StartDate, e.OutsideProcessing, e.ConsumedProductSpecificationId, e.OutworkPurchaseItemId, e.EstimatedSetupMinutesPerQuantity, e.EstimatedRunMinutesPerQuantity, e.EstimatedSetupMinutesPerQuantityUnitId, e.EstimatedRunMinutesPerQuantityUnitId, e.ProcessId, e.NextStepId, e.Coid })
                    .HasName("IDX_ProductionSteps_NextStepID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AutoCompleteStepAllowed).HasColumnName("auto_complete_step_allowed");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CommitmentSequenceNumber).HasColumnName("commitment_sequence_number");

                entity.Property(e => e.CompletionDate)
                    .HasColumnName("completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedProductSpecificationId).HasColumnName("consumed_product_specification_id");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EstimatedPacks).HasColumnName("estimated_packs");

                entity.Property(e => e.EstimatedRunMinutesPerQuantity).HasColumnName("estimated_run_minutes_per_quantity");

                entity.Property(e => e.EstimatedRunMinutesPerQuantityUnitId).HasColumnName("estimated_run_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantity).HasColumnName("estimated_setup_minutes_per_quantity");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantityUnitId).HasColumnName("estimated_setup_minutes_per_quantity_unit_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FromBranchId).HasColumnName("from_branch_id");

                entity.Property(e => e.FromWarehouseId).HasColumnName("from_warehouse_id");

                entity.Property(e => e.InsideDiameter)
                    .HasColumnName("inside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum)
                    .HasColumnName("inside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum)
                    .HasColumnName("inside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.LeadTime)
                    .HasColumnName("lead_time")
                    .HasColumnType("numeric(10, 2)");

                entity.Property(e => e.LeadTimeUnitId).HasColumnName("lead_time_unit_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NextStepId).HasColumnName("next_step_id");

                entity.Property(e => e.NonProductionStep).HasColumnName("non_production_step");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.NumberOfCuts).HasColumnName("number_of_cuts");

                entity.Property(e => e.OutsideDiameter)
                    .HasColumnName("outside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum)
                    .HasColumnName("outside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum)
                    .HasColumnName("outside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideProcessing).HasColumnName("outside_processing");

                entity.Property(e => e.OutworkCost)
                    .HasColumnName("outwork_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OutworkCostUnitId).HasColumnName("outwork_cost_unit_id");

                entity.Property(e => e.OutworkProductId).HasColumnName("outwork_product_id");

                entity.Property(e => e.OutworkPurchaseItemId).HasColumnName("outwork_purchase_item_id");

                entity.Property(e => e.OutworkSupplierId).HasColumnName("outwork_supplier_id");

                entity.Property(e => e.OutworkValue)
                    .HasColumnName("outwork_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PackCountMaximum).HasColumnName("pack_count_maximum");

                entity.Property(e => e.PackCountMinimum).HasColumnName("pack_count_minimum");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum)
                    .HasColumnName("pack_height_maximum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum)
                    .HasColumnName("pack_height_minimum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("pack_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum)
                    .HasColumnName("pack_weight_maximum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum)
                    .HasColumnName("pack_weight_minimum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PlaceHolder).HasColumnName("place_holder");

                entity.Property(e => e.PreviousStepId).HasColumnName("previous_step_id");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.ProcessNotes).HasColumnName("process_notes");

                entity.Property(e => e.ProcessingBranchId).HasColumnName("processing_branch_id");

                entity.Property(e => e.ProcessingWarehouseId).HasColumnName("processing_warehouse_id");

                entity.Property(e => e.ProductionAllocationId).HasColumnName("production_allocation_id");

                entity.Property(e => e.ProductionFactor).HasColumnName("production_factor");

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasMaxLength(30);

                entity.Property(e => e.ReplacementStepId).HasColumnName("replacement_step_id");

                entity.Property(e => e.RequiredProductSpecificationId).HasColumnName("required_product_specification_id");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.ScrapPercentage)
                    .HasColumnName("scrap_percentage")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.ToBranchId).HasColumnName("to_branch_id");

                entity.Property(e => e.ToWarehouseId).HasColumnName("to_warehouse_id");

                entity.Property(e => e.TotalYieldWeight)
                    .HasColumnName("total_yield_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TransportPieces).HasColumnName("transport_pieces");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportStep)
                    .HasColumnName("transport_step")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransportWeight)
                    .HasColumnName("transport_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductionStepsExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductionStepsExt", "QNG");

                entity.HasIndex(e => new { e.ProcessGroupId, e.SalesItemId, e.Number, e.Coid })
                    .HasName("IDX_ProductionStepsExt_SaleItemID_Number_COID");

                entity.HasIndex(e => new { e.Coid, e.Id, e.CreatedBy, e.ModifiedBy, e.BranchCode, e.Number, e.ProductionStepReference, e.ProcessGroupId, e.SalesItemId, e.NextStepId, e.PreviousStepId, e.ReplacementStepId, e.PreviousStepCompletionDate, e.NextStepDueDate, e.SequenceNumber, e.IsCurrentStep, e.IsCurrentScheduledStep, e.ProductionStepDaysAtStatus, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_ProductionStepsExt");

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(6);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCurrentScheduledStep).HasColumnName("is_current_scheduled_step");

                entity.Property(e => e.IsCurrentStep).HasColumnName("is_current_step");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NextStepDueDate)
                    .HasColumnName("next_step_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.NextStepId).HasColumnName("next_step_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.PreviousStepCompletionDate)
                    .HasColumnName("previous_step_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.PreviousStepId).HasColumnName("previous_step_id");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProductionStepReference).HasMaxLength(255);

                entity.Property(e => e.ReplacementStepId).HasColumnName("replacement_step_id");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.SequenceNumber).HasColumnType("decimal(9, 2)");
            });

            modelBuilder.Entity<ProductionStepsSequence>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid })
                    .HasName("PK_QNG_ProductionStepsSequence");

                entity.ToTable("ProductionStepsSequence", "QNG");

                entity.HasIndex(e => new { e.Coid, e.Sonumber, e.SoitemNumber })
                    .HasName("IDX_ProductionStepsSequence_COID_SONumber_SOItemNumber");

                entity.HasIndex(e => new { e.ProcessCode, e.ProcessGroupId, e.Coid })
                    .HasName("IDX_ProductionStepsSequence_ProcessGroupID_COID");

                entity.HasIndex(e => new { e.SalesItemInternalStatusId, e.ProductionScheduleItemId, e.Coid })
                    .HasName("PSS_SalesItemInternalStatusID_ProductionScheduleItemID_COID");

                entity.HasIndex(e => new { e.ProcessGroupNumber, e.SoitemNumber, e.Sonumber, e.Coid })
                    .HasName("IDX_ProductionStepsSequence_ProcessGroupNumber_SOItemNumber_SONumber_COID");

                entity.HasIndex(e => new { e.SalesItemId, e.SequenceNumber, e.OutworkPurchaseItemId, e.Coid })
                    .HasName("IDX_ProductionStepsSequence_OutworkPurchaseItemID_COID");

                entity.HasIndex(e => new { e.Id, e.LastStepId, e.Cdate, e.CuserId, e.CreatedBy, e.Mdate, e.MuserId, e.ModifiedBy, e.BranchId, e.BranchCode, e.Number, e.ProductionStepReference, e.ProductionAllocationId, e.ProcessGroupId, e.ProcessGroupNumber, e.ProcessGroupReference, e.ConsumedProductSpecificationId, e.ConsumedQuantity, e.ConsumedPieces, e.ConsumedWeight, e.ProducedWeight, e.ScrapWeight, e.LostWeight, e.RejectedWeight, e.RequiredProductSpecificationId, e.ProcessId, e.ProcessCode, e.ProcessDescription, e.PreviousStepId, e.NextStepId, e.ReplacementStepId, e.DueDate, e.StartDate, e.CompletionDate, e.OutworkPurchaseItemId, e.OutworkPoreferenceNumber, e.OutworkPobranch, e.OutworkPonumber, e.OutworkPoitemNumber, e.OutworkPosupplierName, e.OutworkPoduedate, e.EstimatedRunMinutesPerQuantity, e.EstimatedRunMinutesPerQuantityUnitId, e.EstimatedSetupMinutesPerQuantity, e.EstimatedSetupMinutesPerQuantityUnitId, e.ProductLevelAllocationId, e.AllocationType, e.StepLevel, e.SequenceNumber, e.SalesHeaderId, e.Sonumber, e.SoitemNumber, e.SalesItemStatusId, e.SalesItemStatusDescription, e.SalesItemInternalStatusId, e.SalesItemInternalStatusDescription, e.SalesHeaderTypeId, e.SalesHeaderTypeDescription, e.SalesItemDueDate, e.SalesItemCompletedDate, e.ProductionScheduleDate, e.ProductionScheduleShift, e.WorkCentreId, e.WorkCentreCode, e.WorkCentreDescription, e.PreviousStepCompletionDate, e.NextStepDueDate, e.ProcessGroupState, e.ProcessGroupStateDescription, e.ProcessGroupStatusCode, e.ProcessGroupStatusDescription, e.ProductionScheduleItemId, e.CostingTotalsId, e.EstimatedSetupTime, e.EstimatedRunTime, e.ActualSetupTime, e.ActualRunTime, e.SetupCost, e.SetupCostUnitId, e.SetupValue, e.RunCost, e.RunCostUnitId, e.RunValue, e.OutworkValue, e.RecoveryType, e.IsCurrentStep, e.IsCurrentScheduledStep, e.ProductionStepDaysAtStatus, e.EtlcreateDate, e.EtlupdateDate, e.Coid, e.SalesItemId })
                    .HasName("IDX_ProductionStepsSequence_COID_sales_item_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualRunTime).HasColumnName("actual_run_time");

                entity.Property(e => e.ActualSetupTime).HasColumnName("actual_setup_time");

                entity.Property(e => e.AllocationType)
                    .HasColumnName("allocation_type")
                    .HasMaxLength(1);

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompletionDate)
                    .HasColumnName("completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedProductSpecificationId).HasColumnName("consumed_product_specification_id");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CostingTotalsId).HasColumnName("costing_totals_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EstimatedRunMinutesPerQuantity).HasColumnName("estimated_run_minutes_per_quantity");

                entity.Property(e => e.EstimatedRunMinutesPerQuantityUnitId).HasColumnName("estimated_run_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedRunTime).HasColumnName("estimated_run_time");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantity).HasColumnName("estimated_setup_minutes_per_quantity");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantityUnitId).HasColumnName("estimated_setup_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedSetupTime).HasColumnName("estimated_setup_time");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IsCurrentScheduledStep).HasColumnName("is_current_scheduled_step");

                entity.Property(e => e.IsCurrentStep).HasColumnName("is_current_step");

                entity.Property(e => e.LastStepId).HasColumnName("last_step_id");

                entity.Property(e => e.LostWeight)
                    .HasColumnName("lost_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NextStepDueDate)
                    .HasColumnName("next_step_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.NextStepId).HasColumnName("next_step_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OutworkPobranch)
                    .HasColumnName("OutworkPOBranch")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPoduedate)
                    .HasColumnName("OutworkPODuedate")
                    .HasColumnType("date");

                entity.Property(e => e.OutworkPoitemNumber).HasColumnName("OutworkPOItemNumber");

                entity.Property(e => e.OutworkPonumber).HasColumnName("OutworkPONumber");

                entity.Property(e => e.OutworkPoreferenceNumber)
                    .HasColumnName("OutworkPOReferenceNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPosupplierName)
                    .HasColumnName("OutworkPOSupplierName")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPurchaseItemId).HasColumnName("outwork_purchase_item_id");

                entity.Property(e => e.OutworkValue)
                    .HasColumnName("outwork_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PreviousStepCompletionDate)
                    .HasColumnName("previous_step_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.PreviousStepId).HasColumnName("previous_step_id");

                entity.Property(e => e.ProcessCode)
                    .HasColumnName("process_code")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription)
                    .HasColumnName("process_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProcessGroupNumber).HasColumnName("process_group_number");

                entity.Property(e => e.ProcessGroupReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessGroupState).HasColumnName("process_group_state");

                entity.Property(e => e.ProcessGroupStateDescription)
                    .HasColumnName("process_group_state_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessGroupStatusCode)
                    .HasColumnName("process_group_status_code")
                    .HasMaxLength(6);

                entity.Property(e => e.ProcessGroupStatusDescription)
                    .HasColumnName("process_group_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.ProducedWeight)
                    .HasColumnName("produced_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductionAllocationId).HasColumnName("production_allocation_id");

                entity.Property(e => e.ProductionScheduleDate)
                    .HasColumnName("production_schedule_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductionScheduleItemId).HasColumnName("production_schedule_item_id");

                entity.Property(e => e.ProductionScheduleShift).HasColumnName("production_schedule_shift");

                entity.Property(e => e.ProductionStepReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecoveryType).HasMaxLength(20);

                entity.Property(e => e.RejectedWeight)
                    .HasColumnName("rejected_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ReplacementStepId).HasColumnName("replacement_step_id");

                entity.Property(e => e.RequiredProductSpecificationId).HasColumnName("required_product_specification_id");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.RunValue)
                    .HasColumnName("run_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.SalesHeaderId).HasColumnName("sales_header_id");

                entity.Property(e => e.SalesHeaderTypeDescription)
                    .HasColumnName("sales_header_type_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesHeaderTypeId).HasColumnName("sales_header_type_id");

                entity.Property(e => e.SalesItemCompletedDate)
                    .HasColumnName("sales_item_completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesItemDueDate)
                    .HasColumnName("sales_item_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.SalesItemInternalStatusDescription)
                    .HasColumnName("sales_item_internal_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesItemInternalStatusId).HasColumnName("sales_item_internal_status_id");

                entity.Property(e => e.SalesItemStatusDescription)
                    .HasColumnName("sales_item_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesItemStatusId).HasColumnName("sales_item_status_id");

                entity.Property(e => e.ScrapWeight)
                    .HasColumnName("scrap_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SequenceNumber)
                    .HasColumnName("sequence_number")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.SetupValue)
                    .HasColumnName("setup_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.StepLevel).HasColumnName("step_level");

                entity.Property(e => e.WorkCentreCode)
                    .HasColumnName("work_centre_code")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.WorkCentreDescription)
                    .HasColumnName("work_centre_description")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<ProductionStepsSequenceArchive>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid })
                    .HasName("PK_QNG_ProductionStepsSequenceArchive");

                entity.ToTable("ProductionStepsSequenceArchive", "QNG");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualRunTime).HasColumnName("actual_run_time");

                entity.Property(e => e.ActualSetupTime).HasColumnName("actual_setup_time");

                entity.Property(e => e.AllocationType)
                    .HasColumnName("allocation_type")
                    .HasMaxLength(1);

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompletionDate)
                    .HasColumnName("completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsumedPieces).HasColumnName("consumed_pieces");

                entity.Property(e => e.ConsumedProductSpecificationId).HasColumnName("consumed_product_specification_id");

                entity.Property(e => e.ConsumedQuantity)
                    .HasColumnName("consumed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ConsumedWeight)
                    .HasColumnName("consumed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CostingTotalsId).HasColumnName("costing_totals_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EstimatedRunMinutesPerQuantity).HasColumnName("estimated_run_minutes_per_quantity");

                entity.Property(e => e.EstimatedRunMinutesPerQuantityUnitId).HasColumnName("estimated_run_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedRunTime).HasColumnName("estimated_run_time");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantity).HasColumnName("estimated_setup_minutes_per_quantity");

                entity.Property(e => e.EstimatedSetupMinutesPerQuantityUnitId).HasColumnName("estimated_setup_minutes_per_quantity_unit_id");

                entity.Property(e => e.EstimatedSetupTime).HasColumnName("estimated_setup_time");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IsCurrentScheduledStep).HasColumnName("is_current_scheduled_step");

                entity.Property(e => e.IsCurrentStep).HasColumnName("is_current_step");

                entity.Property(e => e.LastStepId).HasColumnName("last_step_id");

                entity.Property(e => e.LostWeight)
                    .HasColumnName("lost_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NextStepDueDate)
                    .HasColumnName("next_step_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.NextStepId).HasColumnName("next_step_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OutworkPobranch)
                    .HasColumnName("OutworkPOBranch")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPodueDate)
                    .HasColumnName("OutworkPODueDate")
                    .HasColumnType("date");

                entity.Property(e => e.OutworkPoitemNumber).HasColumnName("OutworkPOItemNumber");

                entity.Property(e => e.OutworkPonumber).HasColumnName("OutworkPONumber");

                entity.Property(e => e.OutworkPoreferenceNumber)
                    .HasColumnName("OutworkPOReferenceNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPosupplierName)
                    .HasColumnName("OutworkPOSupplierName")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OutworkPurchaseItemId).HasColumnName("outwork_purchase_item_id");

                entity.Property(e => e.OutworkValue)
                    .HasColumnName("outwork_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PreviousStepCompletionDate)
                    .HasColumnName("previous_step_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.PreviousStepId).HasColumnName("previous_step_id");

                entity.Property(e => e.ProcessCode)
                    .HasColumnName("process_code")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription)
                    .HasColumnName("process_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProcessGroupNumber).HasColumnName("process_group_number");

                entity.Property(e => e.ProcessGroupReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessGroupState).HasColumnName("process_group_state");

                entity.Property(e => e.ProcessGroupStateDescription)
                    .HasColumnName("process_group_state_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessGroupStatusCode)
                    .HasColumnName("process_group_status_code")
                    .HasMaxLength(6);

                entity.Property(e => e.ProcessGroupStatusDescription)
                    .HasColumnName("process_group_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.ProducedWeight)
                    .HasColumnName("produced_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductionAllocationId).HasColumnName("production_allocation_id");

                entity.Property(e => e.ProductionScheduleDate)
                    .HasColumnName("production_schedule_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductionScheduleItemId).HasColumnName("production_schedule_item_id");

                entity.Property(e => e.ProductionScheduleShift).HasColumnName("production_schedule_shift");

                entity.Property(e => e.ProductionStepReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecoveryType).HasMaxLength(20);

                entity.Property(e => e.RejectedWeight)
                    .HasColumnName("rejected_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ReplacementStepId).HasColumnName("replacement_step_id");

                entity.Property(e => e.RequiredProductSpecificationId).HasColumnName("required_product_specification_id");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.RunValue)
                    .HasColumnName("run_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.SalesHeaderId).HasColumnName("sales_header_id");

                entity.Property(e => e.SalesHeaderTypeDescription)
                    .HasColumnName("sales_header_type_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesHeaderTypeId).HasColumnName("sales_header_type_id");

                entity.Property(e => e.SalesItemCompletedDate)
                    .HasColumnName("sales_item_completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesItemDueDate)
                    .HasColumnName("sales_item_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.SalesItemInternalStatusDescription)
                    .HasColumnName("sales_item_internal_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesItemInternalStatusId).HasColumnName("sales_item_internal_status_id");

                entity.Property(e => e.SalesItemStatusDescription)
                    .HasColumnName("sales_item_status_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SalesItemStatusId).HasColumnName("sales_item_status_id");

                entity.Property(e => e.ScrapWeight)
                    .HasColumnName("scrap_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SequenceNumber)
                    .HasColumnName("sequence_number")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.SetupValue)
                    .HasColumnName("setup_value")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.StepLevel).HasColumnName("step_level");

                entity.Property(e => e.WorkCentreCode)
                    .HasColumnName("work_centre_code")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.WorkCentreDescription)
                    .HasColumnName("work_centre_description")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WorkCentreId).HasColumnName("work_centre_id");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Products", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_Products_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AlternateProductId).HasColumnName("alternate_product_id");

                entity.Property(e => e.Analysis1Id).HasColumnName("analysis1_id");

                entity.Property(e => e.Analysis2Id).HasColumnName("analysis2_id");

                entity.Property(e => e.Analysis3Id).HasColumnName("analysis3_id");

                entity.Property(e => e.Analysis4Id).HasColumnName("analysis4_id");

                entity.Property(e => e.ApplyHeaderCostsAndCharges)
                    .HasColumnName("apply_header_costs_and_charges")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BuyerId).HasColumnName("buyer_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(24);

                entity.Property(e => e.CommodityId).HasColumnName("commodity_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CuttingGroupCostId).HasColumnName("cutting_group_cost_id");

                entity.Property(e => e.DefaultConsumedDimInProduction1).HasColumnName("default_consumed_dim_in_production1");

                entity.Property(e => e.DefaultConsumedDimInProduction2).HasColumnName("default_consumed_dim_in_production2");

                entity.Property(e => e.DefaultConsumedDimInProduction3).HasColumnName("default_consumed_dim_in_production3");

                entity.Property(e => e.DefaultConsumedDimInProduction4).HasColumnName("default_consumed_dim_in_production4");

                entity.Property(e => e.DefaultConsumedDimInProduction5).HasColumnName("default_consumed_dim_in_production5");

                entity.Property(e => e.DefaultEnquiryCostingTypeId).HasColumnName("default_enquiry_costing_type_id");

                entity.Property(e => e.DefaultStockStatusId).HasColumnName("default_stock_status_id");

                entity.Property(e => e.Density)
                    .HasColumnName("density")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DescriptionFormula).HasColumnName("description_formula");

                entity.Property(e => e.Dim1Kerf)
                    .HasColumnName("dim1_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1MinimumOffcut)
                    .HasColumnName("dim1_minimum_offcut")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1ProductionOverride).HasColumnName("dim1_production_override");

                entity.Property(e => e.Dim1StaticDimension)
                    .HasColumnName("dim1_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim2Kerf)
                    .HasColumnName("dim2_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2MinimumOffcut)
                    .HasColumnName("dim2_minimum_offcut")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2ProductionOverride).HasColumnName("dim2_production_override");

                entity.Property(e => e.Dim2StaticDimension)
                    .HasColumnName("dim2_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim3Kerf)
                    .HasColumnName("dim3_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3MinimumOffcut)
                    .HasColumnName("dim3_minimum_offcut")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3ProductionOverride).HasColumnName("dim3_production_override");

                entity.Property(e => e.Dim3StaticDimension)
                    .HasColumnName("dim3_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.Dim4Kerf)
                    .HasColumnName("dim4_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4MinimumOffcut)
                    .HasColumnName("dim4_minimum_offcut")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4ProductionOverride).HasColumnName("dim4_production_override");

                entity.Property(e => e.Dim4StaticDimension)
                    .HasColumnName("dim4_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4TypeId).HasColumnName("dim4_type_id");

                entity.Property(e => e.Dim5Kerf)
                    .HasColumnName("dim5_kerf")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5MinimumOffcut)
                    .HasColumnName("dim5_minimum_offcut")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5ProductionOverride).HasColumnName("dim5_production_override");

                entity.Property(e => e.Dim5StaticDimension)
                    .HasColumnName("dim5_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5TypeId).HasColumnName("dim5_type_id");

                entity.Property(e => e.EnquiryCostShownId).HasColumnName("enquiry_cost_shown_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FabricationPrice)
                    .HasColumnName("fabrication_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GradeId).HasColumnName("grade_id");

                entity.Property(e => e.GuideCost)
                    .HasColumnName("guide_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GuidePrice)
                    .HasColumnName("guide_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.IdentifyingMarkId).HasColumnName("identifying_mark_id");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MinimumGradeId).HasColumnName("minimum_grade_id");

                entity.Property(e => e.MinimumMargin)
                    .HasColumnName("minimum_margin")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NestingGap)
                    .HasColumnName("nesting_gap")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.NestingGapUnitsId).HasColumnName("nesting_gap_units_id");

                entity.Property(e => e.NonTraceableUsesLocation).HasColumnName("non_traceable_uses_location");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.OtherCode)
                    .HasColumnName("other_code")
                    .HasMaxLength(24);

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseNotes).HasColumnName("purchase_notes");

                entity.Property(e => e.RequireCertification).HasColumnName("require_certification");

                entity.Property(e => e.SalesCostingTypeId).HasColumnName("sales_costing_type_id");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesNotes).HasColumnName("sales_notes");

                entity.Property(e => e.ScrapProductId).HasColumnName("scrap_product_id");

                entity.Property(e => e.Sequence)
                    .HasColumnName("sequence")
                    .HasMaxLength(32);

                entity.Property(e => e.Size)
                    .HasColumnName("size")
                    .HasMaxLength(12);

                entity.Property(e => e.SizeDescription)
                    .HasColumnName("size_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SizeInDescription).HasColumnName("size_in_description");

                entity.Property(e => e.SourceProductId).HasColumnName("source_product_id");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.StandardCost)
                    .HasColumnName("standard_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TestingNotes).HasColumnName("testing_notes");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ProductsTheoreticalWeight>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.Coid })
                    .HasName("PK_QNG_ProductsTheoreticalWeight");

                entity.ToTable("ProductsTheoreticalWeight", "QNG");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AlternateProductCategory).HasMaxLength(16);

                entity.Property(e => e.AlternateProductCode).HasMaxLength(24);

                entity.Property(e => e.AlternateProductCondition).HasMaxLength(30);

                entity.Property(e => e.AlternateProductGrade).HasMaxLength(16);

                entity.Property(e => e.AlternateProductId).HasColumnName("AlternateProductID");

                entity.Property(e => e.AlternateProductMinimumReorder).HasColumnType("numeric(8, 3)");

                entity.Property(e => e.AlternateProductMinimumReorderUom)
                    .HasColumnName("AlternateProductMinimumReorderUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.AlternateProductSize).HasMaxLength(19);

                entity.Property(e => e.AlternateProductStratificationGrade).HasMaxLength(30);

                entity.Property(e => e.AlternateProductTheoreticalWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Avd)
                    .HasColumnName("AVD")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Dim1StaticDimension)
                    .HasColumnName("dim1_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1Type)
                    .HasColumnName("dim1_type")
                    .HasMaxLength(255);

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim2StaticDimension)
                    .HasColumnName("dim2_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2Type)
                    .HasColumnName("dim2_type")
                    .HasMaxLength(255);

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim3StaticDimension)
                    .HasColumnName("dim3_static_dimension")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3Type)
                    .HasColumnName("dim3_type")
                    .HasMaxLength(255);

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Hgt)
                    .HasColumnName("HGT")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.InsideDiameter).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Lgt)
                    .HasColumnName("LGT")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OutsideDiameter).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Pcs).HasColumnName("PCS");

                entity.Property(e => e.Pcs2wgtCalc)
                    .HasColumnName("pcs2wgt_calc")
                    .HasMaxLength(255);

                entity.Property(e => e.PiecesUnitId).HasColumnName("PiecesUnitID");

                entity.Property(e => e.PiecesUom)
                    .HasColumnName("PiecesUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductAbc)
                    .HasColumnName("ProductABC")
                    .HasMaxLength(30);

                entity.Property(e => e.ProductAnalysisCode3).HasMaxLength(3);

                entity.Property(e => e.ProductBatch).HasMaxLength(30);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCodePartOne).HasMaxLength(24);

                entity.Property(e => e.ProductCodePartThree).HasMaxLength(24);

                entity.Property(e => e.ProductCodePartTwo).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductControlsCode).HasMaxLength(6);

                entity.Property(e => e.ProductControlsDescription).HasMaxLength(255);

                entity.Property(e => e.ProductControlsId).HasColumnName("ProductControlsID");

                entity.Property(e => e.ProductCusSpec).HasMaxLength(30);

                entity.Property(e => e.ProductGrade).HasMaxLength(16);

                entity.Property(e => e.ProductItem).HasMaxLength(30);

                entity.Property(e => e.ProductLeadTime).HasMaxLength(30);

                entity.Property(e => e.ProductSize).HasMaxLength(19);

                entity.Property(e => e.ProductSizeDescription).HasMaxLength(255);

                entity.Property(e => e.ProductSpec).HasMaxLength(30);

                entity.Property(e => e.ProductStratificationGrade).HasMaxLength(30);

                entity.Property(e => e.ProductcontrolsDim1Type)
                    .HasColumnName("productcontrols_dim1_type")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductcontrolsDim1TypeId).HasColumnName("productcontrols_dim1_type_id");

                entity.Property(e => e.ProductcontrolsDim1Units)
                    .HasColumnName("productcontrols_dim1_units")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductcontrolsDim1UnitsId).HasColumnName("productcontrols_dim1_units_id");

                entity.Property(e => e.ProductcontrolsDim2Type)
                    .HasColumnName("productcontrols_dim2_type")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductcontrolsDim2TypeId).HasColumnName("productcontrols_dim2_type_id");

                entity.Property(e => e.ProductcontrolsDim2Units)
                    .HasColumnName("productcontrols_dim2_units")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductcontrolsDim2UnitsId).HasColumnName("productcontrols_dim2_units_id");

                entity.Property(e => e.ProductcontrolsDim3Type)
                    .HasColumnName("productcontrols_dim3_type")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductcontrolsDim3TypeId).HasColumnName("productcontrols_dim3_type_id");

                entity.Property(e => e.ProductcontrolsDim3Units)
                    .HasColumnName("productcontrols_dim3_units")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductcontrolsDim3UnitsId).HasColumnName("productcontrols_dim3_units_id");

                entity.Property(e => e.Qtd)
                    .HasColumnName("QTD")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.QuantityUnitId).HasColumnName("QuantityUnitID");

                entity.Property(e => e.QuantityUom)
                    .HasColumnName("QuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StockAnalysisCode1).HasMaxLength(3);

                entity.Property(e => e.StockAnalysisCode2).HasMaxLength(3);

                entity.Property(e => e.StockAnalysisDesc1).HasMaxLength(255);

                entity.Property(e => e.StockAnalysisDesc2).HasMaxLength(255);

                entity.Property(e => e.TheoreticalWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Wdt)
                    .HasColumnName("WDT")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.WeightUnitId).HasColumnName("WeightUnitID");

                entity.Property(e => e.WeightUom)
                    .HasColumnName("WeightUOM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<PurchaseCategoryCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseCategoryCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PurchaseEnquiryDeletionReasons>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("PurchaseEnquiryDeletionReasons", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PurchaseGroups>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("PurchaseGroups", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MaterialNominalId).HasColumnName("material_nominal_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousNominalId).HasColumnName("miscellaneous_nominal_id");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProductionNominalId).HasColumnName("production_nominal_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SurchargeNominalId).HasColumnName("surcharge_nominal_id");

                entity.Property(e => e.TransportNominalId).HasColumnName("transport_nominal_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PurchaseOrderHeaders>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseOrderHeaders", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_PurchaseOrderHeaders_COID");

                entity.HasIndex(e => new { e.Number, e.Coid })
                    .HasName("IDX_PurchaseOrderHeaders_number_COID");

                entity.HasIndex(e => new { e.SupplierNameOverride, e.BranchId, e.Coid })
                    .HasName("POH_BranchID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Acknowledged).HasColumnName("acknowledged");

                entity.Property(e => e.AcknowledgedDate)
                    .HasColumnName("acknowledged_date")
                    .HasColumnType("date");

                entity.Property(e => e.AcknowledgementNumber)
                    .HasColumnName("acknowledgement_number")
                    .HasMaxLength(50);

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.BuyerId).HasColumnName("buyer_id");

                entity.Property(e => e.CarrierId).HasColumnName("carrier_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificationsId).HasColumnName("certifications_id");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.Contact1Id).HasColumnName("contact1_id");

                entity.Property(e => e.Contact2Id).HasColumnName("contact2_id");

                entity.Property(e => e.Contact3Name)
                    .HasColumnName("contact3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Contact4Name)
                    .HasColumnName("contact4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.CostAmount)
                    .HasColumnName("cost_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CostRate)
                    .HasColumnName("cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostRateUnitId).HasColumnName("cost_rate_unit_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeletionReasonDescription)
                    .HasColumnName("deletion_reason_description")
                    .HasMaxLength(255);

                entity.Property(e => e.DeletionReasonId).HasColumnName("deletion_reason_id");

                entity.Property(e => e.DeliverFromAddressId).HasColumnName("deliver_from_address_id");

                entity.Property(e => e.DeliverFromId).HasColumnName("deliver_from_id");

                entity.Property(e => e.DeliverFromNameOverride)
                    .HasColumnName("deliver_from_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryAddressId).HasColumnName("delivery_address_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.DeliveryName)
                    .HasColumnName("delivery_name")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryPoint)
                    .HasColumnName("delivery_point")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryWarehouseId).HasColumnName("delivery_warehouse_id");

                entity.Property(e => e.DespatchDate)
                    .HasColumnName("despatch_date")
                    .HasColumnType("date");

                entity.Property(e => e.DespatchNotes).HasColumnName("despatch_notes");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateType)
                    .HasColumnName("exchange_rate_type")
                    .HasMaxLength(1);

                entity.Property(e => e.ExchangeRateTypeId).HasColumnName("exchange_rate_type_id");

                entity.Property(e => e.ExternalFooterText).HasColumnName("external_footer_text");

                entity.Property(e => e.ExternalHeaderText).HasColumnName("external_header_text");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.GoodsInwardsNotes).HasColumnName("goods_inwards_notes");

                entity.Property(e => e.GroupingKey)
                    .HasColumnName("grouping_key")
                    .HasMaxLength(60);

                entity.Property(e => e.HeaderIndex)
                    .HasColumnName("header_index")
                    .HasMaxLength(60);

                entity.Property(e => e.ImportBatchNumber).HasColumnName("import_batch_number");

                entity.Property(e => e.ImportNumber).HasColumnName("import_number");

                entity.Property(e => e.ImportSource)
                    .HasColumnName("import_source")
                    .HasMaxLength(50);

                entity.Property(e => e.InternalFooterText).HasColumnName("internal_footer_text");

                entity.Property(e => e.InternalHeaderText).HasColumnName("internal_header_text");

                entity.Property(e => e.Locked).HasColumnName("locked");

                entity.Property(e => e.ManualDate)
                    .HasColumnName("manual_date")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OriginalDueDate)
                    .HasColumnName("original_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.OutsideProcessing).HasColumnName("outside_processing");

                entity.Property(e => e.Printed).HasColumnName("printed");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProgressionHeaderText).HasColumnName("progression_header_text");

                entity.Property(e => e.PurchaseEntryTotalsId).HasColumnName("purchase_entry_totals_id");

                entity.Property(e => e.PurchaseOrderTotalsId).HasColumnName("purchase_order_totals_id");

                entity.Property(e => e.PurchaseType)
                    .HasColumnName("purchase_type")
                    .HasMaxLength(1);

                entity.Property(e => e.RaisedDate)
                    .HasColumnName("raised_date")
                    .HasColumnType("date");

                entity.Property(e => e.RequestType)
                    .HasColumnName("request_type")
                    .HasMaxLength(1);

                entity.Property(e => e.RollingReference)
                    .HasColumnName("rolling_reference")
                    .HasMaxLength(16);

                entity.Property(e => e.RollingWeek).HasColumnName("rolling_week");

                entity.Property(e => e.Salesperson)
                    .HasColumnName("salesperson")
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierAddressId).HasColumnName("supplier_address_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierNameOverride)
                    .HasColumnName("supplier_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.SupplierOrder)
                    .HasColumnName("supplier_order")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierReference)
                    .HasColumnName("supplier_reference")
                    .HasMaxLength(50);

                entity.Property(e => e.TermsId).HasColumnName("terms_id");

                entity.Property(e => e.TransferType)
                    .HasColumnName("transfer_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportBillingRef)
                    .HasColumnName("transport_billing_ref")
                    .HasMaxLength(50);

                entity.Property(e => e.TransportExchangeRate)
                    .HasColumnName("transport_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.TransportExchangeRateType)
                    .HasColumnName("transport_exchange_rate_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportExchangeRateTypeId).HasColumnName("transport_exchange_rate_type_id");

                entity.Property(e => e.TransportPurchaseGroupId).HasColumnName("transport_purchase_group_id");

                entity.Property(e => e.TransportPurchaseOrderBranchId).HasColumnName("transport_purchase_order_branch_id");

                entity.Property(e => e.TransportPurchaseOrderHeaderId).HasColumnName("transport_purchase_order_header_id");

                entity.Property(e => e.TransportPurchaseOrderItemId).HasColumnName("transport_purchase_order_item_id");

                entity.Property(e => e.TransportTypeId).HasColumnName("transport_type_id");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.UseAtGoodsInwards)
                    .IsRequired()
                    .HasColumnName("use_at_goods_inwards")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.VesselId).HasColumnName("vessel_id");
            });

            modelBuilder.Entity<PurchaseOrderItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseOrderItems", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_PurchaseOrderItems_COID");

                entity.HasIndex(e => new { e.PurchaseHeaderId, e.Coid })
                    .HasName("POI_PurchaseHeaderID_COID");

                entity.HasIndex(e => new { e.Id, e.PurchaseHeaderId, e.ItemNumber, e.Coid })
                    .HasName("IDX_PurchaseOrderItems_item_number_COID");

                entity.HasIndex(e => new { e.Id, e.PurchaseHeaderId, e.ItemNumber, e.ProductId, e.WeightUnitsId, e.DueDate, e.OriginalDueDate, e.StatusId, e.Coid })
                    .HasName("IDX_PurchaseOrderItems_status_id_COID");

                entity.HasIndex(e => new { e.Id, e.ItemNumber, e.ProductId, e.ExternalDescription, e.InternalDescription, e.WeightUnitsId, e.StatusId, e.DueDate, e.GoodsInwardsNotes, e.PurchaseHeaderId, e.Coid })
                    .HasName("IDX_PurchaseOrderItems_PurchaseHeaderID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BalancePieces).HasColumnName("balance_pieces");

                entity.Property(e => e.BalanceQuantity)
                    .HasColumnName("balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.BalanceWeight)
                    .HasColumnName("balance_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BoughtForCustomerId).HasColumnName("bought_for_customer_id");

                entity.Property(e => e.BtbBranchId).HasColumnName("btb_branch_id");

                entity.Property(e => e.BtbPurchaseHeaderId).HasColumnName("btb_purchase_header_id");

                entity.Property(e => e.BtbSupplierId).HasColumnName("btb_supplier_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeletionReasonDescription)
                    .HasColumnName("deletion_reason_description")
                    .HasMaxLength(255);

                entity.Property(e => e.DeletionReasonId).HasColumnName("deletion_reason_id");

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.DespatchDate)
                    .HasColumnName("despatch_date")
                    .HasColumnType("date");

                entity.Property(e => e.DimensionsId).HasColumnName("dimensions_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EnquiryStatus)
                    .HasColumnName("enquiry_status")
                    .HasMaxLength(1);

                entity.Property(e => e.EntryPieces).HasColumnName("entry_pieces");

                entity.Property(e => e.EntryQuantity)
                    .HasColumnName("entry_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.EntryWeight)
                    .HasColumnName("entry_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExternalDescription)
                    .HasColumnName("external_description")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.GoodsInwardsNotes)
                    .HasColumnName("goods_inwards_notes")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.ImportBatchNumber).HasColumnName("import_batch_number");

                entity.Property(e => e.ImportItem).HasColumnName("import_item");

                entity.Property(e => e.ImportNumber).HasColumnName("import_number");

                entity.Property(e => e.InternalDescription)
                    .HasColumnName("internal_description")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.ItemNumber).HasColumnName("item_number");

                entity.Property(e => e.LastReceiptDate)
                    .HasColumnName("last_receipt_date")
                    .HasColumnType("date");

                entity.Property(e => e.LocalCost)
                    .HasColumnName("local_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ManualDate)
                    .HasColumnName("manual_date")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OrderedPieces).HasColumnName("ordered_pieces");

                entity.Property(e => e.OrderedQuantity)
                    .HasColumnName("ordered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.OrderedWeight)
                    .HasColumnName("ordered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.OriginalDueDate)
                    .HasColumnName("original_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.OriginalQuantity)
                    .HasColumnName("original_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.OriginalQuantityUnitId).HasColumnName("original_quantity_unit_id");

                entity.Property(e => e.PartCompanyId).HasColumnName("part_company_id");

                entity.Property(e => e.PartNumber)
                    .HasColumnName("part_number")
                    .HasMaxLength(35);

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductSubGroupId).HasColumnName("product_sub_group_id");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.PurchaseHeaderId).HasColumnName("purchase_header_id");

                entity.Property(e => e.PurchaseOrderTotalsId).HasColumnName("purchase_order_totals_id");

                entity.Property(e => e.QuoteReference)
                    .HasColumnName("quote_reference")
                    .HasMaxLength(20);

                entity.Property(e => e.ReadyDate)
                    .HasColumnName("ready_date")
                    .HasColumnType("date");

                entity.Property(e => e.RequestStatus)
                    .HasColumnName("request_status")
                    .HasMaxLength(1);

                entity.Property(e => e.RequestType)
                    .HasColumnName("request_type")
                    .HasMaxLength(1);

                entity.Property(e => e.RollingReference)
                    .HasColumnName("rolling_reference")
                    .HasMaxLength(16);

                entity.Property(e => e.RollingWeek).HasColumnName("rolling_week");

                entity.Property(e => e.ShowCosts).HasColumnName("show_costs");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TotalCost)
                    .HasColumnName("total_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransferFromBranchId).HasColumnName("transfer_from_branch_id");

                entity.Property(e => e.TransientPieces).HasColumnName("transient_pieces");

                entity.Property(e => e.TransientQuantity)
                    .HasColumnName("transient_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransientWeight)
                    .HasColumnName("transient_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TransportPieces).HasColumnName("transport_pieces");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportWeight)
                    .HasColumnName("transport_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Visible).HasColumnName("visible");

                entity.Property(e => e.VisibleCost)
                    .HasColumnName("visible_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.VisibleUnitId).HasColumnName("visible_unit_id");

                entity.Property(e => e.WeightUnitsId).HasColumnName("weight_units_id");

                entity.Property(e => e.WorkingSpecificationId).HasColumnName("working_specification_id");
            });

            modelBuilder.Entity<PurchaseOrderItemsExt>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid })
                    .HasName("PK_QNG_PurchaseOrderItemsExt");

                entity.ToTable("PurchaseOrderItemsExt", "QNG");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.PoitemCreatedBy)
                    .HasColumnName("POItemCreatedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PoitemDuedate)
                    .HasColumnName("POItemDuedate")
                    .HasColumnType("date");

                entity.Property(e => e.PoitemInternalStatusCode)
                    .HasColumnName("POItemInternalStatusCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemInternalStatusDescription)
                    .HasColumnName("POItemInternalStatusDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.PoitemInternalStatusId).HasColumnName("POItemInternalStatusID");

                entity.Property(e => e.PoitemModifiedBy)
                    .HasColumnName("POItemModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PoitemNumber).HasColumnName("POItemNumber");

                entity.Property(e => e.PoitemStatusCode)
                    .HasColumnName("POItemStatusCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemStatusDescription)
                    .HasColumnName("POItemStatusDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.PoreferenceNumber)
                    .HasColumnName("POReferenceNumber")
                    .HasMaxLength(68);

                entity.Property(e => e.PurchaseHeaderId).HasColumnName("purchase_header_id");
            });

            modelBuilder.Entity<PurchaseOrderTotals>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseOrderTotals", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_PurchaseOrderTotals_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BalancePieces).HasColumnName("balance_pieces");

                entity.Property(e => e.BalanceQuantity)
                    .HasColumnName("balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.BalanceWeight)
                    .HasColumnName("balance_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OrderedPieces).HasColumnName("ordered_pieces");

                entity.Property(e => e.OrderedQuantity)
                    .HasColumnName("ordered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.OrderedWeight)
                    .HasColumnName("ordered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransientPieces).HasColumnName("transient_pieces");

                entity.Property(e => e.TransientQuantity)
                    .HasColumnName("transient_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransientWeight)
                    .HasColumnName("transient_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TransportPieces).HasColumnName("transport_pieces");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportWeight)
                    .HasColumnName("transport_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PurchaseStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseStatusCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AdditionalDescription1)
                    .HasColumnName("additional_description1")
                    .HasMaxLength(255);

                entity.Property(e => e.AdditionalDescription2)
                    .HasColumnName("additional_description2")
                    .HasMaxLength(255);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InternalStatusId).HasColumnName("internal_status_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<PurchaseTypeCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("PurchaseTypeCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(1);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FullOrder)
                    .HasColumnName("full_order")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PurchaseType)
                    .HasColumnName("purchase_type")
                    .HasMaxLength(1);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<QbusinessUnit>(entity =>
            {
                entity.ToTable("QBusinessUnit", "QNG");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BusinessUnit)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Directory)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Region)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QbusinessUnitSalesCategory>(entity =>
            {
                entity.ToTable("QBusinessUnitSalesCategory", "QNG");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.SalesCategory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QbusinessUnitWarehouse>(entity =>
            {
                entity.ToTable("QBusinessUnitWarehouse", "QNG");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IncludeForPoforecast)
                    .HasColumnName("IncludeForPOForecast")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<QngVAccountingPeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vAccountingPeriod", "ETL");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AccountingPeriodName).HasMaxLength(34);

                entity.Property(e => e.IMetalPeriod).HasColumnName("iMetalPeriod");

                entity.Property(e => e.PeriodBeginDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodEndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<QngVCostItemsPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vCostItemsPivot", "ETL");

                entity.Property(e => e.BalanceMaterialValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceMiscellaneousValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceProductionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceSurchargeValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BalanceTotalValue).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.BalanceTransportValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseCostUom)
                    .HasColumnName("BaseCostUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.BaseMaterialCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseMiscellaneousCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseProductionCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseSurchargeCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseTotalCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.BaseTransportCost).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CostQuantity).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantityUom)
                    .HasColumnName("CostQuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.GibranchCode)
                    .HasColumnName("GIBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.GiitemNumber).HasColumnName("GIItemNumber");

                entity.Property(e => e.Ginumber).HasColumnName("GINumber");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderedMaterialValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedMiscellaneousValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedProductionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedSurchargeValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderedTotalValue).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.OrderedTransportValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PobranchCode)
                    .HasColumnName("POBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemNumber).HasColumnName("POItemNumber");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SobranchCode)
                    .HasColumnName("SOBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");
            });

            modelBuilder.Entity<QngVCostLineItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vCostLineItems", "ETL");

                entity.Property(e => e.BalanceBaseUnitCost2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BalanceBaseValue2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseCost)
                    .HasColumnName("base_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CostGroupCode).HasMaxLength(3);

                entity.Property(e => e.CostGroupDescription).HasMaxLength(255);

                entity.Property(e => e.CostLineQuantity2).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostLineQuantity2Uom)
                    .HasColumnName("CostLineQuantity2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CostQuantity)
                    .HasColumnName("cost_quantity")
                    .HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantity2).HasColumnType("numeric(15, 6)");

                entity.Property(e => e.CostQuantity2Uom)
                    .HasColumnName("CostQuantity2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.CostQuantityUnitCode).HasMaxLength(10);

                entity.Property(e => e.CostQuantityUnitDescription).HasMaxLength(255);

                entity.Property(e => e.CostUnitCode).HasMaxLength(10);

                entity.Property(e => e.CostUnitDescription).HasMaxLength(255);

                entity.Property(e => e.CostUnitQuantityCode).HasMaxLength(1);

                entity.Property(e => e.CostUnitScale).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .IsRequired()
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateType).HasColumnName("exchange_rate_type");

                entity.Property(e => e.GibranchCode)
                    .HasColumnName("GIBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.GiitemNumber).HasColumnName("GIItemNumber");

                entity.Property(e => e.Ginumber).HasColumnName("GINumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemScale).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.OrderedBaseUnitCost2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OrderedBaseValue2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PobranchCode)
                    .HasColumnName("POBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.PoitemNumber).HasColumnName("POItemNumber");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SobranchCode)
                    .HasColumnName("SOBranchCode")
                    .HasMaxLength(6);

                entity.Property(e => e.SoitemNumber).HasColumnName("SOItemNumber");

                entity.Property(e => e.Sonumber).HasColumnName("SONumber");

                entity.Property(e => e.SystemCost).HasColumnName("system_cost");

                entity.Property(e => e.UnitCost2Uom)
                    .HasColumnName("UnitCost2UOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(67);

                entity.Property(e => e.Visibility)
                    .HasColumnName("visibility")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<QngVExchangeRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vExchangeRate", "ETL");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.Avrate)
                    .HasColumnName("AVRate")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.FromCurrency)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mbrate)
                    .HasColumnName("MBRate")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Merate)
                    .HasColumnName("MERate")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.ToCurrency)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QngVFiscalMonthConversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vFiscalMonthConversion", "ETL");

                entity.Property(e => e.CalendarMonth).HasColumnType("date");

                entity.Property(e => e.PeriodBeginDate).HasColumnType("date");

                entity.Property(e => e.PeriodEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<QngVQbusinessUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vQBusinessUnit", "ETL");

                entity.Property(e => e.BusinessUnit)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Directory)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Region)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QngVQbusinessUnitSalesCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vQBusinessUnitSalesCategory", "ETL");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SalesCategory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QngVQbusinessUnitWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vQBusinessUnitWarehouse", "ETL");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IncludeForPoforecast)
                    .HasColumnName("IncludeForPOForecast")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<QngVSalesChargesPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vSalesChargesPivot", "ETL");

                entity.Property(e => e.BaseMaterialCharge)
                    .HasColumnName("base_material_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMiscellaneousCharge)
                    .HasColumnName("base_miscellaneous_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseProductionCharge)
                    .HasColumnName("base_production_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseSurchargeCharge)
                    .HasColumnName("base_surcharge_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTotalCharge)
                    .HasColumnName("base_total_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTotalValue)
                    .HasColumnName("base_total_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTransportCharge)
                    .HasColumnName("base_transport_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ChargeQuantity)
                    .HasColumnName("charge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ChargeQuantityUom)
                    .HasColumnName("ChargeQuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ChargeUom)
                    .HasColumnName("ChargeUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultBaseCurrency)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ItemId).HasColumnName("item_id");
            });

            modelBuilder.Entity<QngVSalesHeadersExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vSalesHeadersExt", "ETL");

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.CarrierName).HasMaxLength(60);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ContactName).HasMaxLength(101);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CurrencyCode).HasMaxLength(3);

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerGroup).HasMaxLength(60);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerSegment).HasMaxLength(255);

                entity.Property(e => e.DeliverFromBranchCode).HasMaxLength(6);

                entity.Property(e => e.DeliverFromBranchName).HasMaxLength(60);

                entity.Property(e => e.DeliverFromWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.DeliverFromWarehouseName).HasMaxLength(60);

                entity.Property(e => e.DeliverToCode).HasMaxLength(10);

                entity.Property(e => e.DeliverToName).HasMaxLength(60);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InternalStatusId).HasColumnName("internal_status_id");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.OrderHeaderStatusCode).HasMaxLength(3);

                entity.Property(e => e.OrderHeaderStatusDescription).HasMaxLength(255);

                entity.Property(e => e.OrderTypeCode).HasMaxLength(3);

                entity.Property(e => e.OrderTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SaleDate)
                    .HasColumnName("sale_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesRep).HasMaxLength(50);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.TermsDescription).HasMaxLength(255);

                entity.Property(e => e.TransferToBranchCode).HasMaxLength(6);

                entity.Property(e => e.TransferToBranchDescription).HasMaxLength(60);

                entity.Property(e => e.TransferToWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.TransferToWarehouseDescription).HasMaxLength(60);

                entity.Property(e => e.TransportTypeDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<QngVStockItemAllocations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vStockItemAllocations", "ETL");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.AllocatedWarehouseName).HasMaxLength(60);

                entity.Property(e => e.AllocatedWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.BranchName).HasMaxLength(60);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .IsRequired()
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.FinalProductCode).HasMaxLength(24);

                entity.Property(e => e.HeatNumber).HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mill).HasMaxLength(3);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductSize).HasMaxLength(19);

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.ReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesGroupCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupDescription).HasMaxLength(255);

                entity.Property(e => e.SalesGroupTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SalesHeaderId).HasColumnName("SalesHeaderID");

                entity.Property(e => e.SalesItemBranchCode).HasMaxLength(6);

                entity.Property(e => e.SalesItemDueDate).HasColumnType("date");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SalesItemReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesItemTotalBaseValue).HasColumnType("numeric(17, 2)");

                entity.Property(e => e.SalesItemTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesRep).HasMaxLength(50);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.SizeDescription).HasMaxLength(255);

                entity.Property(e => e.StockAllocationId).HasColumnName("StockAllocationID");

                entity.Property(e => e.StockItem).HasMaxLength(16);

                entity.Property(e => e.StockItemId).HasColumnName("StockItemID");

                entity.Property(e => e.StockLocation).HasMaxLength(16);

                entity.Property(e => e.StockOriginatedDate).HasColumnType("date");

                entity.Property(e => e.StockTotalCostPerWeightUom)
                    .HasColumnName("StockTotalCostPerWeightUOM")
                    .HasColumnType("numeric(16, 4)");

                entity.Property(e => e.StockTotalValueOnHand).HasColumnType("numeric(16, 2)");

                entity.Property(e => e.TagLength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TotalAllocatedValue).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(109);
            });

            modelBuilder.Entity<QngVStockItemsExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QNG_vStockItemsExt", "ETL");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(30);

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitCountry)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CountryOfMaterialOrigin).HasMaxLength(255);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedRefPrefix).HasMaxLength(3);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.HeatNumber).HasMaxLength(30);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LeadTime).HasMaxLength(30);

                entity.Property(e => e.LengthAllocated).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LengthAvailable).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LengthOnHand).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MasterTagNumber).HasMaxLength(16);

                entity.Property(e => e.MasterWarehouse).HasMaxLength(10);

                entity.Property(e => e.MaterialValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.MaterialValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Mill).HasMaxLength(3);

                entity.Property(e => e.MiscellaneousValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.MiscellaneousValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.OriginalTotalCostOnHand).HasColumnType("numeric(16, 4)");

                entity.Property(e => e.ParentTagNumber).HasMaxLength(16);

                entity.Property(e => e.ParentWarehouse).HasMaxLength(10);

                entity.Property(e => e.PartNumber).HasMaxLength(35);

                entity.Property(e => e.Pocategory)
                    .HasColumnName("POCategory")
                    .HasMaxLength(6);

                entity.Property(e => e.PocategoryDescription)
                    .HasColumnName("POCategoryDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Potype)
                    .HasColumnName("POType")
                    .HasMaxLength(1);

                entity.Property(e => e.PotypeDescription)
                    .HasColumnName("POTypeDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ProductionValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("received_date")
                    .HasColumnType("date");

                entity.Property(e => e.RejectReason).HasMaxLength(255);

                entity.Property(e => e.Specification1).IsUnicode(false);

                entity.Property(e => e.StockHoldCode).HasMaxLength(3);

                entity.Property(e => e.StockHoldReason).HasMaxLength(255);

                entity.Property(e => e.StockHoldUser).HasMaxLength(50);

                entity.Property(e => e.StockStatus).HasMaxLength(2);

                entity.Property(e => e.StockStatusDescription).HasMaxLength(255);

                entity.Property(e => e.SupplierName).HasMaxLength(60);

                entity.Property(e => e.SupplierNumber).HasMaxLength(10);

                entity.Property(e => e.SupplierReference).HasMaxLength(50);

                entity.Property(e => e.SurchargeValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.SurchargeValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TagNumber).HasMaxLength(16);

                entity.Property(e => e.TotalCostPerWeightUom)
                    .HasColumnName("TotalCostPerWeightUOM")
                    .HasColumnType("numeric(16, 4)");

                entity.Property(e => e.TotalValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TotalValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TotalValueOnHand).HasColumnType("numeric(16, 2)");

                entity.Property(e => e.TransientReference).HasMaxLength(72);

                entity.Property(e => e.TransientType).HasMaxLength(1);

                entity.Property(e => e.TransportValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TransportValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.UnitValue).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.WarehouseCode).HasMaxLength(10);

                entity.Property(e => e.WarehouseName).HasMaxLength(60);

                entity.Property(e => e.WarehouseType).HasMaxLength(2);

                entity.Property(e => e.WarehouseTypeDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<SageVApobl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPOBL");

                entity.Property(e => e.Amt1099org)
                    .HasColumnName("AMT1099ORG")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amt1099rem)
                    .HasColumnName("AMT1099REM")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1hc)
                    .HasColumnName("AMTBASE1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1tc)
                    .HasColumnName("AMTBASE1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2hc)
                    .HasColumnName("AMTBASE2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2tc)
                    .HasColumnName("AMTBASE2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3hc)
                    .HasColumnName("AMTBASE3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3tc)
                    .HasColumnName("AMTBASE3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4hc)
                    .HasColumnName("AMTBASE4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4tc)
                    .HasColumnName("AMTBASE4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5hc)
                    .HasColumnName("AMTBASE5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5tc)
                    .HasColumnName("AMTBASE5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduehc)
                    .HasColumnName("AMTDUEHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduetc)
                    .HasColumnName("AMTDUETC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxhc)
                    .HasColumnName("AMTNONTXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxtc)
                    .HasColumnName("AMTNONTXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtremit)
                    .HasColumnName("AMTREMIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1hc)
                    .HasColumnName("AMTTAX1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1tc)
                    .HasColumnName("AMTTAX1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2hc)
                    .HasColumnName("AMTTAX2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2tc)
                    .HasColumnName("AMTTAX2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3hc)
                    .HasColumnName("AMTTAX3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3tc)
                    .HasColumnName("AMTTAX3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4hc)
                    .HasColumnName("AMTTAX4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4tc)
                    .HasColumnName("AMTTAX4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5hc)
                    .HasColumnName("AMTTAX5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5tc)
                    .HasColumnName("AMTTAX5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxblhc)
                    .HasColumnName("AMTTXBLHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxbltc)
                    .HasColumnName("AMTTXBLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht1hc)
                    .HasColumnName("AMTWHT1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht1tc)
                    .HasColumnName("AMTWHT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht2hc)
                    .HasColumnName("AMTWHT2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht2tc)
                    .HasColumnName("AMTWHT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht3hc)
                    .HasColumnName("AMTWHT3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht3tc)
                    .HasColumnName("AMTWHT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht4hc)
                    .HasColumnName("AMTWHT4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht4tc)
                    .HasColumnName("AMTWHT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht5hc)
                    .HasColumnName("AMTWHT5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwht5tc)
                    .HasColumnName("AMTWHT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Apversion)
                    .IsRequired()
                    .HasColumnName("APVERSION")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntlastsch)
                    .HasColumnName("CNTLASTSCH")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpaym)
                    .HasColumnName("CNTLSTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpyst)
                    .HasColumnName("CNTLSTPYST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntoblj).HasColumnName("CNTOBLJ");

                entity.Property(e => e.Cnttotpaym)
                    .HasColumnName("CNTTOTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurnrc)
                    .IsRequired()
                    .HasColumnName("CODECURNRC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax1)
                    .IsRequired()
                    .HasColumnName("CODETAX1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax2)
                    .IsRequired()
                    .HasColumnName("CODETAX2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax3)
                    .IsRequired()
                    .HasColumnName("CODETAX3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax4)
                    .IsRequired()
                    .HasColumnName("CODETAX4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax5)
                    .IsRequired()
                    .HasColumnName("CODETAX5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateasof)
                    .HasColumnName("DATEASOF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datefrstbk)
                    .HasColumnName("DATEFRSTBK")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvcdu)
                    .HasColumnName("DATEINVCDU")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstact)
                    .HasColumnName("DATELSTACT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstrvl)
                    .HasColumnName("DATELSTRVL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepaid)
                    .HasColumnName("DATEPAID")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepystts)
                    .HasColumnName("DATEPYSTTS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descinvc)
                    .IsRequired()
                    .HasColumnName("DESCINVC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Exchratehc)
                    .HasColumnName("EXCHRATEHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id1099clas)
                    .IsRequired()
                    .HasColumnName("ID1099CLAS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idordernbr)
                    .IsRequired()
                    .HasColumnName("IDORDERNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idponbr)
                    .IsRequired()
                    .HasColumnName("IDPONBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepay)
                    .IsRequired()
                    .HasColumnName("IDPREPAY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitto)
                    .IsRequired()
                    .HasColumnName("IDRMITTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrxtype).HasColumnName("IDTRXTYPE");

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idvendgrp)
                    .IsRequired()
                    .HasColumnName("IDVENDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Oamtwht1tc)
                    .HasColumnName("OAMTWHT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Oamtwht2tc)
                    .HasColumnName("OAMTWHT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Oamtwht3tc)
                    .HasColumnName("OAMTWHT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Oamtwht4tc)
                    .HasColumnName("OAMTWHT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Oamtwht5tc)
                    .HasColumnName("OAMTWHT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Orate)
                    .HasColumnName("ORATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Oratedate)
                    .HasColumnName("ORATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Orateop).HasColumnName("ORATEOP");

                entity.Property(e => e.Oratetype)
                    .IsRequired()
                    .HasColumnName("ORATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Oswrate).HasColumnName("OSWRATE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedaterc)
                    .HasColumnName("RATEDATERC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Rateoprc).HasColumnName("RATEOPRC");

                entity.Property(e => e.Raterc)
                    .HasColumnName("RATERC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetyperc)
                    .IsRequired()
                    .HasColumnName("RATETYPERC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgoamthc)
                    .HasColumnName("RTGOAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgoamttc)
                    .HasColumnName("RTGOAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceappl)
                    .IsRequired()
                    .HasColumnName("SRCEAPPL")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swpaid).HasColumnName("SWPAID");

                entity.Property(e => e.Swpystts).HasColumnName("SWPYSTTS");

                entity.Property(e => e.Swrateovrd).HasColumnName("SWRATEOVRD");

                entity.Property(e => e.Swraterc).HasColumnName("SWRATERC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgout).HasColumnName("SWRTGOUT");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxincl1).HasColumnName("SWTAXINCL1");

                entity.Property(e => e.Swtaxincl2).HasColumnName("SWTAXINCL2");

                entity.Property(e => e.Swtaxincl3).HasColumnName("SWTAXINCL3");

                entity.Property(e => e.Swtaxincl4).HasColumnName("SWTAXINCL4");

                entity.Property(e => e.Swtaxincl5).HasColumnName("SWTAXINCL5");

                entity.Property(e => e.Swtaxovrd).HasColumnName("SWTAXOVRD");

                entity.Property(e => e.Swtxbsectl).HasColumnName("SWTXBSECTL");

                entity.Property(e => e.Swtxctlrc).HasColumnName("SWTXCTLRC");

                entity.Property(e => e.Swtxrtgrpt).HasColumnName("SWTXRTGRPT");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxversion).HasColumnName("TAXVERSION");

                entity.Property(e => e.Txamtrt1tc)
                    .HasColumnName("TXAMTRT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt2tc)
                    .HasColumnName("TXAMTRT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt3tc)
                    .HasColumnName("TXAMTRT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt4tc)
                    .HasColumnName("TXAMTRT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt5tc)
                    .HasColumnName("TXAMTRT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert1tc)
                    .HasColumnName("TXBSERT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert2tc)
                    .HasColumnName("TXBSERT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert3tc)
                    .HasColumnName("TXBSERT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert4tc)
                    .HasColumnName("TXBSERT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert5tc)
                    .HasColumnName("TXBSERT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txttrxtype).HasColumnName("TXTTRXTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Yplastact)
                    .IsRequired()
                    .HasColumnName("YPLASTACT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVApobp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPOBP");

                entity.Property(e => e.Amt1099)
                    .HasColumnName("AMT1099")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntpaymnbr)
                    .HasColumnName("CNTPAYMNBR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntseqnce)
                    .HasColumnName("CNTSEQNCE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Code1099)
                    .IsRequired()
                    .HasColumnName("CODE1099")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax)
                    .IsRequired()
                    .HasColumnName("CODETAX")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datermit)
                    .HasColumnName("DATERMIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idmemoxref)
                    .IsRequired()
                    .HasColumnName("IDMEMOXREF")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitvend)
                    .IsRequired()
                    .HasColumnName("IDRMITVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Swovrdrate).HasColumnName("SWOVRDRATE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");
            });

            modelBuilder.Entity<SageVAppjd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPPJD");

                entity.Property(e => e.Accttype).HasColumnName("ACCTTYPE");

                entity.Property(e => e.Amtadjhcur)
                    .HasColumnName("AMTADJHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtcur)
                    .HasColumnName("AMTADJTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdschcur)
                    .HasColumnName("AMTDSCHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdsctcur)
                    .HasColumnName("AMTDSCTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndhc)
                    .HasColumnName("AMTEXTNDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndtc)
                    .HasColumnName("AMTEXTNDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Basetaxhc)
                    .HasColumnName("BASETAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Basetaxtc)
                    .HasColumnName("BASETAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntline)
                    .HasColumnName("CNTLINE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntseqence).HasColumnName("CNTSEQENCE");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descomp)
                    .IsRequired()
                    .HasColumnName("DESCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glcomment)
                    .IsRequired()
                    .HasColumnName("GLCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gldesc)
                    .IsRequired()
                    .HasColumnName("GLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glref)
                    .IsRequired()
                    .HasColumnName("GLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacct)
                    .IsRequired()
                    .HasColumnName("IDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddist)
                    .IsRequired()
                    .HasColumnName("IDDIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrans).HasColumnName("IDTRANS");

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedoc)
                    .HasColumnName("RATEDOC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Route).HasColumnName("ROUTE");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxtype).HasColumnName("SWTAXTYPE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVAppjh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPPJH");

                entity.Property(e => e.Amtbc)
                    .HasColumnName("AMTBC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amthc)
                    .HasColumnName("AMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttc)
                    .HasColumnName("AMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurnbc)
                    .IsRequired()
                    .HasColumnName("CODECURNBC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurntc)
                    .IsRequired()
                    .HasColumnName("CODECURNTC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Enteredby)
                    .IsRequired()
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddistset)
                    .IsRequired()
                    .HasColumnName("IDDISTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvcappl)
                    .IsRequired()
                    .HasColumnName("IDINVCAPPL")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idn)
                    .IsRequired()
                    .HasColumnName("IDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmitto)
                    .IsRequired()
                    .HasColumnName("IDRMITTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idvend)
                    .IsRequired()
                    .HasColumnName("IDVEND")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Miscrmitto)
                    .IsRequired()
                    .HasColumnName("MISCRMITTO")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Origcomp)
                    .IsRequired()
                    .HasColumnName("ORIGCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Pctdisc)
                    .HasColumnName("PCTDISC")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatebc)
                    .HasColumnName("RATEDATEBC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatetc)
                    .HasColumnName("RATEDATETC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchbc)
                    .HasColumnName("RATEEXCHBC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchtc)
                    .HasColumnName("RATEEXCHTC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateopbc).HasColumnName("RATEOPBC");

                entity.Property(e => e.Rateoptc).HasColumnName("RATEOPTC");

                entity.Property(e => e.Ratetypebc)
                    .IsRequired()
                    .HasColumnName("RATETYPEBC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratetypetc)
                    .IsRequired()
                    .HasColumnName("RATETYPETC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revinvc).HasColumnName("REVINVC");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swratebc).HasColumnName("SWRATEBC");

                entity.Property(e => e.Swratetc).HasColumnName("SWRATETC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swstatus).HasColumnName("SWSTATUS");

                entity.Property(e => e.Textref)
                    .IsRequired()
                    .HasColumnName("TEXTREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVAppjs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPPJS");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateposted)
                    .HasColumnName("DATEPOSTED")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepostgl)
                    .HasColumnName("DATEPOSTGL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Pgmver)
                    .IsRequired()
                    .HasColumnName("PGMVER")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Swglconsl).HasColumnName("SWGLCONSL");

                entity.Property(e => e.Swpostgl).HasColumnName("SWPOSTGL");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVAprta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPRTA");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntentered)
                    .HasColumnName("CNTENTERED")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codedesc)
                    .IsRequired()
                    .HasColumnName("CODEDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedistyp).HasColumnName("CODEDISTYP");

                entity.Property(e => e.Codeduetyp).HasColumnName("CODEDUETYP");

                entity.Property(e => e.Codevat).HasColumnName("CODEVAT");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateinactv)
                    .HasColumnName("DATEINACTV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Disdayend1)
                    .HasColumnName("DISDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend2)
                    .HasColumnName("DISDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend3)
                    .HasColumnName("DISDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayend4)
                    .HasColumnName("DISDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr1)
                    .HasColumnName("DISDAYSTR1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr2)
                    .HasColumnName("DISDAYSTR2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr3)
                    .HasColumnName("DISDAYSTR3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdaystr4)
                    .HasColumnName("DISDAYSTR4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse1)
                    .HasColumnName("DISDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse2)
                    .HasColumnName("DISDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse3)
                    .HasColumnName("DISDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Disdayuse4)
                    .HasColumnName("DISDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd1)
                    .HasColumnName("DISMTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd2)
                    .HasColumnName("DISMTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd3)
                    .HasColumnName("DISMTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dismthadd4)
                    .HasColumnName("DISMTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend1)
                    .HasColumnName("DUEDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend2)
                    .HasColumnName("DUEDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend3)
                    .HasColumnName("DUEDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayend4)
                    .HasColumnName("DUEDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr1)
                    .HasColumnName("DUEDAYSTR1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr2)
                    .HasColumnName("DUEDAYSTR2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr3)
                    .HasColumnName("DUEDAYSTR3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedaystr4)
                    .HasColumnName("DUEDAYSTR4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse1)
                    .HasColumnName("DUEDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse2)
                    .HasColumnName("DUEDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse3)
                    .HasColumnName("DUEDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duedayuse4)
                    .HasColumnName("DUEDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd1)
                    .HasColumnName("DUEMTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd2)
                    .HasColumnName("DUEMTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd3)
                    .HasColumnName("DUEMTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duemthadd4)
                    .HasColumnName("DUEMTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Pctduetot)
                    .HasColumnName("PCTDUETOT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swmultpaym).HasColumnName("SWMULTPAYM");

                entity.Property(e => e.Termscode)
                    .IsRequired()
                    .HasColumnName("TERMSCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVApven>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPVEN");

                entity.Property(e => e.Amtbaldueh)
                    .HasColumnName("AMTBALDUEH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalduet)
                    .HasColumnName("AMTBALDUET")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhih)
                    .HasColumnName("AMTBALHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilh)
                    .HasColumnName("AMTBALHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilt)
                    .HasColumnName("AMTBALHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhit)
                    .HasColumnName("AMTBALHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtballarv)
                    .HasColumnName("AMTBALLARV")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrlimt)
                    .HasColumnName("AMTCRLIMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhih)
                    .HasColumnName("AMTINVHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilh)
                    .HasColumnName("AMTINVHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilt)
                    .HasColumnName("AMTINVHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhit)
                    .HasColumnName("AMTINVHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdtc)
                    .HasColumnName("AMTINVPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadh)
                    .HasColumnName("AMTLASTADH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadt)
                    .HasColumnName("AMTLASTADT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrh)
                    .HasColumnName("AMTLASTCRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrt)
                    .HasColumnName("AMTLASTCRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdih)
                    .HasColumnName("AMTLASTDIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdit)
                    .HasColumnName("AMTLASTDIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrh)
                    .HasColumnName("AMTLASTDRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrt)
                    .HasColumnName("AMTLASTDRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivh)
                    .HasColumnName("AMTLASTIVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivt)
                    .HasColumnName("AMTLASTIVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyh)
                    .HasColumnName("AMTLASTPYH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyt)
                    .HasColumnName("AMTLASTPYT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvh)
                    .HasColumnName("AMTPPDINVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvt)
                    .HasColumnName("AMTPPDINVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthhcur)
                    .HasColumnName("AMTWTHHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthlyhc)
                    .HasColumnName("AMTWTHLYHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthlytc)
                    .HasColumnName("AMTWTHLYTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwthtcur)
                    .HasColumnName("AMTWTHTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Avgpayment)
                    .HasColumnName("AVGPAYMENT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Bankid)
                    .IsRequired()
                    .HasColumnName("BANKID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Brn)
                    .IsRequired()
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Chk1099amt).HasColumnName("CHK1099AMT");

                entity.Property(e => e.Clasid)
                    .IsRequired()
                    .HasColumnName("CLASID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntinvpaid)
                    .HasColumnName("CNTINVPAID")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntnbrchks)
                    .HasColumnName("CNTNBRCHKS")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntopeninv)
                    .HasColumnName("CNTOPENINV")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntppdinvc)
                    .HasColumnName("CNTPPDINVC")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codecheck)
                    .IsRequired()
                    .HasColumnName("CODECHECK")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datebalhi)
                    .HasColumnName("DATEBALHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebalhil)
                    .HasColumnName("DATEBALHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvchi)
                    .HasColumnName("DATEINVCHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvhil)
                    .HasColumnName("DATEINVHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastac)
                    .HasColumnName("DATELASTAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastcr)
                    .HasColumnName("DATELASTCR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdi)
                    .HasColumnName("DATELASTDI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdr)
                    .HasColumnName("DATELASTDR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastpa)
                    .HasColumnName("DATELASTPA")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstadj)
                    .HasColumnName("DATELSTADJ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datestart)
                    .HasColumnName("DATESTART")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Daystopay)
                    .HasColumnName("DAYSTOPAY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Delmethod).HasColumnName("DELMETHOD");

                entity.Property(e => e.Distcode)
                    .IsRequired()
                    .HasColumnName("DISTCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distsetid)
                    .IsRequired()
                    .HasColumnName("DISTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dtlastrval)
                    .HasColumnName("DTLASTRVAL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dupamtcode).HasColumnName("DUPAMTCODE");

                entity.Property(e => e.Dupdatecd).HasColumnName("DUPDATECD");

                entity.Property(e => e.Dupinvccd).HasColumnName("DUPINVCCD");

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasColumnName("EMAIL1")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email2)
                    .IsRequired()
                    .HasColumnName("EMAIL2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glaccnt)
                    .IsRequired()
                    .HasColumnName("GLACCNT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchi)
                    .IsRequired()
                    .HasColumnName("IDINVCHI")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchily)
                    .IsRequired()
                    .HasColumnName("IDINVCHILY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idppnt)
                    .IsRequired()
                    .HasColumnName("IDPPNT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Legalname)
                    .IsRequired()
                    .HasColumnName("LEGALNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nextcuid).HasColumnName("NEXTCUID");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Primrmit)
                    .IsRequired()
                    .HasColumnName("PRIMRMIT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Prtsepchks).HasColumnName("PRTSEPCHKS");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdays).HasColumnName("RTGDAYS");

                entity.Property(e => e.Rtgpercent)
                    .HasColumnName("RTGPERCENT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shortname)
                    .IsRequired()
                    .HasColumnName("SHORTNAME")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Subjtowthh).HasColumnName("SUBJTOWTHH");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swdistby).HasColumnName("SWDISTBY");

                entity.Property(e => e.Swhold).HasColumnName("SWHOLD");

                entity.Property(e => e.Swtxinc1).HasColumnName("SWTXINC1");

                entity.Property(e => e.Swtxinc2).HasColumnName("SWTXINC2");

                entity.Property(e => e.Swtxinc3).HasColumnName("SWTXINC3");

                entity.Property(e => e.Swtxinc4).HasColumnName("SWTXINC4");

                entity.Property(e => e.Swtxinc5).HasColumnName("SWTXINC5");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxidtype).HasColumnName("TAXIDTYPE");

                entity.Property(e => e.Taxnbr)
                    .IsRequired()
                    .HasColumnName("TAXNBR")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxnote2sw).HasColumnName("TAXNOTE2SW");

                entity.Property(e => e.Taxrptsw).HasColumnName("TAXRPTSW");

                entity.Property(e => e.Termscode)
                    .IsRequired()
                    .HasColumnName("TERMSCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Vendname)
                    .IsRequired()
                    .HasColumnName("VENDNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vendorid)
                    .IsRequired()
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVApveno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPVENO");

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Optfield)
                    .IsRequired()
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swset).HasColumnName("SWSET");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vendorid)
                    .IsRequired()
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVApvgr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPVGR");

                entity.Property(e => e.Acctsetid)
                    .IsRequired()
                    .HasColumnName("ACCTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bankid)
                    .IsRequired()
                    .HasColumnName("BANKID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Classid)
                    .IsRequired()
                    .HasColumnName("CLASSID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descriptn)
                    .IsRequired()
                    .HasColumnName("DESCRIPTN")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distcode)
                    .IsRequired()
                    .HasColumnName("DISTCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Distsetid)
                    .IsRequired()
                    .HasColumnName("DISTSETID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Duplamt).HasColumnName("DUPLAMT");

                entity.Property(e => e.Dupldate).HasColumnName("DUPLDATE");

                entity.Property(e => e.Duplinvc).HasColumnName("DUPLINVC");

                entity.Property(e => e.Glacctid)
                    .IsRequired()
                    .HasColumnName("GLACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Inactivedt)
                    .HasColumnName("INACTIVEDT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Lstmntdate)
                    .HasColumnName("LSTMNTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Prtsepchks).HasColumnName("PRTSEPCHKS");

                entity.Property(e => e.Ratetypeid)
                    .IsRequired()
                    .HasColumnName("RATETYPEID")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Subjwthhsw).HasColumnName("SUBJWTHHSW");

                entity.Property(e => e.Swdistby).HasColumnName("SWDISTBY");

                entity.Property(e => e.Swtxinc1).HasColumnName("SWTXINC1");

                entity.Property(e => e.Swtxinc2).HasColumnName("SWTXINC2");

                entity.Property(e => e.Swtxinc3).HasColumnName("SWTXINC3");

                entity.Property(e => e.Swtxinc4).HasColumnName("SWTXINC4");

                entity.Property(e => e.Swtxinc5).HasColumnName("SWTXINC5");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxgrp)
                    .IsRequired()
                    .HasColumnName("TAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxrptsw).HasColumnName("TAXRPTSW");

                entity.Property(e => e.Termcode)
                    .IsRequired()
                    .HasColumnName("TERMCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVApvsm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAPVSM");

                entity.Property(e => e.Amtadjhc)
                    .HasColumnName("AMTADJHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtc)
                    .HasColumnName("AMTADJTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtblrvltc)
                    .HasColumnName("AMTBLRVLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrhc)
                    .HasColumnName("AMTCRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrtc)
                    .HasColumnName("AMTCRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrhc)
                    .HasColumnName("AMTDRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrtc)
                    .HasColumnName("AMTDRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinpdtc)
                    .HasColumnName("AMTINPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlosthc)
                    .HasColumnName("AMTLOSTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlosttc)
                    .HasColumnName("AMTLOSTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpurhc)
                    .HasColumnName("AMTPURHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpurtc)
                    .HasColumnName("AMTPURTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Cntadj)
                    .HasColumnName("CNTADJ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntcr)
                    .HasColumnName("CNTCR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdisc)
                    .HasColumnName("CNTDISC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdr)
                    .HasColumnName("CNTDR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdtopay)
                    .HasColumnName("CNTDTOPAY")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvc)
                    .HasColumnName("CNTINVC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvcpd)
                    .HasColumnName("CNTINVCPD")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlost)
                    .HasColumnName("CNTLOST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntperd)
                    .IsRequired()
                    .HasColumnName("CNTPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntpur)
                    .HasColumnName("CNTPUR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntyr)
                    .IsRequired()
                    .HasColumnName("CNTYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Vendorid)
                    .IsRequired()
                    .HasColumnName("VENDORID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArcsm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARCSM");

                entity.Property(e => e.Amtadjhc)
                    .HasColumnName("AMTADJHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtc)
                    .HasColumnName("AMTADJTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbarvalt)
                    .HasColumnName("AMTBARVALT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrhc)
                    .HasColumnName("AMTCRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrtc)
                    .HasColumnName("AMTCRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrhc)
                    .HasColumnName("AMTDRHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdrtc)
                    .HasColumnName("AMTDRTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtintthc)
                    .HasColumnName("AMTINTTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtintttc)
                    .HasColumnName("AMTINTTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdhc)
                    .HasColumnName("AMTINVPDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvpdtc)
                    .HasColumnName("AMTINVPDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrfhc)
                    .HasColumnName("AMTRFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrftc)
                    .HasColumnName("AMTRFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtrifhc)
                    .HasColumnName("AMTRIFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtriftc)
                    .HasColumnName("AMTRIFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwrofhc)
                    .HasColumnName("AMTWROFHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtwroftc)
                    .HasColumnName("AMTWROFTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avgdayspay)
                    .HasColumnName("AVGDAYSPAY")
                    .HasColumnType("numeric(9, 1)");

                entity.Property(e => e.Cntadj)
                    .HasColumnName("CNTADJ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntcr)
                    .HasColumnName("CNTCR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdisc)
                    .HasColumnName("CNTDISC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdr)
                    .HasColumnName("CNTDR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntdtopay)
                    .HasColumnName("CNTDTOPAY")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntintt)
                    .HasColumnName("CNTINTT")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvc)
                    .HasColumnName("CNTINVC")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntinvcpd)
                    .HasColumnName("CNTINVCPD")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntperd)
                    .IsRequired()
                    .HasColumnName("CNTPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntrf)
                    .HasColumnName("CNTRF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntrif)
                    .HasColumnName("CNTRIF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntwrof)
                    .HasColumnName("CNTWROF")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntyr)
                    .IsRequired()
                    .HasColumnName("CNTYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArcsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARCSP");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ctacemail)
                    .IsRequired()
                    .HasColumnName("CTACEMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fob)
                    .IsRequired()
                    .HasColumnName("FOB")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshpt)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHPT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("LOCATION")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namelocn)
                    .IsRequired()
                    .HasColumnName("NAMELOCN")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Priclist)
                    .IsRequired()
                    .HasColumnName("PRICLIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shipvia)
                    .IsRequired()
                    .HasColumnName("SHIPVIA")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviacode)
                    .IsRequired()
                    .HasColumnName("SHPVIACODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviadesc)
                    .IsRequired()
                    .HasColumnName("SHPVIADESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Spclinst)
                    .IsRequired()
                    .HasColumnName("SPCLINST")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVArcus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARCUS");

                entity.Property(e => e.Amtbaldueh)
                    .HasColumnName("AMTBALDUEH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalduet)
                    .HasColumnName("AMTBALDUET")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalfwdh)
                    .HasColumnName("AMTBALFWDH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalfwdt)
                    .HasColumnName("AMTBALFWDT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhih)
                    .HasColumnName("AMTBALHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilh)
                    .HasColumnName("AMTBALHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhilt)
                    .HasColumnName("AMTBALHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbalhit)
                    .HasColumnName("AMTBALHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtballarv)
                    .HasColumnName("AMTBALLARV")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcrlimt)
                    .HasColumnName("AMTCRLIMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhih)
                    .HasColumnName("AMTINVHIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilh)
                    .HasColumnName("AMTINVHILH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhilt)
                    .HasColumnName("AMTINVHILT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvhit)
                    .HasColumnName("AMTINVHIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadh)
                    .HasColumnName("AMTLASTADH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastadt)
                    .HasColumnName("AMTLASTADT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrh)
                    .HasColumnName("AMTLASTCRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastcrt)
                    .HasColumnName("AMTLASTCRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdih)
                    .HasColumnName("AMTLASTDIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdit)
                    .HasColumnName("AMTLASTDIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrh)
                    .HasColumnName("AMTLASTDRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastdrt)
                    .HasColumnName("AMTLASTDRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastinh)
                    .HasColumnName("AMTLASTINH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastint)
                    .HasColumnName("AMTLASTINT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivh)
                    .HasColumnName("AMTLASTIVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastivt)
                    .HasColumnName("AMTLASTIVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyh)
                    .HasColumnName("AMTLASTPYH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastpyt)
                    .HasColumnName("AMTLASTPYT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrfh)
                    .HasColumnName("AMTLASTRFH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrft)
                    .HasColumnName("AMTLASTRFT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrih)
                    .HasColumnName("AMTLASTRIH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastrit)
                    .HasColumnName("AMTLASTRIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlaststh)
                    .HasColumnName("AMTLASTSTH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlaststt)
                    .HasColumnName("AMTLASTSTT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastwrh)
                    .HasColumnName("AMTLASTWRH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtlastwrt)
                    .HasColumnName("AMTLASTWRT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpdue)
                    .HasColumnName("AMTPDUE")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvh)
                    .HasColumnName("AMTPPDINVH")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtppdinvt)
                    .HasColumnName("AMTPPDINVT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Billmethod).HasColumnName("BILLMETHOD");

                entity.Property(e => e.Brn)
                    .IsRequired()
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Category).HasColumnName("CATEGORY");

                entity.Property(e => e.Cntinvpaid)
                    .HasColumnName("CNTINVPAID")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntopeninv)
                    .HasColumnName("CNTOPENINV")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntppdinvc)
                    .HasColumnName("CNTPPDINVC")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codecheck)
                    .IsRequired()
                    .HasColumnName("CODECHECK")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codectry)
                    .IsRequired()
                    .HasColumnName("CODECTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedab)
                    .IsRequired()
                    .HasColumnName("CODEDAB")
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedabrtg)
                    .IsRequired()
                    .HasColumnName("CODEDABRTG")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codepstl)
                    .IsRequired()
                    .HasColumnName("CODEPSTL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codestte)
                    .IsRequired()
                    .HasColumnName("CODESTTE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ctacfax)
                    .IsRequired()
                    .HasColumnName("CTACFAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ctacphone)
                    .IsRequired()
                    .HasColumnName("CTACPHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Custtype).HasColumnName("CUSTTYPE");

                entity.Property(e => e.Datebalhi)
                    .HasColumnName("DATEBALHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebalhil)
                    .HasColumnName("DATEBALHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedab)
                    .HasColumnName("DATEDAB")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvchi)
                    .HasColumnName("DATEINVCHI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvhil)
                    .HasColumnName("DATEINVHIL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastac)
                    .HasColumnName("DATELASTAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastad)
                    .HasColumnName("DATELASTAD")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastcr)
                    .HasColumnName("DATELASTCR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdi)
                    .HasColumnName("DATELASTDI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdq)
                    .HasColumnName("DATELASTDQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastdr)
                    .HasColumnName("DATELASTDR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastin)
                    .HasColumnName("DATELASTIN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastiv)
                    .HasColumnName("DATELASTIV")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastpa)
                    .HasColumnName("DATELASTPA")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastrf)
                    .HasColumnName("DATELASTRF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastri)
                    .HasColumnName("DATELASTRI")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastst)
                    .HasColumnName("DATELASTST")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastwr)
                    .HasColumnName("DATELASTWR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datestart)
                    .HasColumnName("DATESTART")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Daystopay)
                    .HasColumnName("DAYSTOPAY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Delmethod).HasColumnName("DELMETHOD");

                entity.Property(e => e.Dtbegbalfw)
                    .HasColumnName("DTBEGBALFW")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dtlastrval)
                    .HasColumnName("DTLASTRVAL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasColumnName("EMAIL1")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email2)
                    .IsRequired()
                    .HasColumnName("EMAIL2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fob)
                    .IsRequired()
                    .HasColumnName("FOB")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idautocash)
                    .IsRequired()
                    .HasColumnName("IDAUTOCASH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcycl)
                    .IsRequired()
                    .HasColumnName("IDBILLCYCL")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddlnq)
                    .IsRequired()
                    .HasColumnName("IDDLNQ")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchi)
                    .IsRequired()
                    .HasColumnName("IDINVCHI")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvchily)
                    .IsRequired()
                    .HasColumnName("IDINVCHILY")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idnatacct)
                    .IsRequired()
                    .HasColumnName("IDNATACCT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idppnt)
                    .IsRequired()
                    .HasColumnName("IDPPNT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsvcchrg)
                    .IsRequired()
                    .HasColumnName("IDSVCCHRG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi1)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi2)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi3)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi4)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtaxregi5)
                    .IsRequired()
                    .HasColumnName("IDTAXREGI5")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("LOCATION")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecity)
                    .IsRequired()
                    .HasColumnName("NAMECITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namectac)
                    .IsRequired()
                    .HasColumnName("NAMECTAC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namecust)
                    .IsRequired()
                    .HasColumnName("NAMECUST")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nextcuid).HasColumnName("NEXTCUID");

                entity.Property(e => e.Overamt)
                    .HasColumnName("OVERAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overdays).HasColumnName("OVERDAYS");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Priclist)
                    .IsRequired()
                    .HasColumnName("PRICLIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Primshipto)
                    .IsRequired()
                    .HasColumnName("PRIMSHIPTO")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdays).HasColumnName("RTGDAYS");

                entity.Property(e => e.Rtgpercent)
                    .HasColumnName("RTGPERCENT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviacode)
                    .IsRequired()
                    .HasColumnName("SHPVIACODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Shpviadesc)
                    .IsRequired()
                    .HasColumnName("SHPVIADESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swbackordr).HasColumnName("SWBACKORDR");

                entity.Property(e => e.Swbalfwd).HasColumnName("SWBALFWD");

                entity.Property(e => e.Swchkduppo).HasColumnName("SWCHKDUPPO");

                entity.Property(e => e.Swchklimit).HasColumnName("SWCHKLIMIT");

                entity.Property(e => e.Swchkover).HasColumnName("SWCHKOVER");

                entity.Property(e => e.Swhold).HasColumnName("SWHOLD");

                entity.Property(e => e.Swpartship).HasColumnName("SWPARTSHIP");

                entity.Property(e => e.Swprtdlnq).HasColumnName("SWPRTDLNQ");

                entity.Property(e => e.Swprtstmt).HasColumnName("SWPRTSTMT");

                entity.Property(e => e.Swwebshop).HasColumnName("SWWEBSHOP");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textphon1)
                    .IsRequired()
                    .HasColumnName("TEXTPHON1")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textphon2)
                    .IsRequired()
                    .HasColumnName("TEXTPHON2")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textsnam)
                    .IsRequired()
                    .HasColumnName("TEXTSNAM")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre1)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre2)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre3)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE3")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textstre4)
                    .IsRequired()
                    .HasColumnName("TEXTSTRE4")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArcuso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARCUSO");

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Optfield)
                    .IsRequired()
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swset).HasColumnName("SWSET");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArgro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARGRO");

                entity.Property(e => e.Amcrlmcur1)
                    .HasColumnName("AMCRLMCUR1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur2)
                    .HasColumnName("AMCRLMCUR2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur3)
                    .HasColumnName("AMCRLMCUR3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur4)
                    .HasColumnName("AMCRLMCUR4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amcrlmcur5)
                    .HasColumnName("AMCRLMCUR5")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur1)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR1")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur2)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR2")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur3)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR3")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur4)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR4")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cdcrlmcur5)
                    .IsRequired()
                    .HasColumnName("CDCRLMCUR5")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idautocash)
                    .IsRequired()
                    .HasColumnName("IDAUTOCASH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcycl)
                    .IsRequired()
                    .HasColumnName("IDBILLCYCL")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddlnq)
                    .IsRequired()
                    .HasColumnName("IDDLNQ")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsvcchg)
                    .IsRequired()
                    .HasColumnName("IDSVCCHG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Overamt1)
                    .HasColumnName("OVERAMT1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt2)
                    .HasColumnName("OVERAMT2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt3)
                    .HasColumnName("OVERAMT3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt4)
                    .HasColumnName("OVERAMT4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overamt5)
                    .HasColumnName("OVERAMT5")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Overdays).HasColumnName("OVERDAYS");

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swbalfwd).HasColumnName("SWBALFWD");

                entity.Property(e => e.Swchklimit).HasColumnName("SWCHKLIMIT");

                entity.Property(e => e.Swchkover).HasColumnName("SWCHKOVER");

                entity.Property(e => e.Swcrovrd).HasColumnName("SWCROVRD");

                entity.Property(e => e.Swprtstmt).HasColumnName("SWPRTSTMT");

                entity.Property(e => e.Taxstts1).HasColumnName("TAXSTTS1");

                entity.Property(e => e.Taxstts2).HasColumnName("TAXSTTS2");

                entity.Property(e => e.Taxstts3).HasColumnName("TAXSTTS3");

                entity.Property(e => e.Taxstts4).HasColumnName("TAXSTTS4");

                entity.Property(e => e.Taxstts5).HasColumnName("TAXSTTS5");

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVArobl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAROBL");

                entity.Property(e => e.Amtbase1hc)
                    .HasColumnName("AMTBASE1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase1tc)
                    .HasColumnName("AMTBASE1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2hc)
                    .HasColumnName("AMTBASE2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase2tc)
                    .HasColumnName("AMTBASE2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3hc)
                    .HasColumnName("AMTBASE3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase3tc)
                    .HasColumnName("AMTBASE3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4hc)
                    .HasColumnName("AMTBASE4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase4tc)
                    .HasColumnName("AMTBASE4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5hc)
                    .HasColumnName("AMTBASE5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtbase5tc)
                    .HasColumnName("AMTBASE5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdischc)
                    .HasColumnName("AMTDISCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdisctc)
                    .HasColumnName("AMTDISCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduehc)
                    .HasColumnName("AMTDUEHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtduetc)
                    .HasColumnName("AMTDUETC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvchc)
                    .HasColumnName("AMTINVCHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxhc)
                    .HasColumnName("AMTNONTXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtnontxtc)
                    .HasColumnName("AMTNONTXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtremit)
                    .HasColumnName("AMTREMIT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1hc)
                    .HasColumnName("AMTTAX1HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax1tc)
                    .HasColumnName("AMTTAX1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2hc)
                    .HasColumnName("AMTTAX2HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax2tc)
                    .HasColumnName("AMTTAX2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3hc)
                    .HasColumnName("AMTTAX3HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax3tc)
                    .HasColumnName("AMTTAX3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4hc)
                    .HasColumnName("AMTTAX4HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax4tc)
                    .HasColumnName("AMTTAX4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5hc)
                    .HasColumnName("AMTTAX5HC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttax5tc)
                    .HasColumnName("AMTTAX5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxblhc)
                    .HasColumnName("AMTTXBLHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttxbltc)
                    .HasColumnName("AMTTXBLTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Arversion)
                    .IsRequired()
                    .HasColumnName("ARVERSION")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntlastseq)
                    .HasColumnName("CNTLASTSEQ")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpaid)
                    .HasColumnName("CNTLSTPAID")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntlstpyst)
                    .HasColumnName("CNTLSTPYST")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntoblj).HasColumnName("CNTOBLJ");

                entity.Property(e => e.Cnttotpaym)
                    .HasColumnName("CNTTOTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurnrc)
                    .IsRequired()
                    .HasColumnName("CODECURNRC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codedlqsts).HasColumnName("CODEDLQSTS");

                entity.Property(e => e.Codeslsp1)
                    .IsRequired()
                    .HasColumnName("CODESLSP1")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp2)
                    .IsRequired()
                    .HasColumnName("CODESLSP2")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp3)
                    .IsRequired()
                    .HasColumnName("CODESLSP3")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp4)
                    .IsRequired()
                    .HasColumnName("CODESLSP4")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp5)
                    .IsRequired()
                    .HasColumnName("CODESLSP5")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax1)
                    .IsRequired()
                    .HasColumnName("CODETAX1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax2)
                    .IsRequired()
                    .HasColumnName("CODETAX2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax3)
                    .IsRequired()
                    .HasColumnName("CODETAX3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax4)
                    .IsRequired()
                    .HasColumnName("CODETAX4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetax5)
                    .IsRequired()
                    .HasColumnName("CODETAX5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterr)
                    .IsRequired()
                    .HasColumnName("CODETERR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateasof)
                    .HasColumnName("DATEASOF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datefrstbk)
                    .HasColumnName("DATEFRSTBK")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstact)
                    .HasColumnName("DATELSTACT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstdlq)
                    .HasColumnName("DATELSTDLQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelstrvl)
                    .HasColumnName("DATELSTRVL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepaid)
                    .HasColumnName("DATEPAID")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Descinvc)
                    .IsRequired()
                    .HasColumnName("DESCINVC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Exchratehc)
                    .HasColumnName("EXCHRATEHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustpo)
                    .IsRequired()
                    .HasColumnName("IDCUSTPO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshpt)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHPT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idnatacct)
                    .IsRequired()
                    .HasColumnName("IDNATACCT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idordernbr)
                    .IsRequired()
                    .HasColumnName("IDORDERNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idshipnbr)
                    .IsRequired()
                    .HasColumnName("IDSHIPNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Invctype).HasColumnName("INVCTYPE");

                entity.Property(e => e.Orate)
                    .HasColumnName("ORATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Oratedate)
                    .HasColumnName("ORATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Orateop).HasColumnName("ORATEOP");

                entity.Property(e => e.Oratetype)
                    .IsRequired()
                    .HasColumnName("ORATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Oswrate).HasColumnName("OSWRATE");

                entity.Property(e => e.Pctsasplt1)
                    .HasColumnName("PCTSASPLT1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt2)
                    .HasColumnName("PCTSASPLT2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt3)
                    .HasColumnName("PCTSASPLT3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt4)
                    .HasColumnName("PCTSASPLT4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Pctsasplt5)
                    .HasColumnName("PCTSASPLT5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedaterc)
                    .HasColumnName("RATEDATERC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Rateoprc).HasColumnName("RATEOPRC");

                entity.Property(e => e.Raterc)
                    .HasColumnName("RATERC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetyperc)
                    .IsRequired()
                    .HasColumnName("RATETYPERC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgoamthc)
                    .HasColumnName("RTGOAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgoamttc)
                    .HasColumnName("RTGOAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceappl)
                    .IsRequired()
                    .HasColumnName("SRCEAPPL")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swpaid).HasColumnName("SWPAID");

                entity.Property(e => e.Swrateovrd).HasColumnName("SWRATEOVRD");

                entity.Property(e => e.Swraterc).HasColumnName("SWRATERC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgout).HasColumnName("SWRTGOUT");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Swtaxinput).HasColumnName("SWTAXINPUT");

                entity.Property(e => e.Swtxctlrc).HasColumnName("SWTXCTLRC");

                entity.Property(e => e.Swtxrtgrpt).HasColumnName("SWTXRTGRPT");

                entity.Property(e => e.Taxclass1).HasColumnName("TAXCLASS1");

                entity.Property(e => e.Taxclass2).HasColumnName("TAXCLASS2");

                entity.Property(e => e.Taxclass3).HasColumnName("TAXCLASS3");

                entity.Property(e => e.Taxclass4).HasColumnName("TAXCLASS4");

                entity.Property(e => e.Taxclass5).HasColumnName("TAXCLASS5");

                entity.Property(e => e.Taxversion).HasColumnName("TAXVERSION");

                entity.Property(e => e.Trxtypeid).HasColumnName("TRXTYPEID");

                entity.Property(e => e.Trxtypetxt).HasColumnName("TRXTYPETXT");

                entity.Property(e => e.Txamtrt1tc)
                    .HasColumnName("TXAMTRT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt2tc)
                    .HasColumnName("TXAMTRT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt3tc)
                    .HasColumnName("TXAMTRT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt4tc)
                    .HasColumnName("TXAMTRT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txamtrt5tc)
                    .HasColumnName("TXAMTRT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert1tc)
                    .HasColumnName("TXBSERT1TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert2tc)
                    .HasColumnName("TXBSERT2TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert3tc)
                    .HasColumnName("TXBSERT3TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert4tc)
                    .HasColumnName("TXBSERT4TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Txbsert5tc)
                    .HasColumnName("TXBSERT5TC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");

                entity.Property(e => e.Yplastact)
                    .IsRequired()
                    .HasColumnName("YPLASTACT")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArobp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vAROBP");

                entity.Property(e => e.Amtpaymhc)
                    .HasColumnName("AMTPAYMHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtpaymtc)
                    .HasColumnName("AMTPAYMTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntpaymnbr)
                    .HasColumnName("CNTPAYMNBR")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntseqnce)
                    .HasColumnName("CNTSEQNCE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelststm)
                    .HasColumnName("DATELSTSTM")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datermit)
                    .HasColumnName("DATERMIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustrmit)
                    .IsRequired()
                    .HasColumnName("IDCUSTRMIT")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idmemoxref)
                    .IsRequired()
                    .HasColumnName("IDMEMOXREF")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idprepaid)
                    .IsRequired()
                    .HasColumnName("IDPREPAID")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Pymcuid).HasColumnName("PYMCUID");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Stmtseq).HasColumnName("STMTSEQ");

                entity.Property(e => e.Swinvcdel).HasColumnName("SWINVCDEL");

                entity.Property(e => e.Swovrdrate).HasColumnName("SWOVRDRATE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");
            });

            modelBuilder.Entity<SageVArpjd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARPJD");

                entity.Property(e => e.Accttype).HasColumnName("ACCTTYPE");

                entity.Property(e => e.Amtadjhcur)
                    .HasColumnName("AMTADJHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtadjtcur)
                    .HasColumnName("AMTADJTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtcosthc)
                    .HasColumnName("AMTCOSTHC")
                    .HasColumnType("numeric(19, 6)");

                entity.Property(e => e.Amtcosttc)
                    .HasColumnName("AMTCOSTTC")
                    .HasColumnType("numeric(19, 6)");

                entity.Property(e => e.Amtdschcur)
                    .HasColumnName("AMTDSCHCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtdsctcur)
                    .HasColumnName("AMTDSCTCUR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndhc)
                    .HasColumnName("AMTEXTNDHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtextndtc)
                    .HasColumnName("AMTEXTNDTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxhc)
                    .HasColumnName("AMTTAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttaxtc)
                    .HasColumnName("AMTTAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Basetaxhc)
                    .HasColumnName("BASETAXHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Basetaxtc)
                    .HasColumnName("BASETAXTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntline)
                    .HasColumnName("CNTLINE")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Cntseqence).HasColumnName("CNTSEQENCE");

                entity.Property(e => e.Codecurn)
                    .IsRequired()
                    .HasColumnName("CODECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Edn)
                    .IsRequired()
                    .HasColumnName("EDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glcomment)
                    .IsRequired()
                    .HasColumnName("GLCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gldesc)
                    .IsRequired()
                    .HasColumnName("GLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glref)
                    .IsRequired()
                    .HasColumnName("GLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacct)
                    .IsRequired()
                    .HasColumnName("IDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iddist)
                    .IsRequired()
                    .HasColumnName("IDDIST")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .IsRequired()
                    .HasColumnName("IDITEM")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idratetype)
                    .IsRequired()
                    .HasColumnName("IDRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idtrans).HasColumnName("IDTRANS");

                entity.Property(e => e.Itemdesc)
                    .IsRequired()
                    .HasColumnName("ITEMDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Longserial).HasColumnName("LONGSERIAL");

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Qtyinvc)
                    .HasColumnName("QTYINVC")
                    .HasColumnType("numeric(19, 5)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedoc)
                    .HasColumnName("RATEDOC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchhc)
                    .HasColumnName("RATEEXCHHC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Typedetl).HasColumnName("TYPEDETL");

                entity.Property(e => e.Unitmeas)
                    .IsRequired()
                    .HasColumnName("UNITMEAS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVArpjh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARPJH");

                entity.Property(e => e.Amtbc)
                    .HasColumnName("AMTBC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amthc)
                    .HasColumnName("AMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amtinvctc)
                    .HasColumnName("AMTINVCTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Amttc)
                    .HasColumnName("AMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntadjnbr)
                    .HasColumnName("CNTADJNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntbtch)
                    .HasColumnName("CNTBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Cntitem)
                    .HasColumnName("CNTITEM")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Cntpaym)
                    .HasColumnName("CNTPAYM")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.Codecurnbc)
                    .IsRequired()
                    .HasColumnName("CODECURNBC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codecurntc)
                    .IsRequired()
                    .HasColumnName("CODECURNTC")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codetaxgrp)
                    .IsRequired()
                    .HasColumnName("CODETAXGRP")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebtch)
                    .HasColumnName("DATEBTCH")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedepst)
                    .HasColumnName("DATEDEPST")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedisc)
                    .HasColumnName("DATEDISC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datedue)
                    .HasColumnName("DATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinvc)
                    .HasColumnName("DATEINVC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Depline).HasColumnName("DEPLINE");

                entity.Property(e => e.Depseq).HasColumnName("DEPSEQ");

                entity.Property(e => e.Depstnbr)
                    .HasColumnName("DEPSTNBR")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Edn)
                    .IsRequired()
                    .HasColumnName("EDN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Enteredby)
                    .IsRequired()
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscper)
                    .IsRequired()
                    .HasColumnName("FISCPER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscyr)
                    .IsRequired()
                    .HasColumnName("FISCYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glbatch)
                    .IsRequired()
                    .HasColumnName("GLBATCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Glentry)
                    .IsRequired()
                    .HasColumnName("GLENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbank)
                    .IsRequired()
                    .HasColumnName("IDBANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idbillcyc)
                    .IsRequired()
                    .HasColumnName("IDBILLCYC")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcust)
                    .IsRequired()
                    .HasColumnName("IDCUST")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcustshp)
                    .IsRequired()
                    .HasColumnName("IDCUSTSHP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idgrp)
                    .IsRequired()
                    .HasColumnName("IDGRP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvc)
                    .IsRequired()
                    .HasColumnName("IDINVC")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idinvcappl)
                    .IsRequired()
                    .HasColumnName("IDINVCAPPL")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idrmit)
                    .IsRequired()
                    .HasColumnName("IDRMIT")
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Namermit)
                    .IsRequired()
                    .HasColumnName("NAMERMIT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymcode)
                    .IsRequired()
                    .HasColumnName("PAYMCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Paymtype).HasColumnName("PAYMTYPE");

                entity.Property(e => e.Pctdisc)
                    .HasColumnName("PCTDISC")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatebc)
                    .HasColumnName("RATEDATEBC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ratedatetc)
                    .HasColumnName("RATEDATETC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateexchbc)
                    .HasColumnName("RATEEXCHBC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateexchtc)
                    .HasColumnName("RATEEXCHTC")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Rateopbc).HasColumnName("RATEOPBC");

                entity.Property(e => e.Rateoptc).HasColumnName("RATEOPTC");

                entity.Property(e => e.Ratetypebc)
                    .IsRequired()
                    .HasColumnName("RATETYPEBC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratetypetc)
                    .IsRequired()
                    .HasColumnName("RATETYPETC")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revinvc).HasColumnName("REVINVC");

                entity.Property(e => e.Rtgamthc)
                    .HasColumnName("RTGAMTHC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgamttc)
                    .HasColumnName("RTGAMTTC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Rtgapplyto)
                    .IsRequired()
                    .HasColumnName("RTGAPPLYTO")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgdatedue)
                    .HasColumnName("RTGDATEDUE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rtgterms)
                    .IsRequired()
                    .HasColumnName("RTGTERMS")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swjob).HasColumnName("SWJOB");

                entity.Property(e => e.Swnonrcvbl).HasColumnName("SWNONRCVBL");

                entity.Property(e => e.Swratebc).HasColumnName("SWRATEBC");

                entity.Property(e => e.Swratetc).HasColumnName("SWRATETC");

                entity.Property(e => e.Swrtg).HasColumnName("SWRTG");

                entity.Property(e => e.Swrtgrate).HasColumnName("SWRTGRATE");

                entity.Property(e => e.Textref)
                    .IsRequired()
                    .HasColumnName("TEXTREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trxtype).HasColumnName("TRXTYPE");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVArpjs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARPJS");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Datebus)
                    .HasColumnName("DATEBUS")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateposted)
                    .HasColumnName("DATEPOSTED")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datepostgl)
                    .HasColumnName("DATEPOSTGL")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Pgmver)
                    .IsRequired()
                    .HasColumnName("PGMVER")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postseqnce)
                    .HasColumnName("POSTSEQNCE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Swglconsl).HasColumnName("SWGLCONSL");

                entity.Property(e => e.Swpostgl).HasColumnName("SWPOSTGL");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");

                entity.Property(e => e.Typebtch)
                    .IsRequired()
                    .HasColumnName("TYPEBTCH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArras>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARRAS");

                entity.Property(e => e.Acctadj)
                    .IsRequired()
                    .HasColumnName("ACCTADJ")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctdisc)
                    .IsRequired()
                    .HasColumnName("ACCTDISC")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctwrof)
                    .IsRequired()
                    .HasColumnName("ACCTWROF")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Actvsw).HasColumnName("ACTVSW");

                entity.Property(e => e.Aridacct)
                    .IsRequired()
                    .HasColumnName("ARIDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cashliab)
                    .IsRequired()
                    .HasColumnName("CASHLIAB")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Curncode)
                    .IsRequired()
                    .HasColumnName("CURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dateainac)
                    .HasColumnName("DATEAINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Idacctset)
                    .IsRequired()
                    .HasColumnName("IDACCTSET")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idsusp)
                    .IsRequired()
                    .HasColumnName("IDSUSP")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmntn)
                    .HasColumnName("LASTMNTN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rlzdgain)
                    .IsRequired()
                    .HasColumnName("RLZDGAIN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rlzdloss)
                    .IsRequired()
                    .HasColumnName("RLZDLOSS")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rndacct)
                    .IsRequired()
                    .HasColumnName("RNDACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rtgacct)
                    .IsRequired()
                    .HasColumnName("RTGACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unrlgain)
                    .IsRequired()
                    .HasColumnName("UNRLGAIN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unrlloss)
                    .IsRequired()
                    .HasColumnName("UNRLLOSS")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVArrta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARRTA");

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntdueday)
                    .HasColumnName("CNTDUEDAY")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Cntentered)
                    .HasColumnName("CNTENTERED")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Codeterm)
                    .IsRequired()
                    .HasColumnName("CODETERM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ddayend1)
                    .HasColumnName("DDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend2)
                    .HasColumnName("DDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend3)
                    .HasColumnName("DDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayend4)
                    .HasColumnName("DDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt1)
                    .HasColumnName("DDAYSTRT1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt2)
                    .HasColumnName("DDAYSTRT2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt3)
                    .HasColumnName("DDAYSTRT3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddaystrt4)
                    .HasColumnName("DDAYSTRT4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse1)
                    .HasColumnName("DDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse2)
                    .HasColumnName("DDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse3)
                    .HasColumnName("DDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Ddayuse4)
                    .HasColumnName("DDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discday)
                    .HasColumnName("DISCDAY")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discnbr)
                    .HasColumnName("DISCNBR")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Discpct)
                    .HasColumnName("DISCPCT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Disctype).HasColumnName("DISCTYPE");

                entity.Property(e => e.Dmnthadd1)
                    .HasColumnName("DMNTHADD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd2)
                    .HasColumnName("DMNTHADD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd3)
                    .HasColumnName("DMNTHADD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dmnthadd4)
                    .HasColumnName("DMNTHADD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dtedscsync).HasColumnName("DTEDSCSYNC");

                entity.Property(e => e.Dteduesync).HasColumnName("DTEDUESYNC");

                entity.Property(e => e.Dudayend1)
                    .HasColumnName("DUDAYEND1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend2)
                    .HasColumnName("DUDAYEND2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend3)
                    .HasColumnName("DUDAYEND3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayend4)
                    .HasColumnName("DUDAYEND4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst1)
                    .HasColumnName("DUDAYST1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst2)
                    .HasColumnName("DUDAYST2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst3)
                    .HasColumnName("DUDAYST3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayst4)
                    .HasColumnName("DUDAYST4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse1)
                    .HasColumnName("DUDAYUSE1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse2)
                    .HasColumnName("DUDAYUSE2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse3)
                    .HasColumnName("DUDAYUSE3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dudayuse4)
                    .HasColumnName("DUDAYUSE4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duenbrdays)
                    .HasColumnName("DUENBRDAYS")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Duetype).HasColumnName("DUETYPE");

                entity.Property(e => e.Dumnthad1)
                    .HasColumnName("DUMNTHAD1")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad2)
                    .HasColumnName("DUMNTHAD2")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad3)
                    .HasColumnName("DUMNTHAD3")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Dumnthad4)
                    .HasColumnName("DUMNTHAD4")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Inacdate)
                    .HasColumnName("INACDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Lastmntn)
                    .HasColumnName("LASTMNTN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Multipaym).HasColumnName("MULTIPAYM");

                entity.Property(e => e.Pctduetot)
                    .HasColumnName("PCTDUETOT")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Textdesc)
                    .IsRequired()
                    .HasColumnName("TEXTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vatcodem).HasColumnName("VATCODEM");
            });

            modelBuilder.Entity<SageVArsap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vARSAP");

                entity.Property(e => e.Amtanltarg)
                    .HasColumnName("AMTANLTARG")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeempl)
                    .IsRequired()
                    .HasColumnName("CODEEMPL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codeslsp)
                    .IsRequired()
                    .HasColumnName("CODESLSP")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateclrd)
                    .HasColumnName("DATECLRD")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateinac)
                    .HasColumnName("DATEINAC")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Datelastmn)
                    .HasColumnName("DATELASTMN")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Nameempl)
                    .IsRequired()
                    .HasColumnName("NAMEEMPL")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Salesbase1)
                    .HasColumnName("SALESBASE1")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase2)
                    .HasColumnName("SALESBASE2")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase3)
                    .HasColumnName("SALESBASE3")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesbase4)
                    .HasColumnName("SALESBASE4")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salescomm)
                    .HasColumnName("SALESCOMM")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salescost)
                    .HasColumnName("SALESCOST")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Salesrate1)
                    .HasColumnName("SALESRATE1")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate2)
                    .HasColumnName("SALESRATE2")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate3)
                    .HasColumnName("SALESRATE3")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate4)
                    .HasColumnName("SALESRATE4")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Salesrate5)
                    .HasColumnName("SALESRATE5")
                    .HasColumnType("numeric(9, 5)");

                entity.Property(e => e.Swactv).HasColumnName("SWACTV");

                entity.Property(e => e.Swcomm).HasColumnName("SWCOMM");
            });

            modelBuilder.Entity<SageVBkjenth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vBKJENTH");

                entity.Property(e => e.Agerecld).HasColumnName("AGERECLD");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bank)
                    .IsRequired()
                    .HasColumnName("BANK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bankd)
                    .IsRequired()
                    .HasColumnName("BANKD")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bigcomment)
                    .IsRequired()
                    .HasColumnName("BIGCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bkacct)
                    .IsRequired()
                    .HasColumnName("BKACCT")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bkstmtcur)
                    .IsRequired()
                    .HasColumnName("BKSTMTCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("COMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Completed).HasColumnName("COMPLETED");

                entity.Property(e => e.Defentnum)
                    .IsRequired()
                    .HasColumnName("DEFENTNUM")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dsetcode)
                    .IsRequired()
                    .HasColumnName("DSETCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dsetcoded)
                    .IsRequired()
                    .HasColumnName("DSETCODED")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Entrynbr)
                    .IsRequired()
                    .HasColumnName("ENTRYNBR")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Entrytype).HasColumnName("ENTRYTYPE");

                entity.Property(e => e.Lines).HasColumnName("LINES");

                entity.Property(e => e.Ofxtid)
                    .IsRequired()
                    .HasColumnName("OFXTID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postdate)
                    .HasColumnName("POSTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Postperiod).HasColumnName("POSTPERIOD");

                entity.Property(e => e.Postyear)
                    .IsRequired()
                    .HasColumnName("POSTYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Processcmd).HasColumnName("PROCESSCMD");

                entity.Property(e => e.Pstseq)
                    .HasColumnName("PSTSEQ")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateop).HasColumnName("RATEOP");

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Recdate)
                    .HasColumnName("RECDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Recpent)
                    .HasColumnName("RECPENT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Recpentrec)
                    .HasColumnName("RECPENTREC")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Recperiod).HasColumnName("RECPERIOD");

                entity.Property(e => e.Recyear)
                    .IsRequired()
                    .HasColumnName("RECYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Retentno).HasColumnName("RETENTNO");

                entity.Property(e => e.Runid).HasColumnName("RUNID");

                entity.Property(e => e.Sequenceno).HasColumnName("SEQUENCENO");

                entity.Property(e => e.Serial).HasColumnName("SERIAL");

                entity.Property(e => e.Srcecurn)
                    .IsRequired()
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Totfuncamt)
                    .HasColumnName("TOTFUNCAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totfuncgro)
                    .HasColumnName("TOTFUNCGRO")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totsrceamt)
                    .HasColumnName("TOTSRCEAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totsrcegro)
                    .HasColumnName("TOTSRCEGRO")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Totstmtamt)
                    .HasColumnName("TOTSTMTAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transcur)
                    .IsRequired()
                    .HasColumnName("TRANSCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transdate)
                    .HasColumnName("TRANSDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Type).HasColumnName("TYPE");
            });

            modelBuilder.Entity<SageVCsccd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vCSCCD");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curid)
                    .IsRequired()
                    .HasColumnName("CURID")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Curname)
                    .IsRequired()
                    .HasColumnName("CURNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.Decsep)
                    .IsRequired()
                    .HasColumnName("DECSEP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Negdisp).HasColumnName("NEGDISP");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasColumnName("SYMBOL")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Symbolpos).HasColumnName("SYMBOLPOS");

                entity.Property(e => e.Thoussep)
                    .IsRequired()
                    .HasColumnName("THOUSSEP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVCscom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vCSCOM");

                entity.Property(e => e.Addr01)
                    .IsRequired()
                    .HasColumnName("ADDR01")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr02)
                    .IsRequired()
                    .HasColumnName("ADDR02")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr03)
                    .IsRequired()
                    .HasColumnName("ADDR03")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr04)
                    .IsRequired()
                    .HasColumnName("ADDR04")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bccaddr)
                    .IsRequired()
                    .HasColumnName("BCCADDR")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasColumnName("BRANCH")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Brn)
                    .IsRequired()
                    .HasColumnName("BRN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ccaddr)
                    .IsRequired()
                    .HasColumnName("CCADDR")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntrycode)
                    .IsRequired()
                    .HasColumnName("CNTRYCODE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Coname)
                    .IsRequired()
                    .HasColumnName("CONAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasColumnName("CONTACT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailaddr)
                    .IsRequired()
                    .HasColumnName("EMAILADDR")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailhost)
                    .IsRequired()
                    .HasColumnName("EMAILHOST")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Emailport).HasColumnName("EMAILPORT");

                entity.Property(e => e.Emailpswd)
                    .IsRequired()
                    .HasColumnName("EMAILPSWD")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Emailssl).HasColumnName("EMAILSSL");

                entity.Property(e => e.Emailuser)
                    .IsRequired()
                    .HasColumnName("EMAILUSER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Eurocursw).HasColumnName("EUROCURSW");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gnlssmthd).HasColumnName("GNLSSMTHD");

                entity.Property(e => e.Hndinaacct).HasColumnName("HNDINAACCT");

                entity.Property(e => e.Hndlckfsc).HasColumnName("HNDLCKFSC");

                entity.Property(e => e.Hndnexacct).HasColumnName("HNDNEXACCT");

                entity.Property(e => e.Homecur)
                    .IsRequired()
                    .HasColumnName("HOMECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Legalname)
                    .IsRequired()
                    .HasColumnName("LEGALNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Loccode)
                    .IsRequired()
                    .HasColumnName("LOCCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Loctype)
                    .IsRequired()
                    .HasColumnName("LOCTYPE")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Multicursw).HasColumnName("MULTICURSW");

                entity.Property(e => e.Orgid)
                    .IsRequired()
                    .HasColumnName("ORGID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Perdfsc).HasColumnName("PERDFSC");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Phonefmt).HasColumnName("PHONEFMT");

                entity.Property(e => e.Postal)
                    .IsRequired()
                    .HasColumnName("POSTAL")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Qtr4perd).HasColumnName("QTR4PERD");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Reportcur)
                    .IsRequired()
                    .HasColumnName("REPORTCUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxnbr)
                    .IsRequired()
                    .HasColumnName("TAXNBR")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usesmtp).HasColumnName("USESMTP");

                entity.Property(e => e.Warndays).HasColumnName("WARNDAYS");
            });

            modelBuilder.Entity<SageVCscrd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vCSCRD");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Datematch).HasColumnName("DATEMATCH");

                entity.Property(e => e.Homecur)
                    .IsRequired()
                    .HasColumnName("HOMECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateoper).HasColumnName("RATEOPER");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sourcecur)
                    .IsRequired()
                    .HasColumnName("SOURCECUR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Spread)
                    .HasColumnName("SPREAD")
                    .HasColumnType("numeric(15, 7)");
            });

            modelBuilder.Entity<SageVCsfsc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vCSFSC");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bgndate1)
                    .HasColumnName("BGNDATE1")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate10)
                    .HasColumnName("BGNDATE10")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate11)
                    .HasColumnName("BGNDATE11")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate12)
                    .HasColumnName("BGNDATE12")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate13)
                    .HasColumnName("BGNDATE13")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate2)
                    .HasColumnName("BGNDATE2")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate3)
                    .HasColumnName("BGNDATE3")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate4)
                    .HasColumnName("BGNDATE4")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate5)
                    .HasColumnName("BGNDATE5")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate6)
                    .HasColumnName("BGNDATE6")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate7)
                    .HasColumnName("BGNDATE7")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate8)
                    .HasColumnName("BGNDATE8")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Bgndate9)
                    .HasColumnName("BGNDATE9")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Enddate1)
                    .HasColumnName("ENDDATE1")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate10)
                    .HasColumnName("ENDDATE10")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate11)
                    .HasColumnName("ENDDATE11")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate12)
                    .HasColumnName("ENDDATE12")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate13)
                    .HasColumnName("ENDDATE13")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate2)
                    .HasColumnName("ENDDATE2")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate3)
                    .HasColumnName("ENDDATE3")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate4)
                    .HasColumnName("ENDDATE4")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate5)
                    .HasColumnName("ENDDATE5")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate6)
                    .HasColumnName("ENDDATE6")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate7)
                    .HasColumnName("ENDDATE7")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate8)
                    .HasColumnName("ENDDATE8")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Enddate9)
                    .HasColumnName("ENDDATE9")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fscyear)
                    .IsRequired()
                    .HasColumnName("FSCYEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Periods).HasColumnName("PERIODS");

                entity.Property(e => e.Qtr4perd).HasColumnName("QTR4PERD");

                entity.Property(e => e.Statusadj).HasColumnName("STATUSADJ");

                entity.Property(e => e.Statuscls).HasColumnName("STATUSCLS");
            });

            modelBuilder.Entity<SageVGlabk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLABK");

                entity.Property(e => e.Ablkdelm)
                    .IsRequired()
                    .HasColumnName("ABLKDELM")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdesc)
                    .IsRequired()
                    .HasColumnName("ABLKDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablklen)
                    .HasColumnName("ABLKLEN")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Ablktype)
                    .IsRequired()
                    .HasColumnName("ABLKTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkvalue)
                    .IsRequired()
                    .HasColumnName("ABLKVALUE")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkusage)
                    .HasColumnName("ABRKUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Acctblkid)
                    .IsRequired()
                    .HasColumnName("ACCTBLKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Arhusage)
                    .HasColumnName("ARHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Avhusage)
                    .HasColumnName("AVHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Closesw).HasColumnName("CLOSESW");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateeff)
                    .HasColumnName("DATEEFF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Numofkey)
                    .IsRequired()
                    .HasColumnName("NUMOFKEY")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Reqdsw).HasColumnName("REQDSW");

                entity.Property(e => e.Statusactv)
                    .IsRequired()
                    .HasColumnName("STATUSACTV")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVGlabrx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLABRX");

                entity.Property(e => e.Ablkdelm1)
                    .IsRequired()
                    .HasColumnName("ABLKDELM1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm10)
                    .IsRequired()
                    .HasColumnName("ABLKDELM10")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm2)
                    .IsRequired()
                    .HasColumnName("ABLKDELM2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm3)
                    .IsRequired()
                    .HasColumnName("ABLKDELM3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm4)
                    .IsRequired()
                    .HasColumnName("ABLKDELM4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm5)
                    .IsRequired()
                    .HasColumnName("ABLKDELM5")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm6)
                    .IsRequired()
                    .HasColumnName("ABLKDELM6")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm7)
                    .IsRequired()
                    .HasColumnName("ABLKDELM7")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm8)
                    .IsRequired()
                    .HasColumnName("ABLKDELM8")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ablkdelm9)
                    .IsRequired()
                    .HasColumnName("ABLKDELM9")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkdesc)
                    .IsRequired()
                    .HasColumnName("ABRKDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid1)
                    .IsRequired()
                    .HasColumnName("ABRKID1")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid10)
                    .IsRequired()
                    .HasColumnName("ABRKID10")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid2)
                    .IsRequired()
                    .HasColumnName("ABRKID2")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid3)
                    .IsRequired()
                    .HasColumnName("ABRKID3")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid4)
                    .IsRequired()
                    .HasColumnName("ABRKID4")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid5)
                    .IsRequired()
                    .HasColumnName("ABRKID5")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid6)
                    .IsRequired()
                    .HasColumnName("ABRKID6")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid7)
                    .IsRequired()
                    .HasColumnName("ABRKID7")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid8)
                    .IsRequired()
                    .HasColumnName("ABRKID8")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkid9)
                    .IsRequired()
                    .HasColumnName("ABRKID9")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrklen1)
                    .HasColumnName("ABRKLEN1")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen10)
                    .HasColumnName("ABRKLEN10")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen2)
                    .HasColumnName("ABRKLEN2")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen3)
                    .HasColumnName("ABRKLEN3")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen4)
                    .HasColumnName("ABRKLEN4")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen5)
                    .HasColumnName("ABRKLEN5")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen6)
                    .HasColumnName("ABRKLEN6")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen7)
                    .HasColumnName("ABRKLEN7")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen8)
                    .HasColumnName("ABRKLEN8")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrklen9)
                    .HasColumnName("ABRKLEN9")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Abrkstrt1)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT1")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt10)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT10")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt2)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT2")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt3)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT3")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt4)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT4")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt5)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT5")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt6)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT6")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt7)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT7")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt8)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT8")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkstrt9)
                    .IsRequired()
                    .HasColumnName("ABRKSTRT9")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrktitle)
                    .IsRequired()
                    .HasColumnName("ABRKTITLE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrktype)
                    .IsRequired()
                    .HasColumnName("ABRKTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq1)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ1")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq10)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ10")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq2)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ2")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq3)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ3")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq4)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ4")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq5)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ5")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq6)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ6")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq7)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ7")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq8)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ8")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Abrkvseq9)
                    .IsRequired()
                    .HasColumnName("ABRKVSEQ9")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctbrkid)
                    .IsRequired()
                    .HasColumnName("ACCTBRKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype)
                    .IsRequired()
                    .HasColumnName("ACCTTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Adhusage)
                    .HasColumnName("ADHUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Aitusage)
                    .HasColumnName("AITUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Asdusage)
                    .HasColumnName("ASDUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Astusage)
                    .HasColumnName("ASTUSAGE")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateeff)
                    .HasColumnName("DATEEFF")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Pahusage)
                    .HasColumnName("PAHUSAGE")
                    .HasColumnType("numeric(7, 0)");
            });

            modelBuilder.Entity<SageVGlacgrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLACGRP");

                entity.Property(e => e.Acctgrpcod)
                    .IsRequired()
                    .HasColumnName("ACCTGRPCOD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpdes)
                    .IsRequired()
                    .HasColumnName("ACCTGRPDES")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Grpcod).HasColumnName("GRPCOD");

                entity.Property(e => e.Sortcode)
                    .IsRequired()
                    .HasColumnName("SORTCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVGlamf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLAMF");

                entity.Property(e => e.Abrkid)
                    .IsRequired()
                    .HasColumnName("ABRKID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctbal)
                    .IsRequired()
                    .HasColumnName("ACCTBAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctdesc)
                    .IsRequired()
                    .HasColumnName("ACCTDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctfmttd)
                    .IsRequired()
                    .HasColumnName("ACCTFMTTD")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpcod)
                    .IsRequired()
                    .HasColumnName("ACCTGRPCOD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctgrpscd)
                    .IsRequired()
                    .HasColumnName("ACCTGRPSCD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctofset)
                    .IsRequired()
                    .HasColumnName("ACCTOFSET")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctsegval)
                    .IsRequired()
                    .HasColumnName("ACCTSEGVAL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctsrty)
                    .IsRequired()
                    .HasColumnName("ACCTSRTY")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Accttype)
                    .IsRequired()
                    .HasColumnName("ACCTTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval01)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL01")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval02)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL02")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval03)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL03")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval04)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL04")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval05)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL05")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval06)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL06")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval07)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL07")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval08)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL08")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval09)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL09")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acsegval10)
                    .IsRequired()
                    .HasColumnName("ACSEGVAL10")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Allocsw).HasColumnName("ALLOCSW");

                entity.Property(e => e.Alloctot)
                    .HasColumnName("ALLOCTOT")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Consldsw).HasColumnName("CONSLDSW");

                entity.Property(e => e.Createdate)
                    .HasColumnName("CREATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ctrlacctsw).HasColumnName("CTRLACCTSW");

                entity.Property(e => e.Defcurncod)
                    .IsRequired()
                    .HasColumnName("DEFCURNCOD")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Mcsw).HasColumnName("MCSW");

                entity.Property(e => e.Ovalues).HasColumnName("OVALUES");

                entity.Property(e => e.Postosegid)
                    .IsRequired()
                    .HasColumnName("POSTOSEGID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Qtysw).HasColumnName("QTYSW");

                entity.Property(e => e.Rollupsw).HasColumnName("ROLLUPSW");

                entity.Property(e => e.Specsw).HasColumnName("SPECSW");

                entity.Property(e => e.Srceldgid)
                    .IsRequired()
                    .HasColumnName("SRCELDGID")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tovalues).HasColumnName("TOVALUES");

                entity.Property(e => e.Uom)
                    .IsRequired()
                    .HasColumnName("UOM")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Yracctclos)
                    .HasColumnName("YRACCTCLOS")
                    .HasColumnType("numeric(7, 0)");
            });

            modelBuilder.Entity<SageVGlasv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLASV");

                entity.Property(e => e.Acctretern)
                    .IsRequired()
                    .HasColumnName("ACCTRETERN")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Idseg)
                    .IsRequired()
                    .HasColumnName("IDSEG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Segval)
                    .IsRequired()
                    .HasColumnName("SEGVAL")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Segvaldesc)
                    .IsRequired()
                    .HasColumnName("SEGVALDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVGlbctl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLBCTL");

                entity.Property(e => e.Activesw).HasColumnName("ACTIVESW");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchid)
                    .IsRequired()
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchstat)
                    .IsRequired()
                    .HasColumnName("BATCHSTAT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchtype)
                    .IsRequired()
                    .HasColumnName("BATCHTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchdesc)
                    .IsRequired()
                    .HasColumnName("BTCHDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Credittot)
                    .HasColumnName("CREDITTOT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Datecreat)
                    .HasColumnName("DATECREAT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Dateedit)
                    .HasColumnName("DATEEDIT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Debittot)
                    .HasColumnName("DEBITTOT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Entrycnt)
                    .HasColumnName("ENTRYCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Errorcnt)
                    .HasColumnName("ERRORCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Nextentry)
                    .HasColumnName("NEXTENTRY")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Origstatus)
                    .IsRequired()
                    .HasColumnName("ORIGSTATUS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postngseq)
                    .HasColumnName("POSTNGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Qtytotal)
                    .HasColumnName("QTYTOTAL")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Srceledgr)
                    .IsRequired()
                    .HasColumnName("SRCELEDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swict).HasColumnName("SWICT");

                entity.Property(e => e.Swprinted).HasColumnName("SWPRINTED");

                entity.Property(e => e.Swrvrecog).HasColumnName("SWRVRECOG");
            });

            modelBuilder.Entity<SageVGljec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLJEC");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Jecomment)
                    .IsRequired()
                    .HasColumnName("JECOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .IsRequired()
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .IsRequired()
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVGljed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLJED");

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Companyid)
                    .IsRequired()
                    .HasColumnName("COMPANYID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Convrate)
                    .HasColumnName("CONVRATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Datemtchcd)
                    .IsRequired()
                    .HasColumnName("DATEMTCHCD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descomp)
                    .IsRequired()
                    .HasColumnName("DESCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Hcurncode)
                    .IsRequired()
                    .HasColumnName("HCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Journalid)
                    .IsRequired()
                    .HasColumnName("JOURNALID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateoper)
                    .IsRequired()
                    .HasColumnName("RATEOPER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Route).HasColumnName("ROUTE");

                entity.Property(e => e.Scurnamt)
                    .HasColumnName("SCURNAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurncode)
                    .IsRequired()
                    .HasColumnName("SCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurndec)
                    .IsRequired()
                    .HasColumnName("SCURNDEC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceldgr)
                    .IsRequired()
                    .HasColumnName("SRCELDGR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transamt)
                    .HasColumnName("TRANSAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transdate)
                    .HasColumnName("TRANSDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Transdesc)
                    .IsRequired()
                    .HasColumnName("TRANSDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transnbr)
                    .IsRequired()
                    .HasColumnName("TRANSNBR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transqty)
                    .HasColumnName("TRANSQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transref)
                    .IsRequired()
                    .HasColumnName("TRANSREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVGljeh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLJEH");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchid)
                    .IsRequired()
                    .HasColumnName("BATCHID")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Btchentry)
                    .IsRequired()
                    .HasColumnName("BTCHENTRY")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dateentry)
                    .HasColumnName("DATEENTRY")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Detailcnt)
                    .HasColumnName("DETAILCNT")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("DOCDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Drilapp)
                    .IsRequired()
                    .HasColumnName("DRILAPP")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Drilldwnlk)
                    .HasColumnName("DRILLDWNLK")
                    .HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Drilsrcty).HasColumnName("DRILSRCTY");

                entity.Property(e => e.Enteredby)
                    .IsRequired()
                    .HasColumnName("ENTEREDBY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Errbatch).HasColumnName("ERRBATCH");

                entity.Property(e => e.Errentry).HasColumnName("ERRENTRY");

                entity.Property(e => e.Fscsperd)
                    .IsRequired()
                    .HasColumnName("FSCSPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fscsyr)
                    .IsRequired()
                    .HasColumnName("FSCSYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnlcr)
                    .HasColumnName("JRNLCR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Jrnldesc)
                    .IsRequired()
                    .HasColumnName("JRNLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnldr)
                    .HasColumnName("JRNLDR")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Jrnlqty)
                    .HasColumnName("JRNLQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Origcomp)
                    .IsRequired()
                    .HasColumnName("ORIGCOMP")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revperd)
                    .IsRequired()
                    .HasColumnName("REVPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Revyr)
                    .IsRequired()
                    .HasColumnName("REVYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Swedit).HasColumnName("SWEDIT");

                entity.Property(e => e.Swreverse).HasColumnName("SWREVERSE");
            });

            modelBuilder.Entity<SageVGlpost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLPOST");

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Batchnbr)
                    .IsRequired()
                    .HasColumnName("BATCHNBR")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntdetail)
                    .HasColumnName("CNTDETAIL")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Companyid)
                    .IsRequired()
                    .HasColumnName("COMPANYID")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consolidat).HasColumnName("CONSOLIDAT");

                entity.Property(e => e.Convrate)
                    .HasColumnName("CONVRATE")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Datemtchcd)
                    .IsRequired()
                    .HasColumnName("DATEMTCHCD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Docdate)
                    .HasColumnName("DOCDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Drilapp)
                    .IsRequired()
                    .HasColumnName("DRILAPP")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Drilldwnlk)
                    .HasColumnName("DRILLDWNLK")
                    .HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Drilsrcty).HasColumnName("DRILSRCTY");

                entity.Property(e => e.Editallowd).HasColumnName("EDITALLOWD");

                entity.Property(e => e.Entrynbr)
                    .IsRequired()
                    .HasColumnName("ENTRYNBR")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalperd)
                    .IsRequired()
                    .HasColumnName("FISCALPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalyr)
                    .IsRequired()
                    .HasColumnName("FISCALYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Hcurncode)
                    .IsRequired()
                    .HasColumnName("HCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jnldtldesc)
                    .IsRequired()
                    .HasColumnName("JNLDTLDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jnldtlref)
                    .IsRequired()
                    .HasColumnName("JNLDTLREF")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Jrnldate)
                    .HasColumnName("JRNLDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Postingseq)
                    .HasColumnName("POSTINGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Ratedate)
                    .HasColumnName("RATEDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rateoper)
                    .IsRequired()
                    .HasColumnName("RATEOPER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ratespread)
                    .HasColumnName("RATESPREAD")
                    .HasColumnType("numeric(15, 7)");

                entity.Property(e => e.Ratetype)
                    .IsRequired()
                    .HasColumnName("RATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Rptamt)
                    .HasColumnName("RPTAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurnamt)
                    .HasColumnName("SCURNAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Scurncode)
                    .IsRequired()
                    .HasColumnName("SCURNCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurndec)
                    .IsRequired()
                    .HasColumnName("SCURNDEC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcecurn)
                    .IsRequired()
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Transamt)
                    .HasColumnName("TRANSAMT")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Transnbr)
                    .HasColumnName("TRANSNBR")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("TRANSQTY")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Values).HasColumnName("VALUES");
            });

            modelBuilder.Entity<SageVGlposto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLPOSTO");

                entity.Property(e => e.Acctid)
                    .IsRequired()
                    .HasColumnName("ACCTID")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Allownull).HasColumnName("ALLOWNULL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cntdetail)
                    .HasColumnName("CNTDETAIL")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Decimals).HasColumnName("DECIMALS");

                entity.Property(e => e.Fiscalperd)
                    .IsRequired()
                    .HasColumnName("FISCALPERD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fiscalyr)
                    .IsRequired()
                    .HasColumnName("FISCALYR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Optfield)
                    .IsRequired()
                    .HasColumnName("OPTFIELD")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postingseq)
                    .HasColumnName("POSTINGSEQ")
                    .HasColumnType("numeric(7, 0)");

                entity.Property(e => e.Srcecurn)
                    .IsRequired()
                    .HasColumnName("SRCECURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.Validate).HasColumnName("VALIDATE");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVGlsrce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vGLSRCE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Srcedesc)
                    .IsRequired()
                    .HasColumnName("SRCEDESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srceledger)
                    .IsRequired()
                    .HasColumnName("SRCELEDGER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Srcetype)
                    .IsRequired()
                    .HasColumnName("SRCETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SageVTxauth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vTXAUTH");

                entity.Property(e => e.Acctexp)
                    .IsRequired()
                    .HasColumnName("ACCTEXP")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctrecov)
                    .IsRequired()
                    .HasColumnName("ACCTRECOV")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctwht)
                    .IsRequired()
                    .HasColumnName("ACCTWHT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Auditlevel).HasColumnName("AUDITLEVEL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Defer)
                    .IsRequired()
                    .HasColumnName("DEFER")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Deferrecov)
                    .IsRequired()
                    .HasColumnName("DEFERRECOV")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Discbase).HasColumnName("DISCBASE");

                entity.Property(e => e.Expseparte).HasColumnName("EXPSEPARTE");

                entity.Property(e => e.Includable).HasColumnName("INCLUDABLE");

                entity.Property(e => e.Inputacct)
                    .IsRequired()
                    .HasColumnName("INPUTACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Liability)
                    .IsRequired()
                    .HasColumnName("LIABILITY")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Liabtiming).HasColumnName("LIABTIMING");

                entity.Property(e => e.Maxtax)
                    .HasColumnName("MAXTAX")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Mintax)
                    .HasColumnName("MINTAX")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Outputacct)
                    .IsRequired()
                    .HasColumnName("OUTPUTACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Raterecov)
                    .HasColumnName("RATERECOV")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Recoverabl).HasColumnName("RECOVERABL");

                entity.Property(e => e.Refname)
                    .IsRequired()
                    .HasColumnName("REFNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Refnumber)
                    .IsRequired()
                    .HasColumnName("REFNUMBER")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurn)
                    .IsRequired()
                    .HasColumnName("SCURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");

                entity.Property(e => e.Txbase).HasColumnName("TXBASE");

                entity.Property(e => e.Txrtgctl).HasColumnName("TXRTGCTL");
            });

            modelBuilder.Entity<SageVTxclass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vTXCLASS");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Class).HasColumnName("CLASS");

                entity.Property(e => e.Classaxis).HasColumnName("CLASSAXIS");

                entity.Property(e => e.Classtype).HasColumnName("CLASSTYPE");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Exempt).HasColumnName("EXEMPT");
            });

            modelBuilder.Entity<SageVTxgrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vTXGRP");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority1)
                    .IsRequired()
                    .HasColumnName("AUTHORITY1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority2)
                    .IsRequired()
                    .HasColumnName("AUTHORITY2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority3)
                    .IsRequired()
                    .HasColumnName("AUTHORITY3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority4)
                    .IsRequired()
                    .HasColumnName("AUTHORITY4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority5)
                    .IsRequired()
                    .HasColumnName("AUTHORITY5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Calcmethod).HasColumnName("CALCMETHOD");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srccurn)
                    .IsRequired()
                    .HasColumnName("SRCCURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth1)
                    .IsRequired()
                    .HasColumnName("SURAUTH1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth2)
                    .IsRequired()
                    .HasColumnName("SURAUTH2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth3)
                    .IsRequired()
                    .HasColumnName("SURAUTH3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth4)
                    .IsRequired()
                    .HasColumnName("SURAUTH4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth5)
                    .IsRequired()
                    .HasColumnName("SURAUTH5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surtax1).HasColumnName("SURTAX1");

                entity.Property(e => e.Surtax2).HasColumnName("SURTAX2");

                entity.Property(e => e.Surtax3).HasColumnName("SURTAX3");

                entity.Property(e => e.Surtax4).HasColumnName("SURTAX4");

                entity.Property(e => e.Surtax5).HasColumnName("SURTAX5");

                entity.Property(e => e.Taxable1).HasColumnName("TAXABLE1");

                entity.Property(e => e.Taxable2).HasColumnName("TAXABLE2");

                entity.Property(e => e.Taxable3).HasColumnName("TAXABLE3");

                entity.Property(e => e.Taxable4).HasColumnName("TAXABLE4");

                entity.Property(e => e.Taxable5).HasColumnName("TAXABLE5");

                entity.Property(e => e.Tratetype)
                    .IsRequired()
                    .HasColumnName("TRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ttype).HasColumnName("TTYPE");
            });

            modelBuilder.Entity<SageVTxrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SAGE_vTXRATE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Buyerclass).HasColumnName("BUYERCLASS");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemrate1)
                    .HasColumnName("ITEMRATE1")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate10)
                    .HasColumnName("ITEMRATE10")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate2)
                    .HasColumnName("ITEMRATE2")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate3)
                    .HasColumnName("ITEMRATE3")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate4)
                    .HasColumnName("ITEMRATE4")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate5)
                    .HasColumnName("ITEMRATE5")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate6)
                    .HasColumnName("ITEMRATE6")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate7)
                    .HasColumnName("ITEMRATE7")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate8)
                    .HasColumnName("ITEMRATE8")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate9)
                    .HasColumnName("ITEMRATE9")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ttype).HasColumnName("TTYPE");
            });

            modelBuilder.Entity<SalesAnalysisDetails>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesAnalysisDetails", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SalesAnalysisDetails_COID");

                entity.HasIndex(e => new { e.InvoiceDate, e.OrderItemNumber, e.OrderNumber, e.Coid })
                    .HasName("IDX_SalesAnalysisDetails_OrderItemNumber_OrderNumber_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BaseMaterialCharge)
                    .HasColumnName("base_material_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.BaseMaterialDiscount)
                    .HasColumnName("base_material_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMiscellaneousCharge)
                    .HasColumnName("base_miscellaneous_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.BaseMiscellaneousDiscount)
                    .HasColumnName("base_miscellaneous_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseProductionCharge)
                    .HasColumnName("base_production_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.BaseProductionDiscount)
                    .HasColumnName("base_production_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseSurchargeCharge)
                    .HasColumnName("base_surcharge_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.BaseSurchargeDiscount)
                    .HasColumnName("base_surcharge_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseTransportCharge)
                    .HasColumnName("base_transport_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.BaseTransportDiscount)
                    .HasColumnName("base_transport_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue1)
                    .HasColumnName("base_vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue2)
                    .HasColumnName("base_vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue3)
                    .HasColumnName("base_vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue4)
                    .HasColumnName("base_vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CommodityId).HasColumnName("commodity_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomerOrderNumber)
                    .HasColumnName("customer_order_number")
                    .HasMaxLength(30);

                entity.Property(e => e.DeliveryAreaId).HasColumnName("delivery_area_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.DeliveryToId).HasColumnName("delivery_to_id");

                entity.Property(e => e.DeliveryWarehouseId).HasColumnName("delivery_warehouse_id");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DespatchBranchId).HasColumnName("despatch_branch_id");

                entity.Property(e => e.DespatchDate)
                    .HasColumnName("despatch_date")
                    .HasColumnType("date");

                entity.Property(e => e.DespatchItemNumber).HasColumnName("despatch_item_number");

                entity.Property(e => e.DespatchNumber).HasColumnName("despatch_number");

                entity.Property(e => e.DespatchRaisedDate)
                    .HasColumnName("despatch_raised_date")
                    .HasColumnType("date");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.InsideSalespersonId).HasColumnName("inside_salesperson_id");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("date");

                entity.Property(e => e.InvoiceHeaderId).HasColumnName("invoice_header_id");

                entity.Property(e => e.InvoicePrintedDate)
                    .HasColumnName("invoice_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ItemNumber).HasColumnName("item_number");

                entity.Property(e => e.JobNumber)
                    .HasColumnName("job_number")
                    .HasMaxLength(30);

                entity.Property(e => e.MaterialCharge)
                    .HasColumnName("material_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MaterialDiscount)
                    .HasColumnName("material_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCharge)
                    .HasColumnName("miscellaneous_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MiscellaneousDiscount)
                    .HasColumnName("miscellaneous_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OrderBranchId).HasColumnName("order_branch_id");

                entity.Property(e => e.OrderItemNumber).HasColumnName("order_item_number");

                entity.Property(e => e.OrderNumber).HasColumnName("order_number");

                entity.Property(e => e.OrderRaisedDate)
                    .HasColumnName("order_raised_date")
                    .HasColumnType("date");

                entity.Property(e => e.OriginalDueDate)
                    .HasColumnName("original_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.PartCustomerId).HasColumnName("part_customer_id");

                entity.Property(e => e.PartNumber)
                    .HasColumnName("part_number")
                    .HasMaxLength(35);

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCharge)
                    .HasColumnName("production_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProductionDiscount)
                    .HasColumnName("production_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReferenceNumber).HasColumnName("reference_number");

                entity.Property(e => e.ReleaseNumber)
                    .HasColumnName("release_number")
                    .HasMaxLength(30);

                entity.Property(e => e.RequestBranchId).HasColumnName("request_branch_id");

                entity.Property(e => e.RequestItemNumber).HasColumnName("request_item_number");

                entity.Property(e => e.RequestNumber).HasColumnName("request_number");

                entity.Property(e => e.SalesDueDate)
                    .HasColumnName("sales_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesPrice)
                    .HasColumnName("sales_price")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.SalesPriceUnitId).HasColumnName("sales_price_unit_id");

                entity.Property(e => e.SalespersonId).HasColumnName("salesperson_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockMaterialCost)
                    .HasColumnName("stock_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockMiscellaneousCost)
                    .HasColumnName("stock_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockProductionCost)
                    .HasColumnName("stock_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockSurchargeCost)
                    .HasColumnName("stock_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockTransportCost)
                    .HasColumnName("stock_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeCharge)
                    .HasColumnName("surcharge_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeDiscount)
                    .HasColumnName("surcharge_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TerritoryId).HasColumnName("territory_id");

                entity.Property(e => e.TransportCharge)
                    .HasColumnName("transport_charge")
                    .HasColumnType("numeric(14, 4)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportDiscount)
                    .HasColumnName("transport_discount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.VatValue1)
                    .HasColumnName("vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue2)
                    .HasColumnName("vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue3)
                    .HasColumnName("vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue4)
                    .HasColumnName("vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<SalesAnalysisMonthly>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesAnalysisMonthly", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SalesAnalysisMonthly_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue1)
                    .HasColumnName("base_vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue2)
                    .HasColumnName("base_vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue3)
                    .HasColumnName("base_vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue4)
                    .HasColumnName("base_vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Month).HasColumnName("month");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockMaterialCost)
                    .HasColumnName("stock_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockMiscellaneousCost)
                    .HasColumnName("stock_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockProductionCost)
                    .HasColumnName("stock_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockSurchargeCost)
                    .HasColumnName("stock_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockTransportCost)
                    .HasColumnName("stock_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue1)
                    .HasColumnName("vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue2)
                    .HasColumnName("vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue3)
                    .HasColumnName("vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue4)
                    .HasColumnName("vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<SalesAnalysisYearly>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesAnalysisYearly", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SalesAnalysisYearly_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue1)
                    .HasColumnName("base_vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue2)
                    .HasColumnName("base_vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue3)
                    .HasColumnName("base_vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue4)
                    .HasColumnName("base_vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockMaterialCost)
                    .HasColumnName("stock_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockMiscellaneousCost)
                    .HasColumnName("stock_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockProductionCost)
                    .HasColumnName("stock_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockSurchargeCost)
                    .HasColumnName("stock_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockTransportCost)
                    .HasColumnName("stock_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue1)
                    .HasColumnName("vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue2)
                    .HasColumnName("vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue3)
                    .HasColumnName("vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue4)
                    .HasColumnName("vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Year).HasColumnName("year");
            });

            modelBuilder.Entity<SalesCategoriesToExcludeFromSsandScm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesCategoriesToExcludeFromSSAndSCM", "QNG");

                entity.Property(e => e.Code).HasMaxLength(3);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SalesChargeDiscounts>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("SalesChargeDiscounts", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseAmount)
                    .HasColumnName("base_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Percentage)
                    .HasColumnName("percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.SalesChargeId).HasColumnName("sales_charge_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesChargeTypes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesChargeTypes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesCharges>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesCharges", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SalesCharges_COID");

                entity.HasIndex(e => new { e.Coid, e.ItemId, e.CostGroupCode, e.BaseValue, e.ChargeVisibility, e.ChargeItem })
                    .HasName("IDX_SalesCharges_ChargeVisibility_ChargeItem");

                entity.HasIndex(e => new { e.CostGroupCode, e.BaseValue, e.ChargeVisibility, e.ChargeItem, e.ItemId, e.Coid })
                    .HasName("IDX_SalesCharges_item_id_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BaseCharge)
                    .HasColumnName("base_charge")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseValue)
                    .HasColumnName("base_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Charge)
                    .HasColumnName("charge")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ChargeFixStatus)
                    .HasColumnName("charge_fix_status")
                    .HasMaxLength(1);

                entity.Property(e => e.ChargeItem).HasColumnName("charge_item");

                entity.Property(e => e.ChargeQuantity)
                    .HasColumnName("charge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ChargeQuantityUnitId).HasColumnName("charge_quantity_unit_id");

                entity.Property(e => e.ChargeUnitId).HasColumnName("charge_unit_id");

                entity.Property(e => e.ChargeVisibility)
                    .HasColumnName("charge_visibility")
                    .HasMaxLength(1);

                entity.Property(e => e.ConfirmAtInvoicing).HasColumnName("confirm_at_invoicing");

                entity.Property(e => e.CostGroupCode)
                    .HasColumnName("cost_group_code")
                    .HasMaxLength(3);

                entity.Property(e => e.CreatedFromPart).HasColumnName("created_from_part");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.DiscountItem).HasColumnName("discount_item");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.FabricationChargeCodePriceId).HasColumnName("fabrication_charge_code_price_id");

                entity.Property(e => e.FabricationSource)
                    .HasColumnName("fabrication_source")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PricingNotes)
                    .HasColumnName("pricing_notes")
                    .HasColumnType("text");

                entity.Property(e => e.SalesChargeTypeId).HasColumnName("sales_charge_type_id");

                entity.Property(e => e.SalesGroupChargeId).HasColumnName("sales_group_charge_id");

                entity.Property(e => e.ShowCustomer).HasColumnName("show_customer");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SystemCharge).HasColumnName("system_charge");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesChargesPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesChargesPivot", "QNG");

                entity.HasIndex(e => new { e.Coid, e.ItemId, e.ChargeQuantity, e.ChargeQuantityUom, e.BaseMaterialCharge, e.BaseTransportCharge, e.BaseProductionCharge, e.BaseMiscellaneousCharge, e.BaseSurchargeCharge, e.BaseTotalCharge, e.ChargeUom, e.BaseMaterialValue, e.BaseTransportValue, e.BaseProductionValue, e.BaseMiscellaneousValue, e.BaseSurchargeValue, e.BaseTotalValue, e.DefaultWeightUom, e.DefaultBaseCurrency, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_SalesChargesPivot");

                entity.Property(e => e.BaseMaterialCharge)
                    .HasColumnName("base_material_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMaterialValue)
                    .HasColumnName("base_material_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMiscellaneousCharge)
                    .HasColumnName("base_miscellaneous_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseMiscellaneousValue)
                    .HasColumnName("base_miscellaneous_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseProductionCharge)
                    .HasColumnName("base_production_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseProductionValue)
                    .HasColumnName("base_production_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseSurchargeCharge)
                    .HasColumnName("base_surcharge_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseSurchargeValue)
                    .HasColumnName("base_surcharge_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTotalCharge)
                    .HasColumnName("base_total_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTotalValue)
                    .HasColumnName("base_total_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTransportCharge)
                    .HasColumnName("base_transport_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ChargeQuantity)
                    .HasColumnName("charge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ChargeQuantityUom)
                    .HasColumnName("ChargeQuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ChargeUom)
                    .HasColumnName("ChargeUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultBaseCurrency).HasMaxLength(3);

                entity.Property(e => e.DefaultWeightUom)
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ItemId).HasColumnName("item_id");
            });

            modelBuilder.Entity<SalesGroupCharges>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesGroupCharges", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CostGroupId).HasColumnName("cost_group_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultCharge).HasColumnName("default_charge");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExternalCostCreditId).HasColumnName("external_cost_credit_id");

                entity.Property(e => e.ExternalCostDebitId).HasColumnName("external_cost_debit_id");

                entity.Property(e => e.ExternalDistribution).HasColumnName("external_distribution");

                entity.Property(e => e.InternalCostCreditId).HasColumnName("internal_cost_credit_id");

                entity.Property(e => e.InternalCostDebitId).HasColumnName("internal_cost_debit_id");

                entity.Property(e => e.InternalDistribution).HasColumnName("internal_distribution");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NormallyVisible).HasColumnName("normally_visible");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesNominalId).HasColumnName("sales_nominal_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockCostCreditId).HasColumnName("stock_cost_credit_id");

                entity.Property(e => e.StockCostDebitId).HasColumnName("stock_cost_debit_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesGroupTypes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesGroupTypes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesGroups>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesGroups", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExternalCode)
                    .HasColumnName("external_code")
                    .HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.SalesGroupTypeId).HasColumnName("sales_group_type_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesHeaders>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_SalesHEaders");

                entity.Property(e => e.Acknowledged).HasColumnName("acknowledged");

                entity.Property(e => e.AcknowledgedDate)
                    .HasColumnName("acknowledged_date")
                    .HasColumnType("date");

                entity.Property(e => e.BalanceToPay)
                    .HasColumnName("balance_to_pay")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceTotalId).HasColumnName("balance_total_id");

                entity.Property(e => e.BatchId).HasColumnName("batch_id");

                entity.Property(e => e.BlanketHeaderId).HasColumnName("blanket_header_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CarrierId).HasColumnName("carrier_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificationsId).HasColumnName("certifications_id");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CommercialTermsId).HasColumnName("commercial_terms_id");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsignmentOrder).HasColumnName("consignment_order");

                entity.Property(e => e.ContactEmailOverride)
                    .HasColumnName("contact_email_override")
                    .HasMaxLength(255);

                entity.Property(e => e.ContactFaxOverride)
                    .HasColumnName("contact_fax_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.ContactMobileOverride)
                    .HasColumnName("contact_mobile_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTelephoneOverride)
                    .HasColumnName("contact_telephone_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactWebAddressOverride)
                    .HasColumnName("contact_web_address_override")
                    .HasMaxLength(255);

                entity.Property(e => e.ContractJobId).HasColumnName("contract_job_id");

                entity.Property(e => e.CounterSales).HasColumnName("counter_sales");

                entity.Property(e => e.CreditHeldAtDespatch).HasColumnName("credit_held_at_despatch");

                entity.Property(e => e.CreditHold).HasColumnName("credit_hold");

                entity.Property(e => e.CreditHoldDate)
                    .HasColumnName("credit_hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditHoldReason).HasColumnName("credit_hold_reason");

                entity.Property(e => e.CreditReference)
                    .HasColumnName("credit_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CreditReleaseAmount)
                    .HasColumnName("credit_release_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CreditReleaseDate)
                    .HasColumnName("credit_release_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditReleaseNotes)
                    .HasColumnName("credit_release_notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreditReleaseUserId).HasColumnName("credit_release_user_id");

                entity.Property(e => e.CreditedDeliveryDate)
                    .HasColumnName("credited_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditedDespatch).HasColumnName("credited_despatch");

                entity.Property(e => e.CreditedDespatchBranchId).HasColumnName("credited_despatch_branch_id");

                entity.Property(e => e.CreditedInvoice).HasColumnName("credited_invoice");

                entity.Property(e => e.CreditedInvoiceBranchId).HasColumnName("credited_invoice_branch_id");

                entity.Property(e => e.CreditedOrder).HasColumnName("credited_order");

                entity.Property(e => e.CreditedOrderBranchId).HasColumnName("credited_order_branch_id");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerAddressId).HasColumnName("customer_address_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomerNameOverride)
                    .HasColumnName("customer_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber)
                    .HasColumnName("customer_order_number")
                    .HasMaxLength(30);

                entity.Property(e => e.CuttingHeaderId).HasColumnName("cutting_header_id");

                entity.Property(e => e.DeliverToAddressId).HasColumnName("deliver_to_address_id");

                entity.Property(e => e.DeliverToId).HasColumnName("deliver_to_id");

                entity.Property(e => e.DeliverToNameOverride)
                    .HasColumnName("deliver_to_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryAddressId).HasColumnName("delivery_address_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.DeliveryName)
                    .HasColumnName("delivery_name")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryPoint)
                    .HasColumnName("delivery_point")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryWarehouseId).HasColumnName("delivery_warehouse_id");

                entity.Property(e => e.DespatchId).HasColumnName("despatch_id");

                entity.Property(e => e.DespatchText)
                    .HasColumnName("despatch_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.DiscountDate)
                    .HasColumnName("discount_date")
                    .HasColumnType("date");

                entity.Property(e => e.DiscountDays).HasColumnName("discount_days");

                entity.Property(e => e.DiscountPercentage)
                    .HasColumnName("discount_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Discriminator)
                    .HasColumnName("discriminator")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.DocumentDeliveryTypeId).HasColumnName("document_delivery_type_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.DuplicateReasonId).HasColumnName("duplicate_reason_id");

                entity.Property(e => e.EnquiryId).HasColumnName("enquiry_id");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateTypeId).HasColumnName("exchange_rate_type_id");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("expiry_date")
                    .HasColumnType("date");

                entity.Property(e => e.ExportedDate)
                    .HasColumnName("exported_date")
                    .HasColumnType("date");

                entity.Property(e => e.FinalDestinationId).HasColumnName("final_destination_id");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.FollowupDate)
                    .HasColumnName("followup_date")
                    .HasColumnType("date");

                entity.Property(e => e.FooterExternalText)
                    .HasColumnName("footer_external_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.FooterInternalText)
                    .HasColumnName("footer_internal_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.GatewayBatchId).HasColumnName("gateway_batch_id");

                entity.Property(e => e.HeaderText)
                    .HasColumnName("header_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImportBatchNumber).HasColumnName("import_batch_number");

                entity.Property(e => e.ImportNumber).HasColumnName("import_number");

                entity.Property(e => e.ImportSource)
                    .HasColumnName("import_source")
                    .HasMaxLength(50);

                entity.Property(e => e.ImportUserName)
                    .HasColumnName("import_user_name")
                    .HasMaxLength(50);

                entity.Property(e => e.InsideSalespersonId).HasColumnName("inside_salesperson_id");

                entity.Property(e => e.InternalText)
                    .HasColumnName("internal_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.InvoiceBaseCurrencyExchangeRate)
                    .HasColumnName("invoice_base_currency_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoice_number");

                entity.Property(e => e.JobNumber)
                    .HasColumnName("job_number")
                    .HasMaxLength(30);

                entity.Property(e => e.LocalExchangeRate)
                    .HasColumnName("local_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.LostDate)
                    .HasColumnName("lost_date")
                    .HasColumnType("date");

                entity.Property(e => e.LostDescription)
                    .HasColumnName("lost_description")
                    .HasMaxLength(60);

                entity.Property(e => e.LostReasonId).HasColumnName("lost_reason_id");

                entity.Property(e => e.LostReasonValue).HasColumnName("lost_reason_value");

                entity.Property(e => e.ManualDate)
                    .HasColumnName("manual_date")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NoFixedDate).HasColumnName("no_fixed_date");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OrderClassificationId).HasColumnName("order_classification_id");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnName("payment_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.Printed).HasColumnName("printed");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProformaPrintedDate)
                    .HasColumnName("proforma_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProjectTypeId).HasColumnName("project_type_id");

                entity.Property(e => e.QuotationTypeId).HasColumnName("quotation_type_id");

                entity.Property(e => e.QuoteVersionId).HasColumnName("quote_version_id");

                entity.Property(e => e.ReleaseNumber)
                    .HasColumnName("release_number")
                    .HasMaxLength(30);

                entity.Property(e => e.RequireProforma).HasColumnName("require_proforma");

                entity.Property(e => e.SaleDate)
                    .HasColumnName("sale_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesEntryTotalId).HasColumnName("sales_entry_total_id");

                entity.Property(e => e.SalesExportDetailsId).HasColumnName("sales_export_details_id");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesOrderPrintedDate)
                    .HasColumnName("sales_order_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesTotalId).HasColumnName("sales_total_id");

                entity.Property(e => e.SalespersonId).HasColumnName("salesperson_id");

                entity.Property(e => e.SettlementDiscount)
                    .HasColumnName("settlement_discount")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.SignOffPrintedDate)
                    .HasColumnName("sign_off_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TaxAuthority1)
                    .HasColumnName("tax_authority1")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority2)
                    .HasColumnName("tax_authority2")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority3)
                    .HasColumnName("tax_authority3")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority4)
                    .HasColumnName("tax_authority4")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority5)
                    .HasColumnName("tax_authority5")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class_1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class_2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class_3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class_4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class_5");

                entity.Property(e => e.TaxExempt1).HasColumnName("tax_exempt1");

                entity.Property(e => e.TaxExempt2).HasColumnName("tax_exempt2");

                entity.Property(e => e.TaxExempt3).HasColumnName("tax_exempt3");

                entity.Property(e => e.TaxExempt4).HasColumnName("tax_exempt4");

                entity.Property(e => e.TaxExempt5).HasColumnName("tax_exempt5");

                entity.Property(e => e.TaxGroupCode)
                    .HasColumnName("tax_group_code")
                    .HasMaxLength(12);

                entity.Property(e => e.TermsId).HasColumnName("terms_id");

                entity.Property(e => e.TransferToBranchId).HasColumnName("transfer_to_branch_id");

                entity.Property(e => e.TransferToWarehouseId).HasColumnName("transfer_to_warehouse_id");

                entity.Property(e => e.TransferType)
                    .HasColumnName("transfer_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TransportChargeAmount)
                    .HasColumnName("transport_charge_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportChargeRate)
                    .HasColumnName("transport_charge_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportChargeRateUnitId).HasColumnName("transport_charge_rate_unit_id");

                entity.Property(e => e.TransportChargeTax)
                    .HasColumnName("transport_charge_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCharged).HasColumnName("transport_charged");

                entity.Property(e => e.TransportCostAmount)
                    .HasColumnName("transport_cost_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCostRate)
                    .HasColumnName("transport_cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportCostRateUnitId).HasColumnName("transport_cost_rate_unit_id");

                entity.Property(e => e.TransportExchangeRate)
                    .HasColumnName("transport_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.TransportExchangeRateTypeId).HasColumnName("transport_exchange_rate_type_id");

                entity.Property(e => e.TransportPrintedDate)
                    .HasColumnName("transport_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.TransportTypeId).HasColumnName("transport_type_id");

                entity.Property(e => e.TravelCardPrintedDate)
                    .HasColumnName("travel_card_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.UpdateHold).HasColumnName("update_hold");

                entity.Property(e => e.UseMinimumGrade).HasColumnName("use_minimum_grade");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeighbridgePrintedDate)
                    .HasColumnName("weighbridge_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderPrintedDate)
                    .HasColumnName("work_order_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.YardOrderPrintedDate)
                    .HasColumnName("yard_order_printed_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<SalesHeaders1>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesHeaders", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SalesHeaders_COID");

                entity.HasIndex(e => e.CreditHoldReason)
                    .HasName("IDX_SalesHeaders_credit_hold_reason");

                entity.HasIndex(e => new { e.Coid, e.TypeId, e.Discriminator })
                    .HasName("IDX_SalesHeaders_discriminator");

                entity.HasIndex(e => new { e.Number, e.Coid, e.Discriminator })
                    .HasName("IDX_SalesHeaders_number_COID_discriminator");

                entity.HasIndex(e => new { e.Coid, e.Id, e.CustomerId, e.DeliverToId, e.TypeId, e.SaleDate, e.Discriminator })
                    .HasName("IDX_SalesHeaders_SalesDate_Discriminator");

                entity.HasIndex(e => new { e.Id, e.DeliverToId, e.TypeId, e.Discriminator, e.CustomerId, e.SaleDate, e.Coid })
                    .HasName("IDX_SalesHeaders_CustomerID_SaleDate_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Acknowledged).HasColumnName("acknowledged");

                entity.Property(e => e.AcknowledgedDate)
                    .HasColumnName("acknowledged_date")
                    .HasColumnType("date");

                entity.Property(e => e.BalanceToPay)
                    .HasColumnName("balance_to_pay")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceTotalId).HasColumnName("balance_total_id");

                entity.Property(e => e.BatchId).HasColumnName("batch_id");

                entity.Property(e => e.BlanketHeaderId).HasColumnName("blanket_header_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CarrierId).HasColumnName("carrier_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificationsId).HasColumnName("certifications_id");

                entity.Property(e => e.CommercialTermsId).HasColumnName("commercial_terms_id");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConsignmentOrder).HasColumnName("consignment_order");

                entity.Property(e => e.ContactEmailOverride)
                    .HasColumnName("contact_email_override")
                    .HasMaxLength(255);

                entity.Property(e => e.ContactFaxOverride)
                    .HasColumnName("contact_fax_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.ContactMobileOverride)
                    .HasColumnName("contact_mobile_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTelephoneOverride)
                    .HasColumnName("contact_telephone_override")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactWebAddressOverride)
                    .HasColumnName("contact_web_address_override")
                    .HasMaxLength(255);

                entity.Property(e => e.ContractJobId).HasColumnName("contract_job_id");

                entity.Property(e => e.CounterSales)
                    .HasColumnName("counter_sales")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditHeldAtDespatch).HasColumnName("credit_held_at_despatch");

                entity.Property(e => e.CreditHold).HasColumnName("credit_hold");

                entity.Property(e => e.CreditHoldDate)
                    .HasColumnName("credit_hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditHoldReason).HasColumnName("credit_hold_reason");

                entity.Property(e => e.CreditReference)
                    .HasColumnName("credit_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CreditReleaseAmount)
                    .HasColumnName("credit_release_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CreditReleaseDate)
                    .HasColumnName("credit_release_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditReleaseNotes).HasColumnName("credit_release_notes");

                entity.Property(e => e.CreditReleaseUserId).HasColumnName("credit_release_user_id");

                entity.Property(e => e.CreditedDeliveryDate)
                    .HasColumnName("credited_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditedDespatch).HasColumnName("credited_despatch");

                entity.Property(e => e.CreditedDespatchBranchId).HasColumnName("credited_despatch_branch_id");

                entity.Property(e => e.CreditedInvoice).HasColumnName("credited_invoice");

                entity.Property(e => e.CreditedInvoiceBranchId).HasColumnName("credited_invoice_branch_id");

                entity.Property(e => e.CreditedOrder).HasColumnName("credited_order");

                entity.Property(e => e.CreditedOrderBranchId).HasColumnName("credited_order_branch_id");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerAddressId).HasColumnName("customer_address_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomerNameOverride)
                    .HasColumnName("customer_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber)
                    .HasColumnName("customer_order_number")
                    .HasMaxLength(30);

                entity.Property(e => e.CuttingHeaderId).HasColumnName("cutting_header_id");

                entity.Property(e => e.DeliverToAddressId).HasColumnName("deliver_to_address_id");

                entity.Property(e => e.DeliverToId).HasColumnName("deliver_to_id");

                entity.Property(e => e.DeliverToNameOverride)
                    .HasColumnName("deliver_to_name_override")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryAddressId).HasColumnName("delivery_address_id");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.DeliveryName)
                    .HasColumnName("delivery_name")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryPoint)
                    .HasColumnName("delivery_point")
                    .HasMaxLength(60);

                entity.Property(e => e.DeliveryWarehouseId).HasColumnName("delivery_warehouse_id");

                entity.Property(e => e.DespatchId).HasColumnName("despatch_id");

                entity.Property(e => e.DespatchText).HasColumnName("despatch_text");

                entity.Property(e => e.DiscountDate)
                    .HasColumnName("discount_date")
                    .HasColumnType("date");

                entity.Property(e => e.DiscountDays).HasColumnName("discount_days");

                entity.Property(e => e.DiscountPercentage)
                    .HasColumnName("discount_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Discriminator)
                    .HasColumnName("discriminator")
                    .HasMaxLength(1);

                entity.Property(e => e.DocumentDeliveryTypeId).HasColumnName("document_delivery_type_id");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.DuplicateReasonId).HasColumnName("duplicate_reason_id");

                entity.Property(e => e.EnquiryId).HasColumnName("enquiry_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.ExchangeRateTypeId).HasColumnName("exchange_rate_type_id");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("expiry_date")
                    .HasColumnType("date");

                entity.Property(e => e.ExportedDate)
                    .HasColumnName("exported_date")
                    .HasColumnType("date");

                entity.Property(e => e.FinalDestinationId).HasColumnName("final_destination_id");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.FollowupDate)
                    .HasColumnName("followup_date")
                    .HasColumnType("date");

                entity.Property(e => e.FooterExternalText).HasColumnName("footer_external_text");

                entity.Property(e => e.FooterInternalText).HasColumnName("footer_internal_text");

                entity.Property(e => e.GatewayBatchId).HasColumnName("gateway_batch_id");

                entity.Property(e => e.HeaderText).HasColumnName("header_text");

                entity.Property(e => e.ImportBatchNumber).HasColumnName("import_batch_number");

                entity.Property(e => e.ImportNumber).HasColumnName("import_number");

                entity.Property(e => e.ImportSource)
                    .HasColumnName("import_source")
                    .HasMaxLength(50);

                entity.Property(e => e.ImportUserName)
                    .HasColumnName("import_user_name")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsideSalespersonId).HasColumnName("inside_salesperson_id");

                entity.Property(e => e.InternalText).HasColumnName("internal_text");

                entity.Property(e => e.InvoiceBaseCurrencyExchangeRate)
                    .HasColumnName("invoice_base_currency_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoice_number");

                entity.Property(e => e.JobNumber)
                    .HasColumnName("job_number")
                    .HasMaxLength(30);

                entity.Property(e => e.LocalExchangeRate)
                    .HasColumnName("local_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.LostDate)
                    .HasColumnName("lost_date")
                    .HasColumnType("date");

                entity.Property(e => e.LostDescription)
                    .HasColumnName("lost_description")
                    .HasMaxLength(60);

                entity.Property(e => e.LostReasonId).HasColumnName("lost_reason_id");

                entity.Property(e => e.LostReasonValue).HasColumnName("lost_reason_value");

                entity.Property(e => e.ManualDate)
                    .HasColumnName("manual_date")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NoFixedDate).HasColumnName("no_fixed_date");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OrderClassificationId).HasColumnName("order_classification_id");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnName("payment_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.Printed).HasColumnName("printed");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProformaPrintedDate)
                    .HasColumnName("proforma_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProjectTypeId).HasColumnName("project_type_id");

                entity.Property(e => e.QuotationTypeId).HasColumnName("quotation_type_id");

                entity.Property(e => e.QuoteVersionId).HasColumnName("quote_version_id");

                entity.Property(e => e.ReleaseNumber)
                    .HasColumnName("release_number")
                    .HasMaxLength(30);

                entity.Property(e => e.RequireProforma).HasColumnName("require_proforma");

                entity.Property(e => e.SaleDate)
                    .HasColumnName("sale_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesEntryTotalId).HasColumnName("sales_entry_total_id");

                entity.Property(e => e.SalesExportDetailsId).HasColumnName("sales_export_details_id");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesOrderPrintedDate)
                    .HasColumnName("sales_order_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesTotalId).HasColumnName("sales_total_id");

                entity.Property(e => e.SalespersonId).HasColumnName("salesperson_id");

                entity.Property(e => e.SettlementDiscount)
                    .HasColumnName("settlement_discount")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.SignOffPrintedDate)
                    .HasColumnName("sign_off_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TaxAuthority1)
                    .HasColumnName("tax_authority1")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority2)
                    .HasColumnName("tax_authority2")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority3)
                    .HasColumnName("tax_authority3")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority4)
                    .HasColumnName("tax_authority4")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority5)
                    .HasColumnName("tax_authority5")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class_1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class_2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class_3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class_4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class_5");

                entity.Property(e => e.TaxExempt1).HasColumnName("tax_exempt1");

                entity.Property(e => e.TaxExempt2).HasColumnName("tax_exempt2");

                entity.Property(e => e.TaxExempt3).HasColumnName("tax_exempt3");

                entity.Property(e => e.TaxExempt4).HasColumnName("tax_exempt4");

                entity.Property(e => e.TaxExempt5).HasColumnName("tax_exempt5");

                entity.Property(e => e.TaxGroupCode)
                    .HasColumnName("tax_group_code")
                    .HasMaxLength(12);

                entity.Property(e => e.TermsId).HasColumnName("terms_id");

                entity.Property(e => e.TransferToBranchId).HasColumnName("transfer_to_branch_id");

                entity.Property(e => e.TransferToWarehouseId).HasColumnName("transfer_to_warehouse_id");

                entity.Property(e => e.TransferType)
                    .HasColumnName("transfer_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportChargeAmount)
                    .HasColumnName("transport_charge_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportChargeRate)
                    .HasColumnName("transport_charge_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportChargeRateUnitId).HasColumnName("transport_charge_rate_unit_id");

                entity.Property(e => e.TransportChargeTax)
                    .HasColumnName("transport_charge_tax")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCharged).HasColumnName("transport_charged");

                entity.Property(e => e.TransportCostAmount)
                    .HasColumnName("transport_cost_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransportCostRate)
                    .HasColumnName("transport_cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportCostRateUnitId).HasColumnName("transport_cost_rate_unit_id");

                entity.Property(e => e.TransportExchangeRate)
                    .HasColumnName("transport_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.TransportExchangeRateTypeId).HasColumnName("transport_exchange_rate_type_id");

                entity.Property(e => e.TransportPrintedDate)
                    .HasColumnName("transport_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.TransportTypeId).HasColumnName("transport_type_id");

                entity.Property(e => e.TravelCardPrintedDate)
                    .HasColumnName("travel_card_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.UpdateHold).HasColumnName("update_hold");

                entity.Property(e => e.UseMinimumGrade).HasColumnName("use_minimum_grade");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeighbridgePrintedDate)
                    .HasColumnName("weighbridge_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderPrintedDate)
                    .HasColumnName("work_order_printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.YardOrderPrintedDate)
                    .HasColumnName("yard_order_printed_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<SalesHeadersExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesHeadersExt", "QNG");

                entity.HasIndex(e => new { e.BranchCode, e.OrderHeaderStatusCode, e.OrderHeaderStatusDescription, e.CustomerCode, e.CustomerName, e.DeliverFromBranchCode, e.DeliverFromWarehouseCode, e.DeliverFromWarehouseName, e.Salesperson, e.Id, e.Coid })
                    .HasName("IDX_QNG_SalesHeadersExt_id_COID_include");

                entity.HasIndex(e => new { e.Coid, e.Id, e.OrderNumber, e.BranchCode, e.OrderTypeCode, e.OrderTypeDescription, e.OrderHeaderStatusCode, e.OrderHeaderStatusDescription, e.InternalStatusId, e.CustomerCode, e.CustomerName, e.CustomerGroup, e.CustomerSegment, e.ContactName, e.DeliverToCode, e.DeliverToName, e.TransferToBranchCode, e.TransferToBranchDescription, e.TransferToWarehouseCode, e.TransferToWarehouseDescription, e.TransportTypeDescription, e.CarrierName, e.DeliverFromBranchCode, e.DeliverFromBranchName, e.DeliverFromWarehouseCode, e.DeliverFromWarehouseName, e.SalesRep, e.Salesperson, e.HasChemicalCertificate, e.HasMechanicalCertificate, e.HasMillCertificate, e.HasCertificateOfCompliance, e.CopiesWithDelivery, e.CopiesWithInvoice, e.CurrencyCode, e.TermsDescription, e.CreatedBy, e.ModifiedBy, e.SaleDate, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_SalesHeadersExt");

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.CarrierName).HasMaxLength(50);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ContactName).HasMaxLength(101);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CurrencyCode).HasMaxLength(3);

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerGroup).HasMaxLength(60);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerSegment).HasMaxLength(255);

                entity.Property(e => e.DeliverFromBranchCode).HasMaxLength(6);

                entity.Property(e => e.DeliverFromBranchName).HasMaxLength(60);

                entity.Property(e => e.DeliverFromWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.DeliverFromWarehouseName).HasMaxLength(60);

                entity.Property(e => e.DeliverToCode).HasMaxLength(10);

                entity.Property(e => e.DeliverToName).HasMaxLength(60);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InternalStatusId).HasColumnName("internal_status_id");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.OrderHeaderStatusCode).HasMaxLength(3);

                entity.Property(e => e.OrderHeaderStatusDescription).HasMaxLength(255);

                entity.Property(e => e.OrderTypeCode).HasMaxLength(3);

                entity.Property(e => e.OrderTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SaleDate)
                    .HasColumnName("sale_date")
                    .HasColumnType("date");

                entity.Property(e => e.SalesRep).HasMaxLength(50);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.TermsDescription).HasMaxLength(255);

                entity.Property(e => e.TransferToBranchCode).HasMaxLength(6);

                entity.Property(e => e.TransferToBranchDescription).HasMaxLength(60);

                entity.Property(e => e.TransferToWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.TransferToWarehouseDescription).HasMaxLength(60);

                entity.Property(e => e.TransportTypeDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<SalesItemLateReasonLinks>(entity =>
            {
                entity.ToTable("SalesItemLateReasonLinks", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.LateReasonId).HasColumnName("LateReasonID");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SalesBranchId).HasColumnName("SalesBranchID");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SubLateReasonId).HasColumnName("SubLateReasonID");

                entity.HasOne(d => d.LateReason)
                    .WithMany(p => p.SalesItemLateReasonLinks)
                    .HasForeignKey(d => d.LateReasonId)
                    .HasConstraintName("FK_SalesItemsWithLateReasons_SalesItemsLateReasons");

                entity.HasOne(d => d.SubLateReason)
                    .WithMany(p => p.SalesItemLateReasonLinks)
                    .HasForeignKey(d => d.SubLateReasonId)
                    .HasConstraintName("FK_SalesItemsWithLateReasons_SalesItemsSubLateReasons");
            });

            modelBuilder.Entity<SalesItemLateReasons>(entity =>
            {
                entity.ToTable("SalesItemLateReasons", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SourceSystemId).HasColumnName("SourceSystemID");
            });

            modelBuilder.Entity<SalesItemSubLateReasons>(entity =>
            {
                entity.ToTable("SalesItemSubLateReasons", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.SalesItemsLateReasonsId).HasColumnName("SalesItemsLateReasonsID");

                entity.HasOne(d => d.SalesItemsLateReasons)
                    .WithMany(p => p.SalesItemSubLateReasons)
                    .HasForeignKey(d => d.SalesItemsLateReasonsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesItemsSubLateReasons_SalesItemsLateReasons");
            });

            modelBuilder.Entity<SalesItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesItems", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_SalesItems_COID");

                entity.HasIndex(e => new { e.SalesHeaderId, e.Coid })
                    .HasName("IDX_SalesItems_SalesHeaderID_COID");

                entity.HasIndex(e => new { e.SalesHeaderId, e.DespatchItemId, e.Coid })
                    .HasName("IDX_SalesItems_DespatchItemID_COID");

                entity.HasIndex(e => new { e.Id, e.SalesHeaderId, e.ItemNumber, e.ProductId, e.DimensionsId, e.PartSpecificationId, e.DeliveryWarehouseId, e.PartNumber, e.StatusId, e.Coid })
                    .HasName("IDX_SalesItems_COID_StatusID");

                entity.HasIndex(e => new { e.Coid, e.Id, e.Mdate, e.SalesHeaderId, e.ItemNumber, e.ProductId, e.RequiredPieces, e.RequiredQuantity, e.RequiredWeight, e.BalancePieces, e.BalanceQuantity, e.BalanceWeight, e.StatusId, e.SalesGroupId, e.CompletedDate, e.PartNumber, e.DimensionsId, e.DueDate })
                    .HasName("IDX_SalesItems_DueDate");

                entity.HasIndex(e => new { e.Coid, e.Id, e.Cdate, e.Mdate, e.CuserId, e.RequiredPieces, e.BalancePieces, e.MuserId, e.SalesHeaderId, e.ItemNumber, e.ProductId, e.DimensionsId, e.DueDate, e.RequiredQuantity, e.RequiredWeight, e.DeliveredPieces, e.DeliveredQuantity, e.DeliveredWeight, e.InvoicedQuantity, e.BalanceQuantity, e.BalanceWeight, e.PartSpecificationId, e.StatusId, e.SalesGroupId, e.InvoicedWeight, e.DeliveryWarehouseId, e.TransportPieces, e.TransportQuantity, e.TransportWeight, e.InvoicedPieces, e.Discriminator })
                    .HasName("IDX_SalesItems_Discriminator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AcknowledgementNotes).HasColumnName("acknowledgement_notes");

                entity.Property(e => e.AdjustmentPrice)
                    .HasColumnName("adjustment_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.AllocatedCoilPieces).HasColumnName("allocated_coil_pieces");

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BalancePieces).HasColumnName("balance_pieces");

                entity.Property(e => e.BalanceQuantity)
                    .HasColumnName("balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.BalanceTotalId).HasColumnName("balance_total_id");

                entity.Property(e => e.BalanceWeight)
                    .HasColumnName("balance_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BlanketItemId).HasColumnName("blanket_item_id");

                entity.Property(e => e.CalculatePieces).HasColumnName("calculate_pieces");

                entity.Property(e => e.CallOffPieces).HasColumnName("call_off_pieces");

                entity.Property(e => e.CallOffQuantity)
                    .HasColumnName("call_off_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.CallOffWeight)
                    .HasColumnName("call_off_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompleteAfterNextInvoice).HasColumnName("complete_after_next_invoice");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CompletionBalanceQuantity)
                    .HasColumnName("completion_balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.CreditReference)
                    .HasColumnName("credit_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CreditedCustomerOrder)
                    .HasColumnName("credited_customer_order")
                    .HasMaxLength(30);

                entity.Property(e => e.CreditedDespatchItem).HasColumnName("credited_despatch_item");

                entity.Property(e => e.CreditedItem).HasColumnName("credited_item");

                entity.Property(e => e.CreditedOrderItem).HasColumnName("credited_order_item");

                entity.Property(e => e.CreditedOrderNumber).HasColumnName("credited_order_number");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CuttingGroupReference)
                    .HasColumnName("cutting_group_reference")
                    .HasMaxLength(64);

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.DeliveryBranchId).HasColumnName("delivery_branch_id");

                entity.Property(e => e.DeliveryWarehouseId).HasColumnName("delivery_warehouse_id");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DespatchItemId).HasColumnName("despatch_item_id");

                entity.Property(e => e.DespatchNotes).HasColumnName("despatch_notes");

                entity.Property(e => e.DimensionsId).HasColumnName("dimensions_id");

                entity.Property(e => e.Discriminator)
                    .HasColumnName("discriminator")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FabricationId).HasColumnName("fabrication_id");

                entity.Property(e => e.FabricationPrice)
                    .HasColumnName("fabrication_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FabricationProcessId).HasColumnName("fabrication_process_id");

                entity.Property(e => e.FabricationWorkCentreId).HasColumnName("fabrication_work_centre_id");

                entity.Property(e => e.FlatRolled).HasColumnName("flat_rolled");

                entity.Property(e => e.FlatRolledValue)
                    .HasColumnName("flat_rolled_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.FromFlatRolled)
                    .HasColumnName("from_flat_rolled")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FullyAllocated).HasColumnName("fully_allocated");

                entity.Property(e => e.GroupConsumptionPrice)
                    .HasColumnName("group_consumption_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupCuttingCost)
                    .HasColumnName("group_cutting_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupCuttingCostUnitId).HasColumnName("group_cutting_cost_unit_id");

                entity.Property(e => e.GroupDrillingCost)
                    .HasColumnName("group_drilling_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupDrillingCostUnitId).HasColumnName("group_drilling_cost_unit_id");

                entity.Property(e => e.GroupPaintingCost)
                    .HasColumnName("group_painting_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupPaintingCostUnitId).HasColumnName("group_painting_cost_unit_id");

                entity.Property(e => e.GroupPriceUnitId).HasColumnName("group_price_unit_id");

                entity.Property(e => e.GroupShotblastingCost)
                    .HasColumnName("group_shotblasting_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupShotblastingCostUnitId).HasColumnName("group_shotblasting_cost_unit_id");

                entity.Property(e => e.GroupTotalPrice)
                    .HasColumnName("group_total_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.GroupTotalValue)
                    .HasColumnName("group_total_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ImportBatchNumber).HasColumnName("import_batch_number");

                entity.Property(e => e.ImportItem).HasColumnName("import_item");

                entity.Property(e => e.ImportNumber).HasColumnName("import_number");

                entity.Property(e => e.InsideDiameter)
                    .HasColumnName("inside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum)
                    .HasColumnName("inside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum)
                    .HasColumnName("inside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.IntercompanyPurchaseBranch)
                    .HasColumnName("intercompany_purchase_branch")
                    .HasMaxLength(3);

                entity.Property(e => e.IntercompanyPurchaseItem).HasColumnName("intercompany_purchase_item");

                entity.Property(e => e.IntercompanyPurchaseOrder).HasColumnName("intercompany_purchase_order");

                entity.Property(e => e.InvoiceCostingWeight)
                    .HasColumnName("invoice_costing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.InvoiceNotes).HasColumnName("invoice_notes");

                entity.Property(e => e.InvoicePacking).HasColumnName("invoice_packing");

                entity.Property(e => e.InvoicedPieces).HasColumnName("invoiced_pieces");

                entity.Property(e => e.InvoicedQuantity)
                    .HasColumnName("invoiced_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.InvoicedSalesItemId).HasColumnName("invoiced_sales_item_id");

                entity.Property(e => e.InvoicedWeight)
                    .HasColumnName("invoiced_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ItemCredited).HasColumnName("item_credited");

                entity.Property(e => e.ItemNumber).HasColumnName("item_number");

                entity.Property(e => e.LostDate)
                    .HasColumnName("lost_date")
                    .HasColumnType("date");

                entity.Property(e => e.LostDescription)
                    .HasColumnName("lost_description")
                    .HasMaxLength(60);

                entity.Property(e => e.LostReasonId).HasColumnName("lost_reason_id");

                entity.Property(e => e.LostReasonValue).HasColumnName("lost_reason_value");

                entity.Property(e => e.ManualDate)
                    .HasColumnName("manual_date")
                    .HasMaxLength(16);

                entity.Property(e => e.MarginType)
                    .HasColumnName("margin_type")
                    .HasMaxLength(1);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MechanicalCert).HasColumnName("mechanical_cert");

                entity.Property(e => e.MixturePrice)
                    .HasColumnName("mixture_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MlcConversionAllowed)
                    .HasColumnName("mlc_conversion_allowed")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OldestPurchaseOrderNumber).HasColumnName("oldest_purchase_order_number");

                entity.Property(e => e.OptimisationType)
                    .HasColumnName("optimisation_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.Property(e => e.OriginalDueDate)
                    .HasColumnName("original_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.OriginalQuantity)
                    .HasColumnName("original_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.OriginalQuantityUnitId).HasColumnName("original_quantity_unit_id");

                entity.Property(e => e.OutsideDiameter)
                    .HasColumnName("outside_diameter")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum)
                    .HasColumnName("outside_diameter_maximum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum)
                    .HasColumnName("outside_diameter_minimum")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.PackCountMaximum).HasColumnName("pack_count_maximum");

                entity.Property(e => e.PackCountMinimum).HasColumnName("pack_count_minimum");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum)
                    .HasColumnName("pack_height_maximum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum)
                    .HasColumnName("pack_height_minimum")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("pack_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum)
                    .HasColumnName("pack_weight_maximum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum)
                    .HasColumnName("pack_weight_minimum")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PaintDescription)
                    .HasColumnName("paint_description")
                    .HasMaxLength(255);

                entity.Property(e => e.PaintTypeId).HasColumnName("paint_type_id");

                entity.Property(e => e.PartCustomerId).HasColumnName("part_customer_id");

                entity.Property(e => e.PartNumber)
                    .HasColumnName("part_number")
                    .HasMaxLength(35);

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.PriceBookId).HasColumnName("price_book_id");

                entity.Property(e => e.PriceBookLevel).HasColumnName("price_book_level");

                entity.Property(e => e.PriceBookQuantityBreak).HasColumnName("price_book_quantity_break");

                entity.Property(e => e.ProductDescription).HasColumnName("product_description");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.ProductSubGroupId).HasColumnName("product_sub_group_id");

                entity.Property(e => e.ProductionNotes).HasColumnName("production_notes");

                entity.Property(e => e.RequiredPieces).HasColumnName("required_pieces");

                entity.Property(e => e.RequiredQuantity)
                    .HasColumnName("required_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.RequiredQuantityChangeTimestamp).HasColumnName("required_quantity_change_timestamp");

                entity.Property(e => e.RequiredWeight)
                    .HasColumnName("required_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SalesGroupId).HasColumnName("sales_group_id");

                entity.Property(e => e.SalesHeaderId).HasColumnName("sales_header_id");

                entity.Property(e => e.SalesTotalId).HasColumnName("sales_total_id");

                entity.Property(e => e.SecantOptimiserResultId).HasColumnName("secant_optimiser_result_id");

                entity.Property(e => e.ShotblastingRequired).HasColumnName("shotblasting_required");

                entity.Property(e => e.ShowCountryOfFinalProcessing).HasColumnName("show_country_of_final_processing");

                entity.Property(e => e.ShowCountryOfMaterialOrigin).HasColumnName("show_country_of_material_origin");

                entity.Property(e => e.ShowCountryOfPrimaryProcessing).HasColumnName("show_country_of_primary_processing");

                entity.Property(e => e.ShowPrices).HasColumnName("show_prices");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.StandardPrice)
                    .HasColumnName("standard_price")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StockAvailable).HasColumnName("stock_available");

                entity.Property(e => e.StockLocation)
                    .HasColumnName("stock_location")
                    .HasMaxLength(16);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class_1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class_2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class_3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class_4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class_5");

                entity.Property(e => e.TaxExempt1).HasColumnName("tax_exempt1");

                entity.Property(e => e.TaxExempt2).HasColumnName("tax_exempt2");

                entity.Property(e => e.TaxExempt3).HasColumnName("tax_exempt3");

                entity.Property(e => e.TaxExempt4).HasColumnName("tax_exempt4");

                entity.Property(e => e.TaxExempt5).HasColumnName("tax_exempt5");

                entity.Property(e => e.TransferType)
                    .HasColumnName("transfer_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportPieces).HasColumnName("transport_pieces");

                entity.Property(e => e.TransportQuantity)
                    .HasColumnName("transport_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.TransportWeight)
                    .HasColumnName("transport_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TrimRequired).HasColumnName("trim_required");

                entity.Property(e => e.UseMinimumGrade).HasColumnName("use_minimum_grade");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightUnitsId).HasColumnName("weight_units_id");

                entity.Property(e => e.WorkOrderPrintedQuantity)
                    .HasColumnName("work_order_printed_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.WorkingSpecificationId).HasColumnName("working_specification_id");

                entity.Property(e => e.WorksNotes).HasColumnName("works_notes");

                entity.Property(e => e.WorksOrderNotRequiredAfterProduction).HasColumnName("works_order_not_required_after_production");

                entity.Property(e => e.YieldPercentage)
                    .HasColumnName("yield_percentage")
                    .HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<SalesItemsDrillingCharges>(entity =>
            {
                entity.ToTable("SalesItemsDrillingCharges", "iMetal");

                entity.Property(e => e.SalesItemsDrillingChargesId).HasColumnName("SalesItemsDrillingChargesID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Comments)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.DrillSize).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PricePer).HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SalesBranchId).HasColumnName("SalesBranchID");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");
            });

            modelBuilder.Entity<SalesItemsExt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesItemsExt", "QNG");

                entity.HasIndex(e => new { e.Id, e.SalesHeaderId, e.ItemNumber, e.Coid })
                    .HasName("IDX_SalesItemsExt_ItemNumber_COID");

                entity.HasIndex(e => new { e.OrderItemStatusCode, e.OrderItemStatusDescription, e.SalesGroupCode, e.SalesGroupDescription, e.SalesGroupTypeCode, e.SalesGroupTypeDescription, e.Length, e.OrderItemPartNumber, e.Id, e.Coid })
                    .HasName("IDX_SalesItemExt_id_COID_include");

                entity.HasIndex(e => new { e.Coid, e.Id, e.Discriminator, e.ItemNumber, e.SalesHeaderId, e.ProductId, e.InternalStatusId, e.OrderItemInternalStatusCode, e.OrderItemInternalStatusDescription, e.OrderItemStatusCode, e.OrderItemStatusDescription, e.SalesGroupCode, e.SalesGroupDescription, e.SalesGroupTypeCode, e.SalesGroupTypeDescription, e.CreatedBy, e.ModifiedBy, e.Length, e.OrderItemPartNumber, e.OrderItemPartName, e.Abc, e.LeadTime, e.DueDate, e.DespatchBranchId, e.DespatchHeaderId, e.DespatchItemId, e.DespatchBranchCode, e.DespatchNumber, e.DespatchItemNumber, e.DespatchItemReference, e.OrderBranchId, e.OrderHeaderId, e.OrderItemId, e.OrderBranchCode, e.OrderNumber, e.OrderItemNumber, e.SoitemReference, e.OrderSaleDate, e.DrawingNumber, e.EndUseCode, e.EndUseDescription, e.EtlcreateDate, e.EtlupdateDate })
                    .HasName("CCS_QNG_SalesItemsExt");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(30);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DespatchBranchCode).HasMaxLength(6);

                entity.Property(e => e.DespatchBranchId).HasColumnName("despatch_branch_id");

                entity.Property(e => e.DespatchHeaderId).HasColumnName("despatch_header_id");

                entity.Property(e => e.DespatchItemId).HasColumnName("despatch_item_id");

                entity.Property(e => e.DespatchItemReference).HasMaxLength(100);

                entity.Property(e => e.Discriminator)
                    .HasColumnName("discriminator")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.DrawingNumber).HasMaxLength(30);

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.EndUseCode).HasMaxLength(6);

                entity.Property(e => e.EndUseDescription).HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InternalStatusId).HasColumnName("internal_status_id");

                entity.Property(e => e.LeadTime).HasMaxLength(30);

                entity.Property(e => e.Length).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.OrderBranchCode).HasMaxLength(6);

                entity.Property(e => e.OrderBranchId).HasColumnName("order_branch_id");

                entity.Property(e => e.OrderHeaderId).HasColumnName("order_header_id");

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.Property(e => e.OrderItemInternalStatusCode).HasMaxLength(3);

                entity.Property(e => e.OrderItemInternalStatusDescription).HasMaxLength(255);

                entity.Property(e => e.OrderItemPartName).HasMaxLength(255);

                entity.Property(e => e.OrderItemPartNumber).HasMaxLength(35);

                entity.Property(e => e.OrderItemStatusCode).HasMaxLength(3);

                entity.Property(e => e.OrderItemStatusDescription).HasMaxLength(255);

                entity.Property(e => e.OrderSaleDate).HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.SalesGroupCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupDescription).HasMaxLength(255);

                entity.Property(e => e.SalesGroupTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SalesHeaderId).HasColumnName("sales_header_id");

                entity.Property(e => e.SoitemReference)
                    .HasColumnName("SOItemReference")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SalesItemsStatusHistory>(entity =>
            {
                entity.HasKey(e => new { e.EventId, e.Coid })
                    .HasName("PK_QNG_SalesItemsStatusHistory");

                entity.ToTable("SalesItemsStatusHistory", "QNG");

                entity.HasIndex(e => new { e.SalesItemId, e.NewStatusId, e.Coid })
                    .HasName("IDX_QNG_SalesItemStatusHistory_SalesItemID_NewStatusID_COID");

                entity.Property(e => e.EventId).HasColumnName("event_id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewStatusId).HasColumnName("NewStatusID");

                entity.Property(e => e.NewValues)
                    .HasColumnName("new_values")
                    .IsUnicode(false);

                entity.Property(e => e.OldValues)
                    .HasColumnName("old_values")
                    .IsUnicode(false);

                entity.Property(e => e.RecordId).HasColumnName("record_id");

                entity.Property(e => e.SalesHeaderId).HasColumnName("SalesHeaderID");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SalesOrderStatusHistoryViewId)
                    .HasColumnName("SalesOrderStatusHistoryViewID")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<SalesProductionSummary>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesProductionSummary", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Finalised).HasColumnName("finalised");

                entity.Property(e => e.GroupStatus).HasColumnName("group_status");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NumberOfGroups).HasColumnName("number_of_groups");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProductionStepId).HasColumnName("production_step_id");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesStatusCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AdditionalDescription1)
                    .HasColumnName("additional_description1")
                    .HasMaxLength(255);

                entity.Property(e => e.AdditionalDescription2)
                    .HasColumnName("additional_description2")
                    .HasMaxLength(255);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InternalStatusId).HasColumnName("internal_status_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesTotals>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesTotals", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_SalesTotals_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ActualMaterialCost)
                    .HasColumnName("actual_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ActualMiscellaneousCost)
                    .HasColumnName("actual_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ActualProductionCost)
                    .HasColumnName("actual_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ActualSurchargeCost)
                    .HasColumnName("actual_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.ActualTransportCost)
                    .HasColumnName("actual_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalancePieces).HasColumnName("balance_pieces");

                entity.Property(e => e.BalanceQuantity)
                    .HasColumnName("balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.BalanceTaxValue)
                    .HasColumnName("balance_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceTotalCost)
                    .HasColumnName("balance_total_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceValue)
                    .HasColumnName("balance_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceWeight)
                    .HasColumnName("balance_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BaseBalanceTaxValue)
                    .HasColumnName("base_balance_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseBalanceValue)
                    .HasColumnName("base_balance_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCallOffTaxValue)
                    .HasColumnName("base_call_off_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCallOffValue)
                    .HasColumnName("base_call_off_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCustomerMaterialValue)
                    .HasColumnName("base_customer_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCustomerMiscellaneousValue)
                    .HasColumnName("base_customer_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCustomerProductionValue)
                    .HasColumnName("base_customer_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCustomerSurchargeValue)
                    .HasColumnName("base_customer_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseCustomerTransportValue)
                    .HasColumnName("base_customer_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInternalMaterialValue)
                    .HasColumnName("base_internal_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInternalMiscellaneousValue)
                    .HasColumnName("base_internal_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInternalProductionValue)
                    .HasColumnName("base_internal_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInternalSurchargeValue)
                    .HasColumnName("base_internal_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInternalTransportValue)
                    .HasColumnName("base_internal_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInvoicedTaxValue)
                    .HasColumnName("base_invoiced_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseInvoicedValue)
                    .HasColumnName("base_invoiced_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue1)
                    .HasColumnName("base_vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue2)
                    .HasColumnName("base_vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue3)
                    .HasColumnName("base_vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue4)
                    .HasColumnName("base_vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BaseVatValue5)
                    .HasColumnName("base_vat_value5")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CallOffTaxValue)
                    .HasColumnName("call_off_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CallOffValue)
                    .HasColumnName("call_off_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerMaterialValue)
                    .HasColumnName("customer_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CustomerMiscellaneousValue)
                    .HasColumnName("customer_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CustomerProductionValue)
                    .HasColumnName("customer_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CustomerSurchargeValue)
                    .HasColumnName("customer_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.CustomerTransportValue)
                    .HasColumnName("customer_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.EstimatedMaterialCost)
                    .HasColumnName("estimated_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.EstimatedMiscellaneousCost)
                    .HasColumnName("estimated_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.EstimatedProductionCost)
                    .HasColumnName("estimated_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.EstimatedSurchargeCost)
                    .HasColumnName("estimated_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.EstimatedTransportCost)
                    .HasColumnName("estimated_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InternalMaterialValue)
                    .HasColumnName("internal_material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InternalMiscellaneousValue)
                    .HasColumnName("internal_miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InternalProductionValue)
                    .HasColumnName("internal_production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InternalSurchargeValue)
                    .HasColumnName("internal_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InternalTransportValue)
                    .HasColumnName("internal_transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InvoicedTaxValue)
                    .HasColumnName("invoiced_tax_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InvoicedTotalCost)
                    .HasColumnName("invoiced_total_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.InvoicedValue)
                    .HasColumnName("invoiced_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OriginalExchangeRate)
                    .HasColumnName("original_exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.RequiredPieces).HasColumnName("required_pieces");

                entity.Property(e => e.RequiredQuantity)
                    .HasColumnName("required_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.RequiredWeight)
                    .HasColumnName("required_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockMaterialCost)
                    .HasColumnName("stock_material_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockMiscellaneousCost)
                    .HasColumnName("stock_miscellaneous_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockProductionCost)
                    .HasColumnName("stock_production_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockSurchargeCost)
                    .HasColumnName("stock_surcharge_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.StockTransportCost)
                    .HasColumnName("stock_transport_cost")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatRate1)
                    .HasColumnName("vat_rate1")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate2)
                    .HasColumnName("vat_rate2")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate3)
                    .HasColumnName("vat_rate3")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate4)
                    .HasColumnName("vat_rate4")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate5)
                    .HasColumnName("vat_rate5")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatType1Id).HasColumnName("vat_type1_id");

                entity.Property(e => e.VatType2Id).HasColumnName("vat_type2_id");

                entity.Property(e => e.VatType3Id).HasColumnName("vat_type3_id");

                entity.Property(e => e.VatType4Id).HasColumnName("vat_type4_id");

                entity.Property(e => e.VatValue1)
                    .HasColumnName("vat_value1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue2)
                    .HasColumnName("vat_value2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue3)
                    .HasColumnName("vat_value3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue4)
                    .HasColumnName("vat_value4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatValue5)
                    .HasColumnName("vat_value5")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SalesTypes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SalesTypes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ScmManualForecast>(entity =>
            {
                entity.ToTable("SCM_ManualForecast", "QNG");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Uom)
                    .IsRequired()
                    .HasColumnName("UOM")
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<ServerPreferences>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("ServerPreferences", "iMetal");

                entity.HasIndex(e => e.Preference)
                    .HasName("IDX_ServerPreferences_preference");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Preference)
                    .HasColumnName("preference")
                    .HasMaxLength(64);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(3500);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SpecCerthead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_certhead", "MSS");

                entity.Property(e => e.BolBranch)
                    .HasColumnName("bol_branch")
                    .HasMaxLength(6);

                entity.Property(e => e.BolItem).HasColumnName("bol_item");

                entity.Property(e => e.BolNumber).HasColumnName("bol_number");

                entity.Property(e => e.Branch)
                    .HasColumnName("branch")
                    .HasMaxLength(6);

                entity.Property(e => e.BuyerItemNumber)
                    .HasColumnName("buyer_item_number")
                    .HasMaxLength(5);

                entity.Property(e => e.CastNumber)
                    .HasColumnName("cast_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertNumber).HasColumnName("cert_number");

                entity.Property(e => e.CertOrientation)
                    .HasColumnName("cert_orientation")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CertSource)
                    .HasColumnName("cert_source")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CreationType)
                    .IsRequired()
                    .HasColumnName("creation_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.CustAdd1)
                    .HasColumnName("cust_add1")
                    .HasMaxLength(40);

                entity.Property(e => e.CustAdd2)
                    .HasColumnName("cust_add2")
                    .HasMaxLength(40);

                entity.Property(e => e.CustAdd3)
                    .HasColumnName("cust_add3")
                    .HasMaxLength(40);

                entity.Property(e => e.CustCity)
                    .HasColumnName("cust_city")
                    .HasMaxLength(40);

                entity.Property(e => e.CustCountry)
                    .HasColumnName("cust_country")
                    .HasMaxLength(40);

                entity.Property(e => e.CustFaxno)
                    .HasColumnName("cust_faxno")
                    .HasMaxLength(20);

                entity.Property(e => e.CustName)
                    .HasColumnName("cust_name")
                    .HasMaxLength(40);

                entity.Property(e => e.CustNumber)
                    .HasColumnName("cust_number")
                    .HasMaxLength(10);

                entity.Property(e => e.CustOrder)
                    .HasColumnName("cust_order")
                    .HasMaxLength(30);

                entity.Property(e => e.CustPostcode)
                    .HasColumnName("cust_postcode")
                    .HasMaxLength(10);

                entity.Property(e => e.DelivDate).HasColumnName("deliv_date");

                entity.Property(e => e.DespatchType)
                    .HasColumnName("despatch_type")
                    .HasMaxLength(1);

                entity.Property(e => e.DueDate).HasColumnName("due_date");

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("email_address")
                    .HasMaxLength(255);

                entity.Property(e => e.FaxNumber)
                    .HasColumnName("fax_number")
                    .HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemDescription1)
                    .HasColumnName("item_description1")
                    .HasColumnType("ntext");

                entity.Property(e => e.ItemDescription2)
                    .HasColumnName("item_description2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mill)
                    .HasColumnName("mill")
                    .HasMaxLength(3);

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.OrderBranch)
                    .HasColumnName("order_branch")
                    .HasMaxLength(6);

                entity.Property(e => e.OrderDate).HasColumnName("order_date");

                entity.Property(e => e.OrderItem).HasColumnName("order_item");

                entity.Property(e => e.OrderNumber).HasColumnName("order_number");

                entity.Property(e => e.OrderType)
                    .HasColumnName("order_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderTypePostImport)
                    .HasColumnName("order_type_post_import")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.PartCustNumber).HasColumnName("part_cust_number");

                entity.Property(e => e.PartNumber)
                    .HasColumnName("part_number")
                    .HasMaxLength(35);

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.PrintCertMsg)
                    .HasColumnName("print_cert_msg")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.PrintCertsTo).HasColumnName("print_certs_to");

                entity.Property(e => e.PrintExtras).HasColumnName("print_extras");

                entity.Property(e => e.PrintMisc).HasColumnName("print_misc");

                entity.Property(e => e.PrintQtcMsg)
                    .HasColumnName("print_qtc_msg")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Printer)
                    .HasColumnName("printer")
                    .HasMaxLength(10);

                entity.Property(e => e.SalesCategory)
                    .HasColumnName("sales_category")
                    .HasMaxLength(3);

                entity.Property(e => e.SendDate).HasColumnName("send_date");

                entity.Property(e => e.SendMethod)
                    .HasColumnName("send_method")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasMaxLength(15);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight).HasColumnName("weight");
            });

            modelBuilder.Entity<SpecChargehead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_chargehead", "MSS");

                entity.Property(e => e.Branch)
                    .HasColumnName("branch")
                    .HasMaxLength(6);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChargeNumber).HasColumnName("charge_number");

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.Directmpo).HasColumnName("directmpo");

                entity.Property(e => e.HtStages)
                    .HasColumnName("ht_stages")
                    .HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LatestStartFrom).HasColumnName("latest_start_from");

                entity.Property(e => e.LatestStartTo).HasColumnName("latest_start_to");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SpecChargeresults>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_chargeresults", "MSS");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChhdId).HasColumnName("chhd_id");

                entity.Property(e => e.ChtrId).HasColumnName("chtr_id");

                entity.Property(e => e.CoolMax).HasColumnName("cool_max");

                entity.Property(e => e.CoolMin).HasColumnName("cool_min");

                entity.Property(e => e.CoolSoak).HasColumnName("cool_soak");

                entity.Property(e => e.CoolSoakMins).HasColumnName("cool_soak_mins");

                entity.Property(e => e.Coolant)
                    .HasColumnName("coolant")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.DateIn).HasColumnName("date_in");

                entity.Property(e => e.DateOut).HasColumnName("date_out");

                entity.Property(e => e.Furnace)
                    .HasColumnName("furnace")
                    .HasMaxLength(3);

                entity.Property(e => e.GasIn).HasColumnName("gas_in");

                entity.Property(e => e.GasOut).HasColumnName("gas_out");

                entity.Property(e => e.HeatSoak).HasColumnName("heat_soak");

                entity.Property(e => e.HeatSoakMins).HasColumnName("heat_soak_mins");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.RecordTempUsing)
                    .HasColumnName("record_temp_using")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Temperature).HasColumnName("temperature");

                entity.Property(e => e.Treatment)
                    .HasColumnName("treatment")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SpecExtras>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_extras", "MSS");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CorrosionSpecCode)
                    .HasColumnName("corrosion_spec_code")
                    .HasMaxLength(30);

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.FerriteMax)
                    .HasColumnName("ferrite_max")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.FerriteMin)
                    .HasColumnName("ferrite_min")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.FerriteSpecCode)
                    .HasColumnName("ferrite_spec_code")
                    .HasMaxLength(30);

                entity.Property(e => e.HeattreatmentText)
                    .HasColumnName("heattreatment_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MicroSpecCode)
                    .HasColumnName("micro_spec_code")
                    .HasMaxLength(30);

                entity.Property(e => e.MinSoakHours)
                    .HasColumnName("min_soak_hours")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.MinSoakTemp)
                    .HasColumnName("min_soak_temp")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.MinSoakUnitsId).HasColumnName("min_soak_units_id");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.SpecHeaderId).HasColumnName("spec_header_id");

                entity.Property(e => e.StandardText)
                    .HasColumnName("standard_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.StandardTextOld)
                    .HasColumnName("standard_text_old")
                    .HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TestcertText)
                    .HasColumnName("testcert_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.TestcertTextOld)
                    .HasColumnName("testcert_text_old")
                    .HasMaxLength(255);

                entity.Property(e => e.TestresultsText)
                    .HasColumnName("testresults_text")
                    .HasColumnType("ntext");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SpecHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_header", "MSS");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(30);

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.CustomerNumber)
                    .HasColumnName("customer_number")
                    .HasMaxLength(14);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EditHistory)
                    .HasColumnName("edit_history")
                    .HasColumnType("ntext");

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("email_address")
                    .HasMaxLength(255);

                entity.Property(e => e.FaxNumber)
                    .HasColumnName("fax_number")
                    .HasMaxLength(10);

                entity.Property(e => e.HeatTreatmentCode)
                    .HasColumnName("heat_treatment_code")
                    .HasMaxLength(30);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaterialSpecCode)
                    .HasColumnName("material_spec_code")
                    .HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.OrderBranch)
                    .HasColumnName("order_branch")
                    .HasMaxLength(6);

                entity.Property(e => e.OrderItem)
                    .HasColumnName("order_item")
                    .HasMaxLength(4);

                entity.Property(e => e.OrderNumber)
                    .HasColumnName("order_number")
                    .HasMaxLength(7);

                entity.Property(e => e.OrderType)
                    .HasColumnName("order_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderTypePostImport)
                    .HasColumnName("order_type_post_import")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Printer)
                    .HasColumnName("printer")
                    .HasMaxLength(10);

                entity.Property(e => e.SendDate).HasColumnName("send_date");

                entity.Property(e => e.SendMethod)
                    .HasColumnName("send_method")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TestSpecCode1)
                    .HasColumnName("test_spec_code_1")
                    .HasMaxLength(30);

                entity.Property(e => e.TestSpecCode2)
                    .HasColumnName("test_spec_code_2")
                    .HasMaxLength(30);

                entity.Property(e => e.TestSpecCode3)
                    .HasColumnName("test_spec_code_3")
                    .HasMaxLength(30);

                entity.Property(e => e.TestSpecCode4)
                    .HasColumnName("test_spec_code_4")
                    .HasMaxLength(30);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SpecStepheat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_stepheat", "MSS");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.CustomerName)
                    .HasColumnName("customer_name")
                    .HasMaxLength(40);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(40);

                entity.Property(e => e.EquivSection).HasColumnName("equiv_section");

                entity.Property(e => e.FinalStepNumber).HasColumnName("final_step_number");

                entity.Property(e => e.Gauge)
                    .HasColumnName("gauge")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Gradecode)
                    .HasColumnName("gradecode")
                    .HasMaxLength(16);

                entity.Property(e => e.Groupcode)
                    .HasColumnName("groupcode")
                    .HasMaxLength(16);

                entity.Property(e => e.HeatSpecCode)
                    .HasColumnName("heat_spec_code")
                    .HasMaxLength(30);

                entity.Property(e => e.HireworkCastNumber)
                    .HasColumnName("hirework_cast_number")
                    .HasMaxLength(15);

                entity.Property(e => e.HtStages)
                    .HasColumnName("ht_stages")
                    .HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LatestStartDate).HasColumnName("latest_start_date");

                entity.Property(e => e.Length)
                    .HasColumnName("length")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mill)
                    .HasColumnName("mill")
                    .HasMaxLength(3);

                entity.Property(e => e.MpoBranch)
                    .HasColumnName("mpo_branch")
                    .HasMaxLength(6);

                entity.Property(e => e.MpoCustomer).HasColumnName("mpo_customer");

                entity.Property(e => e.MpoItem).HasColumnName("mpo_item");

                entity.Property(e => e.MpoNumber).HasColumnName("mpo_number");

                entity.Property(e => e.MpoRelease).HasColumnName("mpo_release");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.NumberOff).HasColumnName("number_off");

                entity.Property(e => e.OrderType)
                    .HasColumnName("order_type")
                    .HasMaxLength(1);

                entity.Property(e => e.OrderTypePostImport)
                    .HasColumnName("order_type_post_import")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Partno)
                    .HasColumnName("partno")
                    .HasMaxLength(35);

                entity.Property(e => e.PcsRequired).HasColumnName("pcs_required");

                entity.Property(e => e.PcsUnitsId).HasColumnName("pcs_units_id");

                entity.Property(e => e.Sizecode)
                    .HasColumnName("sizecode")
                    .HasMaxLength(25);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightRequired)
                    .HasColumnName("weight_required")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.WeightUnitsId).HasColumnName("weight_units_id");

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasColumnType("numeric(9, 4)");
            });

            modelBuilder.Entity<SpecSteptargets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("spec_steptargets", "MSS");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChhdId).HasColumnName("chhd_id");

                entity.Property(e => e.ChtrId).HasColumnName("chtr_id");

                entity.Property(e => e.CoolSoak).HasColumnName("cool_soak");

                entity.Property(e => e.CoolSoakMins).HasColumnName("cool_soak_mins");

                entity.Property(e => e.Coolant)
                    .HasColumnName("coolant")
                    .HasMaxLength(3);

                entity.Property(e => e.Cuser).HasColumnName("cuser");

                entity.Property(e => e.Cycle).HasColumnName("cycle");

                entity.Property(e => e.HeatSoak).HasColumnName("heat_soak");

                entity.Property(e => e.HeatSoakMax).HasColumnName("heat_soak_max");

                entity.Property(e => e.HeatSoakMaxMins).HasColumnName("heat_soak_max_mins");

                entity.Property(e => e.HeatSoakMin).HasColumnName("heat_soak_min");

                entity.Property(e => e.HeatSoakMinMins).HasColumnName("heat_soak_min_mins");

                entity.Property(e => e.HeatSoakMins).HasColumnName("heat_soak_mins");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LatestStartDate).HasColumnName("latest_start_date");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MpoStep).HasColumnName("mpo_step");

                entity.Property(e => e.Muser).HasColumnName("muser");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SthtId).HasColumnName("stht_id");

                entity.Property(e => e.TargetRank).HasColumnName("target_rank");

                entity.Property(e => e.TargetTemp).HasColumnName("target_temp");

                entity.Property(e => e.Treatment)
                    .HasColumnName("treatment")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WspecTreatmentrank).HasColumnName("wspec_treatmentrank");
            });

            modelBuilder.Entity<SqlagentJobsStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SQLAgentJobsStatus", "ETL");

                entity.Property(e => e.JobId).HasColumnName("JobID");

                entity.Property(e => e.JobName).HasMaxLength(128);

                entity.Property(e => e.LastRunDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastRunStatus)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.LastSuccessfulRunDateTime).HasColumnType("datetime");

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.StepName).HasMaxLength(128);
            });

            modelBuilder.Entity<StockAllocations>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockAllocations", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_StockAllocations_COID");

                entity.HasIndex(e => new { e.ProductLevelAllocationId, e.Coid })
                    .HasName("IDX_StockAllocation_ProductLevelAllocation_COID");

                entity.HasIndex(e => new { e.StockItemId, e.Coid })
                    .HasName("IDX_StockAllocation_StockItemID_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AutomatedProcessType)
                    .HasColumnName("automated_process_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Cuts).HasColumnName("cuts");

                entity.Property(e => e.DespatchItemId).HasColumnName("despatch_item_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("expiry_date")
                    .HasColumnType("date");

                entity.Property(e => e.Firm).HasColumnName("firm");

                entity.Property(e => e.InboundAllocatedPieces).HasColumnName("inbound_allocated_pieces");

                entity.Property(e => e.InboundAllocatedQuantity)
                    .HasColumnName("inbound_allocated_quantity")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.InboundAllocatedWeight)
                    .HasColumnName("inbound_allocated_weight")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.InboundAllocationId).HasColumnName("inbound_allocation_id");

                entity.Property(e => e.InvoiceWeight)
                    .HasColumnName("invoice_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1);

                entity.Property(e => e.JobConsumptionId).HasColumnName("job_consumption_id");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.PrintedDate)
                    .HasColumnName("printed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductLevelAllocationId).HasColumnName("product_level_allocation_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReserveOnly).HasColumnName("reserve_only");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.VehicleStopDetailId).HasColumnName("vehicle_stop_detail_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<StockAnalysisCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockAnalysisCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockCasts>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockCasts", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_StockCasts_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ApprovalDate)
                    .HasColumnName("approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApprovedById).HasColumnName("approved_by_id");

                entity.Property(e => e.CastNumber)
                    .HasColumnName("cast_number")
                    .HasMaxLength(30);

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertNumber)
                    .HasColumnName("cert_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.CountryOfFinalProcessingId).HasColumnName("country_of_final_processing_id");

                entity.Property(e => e.CountryOfMaterialOriginId).HasColumnName("country_of_material_origin_id");

                entity.Property(e => e.CountryOfPrimaryProcessingId).HasColumnName("country_of_primary_processing_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DeliveryReference)
                    .HasColumnName("delivery_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GradeId).HasColumnName("grade_id");

                entity.Property(e => e.ImageIndex)
                    .HasColumnName("image_index")
                    .HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MillId).HasColumnName("mill_id");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OtherReference)
                    .HasColumnName("other_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockConditionCodes>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("StockConditionCodes", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockConditions>(entity =>
            {
                entity.HasKey(e => new { e.Coid, e.Id });

                entity.ToTable("StockConditions", "iMetal");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ConditionId).HasColumnName("condition_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(50);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockDimensionTypes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockDimensionTypes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Digits).HasColumnName("digits");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(12);

                entity.Property(e => e.Places).HasColumnName("places");

                entity.Property(e => e.ShortDescription)
                    .HasColumnName("short_description")
                    .HasMaxLength(3);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockGrades>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockGrades", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("('CAN')");

                entity.Property(e => e.AlloyGroup)
                    .HasColumnName("alloy_group")
                    .HasMaxLength(16);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CopperPercentage)
                    .HasColumnName("copper_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IgnoreElements).HasColumnName("ignore_elements");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NickelPercentage)
                    .HasColumnName("nickel_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.OtherPercentage)
                    .HasColumnName("other_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TinPercentage)
                    .HasColumnName("tin_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.ZincPercentage)
                    .HasColumnName("zinc_percentage")
                    .HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<StockHoldReasons>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockHoldReasons", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.GoodsInDefault).HasColumnName("goods_in_default");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockItemAllocations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_StockItemAllocations");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.AllocatedWarehouseName).HasMaxLength(60);

                entity.Property(e => e.AllocatedWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.BranchName).HasMaxLength(60);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DefaultBaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DefaultWeightUom)
                    .IsRequired()
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.FinalProductCode).HasMaxLength(24);

                entity.Property(e => e.HeatNumber).HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mill).HasMaxLength(3);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductSize).HasMaxLength(19);

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.ReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesGroupCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupDescription).HasMaxLength(255);

                entity.Property(e => e.SalesGroupTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SalesHeaderId).HasColumnName("SalesHeaderID");

                entity.Property(e => e.SalesItemBranchCode).HasMaxLength(6);

                entity.Property(e => e.SalesItemDueDate).HasColumnType("date");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SalesItemReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesItemTotalBaseValue).HasColumnType("numeric(17, 2)");

                entity.Property(e => e.SalesItemTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesRep).HasMaxLength(50);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.SizeDescription).HasMaxLength(255);

                entity.Property(e => e.StockAllocationId).HasColumnName("StockAllocationID");

                entity.Property(e => e.StockItem).HasMaxLength(16);

                entity.Property(e => e.StockItemId).HasColumnName("StockItemID");

                entity.Property(e => e.StockLocation).HasMaxLength(16);

                entity.Property(e => e.StockOriginatedDate).HasColumnType("date");

                entity.Property(e => e.StockTotalCostPerWeightUom)
                    .HasColumnName("StockTotalCostPerWeightUOM")
                    .HasColumnType("numeric(16, 4)");

                entity.Property(e => e.StockTotalValueOnHand).HasColumnType("numeric(16, 2)");

                entity.Property(e => e.TagLength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TotalAllocatedValue).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(109);
            });

            modelBuilder.Entity<StockItemAllocations1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StockItemAllocations", "QNG");

                entity.HasIndex(e => new { e.StockItemId, e.HeatNumber, e.AllocatedPieces, e.SalesItemId, e.SalesHeaderId, e.Coid })
                    .HasName("IDX_StockItemAllocations_SalesItemID_SalesHeaderID_COID");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.AllocatedWarehouseName).HasMaxLength(60);

                entity.Property(e => e.AllocatedWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.BranchName).HasMaxLength(60);

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DefaultBaseCurrency).HasMaxLength(3);

                entity.Property(e => e.DefaultWeightUom)
                    .HasColumnName("DefaultWeightUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FinalProductCode).HasMaxLength(24);

                entity.Property(e => e.HeatNumber).HasMaxLength(30);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Mill).HasMaxLength(3);

                entity.Property(e => e.ProductCategory).HasMaxLength(16);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductCondition).HasMaxLength(30);

                entity.Property(e => e.ProductDescription).HasMaxLength(4000);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductSize).HasMaxLength(19);

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.ReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesGroupCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupDescription).HasMaxLength(255);

                entity.Property(e => e.SalesGroupTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupTypeDescription).HasMaxLength(255);

                entity.Property(e => e.SalesHeaderId).HasColumnName("SalesHeaderID");

                entity.Property(e => e.SalesItemBranchCode).HasMaxLength(6);

                entity.Property(e => e.SalesItemDueDate).HasColumnType("date");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SalesItemReferenceNumber).HasMaxLength(72);

                entity.Property(e => e.SalesItemTotalBaseValue).HasColumnType("numeric(17, 2)");

                entity.Property(e => e.SalesItemTypeCode).HasMaxLength(3);

                entity.Property(e => e.SalesRep).HasMaxLength(50);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.SizeDescription).HasMaxLength(255);

                entity.Property(e => e.StockAllocationId).HasColumnName("StockAllocationID");

                entity.Property(e => e.StockItem).HasMaxLength(16);

                entity.Property(e => e.StockItemId).HasColumnName("StockItemID");

                entity.Property(e => e.StockLocation).HasMaxLength(16);

                entity.Property(e => e.StockOriginatedDate).HasColumnType("date");

                entity.Property(e => e.StockTotalCostPerWeightUom)
                    .HasColumnName("StockTotalCostPerWeightUOM")
                    .HasColumnType("numeric(16, 4)");

                entity.Property(e => e.StockTotalValueOnHand).HasColumnType("numeric(16, 2)");

                entity.Property(e => e.TagLength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TotalAllocatedValue).HasColumnType("numeric(27, 7)");

                entity.Property(e => e.ViewId)
                    .IsRequired()
                    .HasColumnName("ViewID")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<StockItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockItems", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_StockItems_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AdviceNoteReference)
                    .HasColumnName("advice_note_reference")
                    .HasMaxLength(40);

                entity.Property(e => e.AdvisedQuantity)
                    .HasColumnName("advised_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AgedDate)
                    .HasColumnName("aged_date")
                    .HasColumnType("date");

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CalculatedQuantity)
                    .HasColumnName("calculated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CertificateOfConformityReference)
                    .HasColumnName("certificate_of_conformity_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.CreationTransactionId).HasColumnName("creation_transaction_id");

                entity.Property(e => e.CreationTransactionItemId).HasColumnName("creation_transaction_item_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomersOwn).HasColumnName("customers_own");

                entity.Property(e => e.Density)
                    .HasColumnName("density")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4TypeId).HasColumnName("dim4_type_id");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5TypeId).HasColumnName("dim5_type_id");

                entity.Property(e => e.DutyPercentage)
                    .HasColumnName("duty_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FReduction)
                    .HasColumnName("f_reduction")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDate)
                    .HasColumnName("hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDescription).HasColumnName("hold_description");

                entity.Property(e => e.HoldReasonId).HasColumnName("hold_reason_id");

                entity.Property(e => e.HoldUserId).HasColumnName("hold_user_id");

                entity.Property(e => e.IdentifyingMarkId).HasColumnName("identifying_mark_id");

                entity.Property(e => e.IncomingDate)
                    .HasColumnName("incoming_date")
                    .HasColumnType("date");

                entity.Property(e => e.LastCheckedDate).HasColumnName("last_checked_date");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(16);

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonTraceable).HasColumnName("non_traceable");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasMaxLength(16);

                entity.Property(e => e.OriginalMaterialCost)
                    .HasColumnName("original_material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalMiscellaneousCost)
                    .HasColumnName("original_miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalParentId).HasColumnName("original_parent_id");

                entity.Property(e => e.OriginalProductionCost)
                    .HasColumnName("original_production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalSurchargeCost)
                    .HasColumnName("original_surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalTransportCost)
                    .HasColumnName("original_transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OtherNumber)
                    .HasColumnName("other_number")
                    .HasMaxLength(25);

                entity.Property(e => e.PackingReference)
                    .HasColumnName("packing_reference")
                    .HasMaxLength(20);

                entity.Property(e => e.PackingTypeId).HasColumnName("packing_type_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PiecesPerPack).HasColumnName("pieces_per_pack");

                entity.Property(e => e.Printed)
                    .HasColumnName("printed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductSubGroupId).HasColumnName("product_sub_group_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionItem).HasColumnName("production_item");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PurchaseBranchId).HasColumnName("purchase_branch_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.PurchaseOrder).HasColumnName("purchase_order");

                entity.Property(e => e.PurchaseOrderItem).HasColumnName("purchase_order_item");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("received_date")
                    .HasColumnType("date");

                entity.Property(e => e.RejectDescription).HasColumnName("reject_description");

                entity.Property(e => e.RejectReasonId).HasColumnName("reject_reason_id");

                entity.Property(e => e.RejectedDate)
                    .HasColumnName("rejected_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReservedPieces).HasColumnName("reserved_pieces");

                entity.Property(e => e.ReservedQuantity)
                    .HasColumnName("reserved_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReservedWeight)
                    .HasColumnName("reserved_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockCastId).HasColumnName("stock_cast_id");

                entity.Property(e => e.StockStatusId).HasColumnName("stock_status_id");

                entity.Property(e => e.StorageDate)
                    .HasColumnName("storage_date")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierReference)
                    .HasColumnName("supplier_reference")
                    .HasMaxLength(25);

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TestCertReference)
                    .HasColumnName("test_cert_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasMaxLength(30);

                entity.Property(e => e.TransientId).HasColumnName("transient_id");

                entity.Property(e => e.TransientType)
                    .HasColumnName("transient_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TreatmentNumber)
                    .HasColumnName("treatment_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.VesselId).HasColumnName("vessel_id");

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            });

            modelBuilder.Entity<StockItemsArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StockItemsArchive", "iMetal");

                entity.HasIndex(e => new { e.Id, e.SnapshotDate, e.Coid })
                    .HasName("PK_StockItemsArchive")
                    .IsClustered();

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AdviceNoteReference)
                    .HasColumnName("advice_note_reference")
                    .HasMaxLength(40);

                entity.Property(e => e.AdvisedQuantity)
                    .HasColumnName("advised_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AgedDate)
                    .HasColumnName("aged_date")
                    .HasColumnType("date");

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.CalculatedQuantity)
                    .HasColumnName("calculated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.Cdate)
                    .HasColumnName("cdate")
                    .HasColumnType("datetimeoffset(6)");

                entity.Property(e => e.CertificateOfConformityReference)
                    .HasColumnName("certificate_of_conformity_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreationTransactionId).HasColumnName("creation_transaction_id");

                entity.Property(e => e.CreationTransactionItemId).HasColumnName("creation_transaction_item_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.CustomersOwn).HasColumnName("customers_own");

                entity.Property(e => e.Density)
                    .HasColumnName("density")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1NegativeTolerance)
                    .HasColumnName("dim1_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1PositiveTolerance)
                    .HasColumnName("dim1_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim1TypeId).HasColumnName("dim1_type_id");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2NegativeTolerance)
                    .HasColumnName("dim2_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2PositiveTolerance)
                    .HasColumnName("dim2_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2TypeId).HasColumnName("dim2_type_id");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3NegativeTolerance)
                    .HasColumnName("dim3_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3PositiveTolerance)
                    .HasColumnName("dim3_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3TypeId).HasColumnName("dim3_type_id");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4NegativeTolerance)
                    .HasColumnName("dim4_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4PositiveTolerance)
                    .HasColumnName("dim4_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4TypeId).HasColumnName("dim4_type_id");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5NegativeTolerance)
                    .HasColumnName("dim5_negative_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5PositiveTolerance)
                    .HasColumnName("dim5_positive_tolerance")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5TypeId).HasColumnName("dim5_type_id");

                entity.Property(e => e.DutyPercentage)
                    .HasColumnName("duty_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FixDate)
                    .HasColumnName("fix_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDate)
                    .HasColumnName("hold_date")
                    .HasColumnType("date");

                entity.Property(e => e.HoldDescription)
                    .HasColumnName("hold_description")
                    .HasColumnType("ntext");

                entity.Property(e => e.HoldReasonId).HasColumnName("hold_reason_id");

                entity.Property(e => e.HoldUserId).HasColumnName("hold_user_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdentifyingMarkId).HasColumnName("identifying_mark_id");

                entity.Property(e => e.IncomingDate)
                    .HasColumnName("incoming_date")
                    .HasColumnType("date");

                entity.Property(e => e.LastCheckedDate)
                    .HasColumnName("last_checked_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(16);

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate)
                    .HasColumnName("mdate")
                    .HasColumnType("datetimeoffset(6)");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.NonTraceable).HasColumnName("non_traceable");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasMaxLength(16);

                entity.Property(e => e.OriginalMaterialCost)
                    .HasColumnName("original_material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalMiscellaneousCost)
                    .HasColumnName("original_miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalParentId).HasColumnName("original_parent_id");

                entity.Property(e => e.OriginalProductionCost)
                    .HasColumnName("original_production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalSurchargeCost)
                    .HasColumnName("original_surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OriginalTransportCost)
                    .HasColumnName("original_transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OtherNumber)
                    .HasColumnName("other_number")
                    .HasMaxLength(25);

                entity.Property(e => e.PackingReference)
                    .HasColumnName("packing_reference")
                    .HasMaxLength(20);

                entity.Property(e => e.PackingTypeId).HasColumnName("packing_type_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.PartSpecificationId).HasColumnName("part_specification_id");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PiecesPerPack).HasColumnName("pieces_per_pack");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductSubGroupId).HasColumnName("product_sub_group_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionItem).HasColumnName("production_item");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.PurchaseBranchId).HasColumnName("purchase_branch_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.PurchaseOrder).HasColumnName("purchase_order");

                entity.Property(e => e.PurchaseOrderItem).HasColumnName("purchase_order_item");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("received_date")
                    .HasColumnType("date");

                entity.Property(e => e.RejectDescription)
                    .HasColumnName("reject_description")
                    .HasColumnType("ntext");

                entity.Property(e => e.RejectReasonId).HasColumnName("reject_reason_id");

                entity.Property(e => e.RejectedDate)
                    .HasColumnName("rejected_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReservedPieces).HasColumnName("reserved_pieces");

                entity.Property(e => e.ReservedQuantity)
                    .HasColumnName("reserved_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ReservedWeight)
                    .HasColumnName("reserved_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.SnapshotDate).HasColumnType("date");

                entity.Property(e => e.Specification10Id).HasColumnName("specification10_id");

                entity.Property(e => e.Specification1Id).HasColumnName("specification1_id");

                entity.Property(e => e.Specification2Id).HasColumnName("specification2_id");

                entity.Property(e => e.Specification3Id).HasColumnName("specification3_id");

                entity.Property(e => e.Specification4Id).HasColumnName("specification4_id");

                entity.Property(e => e.Specification5Id).HasColumnName("specification5_id");

                entity.Property(e => e.Specification6Id).HasColumnName("specification6_id");

                entity.Property(e => e.Specification7Id).HasColumnName("specification7_id");

                entity.Property(e => e.Specification8Id).HasColumnName("specification8_id");

                entity.Property(e => e.Specification9Id).HasColumnName("specification9_id");

                entity.Property(e => e.SpecificationValue1)
                    .HasColumnName("specification_value1")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10)
                    .HasColumnName("specification_value10")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2)
                    .HasColumnName("specification_value2")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3)
                    .HasColumnName("specification_value3")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4)
                    .HasColumnName("specification_value4")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5)
                    .HasColumnName("specification_value5")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6)
                    .HasColumnName("specification_value6")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7)
                    .HasColumnName("specification_value7")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8)
                    .HasColumnName("specification_value8")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9)
                    .HasColumnName("specification_value9")
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockCastId).HasColumnName("stock_cast_id");

                entity.Property(e => e.StockStatusId).HasColumnName("stock_status_id");

                entity.Property(e => e.StorageDate)
                    .HasColumnName("storage_date")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierReference)
                    .HasColumnName("supplier_reference")
                    .HasMaxLength(25);

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TestCertReference)
                    .HasColumnName("test_cert_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasMaxLength(30);

                entity.Property(e => e.TransientId).HasColumnName("transient_id");

                entity.Property(e => e.TransientType)
                    .HasColumnName("transient_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TreatmentNumber)
                    .HasColumnName("treatment_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            });

            modelBuilder.Entity<StockItemsExt>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid })
                    .HasName("PK_QNG_StockItemsExt");

                entity.ToTable("StockItemsExt", "QNG");

                entity.HasIndex(e => new { e.Id, e.Coid, e.IsLive, e.WarehouseId, e.ReceivedDate })
                    .HasName("IDX_StockItemsExt_COID_IsLive_WarehouseId_received_date");

                entity.HasIndex(e => new { e.Id, e.TagNumber, e.HeatNumber, e.Mill, e.Coid, e.TransientReference })
                    .HasName("IDX_StockItemsExt_COID_TransientReference");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(30);

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitCountry)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOfMaterialOrigin).HasMaxLength(255);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedRefPrefix).HasMaxLength(3);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.HeatNumber).HasMaxLength(30);

                entity.Property(e => e.LeadTime).HasMaxLength(30);

                entity.Property(e => e.LengthAllocated).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LengthAvailable).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LengthOnHand).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MasterTagNumber).HasMaxLength(16);

                entity.Property(e => e.MasterWarehouse).HasMaxLength(10);

                entity.Property(e => e.MaterialValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.MaterialValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Mill).HasMaxLength(3);

                entity.Property(e => e.MiscellaneousValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.MiscellaneousValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.OriginalTotalCostOnHand).HasColumnType("numeric(16, 4)");

                entity.Property(e => e.ParentTagNumber).HasMaxLength(16);

                entity.Property(e => e.ParentWarehouse).HasMaxLength(10);

                entity.Property(e => e.PartNumber).HasMaxLength(35);

                entity.Property(e => e.Pocategory)
                    .HasColumnName("POCategory")
                    .HasMaxLength(6);

                entity.Property(e => e.PocategoryDescription)
                    .HasColumnName("POCategoryDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Potype)
                    .HasColumnName("POType")
                    .HasMaxLength(1);

                entity.Property(e => e.PotypeDescription)
                    .HasColumnName("POTypeDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ProductionValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("received_date")
                    .HasColumnType("date");

                entity.Property(e => e.RejectReason).HasMaxLength(255);

                entity.Property(e => e.Specification1).IsUnicode(false);

                entity.Property(e => e.StockHoldCode).HasMaxLength(3);

                entity.Property(e => e.StockHoldReason).HasMaxLength(255);

                entity.Property(e => e.StockHoldUser).HasMaxLength(50);

                entity.Property(e => e.StockStatus).HasMaxLength(2);

                entity.Property(e => e.StockStatusDescription).HasMaxLength(255);

                entity.Property(e => e.SupplierName).HasMaxLength(60);

                entity.Property(e => e.SupplierNumber).HasMaxLength(10);

                entity.Property(e => e.SupplierReference).HasMaxLength(50);

                entity.Property(e => e.SurchargeValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.SurchargeValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TagNumber).HasMaxLength(16);

                entity.Property(e => e.TotalCostPerWeightUom)
                    .HasColumnName("TotalCostPerWeightUOM")
                    .HasColumnType("numeric(16, 4)");

                entity.Property(e => e.TotalValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TotalValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TotalValueOnHand).HasColumnType("numeric(16, 2)");

                entity.Property(e => e.TransientReference).HasMaxLength(72);

                entity.Property(e => e.TransientType).HasMaxLength(1);

                entity.Property(e => e.TransportValueAllocated).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.TransportValueAvailable).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.UnitValue).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.WarehouseCode).HasMaxLength(10);

                entity.Property(e => e.WarehouseName).HasMaxLength(60);

                entity.Property(e => e.WarehouseType).HasMaxLength(2);

                entity.Property(e => e.WarehouseTypeDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<StockRejectReasons>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockRejectReasons", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockStatusCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockStatusCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AverageCosts).HasColumnName("average_costs");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(2);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomersOwn).HasColumnName("customers_own");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.HeldStockUnavailable).HasColumnName("held_stock_unavailable");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockUnavailable).HasColumnName("stock_unavailable");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockTestSpecifications>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockTestSpecifications", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_StockTestSpecifications_COID");

                entity.HasIndex(e => new { e.SpecificationId, e.Coid })
                    .HasName("STS_SpecificationID_COID");

                entity.HasIndex(e => new { e.StockItemId, e.Coid })
                    .HasName("STS_StockItemID_COID");

                entity.HasIndex(e => new { e.StockItemId, e.Coid, e.SpecificationId, e.Value })
                    .HasName("STS_StockItemID_COID_SpecificationID_Value");

                entity.HasIndex(e => new { e.Value, e.SpecificationId, e.Coid, e.StockItemId })
                    .HasName("STS_SpecificationID_COID_StockItemID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.FromValue)
                    .HasColumnName("from_value")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.SpecificationId).HasColumnName("specification_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.ToValue)
                    .HasColumnName("to_value")
                    .HasColumnType("numeric(16, 6)");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(20);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockTransactionItems>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockTransactionItems", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("STI_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BalanceMaterialCost)
                    .HasColumnName("balance_material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BalanceMaterialVal)
                    .HasColumnName("balance_material_val")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceMiscellaneousCost)
                    .HasColumnName("balance_miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BalanceMiscellaneousVal)
                    .HasColumnName("balance_miscellaneous_val")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalancePieces).HasColumnName("balance_pieces");

                entity.Property(e => e.BalanceProductionCost)
                    .HasColumnName("balance_production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BalanceProductionVal)
                    .HasColumnName("balance_production_val")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceQuantity)
                    .HasColumnName("balance_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.BalanceSurchargeCost)
                    .HasColumnName("balance_surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BalanceSurchargeValue)
                    .HasColumnName("balance_surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceTransportCost)
                    .HasColumnName("balance_transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BalanceTransportVal)
                    .HasColumnName("balance_transport_val")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.BalanceWeight)
                    .HasColumnName("balance_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.BatchNumber).HasColumnName("batch_number");

                entity.Property(e => e.BoughtForCustomerId).HasColumnName("bought_for_customer_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.CustomersOwn).HasColumnName("customers_own");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.DespatchBranchId).HasColumnName("despatch_branch_id");

                entity.Property(e => e.DespatchItem).HasColumnName("despatch_item");

                entity.Property(e => e.DespatchNumber).HasColumnName("despatch_number");

                entity.Property(e => e.DespatchedDate)
                    .HasColumnName("despatched_date")
                    .HasColumnType("date");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EstimatedConsumptionPieces).HasColumnName("estimated_consumption_pieces");

                entity.Property(e => e.EstimatedConsumptionQuantity)
                    .HasColumnName("estimated_consumption_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.EstimatedConsumptionWeight)
                    .HasColumnName("estimated_consumption_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.InvoiceBranchId).HasColumnName("invoice_branch_id");

                entity.Property(e => e.InvoiceItem).HasColumnName("invoice_item");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoice_number");

                entity.Property(e => e.InvoiceWeight)
                    .HasColumnName("invoice_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Item).HasColumnName("item");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialUnitsId).HasColumnName("material_units_id");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousUnitsId).HasColumnName("miscellaneous_units_id");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OrderBranchId).HasColumnName("order_branch_id");

                entity.Property(e => e.OrderItem).HasColumnName("order_item");

                entity.Property(e => e.OrderNumber).HasColumnName("order_number");

                entity.Property(e => e.OtherOrderReference)
                    .HasColumnName("other_order_reference")
                    .HasMaxLength(30);

                entity.Property(e => e.OutsideProcessorId).HasColumnName("outside_processor_id");

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ParentStockItemId).HasColumnName("parent_stock_item_id");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.ProcessingDate)
                    .HasColumnName("processing_date")
                    .HasColumnType("date");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionFactor).HasColumnName("production_factor");

                entity.Property(e => e.ProductionUnitsId).HasColumnName("production_units_id");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesType).HasColumnName("sales_type");

                entity.Property(e => e.ScrapPercentage)
                    .HasColumnName("scrap_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeUnitsId).HasColumnName("surcharge_units_id");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransactionId).HasColumnName("transaction_id");

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportUnitsId).HasColumnName("transport_units_id");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<StockTransactionType>(entity =>
            {
                entity.HasKey(e => e.StockTransactionType1)
                    .HasName("PK_QNG_StockTransactionType");

                entity.ToTable("StockTransactionType", "QNG");

                entity.Property(e => e.StockTransactionType1)
                    .HasColumnName("StockTransactionType")
                    .HasMaxLength(3);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.StockTransactionTypeDescription)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<StockTransactionTypeLedgerSegments>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockTransactionTypeLedgerSegments", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AdjustmentReasonId).HasColumnName("adjustment_reason_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CompositeKey)
                    .IsRequired()
                    .HasColumnName("composite_key")
                    .HasMaxLength(20);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExternalMaterialFormula)
                    .HasColumnName("external_material_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalMiscellaneousFormula)
                    .HasColumnName("external_miscellaneous_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalProductionFormula)
                    .HasColumnName("external_production_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalSurchargeFormula)
                    .HasColumnName("external_surcharge_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.ExternalTransportFormula)
                    .HasColumnName("external_transport_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalMaterialFormula)
                    .HasColumnName("internal_material_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalMiscellaneousFormula)
                    .HasColumnName("internal_miscellaneous_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalProductionFormula)
                    .HasColumnName("internal_production_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalSurchargeFormula)
                    .HasColumnName("internal_surcharge_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.InternalTransportFormula)
                    .HasColumnName("internal_transport_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.LedgerTransactionType)
                    .HasColumnName("ledger_transaction_type")
                    .HasMaxLength(2);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockControlFormula)
                    .HasColumnName("stock_control_formula")
                    .HasMaxLength(64);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<StockTransactions>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("StockTransactions", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_StockTransactions_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BatchNumber).HasColumnName("batch_number");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OtherReference)
                    .HasColumnName("other_reference")
                    .HasMaxLength(80);

                entity.Property(e => e.ProcessingDate)
                    .HasColumnName("processing_date")
                    .HasColumnType("date");

                entity.Property(e => e.Session).HasColumnName("session");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockAdjustmentReasonId).HasColumnName("stock_adjustment_reason_id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(3);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<SupplierDocuments>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("SupplierDocuments", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_SupplierDocuments_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AccountingPeriod).HasColumnName("accounting_period");

                entity.Property(e => e.BatchId).HasColumnName("batch_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChequeComments)
                    .HasColumnName("cheque_comments")
                    .HasMaxLength(60);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DiscountAmount)
                    .HasColumnName("discount_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DiscountDate)
                    .HasColumnName("discount_date")
                    .HasColumnType("date");

                entity.Property(e => e.DiscountDays).HasColumnName("discount_days");

                entity.Property(e => e.DiscountPercentage)
                    .HasColumnName("discount_percentage")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.DiscountableAmount)
                    .HasColumnName("discountable_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DocumentAmount)
                    .HasColumnName("document_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentStatus)
                    .HasColumnName("document_status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.DocumentType)
                    .IsRequired()
                    .HasColumnName("document_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.EntryDate)
                    .HasColumnName("entry_date")
                    .HasColumnType("date");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnName("exchange_rate")
                    .HasColumnType("numeric(14, 8)");

                entity.Property(e => e.GatewayBatchId).HasColumnName("gateway_batch_id");

                entity.Property(e => e.HeldReasons)
                    .HasColumnName("held_reasons")
                    .HasColumnType("ntext");

                entity.Property(e => e.MatchedMaterialAmount)
                    .HasColumnName("matched_material_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MatchedMiscellaneousAmount)
                    .HasColumnName("matched_miscellaneous_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MatchedProductionAmount)
                    .HasColumnName("matched_production_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MatchedSurchargeAmount)
                    .HasColumnName("matched_surcharge_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MatchedTransportAmount)
                    .HasColumnName("matched_transport_amount")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnName("payment_due_date")
                    .HasColumnType("date");

                entity.Property(e => e.PaymentHold).HasColumnName("payment_hold");

                entity.Property(e => e.ProjectRelated).HasColumnName("project_related");

                entity.Property(e => e.PurchaseOrderId).HasColumnName("purchase_order_id");

                entity.Property(e => e.RemitToCode)
                    .HasColumnName("remit_to_code")
                    .HasMaxLength(6);

                entity.Property(e => e.RemitToName)
                    .HasColumnName("remit_to_name")
                    .HasMaxLength(60);

                entity.Property(e => e.RemittanceAddressId).HasColumnName("remittance_address_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SupplierDocumentNumber)
                    .HasColumnName("supplier_document_number")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.TaxAuthority1)
                    .HasColumnName("tax_authority_1")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority2)
                    .HasColumnName("tax_authority_2")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority3)
                    .HasColumnName("tax_authority_3")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority4)
                    .HasColumnName("tax_authority_4")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxAuthority5)
                    .HasColumnName("tax_authority_5")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxClass1).HasColumnName("tax_class_1");

                entity.Property(e => e.TaxClass2).HasColumnName("tax_class_2");

                entity.Property(e => e.TaxClass3).HasColumnName("tax_class_3");

                entity.Property(e => e.TaxClass4).HasColumnName("tax_class_4");

                entity.Property(e => e.TaxClass5).HasColumnName("tax_class_5");

                entity.Property(e => e.TaxExempt1).HasColumnName("tax_exempt_1");

                entity.Property(e => e.TaxExempt2).HasColumnName("tax_exempt_2");

                entity.Property(e => e.TaxExempt3).HasColumnName("tax_exempt_3");

                entity.Property(e => e.TaxExempt4).HasColumnName("tax_exempt_4");

                entity.Property(e => e.TaxExempt5).HasColumnName("tax_exempt_5");

                entity.Property(e => e.TaxGroupCode)
                    .HasColumnName("tax_group_code")
                    .HasMaxLength(12);

                entity.Property(e => e.TaxOnly)
                    .HasColumnName("tax_only")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TermsId).HasColumnName("terms_id");

                entity.Property(e => e.VatAmount1)
                    .HasColumnName("vat_amount_1")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatAmount2)
                    .HasColumnName("vat_amount_2")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatAmount3)
                    .HasColumnName("vat_amount_3")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatAmount4)
                    .HasColumnName("vat_amount_4")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatAmount5)
                    .HasColumnName("vat_amount_5")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.VatRate1)
                    .HasColumnName("vat_rate_1")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate2)
                    .HasColumnName("vat_rate_2")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate3)
                    .HasColumnName("vat_rate_3")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate4)
                    .HasColumnName("vat_rate_4")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.VatRate5)
                    .HasColumnName("vat_rate_5")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TemplateProcessPlanProcesses>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TemplateProcessPlanProcesses", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_TemplateProcessPlanProcesses_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("ntext");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.ProcessId).HasColumnName("process_id");

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasMaxLength(30);

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.TemplateProcessPlanId).HasColumnName("template_process_plan_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TemplateProcessPlans>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TemplateProcessPlans", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_TemplateProcessPlans_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Process10Id).HasColumnName("process10_id");

                entity.Property(e => e.Process1Id).HasColumnName("process1_id");

                entity.Property(e => e.Process2Id).HasColumnName("process2_id");

                entity.Property(e => e.Process3Id).HasColumnName("process3_id");

                entity.Property(e => e.Process4Id).HasColumnName("process4_id");

                entity.Property(e => e.Process5Id).HasColumnName("process5_id");

                entity.Property(e => e.Process6Id).HasColumnName("process6_id");

                entity.Property(e => e.Process7Id).HasColumnName("process7_id");

                entity.Property(e => e.Process8Id).HasColumnName("process8_id");

                entity.Property(e => e.Process9Id).HasColumnName("process9_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Terms>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Terms", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.DueDays).HasColumnName("due_days");

                entity.Property(e => e.DueMonthEnds).HasColumnName("due_month_ends");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TestSpecificationCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TestSpecificationCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(12);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TransientCosts>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TransientCosts", "iMetal");

                entity.HasIndex(e => new { e.Id, e.Coid })
                    .HasName("IDX_TransientCosts_COID");

                entity.HasIndex(e => new { e.Coid, e.BranchId, e.TransientType, e.TransientId, e.GoodsInwardsItemId, e.StockItemId })
                    .HasName("IDX_TransientCosts_stock_item_id");

                entity.HasIndex(e => new { e.TransientType, e.TransientId, e.GoodsInwardsItemId, e.Coid, e.BranchId, e.StockItemId })
                    .HasName("IDX_TransientCosts_COID_branch_id_stock_item_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CostingWeight)
                    .HasColumnName("costing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EstimatedConsumptionPieces).HasColumnName("estimated_consumption_pieces");

                entity.Property(e => e.EstimatedConsumptionQuantity)
                    .HasColumnName("estimated_consumption_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.EstimatedConsumptionWeight)
                    .HasColumnName("estimated_consumption_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsInwardsItemId).HasColumnName("goods_inwards_item_id");

                entity.Property(e => e.MaterialCost)
                    .HasColumnName("material_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialStockCost)
                    .HasColumnName("material_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialValue)
                    .HasColumnName("material_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousCost)
                    .HasColumnName("miscellaneous_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousStockCost)
                    .HasColumnName("miscellaneous_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MiscellaneousValue)
                    .HasColumnName("miscellaneous_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PackedWeight)
                    .HasColumnName("packed_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductionCost)
                    .HasColumnName("production_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionCostId).HasColumnName("production_cost_id");

                entity.Property(e => e.ProductionFactor).HasColumnName("production_factor");

                entity.Property(e => e.ProductionStepId).HasColumnName("production_step_id");

                entity.Property(e => e.ProductionStockCost)
                    .HasColumnName("production_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionValue)
                    .HasColumnName("production_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.ScrapPercentage)
                    .HasColumnName("scrap_percentage")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.StockProductionPartSpecificationId).HasColumnName("stock_production_part_specification_id");

                entity.Property(e => e.SurchargeCost)
                    .HasColumnName("surcharge_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeStockCost)
                    .HasColumnName("surcharge_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SurchargeValue)
                    .HasColumnName("surcharge_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.TransientId).HasColumnName("transient_id");

                entity.Property(e => e.TransientType)
                    .HasColumnName("transient_type")
                    .HasMaxLength(1);

                entity.Property(e => e.TransportCost)
                    .HasColumnName("transport_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportStockCost)
                    .HasColumnName("transport_stock_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TransportValue)
                    .HasColumnName("transport_value")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TransportAreas>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TransportAreas", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TransportTypeCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("TransportTypeCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(6);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExternalCharge).HasColumnName("external_charge");

                entity.Property(e => e.ExternalCost).HasColumnName("external_cost");

                entity.Property(e => e.InclusiveCharge).HasColumnName("inclusive_charge");

                entity.Property(e => e.InternalCost).HasColumnName("internal_cost");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.PlanTransport).HasColumnName("plan_transport");

                entity.Property(e => e.PurchaseGroupId).HasColumnName("purchase_group_id");

                entity.Property(e => e.SalesServiceProductId).HasColumnName("sales_service_product_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Txauth>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXAUTH", "SAGE");

                entity.Property(e => e.Acctexp)
                    .IsRequired()
                    .HasColumnName("ACCTEXP")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctrecov)
                    .IsRequired()
                    .HasColumnName("ACCTRECOV")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Acctwht)
                    .IsRequired()
                    .HasColumnName("ACCTWHT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Auditlevel).HasColumnName("AUDITLEVEL");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Defer)
                    .IsRequired()
                    .HasColumnName("DEFER")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Deferrecov)
                    .IsRequired()
                    .HasColumnName("DEFERRECOV")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Discbase).HasColumnName("DISCBASE");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Expseparte).HasColumnName("EXPSEPARTE");

                entity.Property(e => e.Includable).HasColumnName("INCLUDABLE");

                entity.Property(e => e.Inputacct)
                    .IsRequired()
                    .HasColumnName("INPUTACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Liability)
                    .IsRequired()
                    .HasColumnName("LIABILITY")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Liabtiming).HasColumnName("LIABTIMING");

                entity.Property(e => e.Maxtax)
                    .HasColumnName("MAXTAX")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Mintax)
                    .HasColumnName("MINTAX")
                    .HasColumnType("numeric(19, 3)");

                entity.Property(e => e.Outputacct)
                    .IsRequired()
                    .HasColumnName("OUTPUTACCT")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Raterecov)
                    .HasColumnName("RATERECOV")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Recoverabl).HasColumnName("RECOVERABL");

                entity.Property(e => e.Refname)
                    .IsRequired()
                    .HasColumnName("REFNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Refnumber)
                    .IsRequired()
                    .HasColumnName("REFNUMBER")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Scurn)
                    .IsRequired()
                    .HasColumnName("SCURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");

                entity.Property(e => e.Txbase).HasColumnName("TXBASE");

                entity.Property(e => e.Txrtgctl).HasColumnName("TXRTGCTL");
            });

            modelBuilder.Entity<Txclass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXCLASS", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Class).HasColumnName("CLASS");

                entity.Property(e => e.Classaxis).HasColumnName("CLASSAXIS");

                entity.Property(e => e.Classtype).HasColumnName("CLASSTYPE");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Exempt).HasColumnName("EXEMPT");
            });

            modelBuilder.Entity<Txgrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXGRP", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority1)
                    .IsRequired()
                    .HasColumnName("AUTHORITY1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority2)
                    .IsRequired()
                    .HasColumnName("AUTHORITY2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority3)
                    .IsRequired()
                    .HasColumnName("AUTHORITY3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority4)
                    .IsRequired()
                    .HasColumnName("AUTHORITY4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority5)
                    .IsRequired()
                    .HasColumnName("AUTHORITY5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Calcmethod).HasColumnName("CALCMETHOD");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Srccurn)
                    .IsRequired()
                    .HasColumnName("SRCCURN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth1)
                    .IsRequired()
                    .HasColumnName("SURAUTH1")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth2)
                    .IsRequired()
                    .HasColumnName("SURAUTH2")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth3)
                    .IsRequired()
                    .HasColumnName("SURAUTH3")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth4)
                    .IsRequired()
                    .HasColumnName("SURAUTH4")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surauth5)
                    .IsRequired()
                    .HasColumnName("SURAUTH5")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Surtax1).HasColumnName("SURTAX1");

                entity.Property(e => e.Surtax2).HasColumnName("SURTAX2");

                entity.Property(e => e.Surtax3).HasColumnName("SURTAX3");

                entity.Property(e => e.Surtax4).HasColumnName("SURTAX4");

                entity.Property(e => e.Surtax5).HasColumnName("SURTAX5");

                entity.Property(e => e.Taxable1).HasColumnName("TAXABLE1");

                entity.Property(e => e.Taxable2).HasColumnName("TAXABLE2");

                entity.Property(e => e.Taxable3).HasColumnName("TAXABLE3");

                entity.Property(e => e.Taxable4).HasColumnName("TAXABLE4");

                entity.Property(e => e.Taxable5).HasColumnName("TAXABLE5");

                entity.Property(e => e.Tratetype)
                    .IsRequired()
                    .HasColumnName("TRATETYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ttype).HasColumnName("TTYPE");
            });

            modelBuilder.Entity<Txrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXRATE", "SAGE");

                entity.Property(e => e.Audtdate)
                    .HasColumnName("AUDTDATE")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtorg)
                    .IsRequired()
                    .HasColumnName("AUDTORG")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Audttime)
                    .HasColumnName("AUDTTIME")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Audtuser)
                    .IsRequired()
                    .HasColumnName("AUDTUSER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasColumnName("AUTHORITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Buyerclass).HasColumnName("BUYERCLASS");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Itemrate1)
                    .HasColumnName("ITEMRATE1")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate10)
                    .HasColumnName("ITEMRATE10")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate2)
                    .HasColumnName("ITEMRATE2")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate3)
                    .HasColumnName("ITEMRATE3")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate4)
                    .HasColumnName("ITEMRATE4")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate5)
                    .HasColumnName("ITEMRATE5")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate6)
                    .HasColumnName("ITEMRATE6")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate7)
                    .HasColumnName("ITEMRATE7")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate8)
                    .HasColumnName("ITEMRATE8")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Itemrate9)
                    .HasColumnName("ITEMRATE9")
                    .HasColumnType("numeric(15, 5)");

                entity.Property(e => e.Lastmaint)
                    .HasColumnName("LASTMAINT")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Ttype).HasColumnName("TTYPE");
            });

            modelBuilder.Entity<UnitOfMeasure>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("UnitOfMeasure", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.ChargeQuantityDecimalPlaces).HasColumnName("charge_quantity_decimal_places");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.DescriptionDecimalPlaces)
                    .HasColumnName("description_decimal_places")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImperialAndMetricFormatType)
                    .HasColumnName("imperial_and_metric_format_type")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.Modifier)
                    .HasColumnName("modifier")
                    .HasColumnType("numeric(8, 4)");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasColumnType("numeric(20, 8)");

                entity.Property(e => e.ShortDescription)
                    .HasColumnName("short_description")
                    .HasMaxLength(6);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Uomconversion>(entity =>
            {
                entity.HasKey(e => new { e.FromUom, e.ToUom })
                    .HasName("PK_QNG_UOMConversion");

                entity.ToTable("UOMConversion", "QNG");

                entity.Property(e => e.FromUom)
                    .HasColumnName("FromUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ToUom)
                    .HasColumnName("ToUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Factor).HasColumnType("decimal(28, 8)");
            });

            modelBuilder.Entity<UomtypeCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("UOMTypeCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.QuantityCode)
                    .HasColumnName("quantity_code")
                    .HasMaxLength(1);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<UserNotesForOrdersWithCurrentProcessStep>(entity =>
            {
                entity.ToTable("UserNotesForOrdersWithCurrentProcessStep", "QNG");

                entity.HasIndex(e => new { e.Coid, e.OrderItemId, e.UserName })
                    .HasName("IX_UserNotesForOrdersWithCurrentProcessStep")
                    .IsUnique();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.UserNotes1).HasMaxLength(2000);

                entity.Property(e => e.UserNotes2).HasMaxLength(2000);
            });

            modelBuilder.Entity<VAudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAudit", "ETL");

                entity.Property(e => e.AuditId)
                    .HasColumnName("AuditID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DeltaPercent).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.LoadEndDateTimeUtc).HasColumnName("LoadEndDateTimeUTC");

                entity.Property(e => e.LoadStartDateTimeUtc).HasColumnName("LoadStartDateTimeUTC");

                entity.Property(e => e.ReloadDataThreshold).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<VAuditArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAuditArchive", "ETL");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AuditArchiveId)
                    .HasColumnName("AuditArchiveID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DeltaPercent).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.LoadType).HasMaxLength(50);

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.ReloadDataThreshold).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<VAuditNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAuditNew", "ETL");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.AuditId)
                    .HasColumnName("AuditID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DeltaPercent).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.LoadType).HasMaxLength(50);

                entity.Property(e => e.MotddateTime).HasColumnName("MOTDDateTime");

                entity.Property(e => e.ReloadDataThreshold).HasColumnType("decimal(9, 3)");

                entity.Property(e => e.SourceSystem).HasMaxLength(50);

                entity.Property(e => e.SourceTable).HasMaxLength(100);
            });

            modelBuilder.Entity<VCustomerPartNumberSpecifications>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustomerPartNumberSpecifications");

                entity.Property(e => e.ApprovalDate).HasColumnType("date");

                entity.Property(e => e.Category).HasMaxLength(16);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CompanyType).HasMaxLength(261);

                entity.Property(e => e.Condition).HasMaxLength(30);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Dim1)
                    .HasColumnName("dim1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim2)
                    .HasColumnName("dim2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim3)
                    .HasColumnName("dim3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim4)
                    .HasColumnName("dim4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dim5)
                    .HasColumnName("dim5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DocumentNumber).HasMaxLength(30);

                entity.Property(e => e.DrawingNumber).HasMaxLength(30);

                entity.Property(e => e.EndUseCode).HasMaxLength(6);

                entity.Property(e => e.EndUseDescription).HasMaxLength(255);

                entity.Property(e => e.EntryQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ExpectedScrap).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Grade).HasMaxLength(16);

                entity.Property(e => e.HasCharges)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.HasExternalCosts)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.HasInternalCosts)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IdealConsumptionProductCategory).HasMaxLength(16);

                entity.Property(e => e.IdealConsumptionProductCode).HasMaxLength(24);

                entity.Property(e => e.IdealConsumptionProductCondition).HasMaxLength(30);

                entity.Property(e => e.IdealConsumptionProductLength).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.IdealConsumptionProductSize).HasMaxLength(19);

                entity.Property(e => e.IdealConsumptionProductTheoWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.IdealConsumptionProductTheoWeightPerInch).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.IdealConsumptionSizeDescription).HasMaxLength(255);

                entity.Property(e => e.InsideDiameter).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMaximum).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InsideDiameterMinimum).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.InvoicePacking)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUsedDate).HasColumnType("date");

                entity.Property(e => e.OutsideDiameter).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMaximum).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OutsideDiameterMinimum).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.PackHeight).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMaximum).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackHeightMinimum).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMaximum).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PackWeightMinimum).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PartCreatedBy).HasMaxLength(50);

                entity.Property(e => e.PartModifiedBy).HasMaxLength(50);

                entity.Property(e => e.PartName).HasMaxLength(255);

                entity.Property(e => e.PartNumber).HasMaxLength(35);

                entity.Property(e => e.PartStatus)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.PriceUom)
                    .HasColumnName("PriceUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ProcessPlanCreated)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductionFactor).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.RevisionNumber).HasMaxLength(30);

                entity.Property(e => e.SalesGroup).HasMaxLength(255);

                entity.Property(e => e.SalesGroupCode).HasMaxLength(3);

                entity.Property(e => e.SalesGroupType).HasMaxLength(255);

                entity.Property(e => e.SalesGroupTypeCode).HasMaxLength(3);

                entity.Property(e => e.Size).HasMaxLength(19);

                entity.Property(e => e.SizeDescription).HasMaxLength(255);

                entity.Property(e => e.SpecificationValue1).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue10).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue2).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue3).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue4).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue5).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue6).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue7).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue8).HasMaxLength(30);

                entity.Property(e => e.SpecificationValue9).HasMaxLength(30);

                entity.Property(e => e.StandardQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.StandardWeight).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TheoWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TheoWeightPerInch).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<VCustomers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustomers");

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.Directory)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Group).HasMaxLength(255);

                entity.Property(e => e.GroupCode).HasMaxLength(60);

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.Segment).HasMaxLength(255);

                entity.Property(e => e.SegmentCode).HasMaxLength(60);

                entity.Property(e => e.ShortName).HasMaxLength(30);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<VDeliveryPerformanceReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDeliveryPerformanceReport");

                entity.Property(e => e.AccountingPeriod).HasColumnType("date");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerCode).HasMaxLength(10);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DeliverToCode).HasMaxLength(10);

                entity.Property(e => e.DespatchOrderReference).HasMaxLength(68);

                entity.Property(e => e.DespatchedDate).HasColumnType("date");

                entity.Property(e => e.Id).HasMaxLength(178);

                entity.Property(e => e.LateReason).HasMaxLength(100);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.SalesGroup).HasMaxLength(3);

                entity.Property(e => e.SalesOrderBranch).HasMaxLength(6);

                entity.Property(e => e.SalesOrderItemCreatedDate).HasColumnType("date");

                entity.Property(e => e.SalesOrderItemDueDate).HasColumnType("date");

                entity.Property(e => e.SalesOrderItemOriginalDueDate).HasColumnType("date");

                entity.Property(e => e.SalesOrderReference).HasMaxLength(72);

                entity.Property(e => e.Salesperson).HasMaxLength(50);

                entity.Property(e => e.SubLateReason).HasMaxLength(100);
            });

            modelBuilder.Entity<VDespatchInstructions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDespatchInstructions", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.DespatchInstructions).HasMaxLength(2000);

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.ShortName).HasMaxLength(30);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<VDistinctPurchaseCategoryCodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDistinctPurchaseCategoryCodes");

                entity.Property(e => e.Code).HasMaxLength(6);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Description).HasMaxLength(255);
            });

            modelBuilder.Entity<VHalliburtonBillingItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vHalliburtonBillingItems", "QNG");

                entity.Property(e => e.BatchNumber).HasMaxLength(50);

                entity.Property(e => e.BillOfLading).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.HalliburtonPartNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeatNumber).HasMaxLength(50);

                entity.Property(e => e.HowcoStatusCode1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.HowcoStatusCode1Desc).HasMaxLength(50);

                entity.Property(e => e.HowcoStatusCode2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.HowcoStatusCode2Desc).HasMaxLength(50);

                entity.Property(e => e.ImetalImportBatchNumber).HasColumnName("IMetalImportBatchNumber");

                entity.Property(e => e.ImetalImportCompanyReference)
                    .HasColumnName("IMetalImportCompanyReference")
                    .HasMaxLength(30);

                entity.Property(e => e.ImetalLineNumber).HasColumnName("IMetalLineNumber");

                entity.Property(e => e.ImetalOrderNumber)
                    .HasColumnName("IMetalOrderNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.ImetalStatusCode)
                    .HasColumnName("IMetalStatusCode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImetalStatusCodeDesc)
                    .HasColumnName("IMetalStatusCodeDesc")
                    .HasMaxLength(50);

                entity.Property(e => e.ImetalStatusNotes).HasColumnName("IMetalStatusNotes");

                entity.Property(e => e.ImetalStatusUpdateTimeUtc)
                    .HasColumnName("IMetalStatusUpdateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ind).HasMaxLength(50);

                entity.Property(e => e.JobNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaterialDoc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plant).HasMaxLength(50);

                entity.Property(e => e.PoitemNumber)
                    .HasColumnName("POItemNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50);

                entity.Property(e => e.PostDate).HasColumnType("date");

                entity.Property(e => e.Price).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PriceUom)
                    .HasColumnName("PriceUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Quantity).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuantityUom)
                    .IsRequired()
                    .HasColumnName("QuantityUOM")
                    .HasMaxLength(3);

                entity.Property(e => e.Salesperson)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sloc)
                    .HasColumnName("SLoc")
                    .HasMaxLength(50);

                entity.Property(e => e.Spreadsheet)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.StockItemId).HasColumnName("StockItemID");

                entity.Property(e => e.StorBin).HasMaxLength(50);

                entity.Property(e => e.VendorNumber).HasMaxLength(50);

                entity.Property(e => e.ViewId)
                    .IsRequired()
                    .HasColumnName("ViewID")
                    .HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(5);
            });

            modelBuilder.Entity<VLookupBranches>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLookupBranches", "QNG");

                entity.Property(e => e.Code).HasMaxLength(6);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.Status).HasMaxLength(1);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<VLookupCompanySubAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLookupCompanySubAddress", "QNG");

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanySubAddressId).HasColumnName("CompanySubAddressID");

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<VLookupCustomers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLookupCustomers", "QNG");

                entity.Property(e => e.BranchCode).HasMaxLength(6);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.GroupCode).HasMaxLength(60);

                entity.Property(e => e.GroupDescription).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.SegmentCode).HasMaxLength(60);

                entity.Property(e => e.SegmentDescription).HasMaxLength(255);

                entity.Property(e => e.ShortName).HasMaxLength(30);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<VLookupOrderTypeDescriptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLookupOrderTypeDescriptions", "QNG");

                entity.Property(e => e.OrderTypeCode).HasMaxLength(3);

                entity.Property(e => e.OrderTypeDescription).HasMaxLength(255);

                entity.Property(e => e.ViewId).HasColumnName("ViewID");
            });

            modelBuilder.Entity<VPartNumberSpecificationChargesPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPartNumberSpecificationChargesPivot");

                entity.Property(e => e.ChargeUnitId).HasColumnName("charge_unit_id");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.MaterialCharge)
                    .HasColumnName("material_charge")
                    .HasColumnType("numeric(38, 4)");

                entity.Property(e => e.MiscellaneousCharge)
                    .HasColumnName("miscellaneous_charge")
                    .HasColumnType("numeric(38, 4)");

                entity.Property(e => e.PartNumberSpecificationId).HasColumnName("part_number_specification_id");

                entity.Property(e => e.ProductionCharge)
                    .HasColumnName("production_charge")
                    .HasColumnType("numeric(38, 4)");

                entity.Property(e => e.SurchargeCharge)
                    .HasColumnName("surcharge_charge")
                    .HasColumnType("numeric(38, 4)");

                entity.Property(e => e.TotalCharge)
                    .HasColumnName("total_charge")
                    .HasColumnType("numeric(38, 4)");

                entity.Property(e => e.TransportCharge)
                    .HasColumnName("transport_charge")
                    .HasColumnType("numeric(38, 4)");
            });

            modelBuilder.Entity<VPentagonShippingHeaders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPentagonShippingHeaders");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerAddress).HasMaxLength(4000);

                entity.Property(e => e.CustomerArea).HasMaxLength(16);

                entity.Property(e => e.CustomerCountry).HasMaxLength(255);

                entity.Property(e => e.CustomerCounty).HasMaxLength(60);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerNumber).HasMaxLength(10);

                entity.Property(e => e.CustomerPostalCode).HasMaxLength(10);

                entity.Property(e => e.CustomerTown).HasMaxLength(60);

                entity.Property(e => e.DateDespatched).HasColumnType("date");

                entity.Property(e => e.DateDue).HasColumnType("date");

                entity.Property(e => e.DateEta)
                    .HasColumnName("DateETA")
                    .HasColumnType("date");

                entity.Property(e => e.DatePrinted).HasColumnType("date");

                entity.Property(e => e.DateRaised).HasColumnType("date");

                entity.Property(e => e.DeliverFromAddress).HasMaxLength(4000);

                entity.Property(e => e.DeliverFromArea).HasMaxLength(16);

                entity.Property(e => e.DeliverFromBranch).HasMaxLength(60);

                entity.Property(e => e.DeliverFromBranchCode).HasMaxLength(6);

                entity.Property(e => e.DeliverFromCountry).HasMaxLength(255);

                entity.Property(e => e.DeliverFromCounty).HasMaxLength(60);

                entity.Property(e => e.DeliverFromPostalCode).HasMaxLength(10);

                entity.Property(e => e.DeliverFromTown).HasMaxLength(60);

                entity.Property(e => e.DeliverFromWarehouse).HasMaxLength(60);

                entity.Property(e => e.DeliverFromWarehouseCode).HasMaxLength(10);

                entity.Property(e => e.DeliverTo).HasMaxLength(79);

                entity.Property(e => e.DeliverToAddress).HasMaxLength(4000);

                entity.Property(e => e.DeliverToArea).HasMaxLength(16);

                entity.Property(e => e.DeliverToCode).HasMaxLength(10);

                entity.Property(e => e.DeliverToCountry).HasMaxLength(255);

                entity.Property(e => e.DeliverToCounty).HasMaxLength(60);

                entity.Property(e => e.DeliverToName).HasMaxLength(60);

                entity.Property(e => e.DeliverToPostalCode).HasMaxLength(10);

                entity.Property(e => e.DeliverToTown).HasMaxLength(60);

                entity.Property(e => e.DespatchBranchCode).HasMaxLength(6);

                entity.Property(e => e.DespatchStatusCode).HasMaxLength(3);

                entity.Property(e => e.Soreference)
                    .HasColumnName("SOReference")
                    .HasMaxLength(40);

                entity.Property(e => e.TransportType).HasMaxLength(255);

                entity.Property(e => e.TransportTypeCode).HasMaxLength(6);

                entity.Property(e => e.VehicleRegistration).HasMaxLength(16);
            });

            modelBuilder.Entity<VPentagonShippingItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPentagonShippingItems");

                entity.Property(e => e.BaseNetValue)
                    .HasColumnName("base_net_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseTransportValue)
                    .HasColumnName("base_transport_value")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.BaseUnitCharge)
                    .HasColumnName("base_unit_charge")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ChargeQuantity)
                    .HasColumnName("charge_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ChargeUom)
                    .HasColumnName("ChargeUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.DateDespatched).HasColumnType("date");

                entity.Property(e => e.DateEta)
                    .HasColumnName("DateETA")
                    .HasColumnType("date");

                entity.Property(e => e.DatePrinted).HasColumnType("date");

                entity.Property(e => e.DateRaised).HasColumnType("date");

                entity.Property(e => e.DefaultBaseCurrency).HasMaxLength(3);

                entity.Property(e => e.DeliveredPieces).HasColumnName("delivered_pieces");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnName("delivered_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.DeliveredWeight)
                    .HasColumnName("delivered_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.DespatchBranchCode).HasMaxLength(6);

                entity.Property(e => e.DespatchBranchName).HasMaxLength(60);

                entity.Property(e => e.DespatchStatusCode).HasMaxLength(3);

                entity.Property(e => e.OrderedQuantity).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.OrderedQuantityUom)
                    .HasColumnName("OrderedQuantityUOM")
                    .HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasMaxLength(24);

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SoitemReference)
                    .HasColumnName("SOItemReference")
                    .HasMaxLength(71);
            });

            modelBuilder.Entity<VPentagonShippingItemsAllocations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPentagonShippingItemsAllocations");

                entity.Property(e => e.AllocatedPieces).HasColumnName("allocated_pieces");

                entity.Property(e => e.AllocatedQuantity)
                    .HasColumnName("allocated_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.AllocatedWeight)
                    .HasColumnName("allocated_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.CastNumber).HasMaxLength(30);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceWeight)
                    .HasColumnName("invoice_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.MillCode).HasMaxLength(3);

                entity.Property(e => e.PackingWeight)
                    .HasColumnName("packing_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.PhysicalPieces).HasColumnName("physical_pieces");

                entity.Property(e => e.PhysicalQuantity)
                    .HasColumnName("physical_quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.PhysicalWeight)
                    .HasColumnName("physical_weight")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.TagNumber).HasMaxLength(16);

                entity.Property(e => e.WarehouseCode).HasMaxLength(10);
            });

            modelBuilder.Entity<VSalesItemsStatusHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSalesItemsStatusHistory");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.EventId).HasColumnName("event_id");

                entity.Property(e => e.NewStatus)
                    .IsRequired()
                    .HasMaxLength(261);

                entity.Property(e => e.NewStatusCode).HasMaxLength(3);

                entity.Property(e => e.NewStatusDescription).HasMaxLength(255);

                entity.Property(e => e.NewStatusId).HasColumnName("NewStatusID");

                entity.Property(e => e.SalesHeaderId).HasColumnName("SalesHeaderID");

                entity.Property(e => e.SalesItemId).HasColumnName("SalesItemID");

                entity.Property(e => e.SalesOrderStatusHistoryViewId)
                    .HasColumnName("SalesOrderStatusHistoryViewID")
                    .HasMaxLength(35);

                entity.Property(e => e.StatusSeqNumberDesc).HasColumnName("StatusSeqNumberDESC");
            });

            modelBuilder.Entity<VSuppliers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSuppliers");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TypeCode).HasMaxLength(3);

                entity.Property(e => e.TypeDescription).HasMaxLength(255);

                entity.Property(e => e.ViewId)
                    .HasColumnName("ViewID")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<VehicleStopDetails>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("VehicleStopDetails", "iMetal");

                entity.HasIndex(e => e.Coid)
                    .HasName("IDX_VehicleStopDetails_COID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("ntext");

                entity.Property(e => e.DespatchItemId).HasColumnName("despatch_item_id");

                entity.Property(e => e.Dimension1)
                    .HasColumnName("dimension1")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension2)
                    .HasColumnName("dimension2")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension3)
                    .HasColumnName("dimension3")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension4)
                    .HasColumnName("dimension4")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Dimension5)
                    .HasColumnName("dimension5")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.EtlcreateDate)
                    .HasColumnName("ETLCreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtlupdateDate)
                    .HasColumnName("ETLUpdateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsInwardsItemId).HasColumnName("goods_inwards_item_id");

                entity.Property(e => e.ItemType)
                    .HasColumnName("item_type")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MiscellaneousNotePrinted)
                    .HasColumnName("miscellaneous_note_printed")
                    .HasColumnType("date");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasColumnType("ntext");

                entity.Property(e => e.PackDimensionUnitsId).HasColumnName("pack_dimension_units_id");

                entity.Property(e => e.PackHeight)
                    .HasColumnName("pack_height")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackLength)
                    .HasColumnName("pack_length")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PackWidth)
                    .HasColumnName("pack_width")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.PickingConfirmed).HasColumnName("picking_confirmed");

                entity.Property(e => e.PickingTicketDate)
                    .HasColumnName("picking_ticket_date")
                    .HasColumnType("date");

                entity.Property(e => e.Pieces).HasColumnName("pieces");

                entity.Property(e => e.PrintedOnPickingTicketTimestamp).HasColumnName("printed_on_picking_ticket_timestamp");

                entity.Property(e => e.ProcessGroupId).HasColumnName("process_group_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseItemId).HasColumnName("purchase_item_id");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("numeric(12, 3)");

                entity.Property(e => e.SalesItemId).HasColumnName("sales_item_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StatusEnum).HasColumnName("status_enum");

                entity.Property(e => e.StockItemId).HasColumnName("stock_item_id");

                entity.Property(e => e.StopType).HasColumnName("stop_type");

                entity.Property(e => e.VehicleStopId).HasColumnName("vehicle_stop_id");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric(10, 3)");
            });

            modelBuilder.Entity<VulcanCrmQuote>(entity =>
            {
                entity.HasKey(e => e.QuoteId)
                    .HasName("PK_Vulcan.CrmQuote_1");

                entity.ToTable("Vulcan.CrmQuote");

                entity.Property(e => e.QuoteId).ValueGeneratedNever();

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.ContactEmailAddress).HasMaxLength(50);

                entity.Property(e => e.ContactFirstName).HasMaxLength(30);

                entity.Property(e => e.ContactLastName).HasMaxLength(30);

                entity.Property(e => e.ContactMiddleName).HasMaxLength(30);

                entity.Property(e => e.ContactPhoneNumber).HasMaxLength(30);

                entity.Property(e => e.CreateDateTimeUtc)
                    .HasColumnName("CreateDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerNotes).IsRequired();

                entity.Property(e => e.ExpiredDateTimeUtc)
                    .HasColumnName("ExpiredDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExportImetalStatus)
                    .IsRequired()
                    .HasColumnName("ExportIMetalStatus")
                    .HasMaxLength(15);

                entity.Property(e => e.ExportRequestedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FreightTerms)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.ImportDateTimeUtc)
                    .HasColumnName("ImportDateTimeUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.LostComments).HasMaxLength(500);

                entity.Property(e => e.LostDateTimeUtc)
                    .HasColumnName("LostDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LostReason)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.ModifiedDateTimeUtc)
                    .HasColumnName("ModifiedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ObjectId)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OrderClassificationCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderClassificationDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentTerms)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProspectName)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.QuoteLinkId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00000000-0000-0000-0000-000000000000')");

                entity.Property(e => e.QuoteLinkType).HasMaxLength(1);

                entity.Property(e => e.QuoteStatus)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ReportDateTimeUtc)
                    .HasColumnName("ReportDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfqNumber)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SalesGroupCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SalesPerson)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesPersonNotes).IsRequired();

                entity.Property(e => e.SubmitDateTimeUtc)
                    .HasColumnName("SubmitDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.TeamName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.WonDateTimeUtc)
                    .HasColumnName("WonDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VulcanCrmQuoteItem>(entity =>
            {
                entity.ToTable("Vulcan.CrmQuoteItem");

                entity.Property(e => e.BaseCostPerInch).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCostPerKg).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCostPerPiece).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCostPerPound).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCurrency).HasMaxLength(3);

                entity.Property(e => e.BaseCutCostPerPiece).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseCutCostPerPieceOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseFinalMargin).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseFinalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseFinalPriceOverrideValue).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseKerfTotalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseKerfTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseMaterialOnlyCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseMaterialTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseMaterialTotalPriceOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerEach).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerFoot).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerFootOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerInch).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerInchOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerKilogram).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerKilogramOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerPound).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BasePricePerPoundOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseProductionCostTotal).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseProductionPriceTotal).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseQuickQuoteItemCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseQuickQuoteItemPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseTestPiecesTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseTotalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseTotalCutCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostPerInch).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostPerKg).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostPerPiece).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CostPerPound).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CreateDateTimeUtc)
                    .HasColumnName("CreateDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CustomerNotes).IsRequired();

                entity.Property(e => e.CutCostPerPiece).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.CutCostPerPieceOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.DisplayCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ExchangeRate).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinalMargin).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinalPriceOverrideType)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.FinalPriceOverrideValue).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinishInsideDiameter).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinishKilograms).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinishMetalCategory)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FinishOuterDiameter).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinishPounds).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.FinishProductCode)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.FinishProductCoid)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.FinishProductCondition)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FinishProductSize)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FinishProductType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FinishStockGrade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FinishedProductCategory)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HeatNumber).HasMaxLength(50);

                entity.Property(e => e.ImportDateTimeUtc)
                    .HasColumnName("ImportDateTimeUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.KerfInchesPerCut).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.KerfTotalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.KerfTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.LeadTime)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LostComments).HasMaxLength(500);

                entity.Property(e => e.LostDateTimeUtc)
                    .HasColumnName("LostDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LostProductCode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.LostReason)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Margin).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MarginOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialOnlyCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.MaterialTotalPriceOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ModifiedDateTimeUtc)
                    .HasColumnName("ModifiedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.OemType)
                    .IsRequired()
                    .HasMaxLength(40);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.PartSpecification)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(40);

                entity.Property(e => e.PricePerEach).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerFoot).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerFootOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerInch).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerInchOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerKilogram).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerKilogramOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerPound).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PricePerPoundOverride).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionCostTotal).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.ProductionPriceTotal).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuickQuoteItemCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuickQuoteItemFinishedProductCode)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.QuickQuoteItemLabel)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.QuickQuoteItemPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuickQuoteItemQuantity).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuickQuoteItemQuantityType)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.QuoteSource)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RequestedProductCode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalesPersonNotes).IsRequired();

                entity.Property(e => e.StartingInsideDiameter).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StartingKilograms).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StartingMetalCategory)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.StartingOuterDiameter).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StartingPounds).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StartingProductCategory)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartingProductCode)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.StartingProductCoid)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.StartingProductCondition)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.StartingProductSize)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartingProductType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartingStockGrade)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TagNumber)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.TestPieceInches).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TestPiecesTotalPrice).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TheoWeight).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalCutCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalFeet).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalInches).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalKilograms).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalPounds).HasColumnType("numeric(12, 4)");
            });

            modelBuilder.Entity<VulcanCrmQuoteItemProductionCost>(entity =>
            {
                entity.ToTable("Vulcan.CrmQuoteItem.ProductionCost");

                entity.Property(e => e.BaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BaseInternalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseMinimumCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseProductionCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseTotalInternalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.BaseTotalProductionCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ImportDateTimeUtc)
                    .HasColumnName("ImportDateTimeUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.InternalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MinimumCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.PerType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.ProductionCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Qiid).HasColumnName("QIId");

                entity.Property(e => e.ResourceType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.TotalInches).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalInternalCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalPieces).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalPounds).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TotalProductionCost).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.HasOne(d => d.Qi)
                    .WithMany(p => p.VulcanCrmQuoteItemProductionCost)
                    .HasForeignKey(d => d.Qiid)
                    .HasConstraintName("FK_Vulcan.CrmQuoteItem.ProductionCost_Vulcan.CrmQuoteItem.ProductionCost");
            });

            modelBuilder.Entity<VulcanCrmQuoteItemTestPieces>(entity =>
            {
                entity.ToTable("Vulcan.CrmQuoteItem.TestPieces");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ImportDateTimeUtc)
                    .HasColumnName("ImportDateTimeUTC")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Qiid).HasColumnName("QIId");

                entity.Property(e => e.Quantity).HasColumnType("numeric(12, 4)");

                entity.Property(e => e.QuantityType)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.StartingProductCode)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.TestName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.HasOne(d => d.Qi)
                    .WithMany(p => p.VulcanCrmQuoteItemTestPieces)
                    .HasForeignKey(d => d.Qiid)
                    .HasConstraintName("FK_Vulcan.CrmQuoteItem.TestPieces_Vulcan.CrmQuoteItem");
            });

            modelBuilder.Entity<WarehouseTypeCodes>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("WarehouseTypeCodes", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(2);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Warehouses>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("Warehouses", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.BayLength).HasColumnName("bay_length");

                entity.Property(e => e.BayStartCharacter).HasColumnName("bay_start_character");

                entity.Property(e => e.BinLength).HasColumnName("bin_length");

                entity.Property(e => e.BinStartCharacter).HasColumnName("bin_start_character");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultCertPrinterId).HasColumnName("default_cert_printer_id");

                entity.Property(e => e.DefaultStockStatusId).HasColumnName("default_stock_status_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(16);

                entity.Property(e => e.GoodsInwardsPurchaseGroupOverrideId).HasColumnName("goods_inwards_purchase_group_override_id");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.MandatoryLocation).HasColumnName("mandatory_location");

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60);

                entity.Property(e => e.ProductionWarehouse).HasColumnName("production_warehouse");

                entity.Property(e => e.RackLength).HasColumnName("rack_length");

                entity.Property(e => e.RackStartCharacter).HasColumnName("rack_start_character");

                entity.Property(e => e.RestrictedVisibility).HasColumnName("restricted_visibility");

                entity.Property(e => e.SendMasterYardOrder).HasColumnName("send_master_yard_order");

                entity.Property(e => e.ShortName)
                    .HasColumnName("short_name")
                    .HasMaxLength(10);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.SubAddressId).HasColumnName("sub_address_id");

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(16);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WarehouseTypeId).HasColumnName("warehouse_type_id");

                entity.Property(e => e.Website)
                    .HasColumnName("website")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<WorkCentreRecoveryTypeMapping>(entity =>
            {
                entity.ToTable("WorkCentreRecoveryTypeMapping", "QNG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('Imported by IT')");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.EffectiveFrom)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-01-01')");

                entity.Property(e => e.EffectiveTo)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('9999-12-31')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('Imported by IT')");

                entity.Property(e => e.ModifiedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.RecoveryType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.WorkCentreId).HasColumnName("WorkCentreID");
            });

            modelBuilder.Entity<WorkCentres>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Coid });

                entity.ToTable("WorkCentres", "iMetal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coid)
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.BottomEdgeTrim)
                    .HasColumnName("bottom_edge_trim")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Cdate).HasColumnName("cdate");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(16);

                entity.Property(e => e.CopyAdviceNoteReference).HasColumnName("copy_advice_note_reference");

                entity.Property(e => e.CopyAllSpecifications).HasColumnName("copy_all_specifications");

                entity.Property(e => e.CopyConditions).HasColumnName("copy_conditions");

                entity.Property(e => e.CopyIdentifyingMark).HasColumnName("copy_identifying_mark");

                entity.Property(e => e.CopyLinkedDocuments).HasColumnName("copy_linked_documents");

                entity.Property(e => e.CopyMechanicalSpecifications).HasColumnName("copy_mechanical_specifications");

                entity.Property(e => e.CopyNotes).HasColumnName("copy_notes");

                entity.Property(e => e.CopyOtherNumber).HasColumnName("copy_other_number");

                entity.Property(e => e.CopyPackingReference).HasColumnName("copy_packing_reference");

                entity.Property(e => e.CopyPackingType).HasColumnName("copy_packing_type");

                entity.Property(e => e.CopyPackingWeight).HasColumnName("copy_packing_weight");

                entity.Property(e => e.CopyPiecesPerPack).HasColumnName("copy_pieces_per_pack");

                entity.Property(e => e.CopyProductionItem).HasColumnName("copy_production_item");

                entity.Property(e => e.CopyRejectionDetails).HasColumnName("copy_rejection_details");

                entity.Property(e => e.CopySupplierReference).HasColumnName("copy_supplier_reference");

                entity.Property(e => e.CopyTestCertReference).HasColumnName("copy_test_cert_reference");

                entity.Property(e => e.CopyVessel)
                    .HasColumnName("copy_vessel")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CostOnProduced).HasColumnName("cost_on_produced");

                entity.Property(e => e.CuserId).HasColumnName("cuser_id");

                entity.Property(e => e.DefaultCoilInsideDiameter)
                    .HasColumnName("default_coil_inside_diameter")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.EstimatedSetupTime).HasColumnName("estimated_setup_time");

                entity.Property(e => e.EtlcreateDate).HasColumnName("ETLCreateDate");

                entity.Property(e => e.EtlupdateDate).HasColumnName("ETLUpdateDate");

                entity.Property(e => e.IncludeConsumables).HasColumnName("include_consumables");

                entity.Property(e => e.LedgerSegmentCode)
                    .HasColumnName("ledger_segment_code")
                    .HasMaxLength(16);

                entity.Property(e => e.Mdate).HasColumnName("mdate");

                entity.Property(e => e.MuserId).HasColumnName("muser_id");

                entity.Property(e => e.OperatorCostRate)
                    .HasColumnName("operator_cost_rate")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.OperatorCostUnitId).HasColumnName("operator_cost_unit_id");

                entity.Property(e => e.OverrideStockSpecifications).HasColumnName("override_stock_specifications");

                entity.Property(e => e.ProductionWipDefaultingRule).HasColumnName("production_wip_defaulting_rule");

                entity.Property(e => e.RunCost)
                    .HasColumnName("run_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.RunCostUnitId).HasColumnName("run_cost_unit_id");

                entity.Property(e => e.SetupCost)
                    .HasColumnName("setup_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.SetupCostUnitId).HasColumnName("setup_cost_unit_id");

                entity.Property(e => e.StandardCost)
                    .HasColumnName("standard_cost")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.StandardCostUnitId).HasColumnName("standard_cost_unit_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.StockItemPrefix)
                    .HasColumnName("stock_item_prefix")
                    .HasMaxLength(3);

                entity.Property(e => e.TimeCapacity).HasColumnName("time_capacity");

                entity.Property(e => e.TopEdgeTrim)
                    .HasColumnName("top_edge_trim")
                    .HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TreatmentCode)
                    .HasColumnName("treatment_code")
                    .HasMaxLength(6);

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WeightCapacity)
                    .HasColumnName("weight_capacity")
                    .HasColumnType("numeric(10, 3)");

                entity.Property(e => e.WeightCapacityUnitId).HasColumnName("weight_capacity_unit_id");
            });

            modelBuilder.Entity<WorkCentresForCapacityPlanning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkCentresForCapacityPlanning", "QNG");

                entity.Property(e => e.BucketDescription).HasMaxLength(50);

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcessCode).HasMaxLength(16);

                entity.Property(e => e.WorkCentreCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.WorkCentreDisplayName).HasMaxLength(50);

                entity.Property(e => e.WorkCentreId).HasColumnName("WorkCentreID");

                entity.Property(e => e.WorkType).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkCentresWeeklyCapacityPlanning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkCentresWeeklyCapacityPlanning", "QNG");

                entity.Property(e => e.Coid)
                    .IsRequired()
                    .HasColumnName("COID")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnName("CreatedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOnUtc)
                    .HasColumnName("ModifiedOnUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.WeekBeginDate).HasColumnType("date");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
