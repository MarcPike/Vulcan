//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/3/2020 10:11:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.SalesTotal in the schema.
    /// </summary>
    [Table(Name = @"public.sales_totals")]
    public partial class SalesTotal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private int? _RequiredPiece;

        private decimal? _RequiredQuantity;

        private decimal? _RequiredWeight;

        private int? _DeliveredPiece;

        private decimal? _DeliveredQuantity;

        private decimal? _DeliveredWeight;

        private int? _BalancePiece;

        private decimal? _BalanceQuantity;

        private decimal? _BalanceWeight;

        private decimal? _CustomerMaterialValue;

        private decimal? _CustomerTransportValue;

        private decimal? _CustomerProductionValue;

        private decimal? _CustomerMiscellaneousValue;

        private decimal? _CustomerSurchargeValue;

        private decimal? _InternalMaterialValue;

        private decimal? _InternalTransportValue;

        private decimal? _InternalProductionValue;

        private decimal? _InternalMiscellaneousValue;

        private decimal? _InternalSurchargeValue;

        private decimal? _EstimatedMaterialCost;

        private decimal? _EstimatedTransportCost;

        private decimal? _EstimatedProductionCost;

        private decimal? _EstimatedMiscellaneousCost;

        private decimal? _EstimatedSurchargeCost;

        private decimal? _ActualMaterialCost;

        private decimal? _ActualTransportCost;

        private decimal? _ActualProductionCost;

        private decimal? _ActualMiscellaneousCost;

        private decimal? _ActualSurchargeCost;

        private decimal? _VatValue1;

        private decimal? _VatValue2;

        private decimal? _VatValue3;

        private decimal? _VatValue4;

        private decimal? _VatRate1;

        private decimal? _VatRate2;

        private decimal? _VatRate3;

        private decimal? _VatRate4;

        private decimal? _InvoicedValue;

        private decimal? _InvoicedTaxValue;

        private decimal? _BalanceValue;

        private decimal? _BalanceTaxValue;

        private decimal? _BaseInvoicedValue;

        private decimal? _BaseInvoicedTaxValue;

        private decimal? _BaseBalanceValue;

        private decimal? _BaseBalanceTaxValue;

        private decimal? _BaseCustomerMaterialValue;

        private decimal? _BaseCustomerTransportValue;

        private decimal? _BaseCustomerProductionValue;

        private decimal? _BaseCustomerMiscellaneousValue;

        private decimal? _BaseCustomerSurchargeValue;

        private decimal? _BaseInternalMaterialValue;

        private decimal? _BaseInternalTransportValue;

        private decimal? _BaseInternalProductionValue;

        private decimal? _BaseInternalMiscellaneousValue;

        private decimal? _BaseInternalSurchargeValue;

        private decimal? _BaseVatValue1;

        private decimal? _BaseVatValue2;

        private decimal? _BaseVatValue3;

        private decimal? _BaseVatValue4;

        private decimal? _OriginalExchangeRate;

        private int? _VatType1Id;

        private int? _VatType2Id;

        private int? _VatType3Id;

        private int? _VatType4Id;

        private decimal? _VatValue5;

        private decimal? _BaseVatValue5;

        private decimal? _VatRate5;

        private decimal? _StockMaterialCost;

        private decimal? _StockTransportCost;

        private decimal? _StockProductionCost;

        private decimal? _StockMiscellaneousCost;

        private decimal? _StockSurchargeCost;

        private decimal? _InvoicedTotalCost;

        private decimal? _BalanceTotalCost;

        private decimal? _CallOffValue;

        private decimal? _CallOffTaxValue;

        private decimal? _BaseCallOffValue;

        private decimal? _BaseCallOffTaxValue;
        #pragma warning restore 0649

        private EntitySet<SalesItem> _SalesItem_BalanceTotalId;

        private EntitySet<SalesItem> _SalesItem_SalesTotalId;

        private EntitySet<SalesHeader> _SalesHeader_BalanceTotalId;

        private EntitySet<SalesHeader> _SalesHeader_SalesEntryTotalId;

        private EntitySet<SalesHeader> _SalesHeader_SalesTotalId;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnRequiredPieceChanging(int? value);
        partial void OnRequiredPieceChanged();
        partial void OnRequiredQuantityChanging(decimal? value);
        partial void OnRequiredQuantityChanged();
        partial void OnRequiredWeightChanging(decimal? value);
        partial void OnRequiredWeightChanged();
        partial void OnDeliveredPieceChanging(int? value);
        partial void OnDeliveredPieceChanged();
        partial void OnDeliveredQuantityChanging(decimal? value);
        partial void OnDeliveredQuantityChanged();
        partial void OnDeliveredWeightChanging(decimal? value);
        partial void OnDeliveredWeightChanged();
        partial void OnBalancePieceChanging(int? value);
        partial void OnBalancePieceChanged();
        partial void OnBalanceQuantityChanging(decimal? value);
        partial void OnBalanceQuantityChanged();
        partial void OnBalanceWeightChanging(decimal? value);
        partial void OnBalanceWeightChanged();
        partial void OnCustomerMaterialValueChanging(decimal? value);
        partial void OnCustomerMaterialValueChanged();
        partial void OnCustomerTransportValueChanging(decimal? value);
        partial void OnCustomerTransportValueChanged();
        partial void OnCustomerProductionValueChanging(decimal? value);
        partial void OnCustomerProductionValueChanged();
        partial void OnCustomerMiscellaneousValueChanging(decimal? value);
        partial void OnCustomerMiscellaneousValueChanged();
        partial void OnCustomerSurchargeValueChanging(decimal? value);
        partial void OnCustomerSurchargeValueChanged();
        partial void OnInternalMaterialValueChanging(decimal? value);
        partial void OnInternalMaterialValueChanged();
        partial void OnInternalTransportValueChanging(decimal? value);
        partial void OnInternalTransportValueChanged();
        partial void OnInternalProductionValueChanging(decimal? value);
        partial void OnInternalProductionValueChanged();
        partial void OnInternalMiscellaneousValueChanging(decimal? value);
        partial void OnInternalMiscellaneousValueChanged();
        partial void OnInternalSurchargeValueChanging(decimal? value);
        partial void OnInternalSurchargeValueChanged();
        partial void OnEstimatedMaterialCostChanging(decimal? value);
        partial void OnEstimatedMaterialCostChanged();
        partial void OnEstimatedTransportCostChanging(decimal? value);
        partial void OnEstimatedTransportCostChanged();
        partial void OnEstimatedProductionCostChanging(decimal? value);
        partial void OnEstimatedProductionCostChanged();
        partial void OnEstimatedMiscellaneousCostChanging(decimal? value);
        partial void OnEstimatedMiscellaneousCostChanged();
        partial void OnEstimatedSurchargeCostChanging(decimal? value);
        partial void OnEstimatedSurchargeCostChanged();
        partial void OnActualMaterialCostChanging(decimal? value);
        partial void OnActualMaterialCostChanged();
        partial void OnActualTransportCostChanging(decimal? value);
        partial void OnActualTransportCostChanged();
        partial void OnActualProductionCostChanging(decimal? value);
        partial void OnActualProductionCostChanged();
        partial void OnActualMiscellaneousCostChanging(decimal? value);
        partial void OnActualMiscellaneousCostChanged();
        partial void OnActualSurchargeCostChanging(decimal? value);
        partial void OnActualSurchargeCostChanged();
        partial void OnVatValue1Changing(decimal? value);
        partial void OnVatValue1Changed();
        partial void OnVatValue2Changing(decimal? value);
        partial void OnVatValue2Changed();
        partial void OnVatValue3Changing(decimal? value);
        partial void OnVatValue3Changed();
        partial void OnVatValue4Changing(decimal? value);
        partial void OnVatValue4Changed();
        partial void OnVatRate1Changing(decimal? value);
        partial void OnVatRate1Changed();
        partial void OnVatRate2Changing(decimal? value);
        partial void OnVatRate2Changed();
        partial void OnVatRate3Changing(decimal? value);
        partial void OnVatRate3Changed();
        partial void OnVatRate4Changing(decimal? value);
        partial void OnVatRate4Changed();
        partial void OnInvoicedValueChanging(decimal? value);
        partial void OnInvoicedValueChanged();
        partial void OnInvoicedTaxValueChanging(decimal? value);
        partial void OnInvoicedTaxValueChanged();
        partial void OnBalanceValueChanging(decimal? value);
        partial void OnBalanceValueChanged();
        partial void OnBalanceTaxValueChanging(decimal? value);
        partial void OnBalanceTaxValueChanged();
        partial void OnBaseInvoicedValueChanging(decimal? value);
        partial void OnBaseInvoicedValueChanged();
        partial void OnBaseInvoicedTaxValueChanging(decimal? value);
        partial void OnBaseInvoicedTaxValueChanged();
        partial void OnBaseBalanceValueChanging(decimal? value);
        partial void OnBaseBalanceValueChanged();
        partial void OnBaseBalanceTaxValueChanging(decimal? value);
        partial void OnBaseBalanceTaxValueChanged();
        partial void OnBaseCustomerMaterialValueChanging(decimal? value);
        partial void OnBaseCustomerMaterialValueChanged();
        partial void OnBaseCustomerTransportValueChanging(decimal? value);
        partial void OnBaseCustomerTransportValueChanged();
        partial void OnBaseCustomerProductionValueChanging(decimal? value);
        partial void OnBaseCustomerProductionValueChanged();
        partial void OnBaseCustomerMiscellaneousValueChanging(decimal? value);
        partial void OnBaseCustomerMiscellaneousValueChanged();
        partial void OnBaseCustomerSurchargeValueChanging(decimal? value);
        partial void OnBaseCustomerSurchargeValueChanged();
        partial void OnBaseInternalMaterialValueChanging(decimal? value);
        partial void OnBaseInternalMaterialValueChanged();
        partial void OnBaseInternalTransportValueChanging(decimal? value);
        partial void OnBaseInternalTransportValueChanged();
        partial void OnBaseInternalProductionValueChanging(decimal? value);
        partial void OnBaseInternalProductionValueChanged();
        partial void OnBaseInternalMiscellaneousValueChanging(decimal? value);
        partial void OnBaseInternalMiscellaneousValueChanged();
        partial void OnBaseInternalSurchargeValueChanging(decimal? value);
        partial void OnBaseInternalSurchargeValueChanged();
        partial void OnBaseVatValue1Changing(decimal? value);
        partial void OnBaseVatValue1Changed();
        partial void OnBaseVatValue2Changing(decimal? value);
        partial void OnBaseVatValue2Changed();
        partial void OnBaseVatValue3Changing(decimal? value);
        partial void OnBaseVatValue3Changed();
        partial void OnBaseVatValue4Changing(decimal? value);
        partial void OnBaseVatValue4Changed();
        partial void OnOriginalExchangeRateChanging(decimal? value);
        partial void OnOriginalExchangeRateChanged();
        partial void OnVatType1IdChanging(int? value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(int? value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(int? value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(int? value);
        partial void OnVatType4IdChanged();
        partial void OnVatValue5Changing(decimal? value);
        partial void OnVatValue5Changed();
        partial void OnBaseVatValue5Changing(decimal? value);
        partial void OnBaseVatValue5Changed();
        partial void OnVatRate5Changing(decimal? value);
        partial void OnVatRate5Changed();
        partial void OnStockMaterialCostChanging(decimal? value);
        partial void OnStockMaterialCostChanged();
        partial void OnStockTransportCostChanging(decimal? value);
        partial void OnStockTransportCostChanged();
        partial void OnStockProductionCostChanging(decimal? value);
        partial void OnStockProductionCostChanged();
        partial void OnStockMiscellaneousCostChanging(decimal? value);
        partial void OnStockMiscellaneousCostChanged();
        partial void OnStockSurchargeCostChanging(decimal? value);
        partial void OnStockSurchargeCostChanged();
        partial void OnInvoicedTotalCostChanging(decimal? value);
        partial void OnInvoicedTotalCostChanged();
        partial void OnBalanceTotalCostChanging(decimal? value);
        partial void OnBalanceTotalCostChanged();
        partial void OnCallOffValueChanging(decimal? value);
        partial void OnCallOffValueChanged();
        partial void OnCallOffTaxValueChanging(decimal? value);
        partial void OnCallOffTaxValueChanged();
        partial void OnBaseCallOffValueChanging(decimal? value);
        partial void OnBaseCallOffValueChanged();
        partial void OnBaseCallOffTaxValueChanging(decimal? value);
        partial void OnBaseCallOffTaxValueChanged();
        #endregion

        public SalesTotal()
        {
            this._SalesItem_BalanceTotalId = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem_BalanceTotalId), new Action<SalesItem>(this.detach_SalesItem_BalanceTotalId));
            this._SalesItem_SalesTotalId = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem_SalesTotalId), new Action<SalesItem>(this.detach_SalesItem_SalesTotalId));
            this._SalesHeader_BalanceTotalId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_BalanceTotalId), new Action<SalesHeader>(this.detach_SalesHeader_BalanceTotalId));
            this._SalesHeader_SalesEntryTotalId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_SalesEntryTotalId), new Action<SalesHeader>(this.detach_SalesHeader_SalesEntryTotalId));
            this._SalesHeader_SalesTotalId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_SalesTotalId), new Action<SalesHeader>(this.detach_SalesHeader_SalesTotalId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredPiece in the schema.
        /// </summary>
        [Column(Name = @"required_pieces", Storage = "_RequiredPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? RequiredPiece
        {
            get
            {
                return this._RequiredPiece;
            }
            set
            {
                if (this._RequiredPiece != value)
                {
                    this.OnRequiredPieceChanging(value);
                    this.SendPropertyChanging("RequiredPiece");
                    this._RequiredPiece = value;
                    this.SendPropertyChanged("RequiredPiece");
                    this.OnRequiredPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredQuantity in the schema.
        /// </summary>
        [Column(Name = @"required_quantity", Storage = "_RequiredQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? RequiredQuantity
        {
            get
            {
                return this._RequiredQuantity;
            }
            set
            {
                if (this._RequiredQuantity != value)
                {
                    this.OnRequiredQuantityChanging(value);
                    this.SendPropertyChanging("RequiredQuantity");
                    this._RequiredQuantity = value;
                    this.SendPropertyChanged("RequiredQuantity");
                    this.OnRequiredQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredWeight in the schema.
        /// </summary>
        [Column(Name = @"required_weight", Storage = "_RequiredWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? RequiredWeight
        {
            get
            {
                return this._RequiredWeight;
            }
            set
            {
                if (this._RequiredWeight != value)
                {
                    this.OnRequiredWeightChanging(value);
                    this.SendPropertyChanging("RequiredWeight");
                    this._RequiredWeight = value;
                    this.SendPropertyChanged("RequiredWeight");
                    this.OnRequiredWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredPiece in the schema.
        /// </summary>
        [Column(Name = @"delivered_pieces", Storage = "_DeliveredPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveredPiece
        {
            get
            {
                return this._DeliveredPiece;
            }
            set
            {
                if (this._DeliveredPiece != value)
                {
                    this.OnDeliveredPieceChanging(value);
                    this.SendPropertyChanging("DeliveredPiece");
                    this._DeliveredPiece = value;
                    this.SendPropertyChanged("DeliveredPiece");
                    this.OnDeliveredPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredQuantity in the schema.
        /// </summary>
        [Column(Name = @"delivered_quantity", Storage = "_DeliveredQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? DeliveredQuantity
        {
            get
            {
                return this._DeliveredQuantity;
            }
            set
            {
                if (this._DeliveredQuantity != value)
                {
                    this.OnDeliveredQuantityChanging(value);
                    this.SendPropertyChanging("DeliveredQuantity");
                    this._DeliveredQuantity = value;
                    this.SendPropertyChanged("DeliveredQuantity");
                    this.OnDeliveredQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredWeight in the schema.
        /// </summary>
        [Column(Name = @"delivered_weight", Storage = "_DeliveredWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? DeliveredWeight
        {
            get
            {
                return this._DeliveredWeight;
            }
            set
            {
                if (this._DeliveredWeight != value)
                {
                    this.OnDeliveredWeightChanging(value);
                    this.SendPropertyChanging("DeliveredWeight");
                    this._DeliveredWeight = value;
                    this.SendPropertyChanged("DeliveredWeight");
                    this.OnDeliveredWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalancePiece in the schema.
        /// </summary>
        [Column(Name = @"balance_pieces", Storage = "_BalancePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BalancePiece
        {
            get
            {
                return this._BalancePiece;
            }
            set
            {
                if (this._BalancePiece != value)
                {
                    this.OnBalancePieceChanging(value);
                    this.SendPropertyChanging("BalancePiece");
                    this._BalancePiece = value;
                    this.SendPropertyChanged("BalancePiece");
                    this.OnBalancePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceQuantity in the schema.
        /// </summary>
        [Column(Name = @"balance_quantity", Storage = "_BalanceQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceQuantity
        {
            get
            {
                return this._BalanceQuantity;
            }
            set
            {
                if (this._BalanceQuantity != value)
                {
                    this.OnBalanceQuantityChanging(value);
                    this.SendPropertyChanging("BalanceQuantity");
                    this._BalanceQuantity = value;
                    this.SendPropertyChanged("BalanceQuantity");
                    this.OnBalanceQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceWeight in the schema.
        /// </summary>
        [Column(Name = @"balance_weight", Storage = "_BalanceWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceWeight
        {
            get
            {
                return this._BalanceWeight;
            }
            set
            {
                if (this._BalanceWeight != value)
                {
                    this.OnBalanceWeightChanging(value);
                    this.SendPropertyChanging("BalanceWeight");
                    this._BalanceWeight = value;
                    this.SendPropertyChanged("BalanceWeight");
                    this.OnBalanceWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerMaterialValue in the schema.
        /// </summary>
        [Column(Name = @"customer_material_value", Storage = "_CustomerMaterialValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CustomerMaterialValue
        {
            get
            {
                return this._CustomerMaterialValue;
            }
            set
            {
                if (this._CustomerMaterialValue != value)
                {
                    this.OnCustomerMaterialValueChanging(value);
                    this.SendPropertyChanging("CustomerMaterialValue");
                    this._CustomerMaterialValue = value;
                    this.SendPropertyChanged("CustomerMaterialValue");
                    this.OnCustomerMaterialValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerTransportValue in the schema.
        /// </summary>
        [Column(Name = @"customer_transport_value", Storage = "_CustomerTransportValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CustomerTransportValue
        {
            get
            {
                return this._CustomerTransportValue;
            }
            set
            {
                if (this._CustomerTransportValue != value)
                {
                    this.OnCustomerTransportValueChanging(value);
                    this.SendPropertyChanging("CustomerTransportValue");
                    this._CustomerTransportValue = value;
                    this.SendPropertyChanged("CustomerTransportValue");
                    this.OnCustomerTransportValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerProductionValue in the schema.
        /// </summary>
        [Column(Name = @"customer_production_value", Storage = "_CustomerProductionValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CustomerProductionValue
        {
            get
            {
                return this._CustomerProductionValue;
            }
            set
            {
                if (this._CustomerProductionValue != value)
                {
                    this.OnCustomerProductionValueChanging(value);
                    this.SendPropertyChanging("CustomerProductionValue");
                    this._CustomerProductionValue = value;
                    this.SendPropertyChanged("CustomerProductionValue");
                    this.OnCustomerProductionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerMiscellaneousValue in the schema.
        /// </summary>
        [Column(Name = @"customer_miscellaneous_value", Storage = "_CustomerMiscellaneousValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CustomerMiscellaneousValue
        {
            get
            {
                return this._CustomerMiscellaneousValue;
            }
            set
            {
                if (this._CustomerMiscellaneousValue != value)
                {
                    this.OnCustomerMiscellaneousValueChanging(value);
                    this.SendPropertyChanging("CustomerMiscellaneousValue");
                    this._CustomerMiscellaneousValue = value;
                    this.SendPropertyChanged("CustomerMiscellaneousValue");
                    this.OnCustomerMiscellaneousValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerSurchargeValue in the schema.
        /// </summary>
        [Column(Name = @"customer_surcharge_value", Storage = "_CustomerSurchargeValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CustomerSurchargeValue
        {
            get
            {
                return this._CustomerSurchargeValue;
            }
            set
            {
                if (this._CustomerSurchargeValue != value)
                {
                    this.OnCustomerSurchargeValueChanging(value);
                    this.SendPropertyChanging("CustomerSurchargeValue");
                    this._CustomerSurchargeValue = value;
                    this.SendPropertyChanged("CustomerSurchargeValue");
                    this.OnCustomerSurchargeValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalMaterialValue in the schema.
        /// </summary>
        [Column(Name = @"internal_material_value", Storage = "_InternalMaterialValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InternalMaterialValue
        {
            get
            {
                return this._InternalMaterialValue;
            }
            set
            {
                if (this._InternalMaterialValue != value)
                {
                    this.OnInternalMaterialValueChanging(value);
                    this.SendPropertyChanging("InternalMaterialValue");
                    this._InternalMaterialValue = value;
                    this.SendPropertyChanged("InternalMaterialValue");
                    this.OnInternalMaterialValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalTransportValue in the schema.
        /// </summary>
        [Column(Name = @"internal_transport_value", Storage = "_InternalTransportValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InternalTransportValue
        {
            get
            {
                return this._InternalTransportValue;
            }
            set
            {
                if (this._InternalTransportValue != value)
                {
                    this.OnInternalTransportValueChanging(value);
                    this.SendPropertyChanging("InternalTransportValue");
                    this._InternalTransportValue = value;
                    this.SendPropertyChanged("InternalTransportValue");
                    this.OnInternalTransportValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalProductionValue in the schema.
        /// </summary>
        [Column(Name = @"internal_production_value", Storage = "_InternalProductionValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InternalProductionValue
        {
            get
            {
                return this._InternalProductionValue;
            }
            set
            {
                if (this._InternalProductionValue != value)
                {
                    this.OnInternalProductionValueChanging(value);
                    this.SendPropertyChanging("InternalProductionValue");
                    this._InternalProductionValue = value;
                    this.SendPropertyChanged("InternalProductionValue");
                    this.OnInternalProductionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalMiscellaneousValue in the schema.
        /// </summary>
        [Column(Name = @"internal_miscellaneous_value", Storage = "_InternalMiscellaneousValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InternalMiscellaneousValue
        {
            get
            {
                return this._InternalMiscellaneousValue;
            }
            set
            {
                if (this._InternalMiscellaneousValue != value)
                {
                    this.OnInternalMiscellaneousValueChanging(value);
                    this.SendPropertyChanging("InternalMiscellaneousValue");
                    this._InternalMiscellaneousValue = value;
                    this.SendPropertyChanged("InternalMiscellaneousValue");
                    this.OnInternalMiscellaneousValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalSurchargeValue in the schema.
        /// </summary>
        [Column(Name = @"internal_surcharge_value", Storage = "_InternalSurchargeValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InternalSurchargeValue
        {
            get
            {
                return this._InternalSurchargeValue;
            }
            set
            {
                if (this._InternalSurchargeValue != value)
                {
                    this.OnInternalSurchargeValueChanging(value);
                    this.SendPropertyChanging("InternalSurchargeValue");
                    this._InternalSurchargeValue = value;
                    this.SendPropertyChanged("InternalSurchargeValue");
                    this.OnInternalSurchargeValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstimatedMaterialCost in the schema.
        /// </summary>
        [Column(Name = @"estimated_material_cost", Storage = "_EstimatedMaterialCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? EstimatedMaterialCost
        {
            get
            {
                return this._EstimatedMaterialCost;
            }
            set
            {
                if (this._EstimatedMaterialCost != value)
                {
                    this.OnEstimatedMaterialCostChanging(value);
                    this.SendPropertyChanging("EstimatedMaterialCost");
                    this._EstimatedMaterialCost = value;
                    this.SendPropertyChanged("EstimatedMaterialCost");
                    this.OnEstimatedMaterialCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstimatedTransportCost in the schema.
        /// </summary>
        [Column(Name = @"estimated_transport_cost", Storage = "_EstimatedTransportCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? EstimatedTransportCost
        {
            get
            {
                return this._EstimatedTransportCost;
            }
            set
            {
                if (this._EstimatedTransportCost != value)
                {
                    this.OnEstimatedTransportCostChanging(value);
                    this.SendPropertyChanging("EstimatedTransportCost");
                    this._EstimatedTransportCost = value;
                    this.SendPropertyChanged("EstimatedTransportCost");
                    this.OnEstimatedTransportCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstimatedProductionCost in the schema.
        /// </summary>
        [Column(Name = @"estimated_production_cost", Storage = "_EstimatedProductionCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? EstimatedProductionCost
        {
            get
            {
                return this._EstimatedProductionCost;
            }
            set
            {
                if (this._EstimatedProductionCost != value)
                {
                    this.OnEstimatedProductionCostChanging(value);
                    this.SendPropertyChanging("EstimatedProductionCost");
                    this._EstimatedProductionCost = value;
                    this.SendPropertyChanged("EstimatedProductionCost");
                    this.OnEstimatedProductionCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstimatedMiscellaneousCost in the schema.
        /// </summary>
        [Column(Name = @"estimated_miscellaneous_cost", Storage = "_EstimatedMiscellaneousCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? EstimatedMiscellaneousCost
        {
            get
            {
                return this._EstimatedMiscellaneousCost;
            }
            set
            {
                if (this._EstimatedMiscellaneousCost != value)
                {
                    this.OnEstimatedMiscellaneousCostChanging(value);
                    this.SendPropertyChanging("EstimatedMiscellaneousCost");
                    this._EstimatedMiscellaneousCost = value;
                    this.SendPropertyChanged("EstimatedMiscellaneousCost");
                    this.OnEstimatedMiscellaneousCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstimatedSurchargeCost in the schema.
        /// </summary>
        [Column(Name = @"estimated_surcharge_cost", Storage = "_EstimatedSurchargeCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? EstimatedSurchargeCost
        {
            get
            {
                return this._EstimatedSurchargeCost;
            }
            set
            {
                if (this._EstimatedSurchargeCost != value)
                {
                    this.OnEstimatedSurchargeCostChanging(value);
                    this.SendPropertyChanging("EstimatedSurchargeCost");
                    this._EstimatedSurchargeCost = value;
                    this.SendPropertyChanged("EstimatedSurchargeCost");
                    this.OnEstimatedSurchargeCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualMaterialCost in the schema.
        /// </summary>
        [Column(Name = @"actual_material_cost", Storage = "_ActualMaterialCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ActualMaterialCost
        {
            get
            {
                return this._ActualMaterialCost;
            }
            set
            {
                if (this._ActualMaterialCost != value)
                {
                    this.OnActualMaterialCostChanging(value);
                    this.SendPropertyChanging("ActualMaterialCost");
                    this._ActualMaterialCost = value;
                    this.SendPropertyChanged("ActualMaterialCost");
                    this.OnActualMaterialCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualTransportCost in the schema.
        /// </summary>
        [Column(Name = @"actual_transport_cost", Storage = "_ActualTransportCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ActualTransportCost
        {
            get
            {
                return this._ActualTransportCost;
            }
            set
            {
                if (this._ActualTransportCost != value)
                {
                    this.OnActualTransportCostChanging(value);
                    this.SendPropertyChanging("ActualTransportCost");
                    this._ActualTransportCost = value;
                    this.SendPropertyChanged("ActualTransportCost");
                    this.OnActualTransportCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualProductionCost in the schema.
        /// </summary>
        [Column(Name = @"actual_production_cost", Storage = "_ActualProductionCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ActualProductionCost
        {
            get
            {
                return this._ActualProductionCost;
            }
            set
            {
                if (this._ActualProductionCost != value)
                {
                    this.OnActualProductionCostChanging(value);
                    this.SendPropertyChanging("ActualProductionCost");
                    this._ActualProductionCost = value;
                    this.SendPropertyChanged("ActualProductionCost");
                    this.OnActualProductionCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualMiscellaneousCost in the schema.
        /// </summary>
        [Column(Name = @"actual_miscellaneous_cost", Storage = "_ActualMiscellaneousCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ActualMiscellaneousCost
        {
            get
            {
                return this._ActualMiscellaneousCost;
            }
            set
            {
                if (this._ActualMiscellaneousCost != value)
                {
                    this.OnActualMiscellaneousCostChanging(value);
                    this.SendPropertyChanging("ActualMiscellaneousCost");
                    this._ActualMiscellaneousCost = value;
                    this.SendPropertyChanged("ActualMiscellaneousCost");
                    this.OnActualMiscellaneousCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualSurchargeCost in the schema.
        /// </summary>
        [Column(Name = @"actual_surcharge_cost", Storage = "_ActualSurchargeCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ActualSurchargeCost
        {
            get
            {
                return this._ActualSurchargeCost;
            }
            set
            {
                if (this._ActualSurchargeCost != value)
                {
                    this.OnActualSurchargeCostChanging(value);
                    this.SendPropertyChanging("ActualSurchargeCost");
                    this._ActualSurchargeCost = value;
                    this.SendPropertyChanged("ActualSurchargeCost");
                    this.OnActualSurchargeCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatValue1 in the schema.
        /// </summary>
        [Column(Name = @"vat_value1", Storage = "_VatValue1", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatValue1
        {
            get
            {
                return this._VatValue1;
            }
            set
            {
                if (this._VatValue1 != value)
                {
                    this.OnVatValue1Changing(value);
                    this.SendPropertyChanging("VatValue1");
                    this._VatValue1 = value;
                    this.SendPropertyChanged("VatValue1");
                    this.OnVatValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatValue2 in the schema.
        /// </summary>
        [Column(Name = @"vat_value2", Storage = "_VatValue2", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatValue2
        {
            get
            {
                return this._VatValue2;
            }
            set
            {
                if (this._VatValue2 != value)
                {
                    this.OnVatValue2Changing(value);
                    this.SendPropertyChanging("VatValue2");
                    this._VatValue2 = value;
                    this.SendPropertyChanged("VatValue2");
                    this.OnVatValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatValue3 in the schema.
        /// </summary>
        [Column(Name = @"vat_value3", Storage = "_VatValue3", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatValue3
        {
            get
            {
                return this._VatValue3;
            }
            set
            {
                if (this._VatValue3 != value)
                {
                    this.OnVatValue3Changing(value);
                    this.SendPropertyChanging("VatValue3");
                    this._VatValue3 = value;
                    this.SendPropertyChanged("VatValue3");
                    this.OnVatValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatValue4 in the schema.
        /// </summary>
        [Column(Name = @"vat_value4", Storage = "_VatValue4", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatValue4
        {
            get
            {
                return this._VatValue4;
            }
            set
            {
                if (this._VatValue4 != value)
                {
                    this.OnVatValue4Changing(value);
                    this.SendPropertyChanging("VatValue4");
                    this._VatValue4 = value;
                    this.SendPropertyChanged("VatValue4");
                    this.OnVatValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatRate1 in the schema.
        /// </summary>
        [Column(Name = @"vat_rate1", Storage = "_VatRate1", DbType = "NUMERIC(8,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatRate1
        {
            get
            {
                return this._VatRate1;
            }
            set
            {
                if (this._VatRate1 != value)
                {
                    this.OnVatRate1Changing(value);
                    this.SendPropertyChanging("VatRate1");
                    this._VatRate1 = value;
                    this.SendPropertyChanged("VatRate1");
                    this.OnVatRate1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatRate2 in the schema.
        /// </summary>
        [Column(Name = @"vat_rate2", Storage = "_VatRate2", DbType = "NUMERIC(8,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatRate2
        {
            get
            {
                return this._VatRate2;
            }
            set
            {
                if (this._VatRate2 != value)
                {
                    this.OnVatRate2Changing(value);
                    this.SendPropertyChanging("VatRate2");
                    this._VatRate2 = value;
                    this.SendPropertyChanged("VatRate2");
                    this.OnVatRate2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatRate3 in the schema.
        /// </summary>
        [Column(Name = @"vat_rate3", Storage = "_VatRate3", DbType = "NUMERIC(8,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatRate3
        {
            get
            {
                return this._VatRate3;
            }
            set
            {
                if (this._VatRate3 != value)
                {
                    this.OnVatRate3Changing(value);
                    this.SendPropertyChanging("VatRate3");
                    this._VatRate3 = value;
                    this.SendPropertyChanged("VatRate3");
                    this.OnVatRate3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatRate4 in the schema.
        /// </summary>
        [Column(Name = @"vat_rate4", Storage = "_VatRate4", DbType = "NUMERIC(8,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatRate4
        {
            get
            {
                return this._VatRate4;
            }
            set
            {
                if (this._VatRate4 != value)
                {
                    this.OnVatRate4Changing(value);
                    this.SendPropertyChanging("VatRate4");
                    this._VatRate4 = value;
                    this.SendPropertyChanged("VatRate4");
                    this.OnVatRate4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedValue in the schema.
        /// </summary>
        [Column(Name = @"invoiced_value", Storage = "_InvoicedValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InvoicedValue
        {
            get
            {
                return this._InvoicedValue;
            }
            set
            {
                if (this._InvoicedValue != value)
                {
                    this.OnInvoicedValueChanging(value);
                    this.SendPropertyChanging("InvoicedValue");
                    this._InvoicedValue = value;
                    this.SendPropertyChanged("InvoicedValue");
                    this.OnInvoicedValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedTaxValue in the schema.
        /// </summary>
        [Column(Name = @"invoiced_tax_value", Storage = "_InvoicedTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InvoicedTaxValue
        {
            get
            {
                return this._InvoicedTaxValue;
            }
            set
            {
                if (this._InvoicedTaxValue != value)
                {
                    this.OnInvoicedTaxValueChanging(value);
                    this.SendPropertyChanging("InvoicedTaxValue");
                    this._InvoicedTaxValue = value;
                    this.SendPropertyChanged("InvoicedTaxValue");
                    this.OnInvoicedTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceValue in the schema.
        /// </summary>
        [Column(Name = @"balance_value", Storage = "_BalanceValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceValue
        {
            get
            {
                return this._BalanceValue;
            }
            set
            {
                if (this._BalanceValue != value)
                {
                    this.OnBalanceValueChanging(value);
                    this.SendPropertyChanging("BalanceValue");
                    this._BalanceValue = value;
                    this.SendPropertyChanged("BalanceValue");
                    this.OnBalanceValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceTaxValue in the schema.
        /// </summary>
        [Column(Name = @"balance_tax_value", Storage = "_BalanceTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceTaxValue
        {
            get
            {
                return this._BalanceTaxValue;
            }
            set
            {
                if (this._BalanceTaxValue != value)
                {
                    this.OnBalanceTaxValueChanging(value);
                    this.SendPropertyChanging("BalanceTaxValue");
                    this._BalanceTaxValue = value;
                    this.SendPropertyChanged("BalanceTaxValue");
                    this.OnBalanceTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInvoicedValue in the schema.
        /// </summary>
        [Column(Name = @"base_invoiced_value", Storage = "_BaseInvoicedValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInvoicedValue
        {
            get
            {
                return this._BaseInvoicedValue;
            }
            set
            {
                if (this._BaseInvoicedValue != value)
                {
                    this.OnBaseInvoicedValueChanging(value);
                    this.SendPropertyChanging("BaseInvoicedValue");
                    this._BaseInvoicedValue = value;
                    this.SendPropertyChanged("BaseInvoicedValue");
                    this.OnBaseInvoicedValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInvoicedTaxValue in the schema.
        /// </summary>
        [Column(Name = @"base_invoiced_tax_value", Storage = "_BaseInvoicedTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInvoicedTaxValue
        {
            get
            {
                return this._BaseInvoicedTaxValue;
            }
            set
            {
                if (this._BaseInvoicedTaxValue != value)
                {
                    this.OnBaseInvoicedTaxValueChanging(value);
                    this.SendPropertyChanging("BaseInvoicedTaxValue");
                    this._BaseInvoicedTaxValue = value;
                    this.SendPropertyChanged("BaseInvoicedTaxValue");
                    this.OnBaseInvoicedTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseBalanceValue in the schema.
        /// </summary>
        [Column(Name = @"base_balance_value", Storage = "_BaseBalanceValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseBalanceValue
        {
            get
            {
                return this._BaseBalanceValue;
            }
            set
            {
                if (this._BaseBalanceValue != value)
                {
                    this.OnBaseBalanceValueChanging(value);
                    this.SendPropertyChanging("BaseBalanceValue");
                    this._BaseBalanceValue = value;
                    this.SendPropertyChanged("BaseBalanceValue");
                    this.OnBaseBalanceValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseBalanceTaxValue in the schema.
        /// </summary>
        [Column(Name = @"base_balance_tax_value", Storage = "_BaseBalanceTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseBalanceTaxValue
        {
            get
            {
                return this._BaseBalanceTaxValue;
            }
            set
            {
                if (this._BaseBalanceTaxValue != value)
                {
                    this.OnBaseBalanceTaxValueChanging(value);
                    this.SendPropertyChanging("BaseBalanceTaxValue");
                    this._BaseBalanceTaxValue = value;
                    this.SendPropertyChanged("BaseBalanceTaxValue");
                    this.OnBaseBalanceTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCustomerMaterialValue in the schema.
        /// </summary>
        [Column(Name = @"base_customer_material_value", Storage = "_BaseCustomerMaterialValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCustomerMaterialValue
        {
            get
            {
                return this._BaseCustomerMaterialValue;
            }
            set
            {
                if (this._BaseCustomerMaterialValue != value)
                {
                    this.OnBaseCustomerMaterialValueChanging(value);
                    this.SendPropertyChanging("BaseCustomerMaterialValue");
                    this._BaseCustomerMaterialValue = value;
                    this.SendPropertyChanged("BaseCustomerMaterialValue");
                    this.OnBaseCustomerMaterialValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCustomerTransportValue in the schema.
        /// </summary>
        [Column(Name = @"base_customer_transport_value", Storage = "_BaseCustomerTransportValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCustomerTransportValue
        {
            get
            {
                return this._BaseCustomerTransportValue;
            }
            set
            {
                if (this._BaseCustomerTransportValue != value)
                {
                    this.OnBaseCustomerTransportValueChanging(value);
                    this.SendPropertyChanging("BaseCustomerTransportValue");
                    this._BaseCustomerTransportValue = value;
                    this.SendPropertyChanged("BaseCustomerTransportValue");
                    this.OnBaseCustomerTransportValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCustomerProductionValue in the schema.
        /// </summary>
        [Column(Name = @"base_customer_production_value", Storage = "_BaseCustomerProductionValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCustomerProductionValue
        {
            get
            {
                return this._BaseCustomerProductionValue;
            }
            set
            {
                if (this._BaseCustomerProductionValue != value)
                {
                    this.OnBaseCustomerProductionValueChanging(value);
                    this.SendPropertyChanging("BaseCustomerProductionValue");
                    this._BaseCustomerProductionValue = value;
                    this.SendPropertyChanged("BaseCustomerProductionValue");
                    this.OnBaseCustomerProductionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCustomerMiscellaneousValue in the schema.
        /// </summary>
        [Column(Name = @"base_customer_miscellaneous_value", Storage = "_BaseCustomerMiscellaneousValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCustomerMiscellaneousValue
        {
            get
            {
                return this._BaseCustomerMiscellaneousValue;
            }
            set
            {
                if (this._BaseCustomerMiscellaneousValue != value)
                {
                    this.OnBaseCustomerMiscellaneousValueChanging(value);
                    this.SendPropertyChanging("BaseCustomerMiscellaneousValue");
                    this._BaseCustomerMiscellaneousValue = value;
                    this.SendPropertyChanged("BaseCustomerMiscellaneousValue");
                    this.OnBaseCustomerMiscellaneousValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCustomerSurchargeValue in the schema.
        /// </summary>
        [Column(Name = @"base_customer_surcharge_value", Storage = "_BaseCustomerSurchargeValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCustomerSurchargeValue
        {
            get
            {
                return this._BaseCustomerSurchargeValue;
            }
            set
            {
                if (this._BaseCustomerSurchargeValue != value)
                {
                    this.OnBaseCustomerSurchargeValueChanging(value);
                    this.SendPropertyChanging("BaseCustomerSurchargeValue");
                    this._BaseCustomerSurchargeValue = value;
                    this.SendPropertyChanged("BaseCustomerSurchargeValue");
                    this.OnBaseCustomerSurchargeValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInternalMaterialValue in the schema.
        /// </summary>
        [Column(Name = @"base_internal_material_value", Storage = "_BaseInternalMaterialValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInternalMaterialValue
        {
            get
            {
                return this._BaseInternalMaterialValue;
            }
            set
            {
                if (this._BaseInternalMaterialValue != value)
                {
                    this.OnBaseInternalMaterialValueChanging(value);
                    this.SendPropertyChanging("BaseInternalMaterialValue");
                    this._BaseInternalMaterialValue = value;
                    this.SendPropertyChanged("BaseInternalMaterialValue");
                    this.OnBaseInternalMaterialValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInternalTransportValue in the schema.
        /// </summary>
        [Column(Name = @"base_internal_transport_value", Storage = "_BaseInternalTransportValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInternalTransportValue
        {
            get
            {
                return this._BaseInternalTransportValue;
            }
            set
            {
                if (this._BaseInternalTransportValue != value)
                {
                    this.OnBaseInternalTransportValueChanging(value);
                    this.SendPropertyChanging("BaseInternalTransportValue");
                    this._BaseInternalTransportValue = value;
                    this.SendPropertyChanged("BaseInternalTransportValue");
                    this.OnBaseInternalTransportValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInternalProductionValue in the schema.
        /// </summary>
        [Column(Name = @"base_internal_production_value", Storage = "_BaseInternalProductionValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInternalProductionValue
        {
            get
            {
                return this._BaseInternalProductionValue;
            }
            set
            {
                if (this._BaseInternalProductionValue != value)
                {
                    this.OnBaseInternalProductionValueChanging(value);
                    this.SendPropertyChanging("BaseInternalProductionValue");
                    this._BaseInternalProductionValue = value;
                    this.SendPropertyChanged("BaseInternalProductionValue");
                    this.OnBaseInternalProductionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInternalMiscellaneousValue in the schema.
        /// </summary>
        [Column(Name = @"base_internal_miscellaneous_value", Storage = "_BaseInternalMiscellaneousValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInternalMiscellaneousValue
        {
            get
            {
                return this._BaseInternalMiscellaneousValue;
            }
            set
            {
                if (this._BaseInternalMiscellaneousValue != value)
                {
                    this.OnBaseInternalMiscellaneousValueChanging(value);
                    this.SendPropertyChanging("BaseInternalMiscellaneousValue");
                    this._BaseInternalMiscellaneousValue = value;
                    this.SendPropertyChanged("BaseInternalMiscellaneousValue");
                    this.OnBaseInternalMiscellaneousValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseInternalSurchargeValue in the schema.
        /// </summary>
        [Column(Name = @"base_internal_surcharge_value", Storage = "_BaseInternalSurchargeValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseInternalSurchargeValue
        {
            get
            {
                return this._BaseInternalSurchargeValue;
            }
            set
            {
                if (this._BaseInternalSurchargeValue != value)
                {
                    this.OnBaseInternalSurchargeValueChanging(value);
                    this.SendPropertyChanging("BaseInternalSurchargeValue");
                    this._BaseInternalSurchargeValue = value;
                    this.SendPropertyChanged("BaseInternalSurchargeValue");
                    this.OnBaseInternalSurchargeValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseVatValue1 in the schema.
        /// </summary>
        [Column(Name = @"base_vat_value1", Storage = "_BaseVatValue1", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseVatValue1
        {
            get
            {
                return this._BaseVatValue1;
            }
            set
            {
                if (this._BaseVatValue1 != value)
                {
                    this.OnBaseVatValue1Changing(value);
                    this.SendPropertyChanging("BaseVatValue1");
                    this._BaseVatValue1 = value;
                    this.SendPropertyChanged("BaseVatValue1");
                    this.OnBaseVatValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseVatValue2 in the schema.
        /// </summary>
        [Column(Name = @"base_vat_value2", Storage = "_BaseVatValue2", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseVatValue2
        {
            get
            {
                return this._BaseVatValue2;
            }
            set
            {
                if (this._BaseVatValue2 != value)
                {
                    this.OnBaseVatValue2Changing(value);
                    this.SendPropertyChanging("BaseVatValue2");
                    this._BaseVatValue2 = value;
                    this.SendPropertyChanged("BaseVatValue2");
                    this.OnBaseVatValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseVatValue3 in the schema.
        /// </summary>
        [Column(Name = @"base_vat_value3", Storage = "_BaseVatValue3", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseVatValue3
        {
            get
            {
                return this._BaseVatValue3;
            }
            set
            {
                if (this._BaseVatValue3 != value)
                {
                    this.OnBaseVatValue3Changing(value);
                    this.SendPropertyChanging("BaseVatValue3");
                    this._BaseVatValue3 = value;
                    this.SendPropertyChanged("BaseVatValue3");
                    this.OnBaseVatValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseVatValue4 in the schema.
        /// </summary>
        [Column(Name = @"base_vat_value4", Storage = "_BaseVatValue4", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseVatValue4
        {
            get
            {
                return this._BaseVatValue4;
            }
            set
            {
                if (this._BaseVatValue4 != value)
                {
                    this.OnBaseVatValue4Changing(value);
                    this.SendPropertyChanging("BaseVatValue4");
                    this._BaseVatValue4 = value;
                    this.SendPropertyChanged("BaseVatValue4");
                    this.OnBaseVatValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"original_exchange_rate", Storage = "_OriginalExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? OriginalExchangeRate
        {
            get
            {
                return this._OriginalExchangeRate;
            }
            set
            {
                if (this._OriginalExchangeRate != value)
                {
                    this.OnOriginalExchangeRateChanging(value);
                    this.SendPropertyChanging("OriginalExchangeRate");
                    this._OriginalExchangeRate = value;
                    this.SendPropertyChanged("OriginalExchangeRate");
                    this.OnOriginalExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatValue5 in the schema.
        /// </summary>
        [Column(Name = @"vat_value5", Storage = "_VatValue5", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatValue5
        {
            get
            {
                return this._VatValue5;
            }
            set
            {
                if (this._VatValue5 != value)
                {
                    this.OnVatValue5Changing(value);
                    this.SendPropertyChanging("VatValue5");
                    this._VatValue5 = value;
                    this.SendPropertyChanged("VatValue5");
                    this.OnVatValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseVatValue5 in the schema.
        /// </summary>
        [Column(Name = @"base_vat_value5", Storage = "_BaseVatValue5", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseVatValue5
        {
            get
            {
                return this._BaseVatValue5;
            }
            set
            {
                if (this._BaseVatValue5 != value)
                {
                    this.OnBaseVatValue5Changing(value);
                    this.SendPropertyChanging("BaseVatValue5");
                    this._BaseVatValue5 = value;
                    this.SendPropertyChanged("BaseVatValue5");
                    this.OnBaseVatValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatRate5 in the schema.
        /// </summary>
        [Column(Name = @"vat_rate5", Storage = "_VatRate5", DbType = "NUMERIC(8,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? VatRate5
        {
            get
            {
                return this._VatRate5;
            }
            set
            {
                if (this._VatRate5 != value)
                {
                    this.OnVatRate5Changing(value);
                    this.SendPropertyChanging("VatRate5");
                    this._VatRate5 = value;
                    this.SendPropertyChanged("VatRate5");
                    this.OnVatRate5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockMaterialCost in the schema.
        /// </summary>
        [Column(Name = @"stock_material_cost", Storage = "_StockMaterialCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StockMaterialCost
        {
            get
            {
                return this._StockMaterialCost;
            }
            set
            {
                if (this._StockMaterialCost != value)
                {
                    this.OnStockMaterialCostChanging(value);
                    this.SendPropertyChanging("StockMaterialCost");
                    this._StockMaterialCost = value;
                    this.SendPropertyChanged("StockMaterialCost");
                    this.OnStockMaterialCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockTransportCost in the schema.
        /// </summary>
        [Column(Name = @"stock_transport_cost", Storage = "_StockTransportCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StockTransportCost
        {
            get
            {
                return this._StockTransportCost;
            }
            set
            {
                if (this._StockTransportCost != value)
                {
                    this.OnStockTransportCostChanging(value);
                    this.SendPropertyChanging("StockTransportCost");
                    this._StockTransportCost = value;
                    this.SendPropertyChanged("StockTransportCost");
                    this.OnStockTransportCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockProductionCost in the schema.
        /// </summary>
        [Column(Name = @"stock_production_cost", Storage = "_StockProductionCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StockProductionCost
        {
            get
            {
                return this._StockProductionCost;
            }
            set
            {
                if (this._StockProductionCost != value)
                {
                    this.OnStockProductionCostChanging(value);
                    this.SendPropertyChanging("StockProductionCost");
                    this._StockProductionCost = value;
                    this.SendPropertyChanged("StockProductionCost");
                    this.OnStockProductionCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockMiscellaneousCost in the schema.
        /// </summary>
        [Column(Name = @"stock_miscellaneous_cost", Storage = "_StockMiscellaneousCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StockMiscellaneousCost
        {
            get
            {
                return this._StockMiscellaneousCost;
            }
            set
            {
                if (this._StockMiscellaneousCost != value)
                {
                    this.OnStockMiscellaneousCostChanging(value);
                    this.SendPropertyChanging("StockMiscellaneousCost");
                    this._StockMiscellaneousCost = value;
                    this.SendPropertyChanged("StockMiscellaneousCost");
                    this.OnStockMiscellaneousCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockSurchargeCost in the schema.
        /// </summary>
        [Column(Name = @"stock_surcharge_cost", Storage = "_StockSurchargeCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StockSurchargeCost
        {
            get
            {
                return this._StockSurchargeCost;
            }
            set
            {
                if (this._StockSurchargeCost != value)
                {
                    this.OnStockSurchargeCostChanging(value);
                    this.SendPropertyChanging("StockSurchargeCost");
                    this._StockSurchargeCost = value;
                    this.SendPropertyChanged("StockSurchargeCost");
                    this.OnStockSurchargeCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedTotalCost in the schema.
        /// </summary>
        [Column(Name = @"invoiced_total_cost", Storage = "_InvoicedTotalCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InvoicedTotalCost
        {
            get
            {
                return this._InvoicedTotalCost;
            }
            set
            {
                if (this._InvoicedTotalCost != value)
                {
                    this.OnInvoicedTotalCostChanging(value);
                    this.SendPropertyChanging("InvoicedTotalCost");
                    this._InvoicedTotalCost = value;
                    this.SendPropertyChanged("InvoicedTotalCost");
                    this.OnInvoicedTotalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceTotalCost in the schema.
        /// </summary>
        [Column(Name = @"balance_total_cost", Storage = "_BalanceTotalCost", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceTotalCost
        {
            get
            {
                return this._BalanceTotalCost;
            }
            set
            {
                if (this._BalanceTotalCost != value)
                {
                    this.OnBalanceTotalCostChanging(value);
                    this.SendPropertyChanging("BalanceTotalCost");
                    this._BalanceTotalCost = value;
                    this.SendPropertyChanged("BalanceTotalCost");
                    this.OnBalanceTotalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CallOffValue in the schema.
        /// </summary>
        [Column(Name = @"call_off_value", Storage = "_CallOffValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CallOffValue
        {
            get
            {
                return this._CallOffValue;
            }
            set
            {
                if (this._CallOffValue != value)
                {
                    this.OnCallOffValueChanging(value);
                    this.SendPropertyChanging("CallOffValue");
                    this._CallOffValue = value;
                    this.SendPropertyChanged("CallOffValue");
                    this.OnCallOffValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CallOffTaxValue in the schema.
        /// </summary>
        [Column(Name = @"call_off_tax_value", Storage = "_CallOffTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CallOffTaxValue
        {
            get
            {
                return this._CallOffTaxValue;
            }
            set
            {
                if (this._CallOffTaxValue != value)
                {
                    this.OnCallOffTaxValueChanging(value);
                    this.SendPropertyChanging("CallOffTaxValue");
                    this._CallOffTaxValue = value;
                    this.SendPropertyChanged("CallOffTaxValue");
                    this.OnCallOffTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCallOffValue in the schema.
        /// </summary>
        [Column(Name = @"base_call_off_value", Storage = "_BaseCallOffValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCallOffValue
        {
            get
            {
                return this._BaseCallOffValue;
            }
            set
            {
                if (this._BaseCallOffValue != value)
                {
                    this.OnBaseCallOffValueChanging(value);
                    this.SendPropertyChanging("BaseCallOffValue");
                    this._BaseCallOffValue = value;
                    this.SendPropertyChanged("BaseCallOffValue");
                    this.OnBaseCallOffValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCallOffTaxValue in the schema.
        /// </summary>
        [Column(Name = @"base_call_off_tax_value", Storage = "_BaseCallOffTaxValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BaseCallOffTaxValue
        {
            get
            {
                return this._BaseCallOffTaxValue;
            }
            set
            {
                if (this._BaseCallOffTaxValue != value)
                {
                    this.OnBaseCallOffTaxValueChanging(value);
                    this.SendPropertyChanging("BaseCallOffTaxValue");
                    this._BaseCallOffTaxValue = value;
                    this.SendPropertyChanged("BaseCallOffTaxValue");
                    this.OnBaseCallOffTaxValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_BalanceTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesItem", Storage="_SalesItem_BalanceTotalId", ThisKey="Id", OtherKey="BalanceTotalId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem_BalanceTotalId
        {
            get
            {
                return this._SalesItem_BalanceTotalId;
            }
            set
            {
                this._SalesItem_BalanceTotalId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_SalesTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesItem1", Storage="_SalesItem_SalesTotalId", ThisKey="Id", OtherKey="SalesTotalId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem_SalesTotalId
        {
            get
            {
                return this._SalesItem_SalesTotalId;
            }
            set
            {
                this._SalesItem_SalesTotalId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_BalanceTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader", Storage="_SalesHeader_BalanceTotalId", ThisKey="Id", OtherKey="BalanceTotalId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_BalanceTotalId
        {
            get
            {
                return this._SalesHeader_BalanceTotalId;
            }
            set
            {
                this._SalesHeader_BalanceTotalId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_SalesEntryTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader1", Storage="_SalesHeader_SalesEntryTotalId", ThisKey="Id", OtherKey="SalesEntryTotalId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_SalesEntryTotalId
        {
            get
            {
                return this._SalesHeader_SalesEntryTotalId;
            }
            set
            {
                this._SalesHeader_SalesEntryTotalId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_SalesTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader2", Storage="_SalesHeader_SalesTotalId", ThisKey="Id", OtherKey="SalesTotalId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_SalesTotalId
        {
            get
            {
                return this._SalesHeader_SalesTotalId;
            }
            set
            {
                this._SalesHeader_SalesTotalId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SalesItem_BalanceTotalId(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_BalanceTotalId");
            entity.SalesTotal_BalanceTotalId = this;
        }
    
        private void detach_SalesItem_BalanceTotalId(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_BalanceTotalId");
            entity.SalesTotal_BalanceTotalId = null;
        }

        private void attach_SalesItem_SalesTotalId(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_SalesTotalId");
            entity.SalesTotal_SalesTotalId = this;
        }
    
        private void detach_SalesItem_SalesTotalId(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_SalesTotalId");
            entity.SalesTotal_SalesTotalId = null;
        }

        private void attach_SalesHeader_BalanceTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_BalanceTotalId");
            entity.SalesTotal_BalanceTotalId = this;
        }
    
        private void detach_SalesHeader_BalanceTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_BalanceTotalId");
            entity.SalesTotal_BalanceTotalId = null;
        }

        private void attach_SalesHeader_SalesEntryTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalesEntryTotalId");
            entity.SalesTotal_SalesEntryTotalId = this;
        }
    
        private void detach_SalesHeader_SalesEntryTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalesEntryTotalId");
            entity.SalesTotal_SalesEntryTotalId = null;
        }

        private void attach_SalesHeader_SalesTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalesTotalId");
            entity.SalesTotal_SalesTotalId = this;
        }
    
        private void detach_SalesHeader_SalesTotalId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalesTotalId");
            entity.SalesTotal_SalesTotalId = null;
        }
    }

}
