//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/3/2020 10:11:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.SalesHeader in the schema.
    /// </summary>
    [Table(Name = @"public.sales_headers")]
    public partial class SalesHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private int? _BranchId;

        private int? _Number;

        private string _CustomerOrderNumber;

        private string _JobNumber;

        private string _ReleaseNumber;

        private int? _CustomerId;

        private string _CustomerNameOverride;

        private int? _CustomerAddressId;

        private int? _DeliverToId;

        private int? _DeliverToAddressId;

        private int? _SalespersonId;

        private int? _InsideSalespersonId;

        private int? _DeliveryBranchId;

        private int? _DeliveryWarehouseId;

        private string _DeliveryName;

        private int? _DeliveryAddressId;

        private int? _StatusId;

        private int? _TypeId;

        private System.DateTime? _SaleDate;

        private System.DateTime? _DueDate;

        private string _ManualDate;

        private int? _TransportTypeId;

        private string _DeliveryPoint;

        private int? _CarrierId;

        private decimal? _TransportCostRate;

        private int? _TransportCostRateUnitId;

        private decimal? _TransportCostAmount;

        private decimal? _TransportExchangeRate;

        private int? _TransportExchangeRateTypeId;

        private bool? _Acknowledged;

        private System.DateTime? _AcknowledgedDate;

        private bool? _Printed = false;

        private int? _CurrencyId;

        private decimal? _ExchangeRate;

        private int? _ExchangeRateTypeId;

        private int? _TermsId;

        private decimal? _SettlementDiscount;

        private int? _CertificationsId;

        private string _HeaderText;

        private string _InternalText;

        private string _DespatchText;

        private bool? _Completed;

        private System.DateTime? _CompletedDate;

        private int? _InvoiceNumber;

        private System.DateTime? _PaymentDueDate;

        private int? _CreditedInvoiceBranchId;

        private int? _CreditedInvoice;

        private string _CreditReference;

        private int? _OrderId;

        private string _DeliverToNameOverride;

        private decimal? _TransportChargeRate;

        private int? _TransportChargeRateUnitId;

        private decimal? _TransportChargeAmount;

        private int? _BatchId;

        private int? _LostReasonId;

        private System.DateTime? _LostDate;

        private string _LostDescription;

        private int? _DespatchId;

        private System.DateTime? _FollowupDate;

        private int? _SalesTotalId;

        private System.DateTime? _PrintedDate;

        private string _Discriminator;

        private bool? _CreditHold = false;

        private System.DateTime? _CreditHoldDate;

        private int? _CreditHoldReason = 0;

        private System.DateTime? _CreditReleaseDate;

        private int? _CreditReleaseUserId;

        private decimal? _CreditReleaseAmount;

        private int? _GatewayBatchId;

        private System.DateTime? _ExportedDate;

        private bool? _UpdateHold = false;

        private int? _EnquiryId;

        private bool? _UseMinimumGrade = false;

        private int? _SalesEntryTotalId;

        private int? _CreditedDespatchBranchId;

        private int? _CreditedDespatch;

        private int? _CreditedOrderBranchId;

        private int? _CreditedOrder;

        private string _CreditReleaseNote;

        private int? _BalanceTotalId;

        private bool? _RequireProforma = false;

        private System.DateTime? _ProformaPrintedDate;

        private int? _VatType1Id;

        private int? _VatType2Id;

        private int? _VatType3Id;

        private int? _VatType4Id;

        private string _TransferType = @"U";

        private string _TaxGroupCode;

        private int? _TaxClass1;

        private int? _TaxClass2;

        private int? _TaxClass3;

        private int? _TaxClass4;

        private int? _TaxClass5;

        private int? _TransferToBranchId;

        private int? _TransferToWarehouseId;

        private string _TaxAuthority1;

        private string _TaxAuthority2;

        private string _TaxAuthority3;

        private string _TaxAuthority4;

        private string _TaxAuthority5;

        private bool? _TaxExempt1;

        private bool? _TaxExempt2;

        private bool? _TaxExempt3;

        private bool? _TaxExempt4;

        private bool? _TaxExempt5;

        private int? _DocumentDeliveryTypeId;

        private int? _ContactId;

        private string _ContactTelephoneOverride;

        private string _ContactMobileOverride;

        private string _ContactFaxOverride;

        private string _ContactEmailOverride;

        private string _ContactWebAddressOverride;

        private int? _CuttingHeaderId;

        private string _FooterInternalText;

        private string _FooterExternalText;

        private int? _BlanketHeaderId;

        private bool _TransportCharged = false;

        private System.DateTime? _FixDate;

        private System.DateTime? _ExpiryDate;

        private bool? _NoFixedDate = false;

        private System.DateTime? _CreditedDeliveryDate;

        private bool _CreditHeldAtDespatch = false;

        private bool _ConsignmentOrder = false;

        private int? _ImportBatchNumber;

        private string _ImportSource;

        private int? _ImportNumber;

        private int? _LostReasonValue;

        private int? _SalesGroupId;

        private decimal? _LocalExchangeRate;

        private int? _CommercialTermsId;

        private int? _OrderClassificationId;

        private decimal? _InvoiceBaseCurrencyExchangeRate;

        private System.DateTime? _WorkOrderPrintedDate;

        private System.DateTime? _SalesOrderPrintedDate;

        private System.DateTime? _SignOffPrintedDate;

        private System.DateTime? _TransportPrintedDate;

        private System.DateTime? _WeighbridgePrintedDate;

        private System.DateTime? _YardOrderPrintedDate;

        private System.DateTime? _TravelCardPrintedDate;

        private bool? _CounterSale = false;

        private decimal? _BalanceToPay;

        private string _ImportUserName;

        private int? _SalesExportDetailsId;

        private int? _DiscountDay;

        private System.DateTime? _DiscountDate;

        private decimal? _DiscountPercentage;

        private int? _ContractJobId;

        private decimal? _TransportChargeTax;

        private int? _ProjectTypeId;

        private int? _FinalDestinationId;

        private int? _QuoteVersionId;

        private int? _DuplicateReasonId;

        private int? _QuotationTypeId;
        #pragma warning restore 0649

        private EntitySet<SalesItem> _SalesItem;

        private EntityRef<SalesTotal> _SalesTotal_BalanceTotalId;

        private EntitySet<SalesHeader> _SalesHeader_BlanketHeaderId1;

        private EntityRef<SalesHeader> _SalesHeader_BlanketHeaderId;

        private EntityRef<Branch> _Branch_BranchId;

        private EntityRef<Company> _Company_CarrierId;

        private EntityRef<CertificationRequirement> _CertificationRequirement;

        private EntityRef<Contact> _Contact;

        private EntityRef<Branch> _Branch_CreditedDespatchBranchId;

        private EntityRef<Branch> _Branch_CreditedInvoiceBranchId;

        private EntityRef<Branch> _Branch_CreditedOrderBranchId;

        private EntityRef<CurrencyCode> _CurrencyCode;

        private EntityRef<Address> _Address_CustomerAddressId;

        private EntityRef<Company> _Company_CustomerId;

        private EntityRef<Address> _Address_DeliverToAddressId;

        private EntityRef<CompanySubAddress> _CompanySubAddress;

        private EntityRef<Address> _Address_DeliveryAddressId;

        private EntityRef<Branch> _Branch_DeliveryBranchId;

        private EntitySet<SalesHeader> _SalesHeader_EnquiryId1;

        private EntityRef<SalesHeader> _SalesHeader_EnquiryId;

        private EntitySet<SalesHeader> _SalesHeader_OrderId1;

        private EntityRef<SalesHeader> _SalesHeader_OrderId;

        private EntityRef<SalesTotal> _SalesTotal_SalesEntryTotalId;

        private EntityRef<SalesGroup> _SalesGroup;

        private EntityRef<SalesTotal> _SalesTotal_SalesTotalId;

        private EntityRef<SalesStatusCode> _SalesStatusCode;

        private EntityRef<Term> _Term;

        private EntityRef<Branch> _Branch_TransferToBranchId;

        private EntityRef<TransportTypeCode> _TransportTypeCode;

        private EntityRef<SalesType> _SalesType;

        private EntityRef<OrderClassification> _OrderClassification;

        private EntityRef<CountryCode> _CountryCode;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnBranchIdChanging(int? value);
        partial void OnBranchIdChanged();
        partial void OnNumberChanging(int? value);
        partial void OnNumberChanged();
        partial void OnCustomerOrderNumberChanging(string value);
        partial void OnCustomerOrderNumberChanged();
        partial void OnJobNumberChanging(string value);
        partial void OnJobNumberChanged();
        partial void OnReleaseNumberChanging(string value);
        partial void OnReleaseNumberChanged();
        partial void OnCustomerIdChanging(int? value);
        partial void OnCustomerIdChanged();
        partial void OnCustomerNameOverrideChanging(string value);
        partial void OnCustomerNameOverrideChanged();
        partial void OnCustomerAddressIdChanging(int? value);
        partial void OnCustomerAddressIdChanged();
        partial void OnDeliverToIdChanging(int? value);
        partial void OnDeliverToIdChanged();
        partial void OnDeliverToAddressIdChanging(int? value);
        partial void OnDeliverToAddressIdChanged();
        partial void OnSalespersonIdChanging(int? value);
        partial void OnSalespersonIdChanged();
        partial void OnInsideSalespersonIdChanging(int? value);
        partial void OnInsideSalespersonIdChanged();
        partial void OnDeliveryBranchIdChanging(int? value);
        partial void OnDeliveryBranchIdChanged();
        partial void OnDeliveryWarehouseIdChanging(int? value);
        partial void OnDeliveryWarehouseIdChanged();
        partial void OnDeliveryNameChanging(string value);
        partial void OnDeliveryNameChanged();
        partial void OnDeliveryAddressIdChanging(int? value);
        partial void OnDeliveryAddressIdChanged();
        partial void OnStatusIdChanging(int? value);
        partial void OnStatusIdChanged();
        partial void OnTypeIdChanging(int? value);
        partial void OnTypeIdChanged();
        partial void OnSaleDateChanging(System.DateTime? value);
        partial void OnSaleDateChanged();
        partial void OnDueDateChanging(System.DateTime? value);
        partial void OnDueDateChanged();
        partial void OnManualDateChanging(string value);
        partial void OnManualDateChanged();
        partial void OnTransportTypeIdChanging(int? value);
        partial void OnTransportTypeIdChanged();
        partial void OnDeliveryPointChanging(string value);
        partial void OnDeliveryPointChanged();
        partial void OnCarrierIdChanging(int? value);
        partial void OnCarrierIdChanged();
        partial void OnTransportCostRateChanging(decimal? value);
        partial void OnTransportCostRateChanged();
        partial void OnTransportCostRateUnitIdChanging(int? value);
        partial void OnTransportCostRateUnitIdChanged();
        partial void OnTransportCostAmountChanging(decimal? value);
        partial void OnTransportCostAmountChanged();
        partial void OnTransportExchangeRateChanging(decimal? value);
        partial void OnTransportExchangeRateChanged();
        partial void OnTransportExchangeRateTypeIdChanging(int? value);
        partial void OnTransportExchangeRateTypeIdChanged();
        partial void OnAcknowledgedChanging(bool? value);
        partial void OnAcknowledgedChanged();
        partial void OnAcknowledgedDateChanging(System.DateTime? value);
        partial void OnAcknowledgedDateChanged();
        partial void OnPrintedChanging(bool? value);
        partial void OnPrintedChanged();
        partial void OnCurrencyIdChanging(int? value);
        partial void OnCurrencyIdChanged();
        partial void OnExchangeRateChanging(decimal? value);
        partial void OnExchangeRateChanged();
        partial void OnExchangeRateTypeIdChanging(int? value);
        partial void OnExchangeRateTypeIdChanged();
        partial void OnTermsIdChanging(int? value);
        partial void OnTermsIdChanged();
        partial void OnSettlementDiscountChanging(decimal? value);
        partial void OnSettlementDiscountChanged();
        partial void OnCertificationsIdChanging(int? value);
        partial void OnCertificationsIdChanged();
        partial void OnHeaderTextChanging(string value);
        partial void OnHeaderTextChanged();
        partial void OnInternalTextChanging(string value);
        partial void OnInternalTextChanged();
        partial void OnDespatchTextChanging(string value);
        partial void OnDespatchTextChanged();
        partial void OnCompletedChanging(bool? value);
        partial void OnCompletedChanged();
        partial void OnCompletedDateChanging(System.DateTime? value);
        partial void OnCompletedDateChanged();
        partial void OnInvoiceNumberChanging(int? value);
        partial void OnInvoiceNumberChanged();
        partial void OnPaymentDueDateChanging(System.DateTime? value);
        partial void OnPaymentDueDateChanged();
        partial void OnCreditedInvoiceBranchIdChanging(int? value);
        partial void OnCreditedInvoiceBranchIdChanged();
        partial void OnCreditedInvoiceChanging(int? value);
        partial void OnCreditedInvoiceChanged();
        partial void OnCreditReferenceChanging(string value);
        partial void OnCreditReferenceChanged();
        partial void OnOrderIdChanging(int? value);
        partial void OnOrderIdChanged();
        partial void OnDeliverToNameOverrideChanging(string value);
        partial void OnDeliverToNameOverrideChanged();
        partial void OnTransportChargeRateChanging(decimal? value);
        partial void OnTransportChargeRateChanged();
        partial void OnTransportChargeRateUnitIdChanging(int? value);
        partial void OnTransportChargeRateUnitIdChanged();
        partial void OnTransportChargeAmountChanging(decimal? value);
        partial void OnTransportChargeAmountChanged();
        partial void OnBatchIdChanging(int? value);
        partial void OnBatchIdChanged();
        partial void OnLostReasonIdChanging(int? value);
        partial void OnLostReasonIdChanged();
        partial void OnLostDateChanging(System.DateTime? value);
        partial void OnLostDateChanged();
        partial void OnLostDescriptionChanging(string value);
        partial void OnLostDescriptionChanged();
        partial void OnDespatchIdChanging(int? value);
        partial void OnDespatchIdChanged();
        partial void OnFollowupDateChanging(System.DateTime? value);
        partial void OnFollowupDateChanged();
        partial void OnSalesTotalIdChanging(int? value);
        partial void OnSalesTotalIdChanged();
        partial void OnPrintedDateChanging(System.DateTime? value);
        partial void OnPrintedDateChanged();
        partial void OnDiscriminatorChanging(string value);
        partial void OnDiscriminatorChanged();
        partial void OnCreditHoldChanging(bool? value);
        partial void OnCreditHoldChanged();
        partial void OnCreditHoldDateChanging(System.DateTime? value);
        partial void OnCreditHoldDateChanged();
        partial void OnCreditHoldReasonChanging(int? value);
        partial void OnCreditHoldReasonChanged();
        partial void OnCreditReleaseDateChanging(System.DateTime? value);
        partial void OnCreditReleaseDateChanged();
        partial void OnCreditReleaseUserIdChanging(int? value);
        partial void OnCreditReleaseUserIdChanged();
        partial void OnCreditReleaseAmountChanging(decimal? value);
        partial void OnCreditReleaseAmountChanged();
        partial void OnGatewayBatchIdChanging(int? value);
        partial void OnGatewayBatchIdChanged();
        partial void OnExportedDateChanging(System.DateTime? value);
        partial void OnExportedDateChanged();
        partial void OnUpdateHoldChanging(bool? value);
        partial void OnUpdateHoldChanged();
        partial void OnEnquiryIdChanging(int? value);
        partial void OnEnquiryIdChanged();
        partial void OnUseMinimumGradeChanging(bool? value);
        partial void OnUseMinimumGradeChanged();
        partial void OnSalesEntryTotalIdChanging(int? value);
        partial void OnSalesEntryTotalIdChanged();
        partial void OnCreditedDespatchBranchIdChanging(int? value);
        partial void OnCreditedDespatchBranchIdChanged();
        partial void OnCreditedDespatchChanging(int? value);
        partial void OnCreditedDespatchChanged();
        partial void OnCreditedOrderBranchIdChanging(int? value);
        partial void OnCreditedOrderBranchIdChanged();
        partial void OnCreditedOrderChanging(int? value);
        partial void OnCreditedOrderChanged();
        partial void OnCreditReleaseNoteChanging(string value);
        partial void OnCreditReleaseNoteChanged();
        partial void OnBalanceTotalIdChanging(int? value);
        partial void OnBalanceTotalIdChanged();
        partial void OnRequireProformaChanging(bool? value);
        partial void OnRequireProformaChanged();
        partial void OnProformaPrintedDateChanging(System.DateTime? value);
        partial void OnProformaPrintedDateChanged();
        partial void OnVatType1IdChanging(int? value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(int? value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(int? value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(int? value);
        partial void OnVatType4IdChanged();
        partial void OnTransferTypeChanging(string value);
        partial void OnTransferTypeChanged();
        partial void OnTaxGroupCodeChanging(string value);
        partial void OnTaxGroupCodeChanged();
        partial void OnTaxClass1Changing(int? value);
        partial void OnTaxClass1Changed();
        partial void OnTaxClass2Changing(int? value);
        partial void OnTaxClass2Changed();
        partial void OnTaxClass3Changing(int? value);
        partial void OnTaxClass3Changed();
        partial void OnTaxClass4Changing(int? value);
        partial void OnTaxClass4Changed();
        partial void OnTaxClass5Changing(int? value);
        partial void OnTaxClass5Changed();
        partial void OnTransferToBranchIdChanging(int? value);
        partial void OnTransferToBranchIdChanged();
        partial void OnTransferToWarehouseIdChanging(int? value);
        partial void OnTransferToWarehouseIdChanged();
        partial void OnTaxAuthority1Changing(string value);
        partial void OnTaxAuthority1Changed();
        partial void OnTaxAuthority2Changing(string value);
        partial void OnTaxAuthority2Changed();
        partial void OnTaxAuthority3Changing(string value);
        partial void OnTaxAuthority3Changed();
        partial void OnTaxAuthority4Changing(string value);
        partial void OnTaxAuthority4Changed();
        partial void OnTaxAuthority5Changing(string value);
        partial void OnTaxAuthority5Changed();
        partial void OnTaxExempt1Changing(bool? value);
        partial void OnTaxExempt1Changed();
        partial void OnTaxExempt2Changing(bool? value);
        partial void OnTaxExempt2Changed();
        partial void OnTaxExempt3Changing(bool? value);
        partial void OnTaxExempt3Changed();
        partial void OnTaxExempt4Changing(bool? value);
        partial void OnTaxExempt4Changed();
        partial void OnTaxExempt5Changing(bool? value);
        partial void OnTaxExempt5Changed();
        partial void OnDocumentDeliveryTypeIdChanging(int? value);
        partial void OnDocumentDeliveryTypeIdChanged();
        partial void OnContactIdChanging(int? value);
        partial void OnContactIdChanged();
        partial void OnContactTelephoneOverrideChanging(string value);
        partial void OnContactTelephoneOverrideChanged();
        partial void OnContactMobileOverrideChanging(string value);
        partial void OnContactMobileOverrideChanged();
        partial void OnContactFaxOverrideChanging(string value);
        partial void OnContactFaxOverrideChanged();
        partial void OnContactEmailOverrideChanging(string value);
        partial void OnContactEmailOverrideChanged();
        partial void OnContactWebAddressOverrideChanging(string value);
        partial void OnContactWebAddressOverrideChanged();
        partial void OnCuttingHeaderIdChanging(int? value);
        partial void OnCuttingHeaderIdChanged();
        partial void OnFooterInternalTextChanging(string value);
        partial void OnFooterInternalTextChanged();
        partial void OnFooterExternalTextChanging(string value);
        partial void OnFooterExternalTextChanged();
        partial void OnBlanketHeaderIdChanging(int? value);
        partial void OnBlanketHeaderIdChanged();
        partial void OnTransportChargedChanging(bool value);
        partial void OnTransportChargedChanged();
        partial void OnFixDateChanging(System.DateTime? value);
        partial void OnFixDateChanged();
        partial void OnExpiryDateChanging(System.DateTime? value);
        partial void OnExpiryDateChanged();
        partial void OnNoFixedDateChanging(bool? value);
        partial void OnNoFixedDateChanged();
        partial void OnCreditedDeliveryDateChanging(System.DateTime? value);
        partial void OnCreditedDeliveryDateChanged();
        partial void OnCreditHeldAtDespatchChanging(bool value);
        partial void OnCreditHeldAtDespatchChanged();
        partial void OnConsignmentOrderChanging(bool value);
        partial void OnConsignmentOrderChanged();
        partial void OnImportBatchNumberChanging(int? value);
        partial void OnImportBatchNumberChanged();
        partial void OnImportSourceChanging(string value);
        partial void OnImportSourceChanged();
        partial void OnImportNumberChanging(int? value);
        partial void OnImportNumberChanged();
        partial void OnLostReasonValueChanging(int? value);
        partial void OnLostReasonValueChanged();
        partial void OnSalesGroupIdChanging(int? value);
        partial void OnSalesGroupIdChanged();
        partial void OnLocalExchangeRateChanging(decimal? value);
        partial void OnLocalExchangeRateChanged();
        partial void OnCommercialTermsIdChanging(int? value);
        partial void OnCommercialTermsIdChanged();
        partial void OnOrderClassificationIdChanging(int? value);
        partial void OnOrderClassificationIdChanged();
        partial void OnInvoiceBaseCurrencyExchangeRateChanging(decimal? value);
        partial void OnInvoiceBaseCurrencyExchangeRateChanged();
        partial void OnWorkOrderPrintedDateChanging(System.DateTime? value);
        partial void OnWorkOrderPrintedDateChanged();
        partial void OnSalesOrderPrintedDateChanging(System.DateTime? value);
        partial void OnSalesOrderPrintedDateChanged();
        partial void OnSignOffPrintedDateChanging(System.DateTime? value);
        partial void OnSignOffPrintedDateChanged();
        partial void OnTransportPrintedDateChanging(System.DateTime? value);
        partial void OnTransportPrintedDateChanged();
        partial void OnWeighbridgePrintedDateChanging(System.DateTime? value);
        partial void OnWeighbridgePrintedDateChanged();
        partial void OnYardOrderPrintedDateChanging(System.DateTime? value);
        partial void OnYardOrderPrintedDateChanged();
        partial void OnTravelCardPrintedDateChanging(System.DateTime? value);
        partial void OnTravelCardPrintedDateChanged();
        partial void OnCounterSaleChanging(bool? value);
        partial void OnCounterSaleChanged();
        partial void OnBalanceToPayChanging(decimal? value);
        partial void OnBalanceToPayChanged();
        partial void OnImportUserNameChanging(string value);
        partial void OnImportUserNameChanged();
        partial void OnSalesExportDetailsIdChanging(int? value);
        partial void OnSalesExportDetailsIdChanged();
        partial void OnDiscountDayChanging(int? value);
        partial void OnDiscountDayChanged();
        partial void OnDiscountDateChanging(System.DateTime? value);
        partial void OnDiscountDateChanged();
        partial void OnDiscountPercentageChanging(decimal? value);
        partial void OnDiscountPercentageChanged();
        partial void OnContractJobIdChanging(int? value);
        partial void OnContractJobIdChanged();
        partial void OnTransportChargeTaxChanging(decimal? value);
        partial void OnTransportChargeTaxChanged();
        partial void OnProjectTypeIdChanging(int? value);
        partial void OnProjectTypeIdChanged();
        partial void OnFinalDestinationIdChanging(int? value);
        partial void OnFinalDestinationIdChanged();
        partial void OnQuoteVersionIdChanging(int? value);
        partial void OnQuoteVersionIdChanged();
        partial void OnDuplicateReasonIdChanging(int? value);
        partial void OnDuplicateReasonIdChanged();
        partial void OnQuotationTypeIdChanging(int? value);
        partial void OnQuotationTypeIdChanged();
        #endregion

        public SalesHeader()
        {
            this._SalesItem = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem), new Action<SalesItem>(this.detach_SalesItem));
            this._SalesTotal_BalanceTotalId  = default(EntityRef<SalesTotal>);
            this._SalesHeader_BlanketHeaderId1 = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_BlanketHeaderId1), new Action<SalesHeader>(this.detach_SalesHeader_BlanketHeaderId1));
            this._SalesHeader_BlanketHeaderId  = default(EntityRef<SalesHeader>);
            this._Branch_BranchId  = default(EntityRef<Branch>);
            this._Company_CarrierId  = default(EntityRef<Company>);
            this._CertificationRequirement  = default(EntityRef<CertificationRequirement>);
            this._Contact  = default(EntityRef<Contact>);
            this._Branch_CreditedDespatchBranchId  = default(EntityRef<Branch>);
            this._Branch_CreditedInvoiceBranchId  = default(EntityRef<Branch>);
            this._Branch_CreditedOrderBranchId  = default(EntityRef<Branch>);
            this._CurrencyCode  = default(EntityRef<CurrencyCode>);
            this._Address_CustomerAddressId  = default(EntityRef<Address>);
            this._Company_CustomerId  = default(EntityRef<Company>);
            this._Address_DeliverToAddressId  = default(EntityRef<Address>);
            this._CompanySubAddress  = default(EntityRef<CompanySubAddress>);
            this._Address_DeliveryAddressId  = default(EntityRef<Address>);
            this._Branch_DeliveryBranchId  = default(EntityRef<Branch>);
            this._SalesHeader_EnquiryId1 = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_EnquiryId1), new Action<SalesHeader>(this.detach_SalesHeader_EnquiryId1));
            this._SalesHeader_EnquiryId  = default(EntityRef<SalesHeader>);
            this._SalesHeader_OrderId1 = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_OrderId1), new Action<SalesHeader>(this.detach_SalesHeader_OrderId1));
            this._SalesHeader_OrderId  = default(EntityRef<SalesHeader>);
            this._SalesTotal_SalesEntryTotalId  = default(EntityRef<SalesTotal>);
            this._SalesGroup  = default(EntityRef<SalesGroup>);
            this._SalesTotal_SalesTotalId  = default(EntityRef<SalesTotal>);
            this._SalesStatusCode  = default(EntityRef<SalesStatusCode>);
            this._Term  = default(EntityRef<Term>);
            this._Branch_TransferToBranchId  = default(EntityRef<Branch>);
            this._TransportTypeCode  = default(EntityRef<TransportTypeCode>);
            this._SalesType  = default(EntityRef<SalesType>);
            this._OrderClassification  = default(EntityRef<OrderClassification>);
            this._CountryCode  = default(EntityRef<CountryCode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch_BranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Name = @"""number""", Storage = "_Number", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging("Number");
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"customer_order_number", Storage = "_CustomerOrderNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CustomerOrderNumber
        {
            get
            {
                return this._CustomerOrderNumber;
            }
            set
            {
                if (this._CustomerOrderNumber != value)
                {
                    this.OnCustomerOrderNumberChanging(value);
                    this.SendPropertyChanging("CustomerOrderNumber");
                    this._CustomerOrderNumber = value;
                    this.SendPropertyChanged("CustomerOrderNumber");
                    this.OnCustomerOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobNumber in the schema.
        /// </summary>
        [Column(Name = @"job_number", Storage = "_JobNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string JobNumber
        {
            get
            {
                return this._JobNumber;
            }
            set
            {
                if (this._JobNumber != value)
                {
                    this.OnJobNumberChanging(value);
                    this.SendPropertyChanging("JobNumber");
                    this._JobNumber = value;
                    this.SendPropertyChanged("JobNumber");
                    this.OnJobNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReleaseNumber in the schema.
        /// </summary>
        [Column(Name = @"release_number", Storage = "_ReleaseNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ReleaseNumber
        {
            get
            {
                return this._ReleaseNumber;
            }
            set
            {
                if (this._ReleaseNumber != value)
                {
                    this.OnReleaseNumberChanging(value);
                    this.SendPropertyChanging("ReleaseNumber");
                    this._ReleaseNumber = value;
                    this.SendPropertyChanged("ReleaseNumber");
                    this.OnReleaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Company_CustomerId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging("CustomerId");
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerNameOverride in the schema.
        /// </summary>
        [Column(Name = @"customer_name_override", Storage = "_CustomerNameOverride", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string CustomerNameOverride
        {
            get
            {
                return this._CustomerNameOverride;
            }
            set
            {
                if (this._CustomerNameOverride != value)
                {
                    this.OnCustomerNameOverrideChanging(value);
                    this.SendPropertyChanging("CustomerNameOverride");
                    this._CustomerNameOverride = value;
                    this.SendPropertyChanged("CustomerNameOverride");
                    this.OnCustomerNameOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAddressId in the schema.
        /// </summary>
        [Column(Name = @"customer_address_id", Storage = "_CustomerAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CustomerAddressId
        {
            get
            {
                return this._CustomerAddressId;
            }
            set
            {
                if (this._CustomerAddressId != value)
                {
                    if (this._Address_CustomerAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerAddressIdChanging(value);
                    this.SendPropertyChanging("CustomerAddressId");
                    this._CustomerAddressId = value;
                    this.SendPropertyChanged("CustomerAddressId");
                    this.OnCustomerAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverToId in the schema.
        /// </summary>
        [Column(Name = @"deliver_to_id", Storage = "_DeliverToId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliverToId
        {
            get
            {
                return this._DeliverToId;
            }
            set
            {
                if (this._DeliverToId != value)
                {
                    if (this._CompanySubAddress.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliverToIdChanging(value);
                    this.SendPropertyChanging("DeliverToId");
                    this._DeliverToId = value;
                    this.SendPropertyChanged("DeliverToId");
                    this.OnDeliverToIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverToAddressId in the schema.
        /// </summary>
        [Column(Name = @"deliver_to_address_id", Storage = "_DeliverToAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliverToAddressId
        {
            get
            {
                return this._DeliverToAddressId;
            }
            set
            {
                if (this._DeliverToAddressId != value)
                {
                    if (this._Address_DeliverToAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliverToAddressIdChanging(value);
                    this.SendPropertyChanging("DeliverToAddressId");
                    this._DeliverToAddressId = value;
                    this.SendPropertyChanged("DeliverToAddressId");
                    this.OnDeliverToAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalespersonId in the schema.
        /// </summary>
        [Column(Name = @"salesperson_id", Storage = "_SalespersonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalespersonId
        {
            get
            {
                return this._SalespersonId;
            }
            set
            {
                if (this._SalespersonId != value)
                {
                    this.OnSalespersonIdChanging(value);
                    this.SendPropertyChanging("SalespersonId");
                    this._SalespersonId = value;
                    this.SendPropertyChanged("SalespersonId");
                    this.OnSalespersonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideSalespersonId in the schema.
        /// </summary>
        [Column(Name = @"inside_salesperson_id", Storage = "_InsideSalespersonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InsideSalespersonId
        {
            get
            {
                return this._InsideSalespersonId;
            }
            set
            {
                if (this._InsideSalespersonId != value)
                {
                    this.OnInsideSalespersonIdChanging(value);
                    this.SendPropertyChanging("InsideSalespersonId");
                    this._InsideSalespersonId = value;
                    this.SendPropertyChanged("InsideSalespersonId");
                    this.OnInsideSalespersonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryBranchId in the schema.
        /// </summary>
        [Column(Name = @"delivery_branch_id", Storage = "_DeliveryBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryBranchId
        {
            get
            {
                return this._DeliveryBranchId;
            }
            set
            {
                if (this._DeliveryBranchId != value)
                {
                    if (this._Branch_DeliveryBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryBranchIdChanging(value);
                    this.SendPropertyChanging("DeliveryBranchId");
                    this._DeliveryBranchId = value;
                    this.SendPropertyChanged("DeliveryBranchId");
                    this.OnDeliveryBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"delivery_warehouse_id", Storage = "_DeliveryWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryWarehouseId
        {
            get
            {
                return this._DeliveryWarehouseId;
            }
            set
            {
                if (this._DeliveryWarehouseId != value)
                {
                    this.OnDeliveryWarehouseIdChanging(value);
                    this.SendPropertyChanging("DeliveryWarehouseId");
                    this._DeliveryWarehouseId = value;
                    this.SendPropertyChanged("DeliveryWarehouseId");
                    this.OnDeliveryWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryName in the schema.
        /// </summary>
        [Column(Name = @"delivery_name", Storage = "_DeliveryName", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryName
        {
            get
            {
                return this._DeliveryName;
            }
            set
            {
                if (this._DeliveryName != value)
                {
                    this.OnDeliveryNameChanging(value);
                    this.SendPropertyChanging("DeliveryName");
                    this._DeliveryName = value;
                    this.SendPropertyChanged("DeliveryName");
                    this.OnDeliveryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryAddressId in the schema.
        /// </summary>
        [Column(Name = @"delivery_address_id", Storage = "_DeliveryAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryAddressId
        {
            get
            {
                return this._DeliveryAddressId;
            }
            set
            {
                if (this._DeliveryAddressId != value)
                {
                    if (this._Address_DeliveryAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryAddressIdChanging(value);
                    this.SendPropertyChanging("DeliveryAddressId");
                    this._DeliveryAddressId = value;
                    this.SendPropertyChanged("DeliveryAddressId");
                    this.OnDeliveryAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._SalesStatusCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"type_id", Storage = "_TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._SalesType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SaleDate in the schema.
        /// </summary>
        [Column(Name = @"sale_date", Storage = "_SaleDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? SaleDate
        {
            get
            {
                return this._SaleDate;
            }
            set
            {
                if (this._SaleDate != value)
                {
                    this.OnSaleDateChanging(value);
                    this.SendPropertyChanging("SaleDate");
                    this._SaleDate = value;
                    this.SendPropertyChanged("SaleDate");
                    this.OnSaleDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DueDate in the schema.
        /// </summary>
        [Column(Name = @"due_date", Storage = "_DueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DueDate
        {
            get
            {
                return this._DueDate;
            }
            set
            {
                if (this._DueDate != value)
                {
                    this.OnDueDateChanging(value);
                    this.SendPropertyChanging("DueDate");
                    this._DueDate = value;
                    this.SendPropertyChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManualDate in the schema.
        /// </summary>
        [Column(Name = @"manual_date", Storage = "_ManualDate", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string ManualDate
        {
            get
            {
                return this._ManualDate;
            }
            set
            {
                if (this._ManualDate != value)
                {
                    this.OnManualDateChanging(value);
                    this.SendPropertyChanging("ManualDate");
                    this._ManualDate = value;
                    this.SendPropertyChanged("ManualDate");
                    this.OnManualDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportTypeId in the schema.
        /// </summary>
        [Column(Name = @"transport_type_id", Storage = "_TransportTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransportTypeId
        {
            get
            {
                return this._TransportTypeId;
            }
            set
            {
                if (this._TransportTypeId != value)
                {
                    if (this._TransportTypeCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransportTypeIdChanging(value);
                    this.SendPropertyChanging("TransportTypeId");
                    this._TransportTypeId = value;
                    this.SendPropertyChanged("TransportTypeId");
                    this.OnTransportTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryPoint in the schema.
        /// </summary>
        [Column(Name = @"delivery_point", Storage = "_DeliveryPoint", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryPoint
        {
            get
            {
                return this._DeliveryPoint;
            }
            set
            {
                if (this._DeliveryPoint != value)
                {
                    this.OnDeliveryPointChanging(value);
                    this.SendPropertyChanging("DeliveryPoint");
                    this._DeliveryPoint = value;
                    this.SendPropertyChanged("DeliveryPoint");
                    this.OnDeliveryPointChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CarrierId in the schema.
        /// </summary>
        [Column(Name = @"carrier_id", Storage = "_CarrierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CarrierId
        {
            get
            {
                return this._CarrierId;
            }
            set
            {
                if (this._CarrierId != value)
                {
                    if (this._Company_CarrierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCarrierIdChanging(value);
                    this.SendPropertyChanging("CarrierId");
                    this._CarrierId = value;
                    this.SendPropertyChanged("CarrierId");
                    this.OnCarrierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportCostRate in the schema.
        /// </summary>
        [Column(Name = @"transport_cost_rate", Storage = "_TransportCostRate", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportCostRate
        {
            get
            {
                return this._TransportCostRate;
            }
            set
            {
                if (this._TransportCostRate != value)
                {
                    this.OnTransportCostRateChanging(value);
                    this.SendPropertyChanging("TransportCostRate");
                    this._TransportCostRate = value;
                    this.SendPropertyChanged("TransportCostRate");
                    this.OnTransportCostRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportCostRateUnitId in the schema.
        /// </summary>
        [Column(Name = @"transport_cost_rate_unit_id", Storage = "_TransportCostRateUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransportCostRateUnitId
        {
            get
            {
                return this._TransportCostRateUnitId;
            }
            set
            {
                if (this._TransportCostRateUnitId != value)
                {
                    this.OnTransportCostRateUnitIdChanging(value);
                    this.SendPropertyChanging("TransportCostRateUnitId");
                    this._TransportCostRateUnitId = value;
                    this.SendPropertyChanged("TransportCostRateUnitId");
                    this.OnTransportCostRateUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportCostAmount in the schema.
        /// </summary>
        [Column(Name = @"transport_cost_amount", Storage = "_TransportCostAmount", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportCostAmount
        {
            get
            {
                return this._TransportCostAmount;
            }
            set
            {
                if (this._TransportCostAmount != value)
                {
                    this.OnTransportCostAmountChanging(value);
                    this.SendPropertyChanging("TransportCostAmount");
                    this._TransportCostAmount = value;
                    this.SendPropertyChanged("TransportCostAmount");
                    this.OnTransportCostAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"transport_exchange_rate", Storage = "_TransportExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportExchangeRate
        {
            get
            {
                return this._TransportExchangeRate;
            }
            set
            {
                if (this._TransportExchangeRate != value)
                {
                    this.OnTransportExchangeRateChanging(value);
                    this.SendPropertyChanging("TransportExchangeRate");
                    this._TransportExchangeRate = value;
                    this.SendPropertyChanged("TransportExchangeRate");
                    this.OnTransportExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportExchangeRateTypeId in the schema.
        /// </summary>
        [Column(Name = @"transport_exchange_rate_type_id", Storage = "_TransportExchangeRateTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransportExchangeRateTypeId
        {
            get
            {
                return this._TransportExchangeRateTypeId;
            }
            set
            {
                if (this._TransportExchangeRateTypeId != value)
                {
                    this.OnTransportExchangeRateTypeIdChanging(value);
                    this.SendPropertyChanging("TransportExchangeRateTypeId");
                    this._TransportExchangeRateTypeId = value;
                    this.SendPropertyChanged("TransportExchangeRateTypeId");
                    this.OnTransportExchangeRateTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acknowledged in the schema.
        /// </summary>
        [Column(Name = @"acknowledged", Storage = "_Acknowledged", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? Acknowledged
        {
            get
            {
                return this._Acknowledged;
            }
            set
            {
                if (this._Acknowledged != value)
                {
                    this.OnAcknowledgedChanging(value);
                    this.SendPropertyChanging("Acknowledged");
                    this._Acknowledged = value;
                    this.SendPropertyChanged("Acknowledged");
                    this.OnAcknowledgedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcknowledgedDate in the schema.
        /// </summary>
        [Column(Name = @"acknowledged_date", Storage = "_AcknowledgedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? AcknowledgedDate
        {
            get
            {
                return this._AcknowledgedDate;
            }
            set
            {
                if (this._AcknowledgedDate != value)
                {
                    this.OnAcknowledgedDateChanging(value);
                    this.SendPropertyChanging("AcknowledgedDate");
                    this._AcknowledgedDate = value;
                    this.SendPropertyChanged("AcknowledgedDate");
                    this.OnAcknowledgedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Printed in the schema.
        /// </summary>
        [Column(Name = @"printed", Storage = "_Printed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? Printed
        {
            get
            {
                return this._Printed;
            }
            set
            {
                if (this._Printed != value)
                {
                    this.OnPrintedChanging(value);
                    this.SendPropertyChanging("Printed");
                    this._Printed = value;
                    this.SendPropertyChanged("Printed");
                    this.OnPrintedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyId in the schema.
        /// </summary>
        [Column(Name = @"currency_id", Storage = "_CurrencyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CurrencyId
        {
            get
            {
                return this._CurrencyId;
            }
            set
            {
                if (this._CurrencyId != value)
                {
                    if (this._CurrencyCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencyIdChanging(value);
                    this.SendPropertyChanging("CurrencyId");
                    this._CurrencyId = value;
                    this.SendPropertyChanged("CurrencyId");
                    this.OnCurrencyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate", Storage = "_ExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ExchangeRate
        {
            get
            {
                return this._ExchangeRate;
            }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this.OnExchangeRateChanging(value);
                    this.SendPropertyChanging("ExchangeRate");
                    this._ExchangeRate = value;
                    this.SendPropertyChanged("ExchangeRate");
                    this.OnExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRateTypeId in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate_type_id", Storage = "_ExchangeRateTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ExchangeRateTypeId
        {
            get
            {
                return this._ExchangeRateTypeId;
            }
            set
            {
                if (this._ExchangeRateTypeId != value)
                {
                    this.OnExchangeRateTypeIdChanging(value);
                    this.SendPropertyChanging("ExchangeRateTypeId");
                    this._ExchangeRateTypeId = value;
                    this.SendPropertyChanged("ExchangeRateTypeId");
                    this.OnExchangeRateTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermsId in the schema.
        /// </summary>
        [Column(Name = @"terms_id", Storage = "_TermsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TermsId
        {
            get
            {
                return this._TermsId;
            }
            set
            {
                if (this._TermsId != value)
                {
                    if (this._Term.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTermsIdChanging(value);
                    this.SendPropertyChanging("TermsId");
                    this._TermsId = value;
                    this.SendPropertyChanged("TermsId");
                    this.OnTermsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SettlementDiscount in the schema.
        /// </summary>
        [Column(Name = @"settlement_discount", Storage = "_SettlementDiscount", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? SettlementDiscount
        {
            get
            {
                return this._SettlementDiscount;
            }
            set
            {
                if (this._SettlementDiscount != value)
                {
                    this.OnSettlementDiscountChanging(value);
                    this.SendPropertyChanging("SettlementDiscount");
                    this._SettlementDiscount = value;
                    this.SendPropertyChanged("SettlementDiscount");
                    this.OnSettlementDiscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificationsId in the schema.
        /// </summary>
        [Column(Name = @"certifications_id", Storage = "_CertificationsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CertificationsId
        {
            get
            {
                return this._CertificationsId;
            }
            set
            {
                if (this._CertificationsId != value)
                {
                    if (this._CertificationRequirement.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCertificationsIdChanging(value);
                    this.SendPropertyChanging("CertificationsId");
                    this._CertificationsId = value;
                    this.SendPropertyChanged("CertificationsId");
                    this.OnCertificationsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeaderText in the schema.
        /// </summary>
        [Column(Name = @"header_text", Storage = "_HeaderText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string HeaderText
        {
            get
            {
                return this._HeaderText;
            }
            set
            {
                if (this._HeaderText != value)
                {
                    this.OnHeaderTextChanging(value);
                    this.SendPropertyChanging("HeaderText");
                    this._HeaderText = value;
                    this.SendPropertyChanged("HeaderText");
                    this.OnHeaderTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalText in the schema.
        /// </summary>
        [Column(Name = @"internal_text", Storage = "_InternalText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InternalText
        {
            get
            {
                return this._InternalText;
            }
            set
            {
                if (this._InternalText != value)
                {
                    this.OnInternalTextChanging(value);
                    this.SendPropertyChanging("InternalText");
                    this._InternalText = value;
                    this.SendPropertyChanged("InternalText");
                    this.OnInternalTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchText in the schema.
        /// </summary>
        [Column(Name = @"despatch_text", Storage = "_DespatchText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DespatchText
        {
            get
            {
                return this._DespatchText;
            }
            set
            {
                if (this._DespatchText != value)
                {
                    this.OnDespatchTextChanging(value);
                    this.SendPropertyChanging("DespatchText");
                    this._DespatchText = value;
                    this.SendPropertyChanged("DespatchText");
                    this.OnDespatchTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Completed in the schema.
        /// </summary>
        [Column(Name = @"completed", Storage = "_Completed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging("Completed");
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompletedDate in the schema.
        /// </summary>
        [Column(Name = @"completed_date", Storage = "_CompletedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CompletedDate
        {
            get
            {
                return this._CompletedDate;
            }
            set
            {
                if (this._CompletedDate != value)
                {
                    this.OnCompletedDateChanging(value);
                    this.SendPropertyChanging("CompletedDate");
                    this._CompletedDate = value;
                    this.SendPropertyChanged("CompletedDate");
                    this.OnCompletedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceNumber in the schema.
        /// </summary>
        [Column(Name = @"invoice_number", Storage = "_InvoiceNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InvoiceNumber
        {
            get
            {
                return this._InvoiceNumber;
            }
            set
            {
                if (this._InvoiceNumber != value)
                {
                    this.OnInvoiceNumberChanging(value);
                    this.SendPropertyChanging("InvoiceNumber");
                    this._InvoiceNumber = value;
                    this.SendPropertyChanged("InvoiceNumber");
                    this.OnInvoiceNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentDueDate in the schema.
        /// </summary>
        [Column(Name = @"payment_due_date", Storage = "_PaymentDueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? PaymentDueDate
        {
            get
            {
                return this._PaymentDueDate;
            }
            set
            {
                if (this._PaymentDueDate != value)
                {
                    this.OnPaymentDueDateChanging(value);
                    this.SendPropertyChanging("PaymentDueDate");
                    this._PaymentDueDate = value;
                    this.SendPropertyChanged("PaymentDueDate");
                    this.OnPaymentDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedInvoiceBranchId in the schema.
        /// </summary>
        [Column(Name = @"credited_invoice_branch_id", Storage = "_CreditedInvoiceBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedInvoiceBranchId
        {
            get
            {
                return this._CreditedInvoiceBranchId;
            }
            set
            {
                if (this._CreditedInvoiceBranchId != value)
                {
                    if (this._Branch_CreditedInvoiceBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreditedInvoiceBranchIdChanging(value);
                    this.SendPropertyChanging("CreditedInvoiceBranchId");
                    this._CreditedInvoiceBranchId = value;
                    this.SendPropertyChanged("CreditedInvoiceBranchId");
                    this.OnCreditedInvoiceBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedInvoice in the schema.
        /// </summary>
        [Column(Name = @"credited_invoice", Storage = "_CreditedInvoice", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedInvoice
        {
            get
            {
                return this._CreditedInvoice;
            }
            set
            {
                if (this._CreditedInvoice != value)
                {
                    this.OnCreditedInvoiceChanging(value);
                    this.SendPropertyChanging("CreditedInvoice");
                    this._CreditedInvoice = value;
                    this.SendPropertyChanged("CreditedInvoice");
                    this.OnCreditedInvoiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReference in the schema.
        /// </summary>
        [Column(Name = @"credit_reference", Storage = "_CreditReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CreditReference
        {
            get
            {
                return this._CreditReference;
            }
            set
            {
                if (this._CreditReference != value)
                {
                    this.OnCreditReferenceChanging(value);
                    this.SendPropertyChanging("CreditReference");
                    this._CreditReference = value;
                    this.SendPropertyChanged("CreditReference");
                    this.OnCreditReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"order_id", Storage = "_OrderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    if (this._SalesHeader_OrderId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverToNameOverride in the schema.
        /// </summary>
        [Column(Name = @"deliver_to_name_override", Storage = "_DeliverToNameOverride", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliverToNameOverride
        {
            get
            {
                return this._DeliverToNameOverride;
            }
            set
            {
                if (this._DeliverToNameOverride != value)
                {
                    this.OnDeliverToNameOverrideChanging(value);
                    this.SendPropertyChanging("DeliverToNameOverride");
                    this._DeliverToNameOverride = value;
                    this.SendPropertyChanged("DeliverToNameOverride");
                    this.OnDeliverToNameOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportChargeRate in the schema.
        /// </summary>
        [Column(Name = @"transport_charge_rate", Storage = "_TransportChargeRate", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportChargeRate
        {
            get
            {
                return this._TransportChargeRate;
            }
            set
            {
                if (this._TransportChargeRate != value)
                {
                    this.OnTransportChargeRateChanging(value);
                    this.SendPropertyChanging("TransportChargeRate");
                    this._TransportChargeRate = value;
                    this.SendPropertyChanged("TransportChargeRate");
                    this.OnTransportChargeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportChargeRateUnitId in the schema.
        /// </summary>
        [Column(Name = @"transport_charge_rate_unit_id", Storage = "_TransportChargeRateUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransportChargeRateUnitId
        {
            get
            {
                return this._TransportChargeRateUnitId;
            }
            set
            {
                if (this._TransportChargeRateUnitId != value)
                {
                    this.OnTransportChargeRateUnitIdChanging(value);
                    this.SendPropertyChanging("TransportChargeRateUnitId");
                    this._TransportChargeRateUnitId = value;
                    this.SendPropertyChanged("TransportChargeRateUnitId");
                    this.OnTransportChargeRateUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportChargeAmount in the schema.
        /// </summary>
        [Column(Name = @"transport_charge_amount", Storage = "_TransportChargeAmount", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportChargeAmount
        {
            get
            {
                return this._TransportChargeAmount;
            }
            set
            {
                if (this._TransportChargeAmount != value)
                {
                    this.OnTransportChargeAmountChanging(value);
                    this.SendPropertyChanging("TransportChargeAmount");
                    this._TransportChargeAmount = value;
                    this.SendPropertyChanged("TransportChargeAmount");
                    this.OnTransportChargeAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BatchId in the schema.
        /// </summary>
        [Column(Name = @"batch_id", Storage = "_BatchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BatchId
        {
            get
            {
                return this._BatchId;
            }
            set
            {
                if (this._BatchId != value)
                {
                    this.OnBatchIdChanging(value);
                    this.SendPropertyChanging("BatchId");
                    this._BatchId = value;
                    this.SendPropertyChanged("BatchId");
                    this.OnBatchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostReasonId in the schema.
        /// </summary>
        [Column(Name = @"lost_reason_id", Storage = "_LostReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? LostReasonId
        {
            get
            {
                return this._LostReasonId;
            }
            set
            {
                if (this._LostReasonId != value)
                {
                    this.OnLostReasonIdChanging(value);
                    this.SendPropertyChanging("LostReasonId");
                    this._LostReasonId = value;
                    this.SendPropertyChanged("LostReasonId");
                    this.OnLostReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostDate in the schema.
        /// </summary>
        [Column(Name = @"lost_date", Storage = "_LostDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? LostDate
        {
            get
            {
                return this._LostDate;
            }
            set
            {
                if (this._LostDate != value)
                {
                    this.OnLostDateChanging(value);
                    this.SendPropertyChanging("LostDate");
                    this._LostDate = value;
                    this.SendPropertyChanged("LostDate");
                    this.OnLostDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostDescription in the schema.
        /// </summary>
        [Column(Name = @"lost_description", Storage = "_LostDescription", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string LostDescription
        {
            get
            {
                return this._LostDescription;
            }
            set
            {
                if (this._LostDescription != value)
                {
                    this.OnLostDescriptionChanging(value);
                    this.SendPropertyChanging("LostDescription");
                    this._LostDescription = value;
                    this.SendPropertyChanged("LostDescription");
                    this.OnLostDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchId in the schema.
        /// </summary>
        [Column(Name = @"despatch_id", Storage = "_DespatchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DespatchId
        {
            get
            {
                return this._DespatchId;
            }
            set
            {
                if (this._DespatchId != value)
                {
                    this.OnDespatchIdChanging(value);
                    this.SendPropertyChanging("DespatchId");
                    this._DespatchId = value;
                    this.SendPropertyChanged("DespatchId");
                    this.OnDespatchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FollowupDate in the schema.
        /// </summary>
        [Column(Name = @"followup_date", Storage = "_FollowupDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? FollowupDate
        {
            get
            {
                return this._FollowupDate;
            }
            set
            {
                if (this._FollowupDate != value)
                {
                    this.OnFollowupDateChanging(value);
                    this.SendPropertyChanging("FollowupDate");
                    this._FollowupDate = value;
                    this.SendPropertyChanged("FollowupDate");
                    this.OnFollowupDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotalId in the schema.
        /// </summary>
        [Column(Name = @"sales_total_id", Storage = "_SalesTotalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalesTotalId
        {
            get
            {
                return this._SalesTotalId;
            }
            set
            {
                if (this._SalesTotalId != value)
                {
                    if (this._SalesTotal_SalesTotalId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesTotalIdChanging(value);
                    this.SendPropertyChanging("SalesTotalId");
                    this._SalesTotalId = value;
                    this.SendPropertyChanged("SalesTotalId");
                    this.OnSalesTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintedDate in the schema.
        /// </summary>
        [Column(Name = @"printed_date", Storage = "_PrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? PrintedDate
        {
            get
            {
                return this._PrintedDate;
            }
            set
            {
                if (this._PrintedDate != value)
                {
                    this.OnPrintedDateChanging(value);
                    this.SendPropertyChanging("PrintedDate");
                    this._PrintedDate = value;
                    this.SendPropertyChanged("PrintedDate");
                    this.OnPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discriminator in the schema.
        /// </summary>
        [Column(Name = @"discriminator", Storage = "_Discriminator", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Discriminator
        {
            get
            {
                return this._Discriminator;
            }
            set
            {
                if (this._Discriminator != value)
                {
                    this.OnDiscriminatorChanging(value);
                    this.SendPropertyChanging("Discriminator");
                    this._Discriminator = value;
                    this.SendPropertyChanged("Discriminator");
                    this.OnDiscriminatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditHold in the schema.
        /// </summary>
        [Column(Name = @"credit_hold", Storage = "_CreditHold", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? CreditHold
        {
            get
            {
                return this._CreditHold;
            }
            set
            {
                if (this._CreditHold != value)
                {
                    this.OnCreditHoldChanging(value);
                    this.SendPropertyChanging("CreditHold");
                    this._CreditHold = value;
                    this.SendPropertyChanged("CreditHold");
                    this.OnCreditHoldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditHoldDate in the schema.
        /// </summary>
        [Column(Name = @"credit_hold_date", Storage = "_CreditHoldDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CreditHoldDate
        {
            get
            {
                return this._CreditHoldDate;
            }
            set
            {
                if (this._CreditHoldDate != value)
                {
                    this.OnCreditHoldDateChanging(value);
                    this.SendPropertyChanging("CreditHoldDate");
                    this._CreditHoldDate = value;
                    this.SendPropertyChanged("CreditHoldDate");
                    this.OnCreditHoldDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditHoldReason in the schema.
        /// </summary>
        [Column(Name = @"credit_hold_reason", Storage = "_CreditHoldReason", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditHoldReason
        {
            get
            {
                return this._CreditHoldReason;
            }
            set
            {
                if (this._CreditHoldReason != value)
                {
                    this.OnCreditHoldReasonChanging(value);
                    this.SendPropertyChanging("CreditHoldReason");
                    this._CreditHoldReason = value;
                    this.SendPropertyChanged("CreditHoldReason");
                    this.OnCreditHoldReasonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReleaseDate in the schema.
        /// </summary>
        [Column(Name = @"credit_release_date", Storage = "_CreditReleaseDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CreditReleaseDate
        {
            get
            {
                return this._CreditReleaseDate;
            }
            set
            {
                if (this._CreditReleaseDate != value)
                {
                    this.OnCreditReleaseDateChanging(value);
                    this.SendPropertyChanging("CreditReleaseDate");
                    this._CreditReleaseDate = value;
                    this.SendPropertyChanged("CreditReleaseDate");
                    this.OnCreditReleaseDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReleaseUserId in the schema.
        /// </summary>
        [Column(Name = @"credit_release_user_id", Storage = "_CreditReleaseUserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditReleaseUserId
        {
            get
            {
                return this._CreditReleaseUserId;
            }
            set
            {
                if (this._CreditReleaseUserId != value)
                {
                    this.OnCreditReleaseUserIdChanging(value);
                    this.SendPropertyChanging("CreditReleaseUserId");
                    this._CreditReleaseUserId = value;
                    this.SendPropertyChanged("CreditReleaseUserId");
                    this.OnCreditReleaseUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReleaseAmount in the schema.
        /// </summary>
        [Column(Name = @"credit_release_amount", Storage = "_CreditReleaseAmount", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? CreditReleaseAmount
        {
            get
            {
                return this._CreditReleaseAmount;
            }
            set
            {
                if (this._CreditReleaseAmount != value)
                {
                    this.OnCreditReleaseAmountChanging(value);
                    this.SendPropertyChanging("CreditReleaseAmount");
                    this._CreditReleaseAmount = value;
                    this.SendPropertyChanged("CreditReleaseAmount");
                    this.OnCreditReleaseAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GatewayBatchId in the schema.
        /// </summary>
        [Column(Name = @"gateway_batch_id", Storage = "_GatewayBatchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? GatewayBatchId
        {
            get
            {
                return this._GatewayBatchId;
            }
            set
            {
                if (this._GatewayBatchId != value)
                {
                    this.OnGatewayBatchIdChanging(value);
                    this.SendPropertyChanging("GatewayBatchId");
                    this._GatewayBatchId = value;
                    this.SendPropertyChanged("GatewayBatchId");
                    this.OnGatewayBatchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExportedDate in the schema.
        /// </summary>
        [Column(Name = @"exported_date", Storage = "_ExportedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ExportedDate
        {
            get
            {
                return this._ExportedDate;
            }
            set
            {
                if (this._ExportedDate != value)
                {
                    this.OnExportedDateChanging(value);
                    this.SendPropertyChanging("ExportedDate");
                    this._ExportedDate = value;
                    this.SendPropertyChanged("ExportedDate");
                    this.OnExportedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateHold in the schema.
        /// </summary>
        [Column(Name = @"update_hold", Storage = "_UpdateHold", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? UpdateHold
        {
            get
            {
                return this._UpdateHold;
            }
            set
            {
                if (this._UpdateHold != value)
                {
                    this.OnUpdateHoldChanging(value);
                    this.SendPropertyChanging("UpdateHold");
                    this._UpdateHold = value;
                    this.SendPropertyChanged("UpdateHold");
                    this.OnUpdateHoldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnquiryId in the schema.
        /// </summary>
        [Column(Name = @"enquiry_id", Storage = "_EnquiryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? EnquiryId
        {
            get
            {
                return this._EnquiryId;
            }
            set
            {
                if (this._EnquiryId != value)
                {
                    if (this._SalesHeader_EnquiryId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEnquiryIdChanging(value);
                    this.SendPropertyChanging("EnquiryId");
                    this._EnquiryId = value;
                    this.SendPropertyChanged("EnquiryId");
                    this.OnEnquiryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UseMinimumGrade in the schema.
        /// </summary>
        [Column(Name = @"use_minimum_grade", Storage = "_UseMinimumGrade", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? UseMinimumGrade
        {
            get
            {
                return this._UseMinimumGrade;
            }
            set
            {
                if (this._UseMinimumGrade != value)
                {
                    this.OnUseMinimumGradeChanging(value);
                    this.SendPropertyChanging("UseMinimumGrade");
                    this._UseMinimumGrade = value;
                    this.SendPropertyChanged("UseMinimumGrade");
                    this.OnUseMinimumGradeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesEntryTotalId in the schema.
        /// </summary>
        [Column(Name = @"sales_entry_total_id", Storage = "_SalesEntryTotalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalesEntryTotalId
        {
            get
            {
                return this._SalesEntryTotalId;
            }
            set
            {
                if (this._SalesEntryTotalId != value)
                {
                    if (this._SalesTotal_SalesEntryTotalId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesEntryTotalIdChanging(value);
                    this.SendPropertyChanging("SalesEntryTotalId");
                    this._SalesEntryTotalId = value;
                    this.SendPropertyChanged("SalesEntryTotalId");
                    this.OnSalesEntryTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedDespatchBranchId in the schema.
        /// </summary>
        [Column(Name = @"credited_despatch_branch_id", Storage = "_CreditedDespatchBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedDespatchBranchId
        {
            get
            {
                return this._CreditedDespatchBranchId;
            }
            set
            {
                if (this._CreditedDespatchBranchId != value)
                {
                    if (this._Branch_CreditedDespatchBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreditedDespatchBranchIdChanging(value);
                    this.SendPropertyChanging("CreditedDespatchBranchId");
                    this._CreditedDespatchBranchId = value;
                    this.SendPropertyChanged("CreditedDespatchBranchId");
                    this.OnCreditedDespatchBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedDespatch in the schema.
        /// </summary>
        [Column(Name = @"credited_despatch", Storage = "_CreditedDespatch", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedDespatch
        {
            get
            {
                return this._CreditedDespatch;
            }
            set
            {
                if (this._CreditedDespatch != value)
                {
                    this.OnCreditedDespatchChanging(value);
                    this.SendPropertyChanging("CreditedDespatch");
                    this._CreditedDespatch = value;
                    this.SendPropertyChanged("CreditedDespatch");
                    this.OnCreditedDespatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedOrderBranchId in the schema.
        /// </summary>
        [Column(Name = @"credited_order_branch_id", Storage = "_CreditedOrderBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedOrderBranchId
        {
            get
            {
                return this._CreditedOrderBranchId;
            }
            set
            {
                if (this._CreditedOrderBranchId != value)
                {
                    if (this._Branch_CreditedOrderBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreditedOrderBranchIdChanging(value);
                    this.SendPropertyChanging("CreditedOrderBranchId");
                    this._CreditedOrderBranchId = value;
                    this.SendPropertyChanged("CreditedOrderBranchId");
                    this.OnCreditedOrderBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedOrder in the schema.
        /// </summary>
        [Column(Name = @"credited_order", Storage = "_CreditedOrder", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CreditedOrder
        {
            get
            {
                return this._CreditedOrder;
            }
            set
            {
                if (this._CreditedOrder != value)
                {
                    this.OnCreditedOrderChanging(value);
                    this.SendPropertyChanging("CreditedOrder");
                    this._CreditedOrder = value;
                    this.SendPropertyChanged("CreditedOrder");
                    this.OnCreditedOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReleaseNote in the schema.
        /// </summary>
        [Column(Name = @"credit_release_notes", Storage = "_CreditReleaseNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CreditReleaseNote
        {
            get
            {
                return this._CreditReleaseNote;
            }
            set
            {
                if (this._CreditReleaseNote != value)
                {
                    this.OnCreditReleaseNoteChanging(value);
                    this.SendPropertyChanging("CreditReleaseNote");
                    this._CreditReleaseNote = value;
                    this.SendPropertyChanged("CreditReleaseNote");
                    this.OnCreditReleaseNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceTotalId in the schema.
        /// </summary>
        [Column(Name = @"balance_total_id", Storage = "_BalanceTotalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BalanceTotalId
        {
            get
            {
                return this._BalanceTotalId;
            }
            set
            {
                if (this._BalanceTotalId != value)
                {
                    if (this._SalesTotal_BalanceTotalId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBalanceTotalIdChanging(value);
                    this.SendPropertyChanging("BalanceTotalId");
                    this._BalanceTotalId = value;
                    this.SendPropertyChanged("BalanceTotalId");
                    this.OnBalanceTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequireProforma in the schema.
        /// </summary>
        [Column(Name = @"require_proforma", Storage = "_RequireProforma", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? RequireProforma
        {
            get
            {
                return this._RequireProforma;
            }
            set
            {
                if (this._RequireProforma != value)
                {
                    this.OnRequireProformaChanging(value);
                    this.SendPropertyChanging("RequireProforma");
                    this._RequireProforma = value;
                    this.SendPropertyChanged("RequireProforma");
                    this.OnRequireProformaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProformaPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"proforma_printed_date", Storage = "_ProformaPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ProformaPrintedDate
        {
            get
            {
                return this._ProformaPrintedDate;
            }
            set
            {
                if (this._ProformaPrintedDate != value)
                {
                    this.OnProformaPrintedDateChanging(value);
                    this.SendPropertyChanging("ProformaPrintedDate");
                    this._ProformaPrintedDate = value;
                    this.SendPropertyChanged("ProformaPrintedDate");
                    this.OnProformaPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferType in the schema.
        /// </summary>
        [Column(Name = @"transfer_type", Storage = "_TransferType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TransferType
        {
            get
            {
                return this._TransferType;
            }
            set
            {
                if (this._TransferType != value)
                {
                    this.OnTransferTypeChanging(value);
                    this.SendPropertyChanging("TransferType");
                    this._TransferType = value;
                    this.SendPropertyChanged("TransferType");
                    this.OnTransferTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxGroupCode in the schema.
        /// </summary>
        [Column(Name = @"tax_group_code", Storage = "_TaxGroupCode", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxGroupCode
        {
            get
            {
                return this._TaxGroupCode;
            }
            set
            {
                if (this._TaxGroupCode != value)
                {
                    this.OnTaxGroupCodeChanging(value);
                    this.SendPropertyChanging("TaxGroupCode");
                    this._TaxGroupCode = value;
                    this.SendPropertyChanged("TaxGroupCode");
                    this.OnTaxGroupCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass1 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_1", Storage = "_TaxClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass1
        {
            get
            {
                return this._TaxClass1;
            }
            set
            {
                if (this._TaxClass1 != value)
                {
                    this.OnTaxClass1Changing(value);
                    this.SendPropertyChanging("TaxClass1");
                    this._TaxClass1 = value;
                    this.SendPropertyChanged("TaxClass1");
                    this.OnTaxClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass2 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_2", Storage = "_TaxClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass2
        {
            get
            {
                return this._TaxClass2;
            }
            set
            {
                if (this._TaxClass2 != value)
                {
                    this.OnTaxClass2Changing(value);
                    this.SendPropertyChanging("TaxClass2");
                    this._TaxClass2 = value;
                    this.SendPropertyChanged("TaxClass2");
                    this.OnTaxClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass3 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_3", Storage = "_TaxClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass3
        {
            get
            {
                return this._TaxClass3;
            }
            set
            {
                if (this._TaxClass3 != value)
                {
                    this.OnTaxClass3Changing(value);
                    this.SendPropertyChanging("TaxClass3");
                    this._TaxClass3 = value;
                    this.SendPropertyChanged("TaxClass3");
                    this.OnTaxClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass4 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_4", Storage = "_TaxClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass4
        {
            get
            {
                return this._TaxClass4;
            }
            set
            {
                if (this._TaxClass4 != value)
                {
                    this.OnTaxClass4Changing(value);
                    this.SendPropertyChanging("TaxClass4");
                    this._TaxClass4 = value;
                    this.SendPropertyChanged("TaxClass4");
                    this.OnTaxClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass5 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_5", Storage = "_TaxClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass5
        {
            get
            {
                return this._TaxClass5;
            }
            set
            {
                if (this._TaxClass5 != value)
                {
                    this.OnTaxClass5Changing(value);
                    this.SendPropertyChanging("TaxClass5");
                    this._TaxClass5 = value;
                    this.SendPropertyChanged("TaxClass5");
                    this.OnTaxClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferToBranchId in the schema.
        /// </summary>
        [Column(Name = @"transfer_to_branch_id", Storage = "_TransferToBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransferToBranchId
        {
            get
            {
                return this._TransferToBranchId;
            }
            set
            {
                if (this._TransferToBranchId != value)
                {
                    if (this._Branch_TransferToBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransferToBranchIdChanging(value);
                    this.SendPropertyChanging("TransferToBranchId");
                    this._TransferToBranchId = value;
                    this.SendPropertyChanged("TransferToBranchId");
                    this.OnTransferToBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferToWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"transfer_to_warehouse_id", Storage = "_TransferToWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TransferToWarehouseId
        {
            get
            {
                return this._TransferToWarehouseId;
            }
            set
            {
                if (this._TransferToWarehouseId != value)
                {
                    this.OnTransferToWarehouseIdChanging(value);
                    this.SendPropertyChanging("TransferToWarehouseId");
                    this._TransferToWarehouseId = value;
                    this.SendPropertyChanged("TransferToWarehouseId");
                    this.OnTransferToWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority1 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority1", Storage = "_TaxAuthority1", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority1
        {
            get
            {
                return this._TaxAuthority1;
            }
            set
            {
                if (this._TaxAuthority1 != value)
                {
                    this.OnTaxAuthority1Changing(value);
                    this.SendPropertyChanging("TaxAuthority1");
                    this._TaxAuthority1 = value;
                    this.SendPropertyChanged("TaxAuthority1");
                    this.OnTaxAuthority1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority2 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority2", Storage = "_TaxAuthority2", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority2
        {
            get
            {
                return this._TaxAuthority2;
            }
            set
            {
                if (this._TaxAuthority2 != value)
                {
                    this.OnTaxAuthority2Changing(value);
                    this.SendPropertyChanging("TaxAuthority2");
                    this._TaxAuthority2 = value;
                    this.SendPropertyChanged("TaxAuthority2");
                    this.OnTaxAuthority2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority3 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority3", Storage = "_TaxAuthority3", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority3
        {
            get
            {
                return this._TaxAuthority3;
            }
            set
            {
                if (this._TaxAuthority3 != value)
                {
                    this.OnTaxAuthority3Changing(value);
                    this.SendPropertyChanging("TaxAuthority3");
                    this._TaxAuthority3 = value;
                    this.SendPropertyChanged("TaxAuthority3");
                    this.OnTaxAuthority3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority4 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority4", Storage = "_TaxAuthority4", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority4
        {
            get
            {
                return this._TaxAuthority4;
            }
            set
            {
                if (this._TaxAuthority4 != value)
                {
                    this.OnTaxAuthority4Changing(value);
                    this.SendPropertyChanging("TaxAuthority4");
                    this._TaxAuthority4 = value;
                    this.SendPropertyChanged("TaxAuthority4");
                    this.OnTaxAuthority4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority5 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority5", Storage = "_TaxAuthority5", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority5
        {
            get
            {
                return this._TaxAuthority5;
            }
            set
            {
                if (this._TaxAuthority5 != value)
                {
                    this.OnTaxAuthority5Changing(value);
                    this.SendPropertyChanging("TaxAuthority5");
                    this._TaxAuthority5 = value;
                    this.SendPropertyChanged("TaxAuthority5");
                    this.OnTaxAuthority5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt1 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt1", Storage = "_TaxExempt1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt1
        {
            get
            {
                return this._TaxExempt1;
            }
            set
            {
                if (this._TaxExempt1 != value)
                {
                    this.OnTaxExempt1Changing(value);
                    this.SendPropertyChanging("TaxExempt1");
                    this._TaxExempt1 = value;
                    this.SendPropertyChanged("TaxExempt1");
                    this.OnTaxExempt1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt2 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt2", Storage = "_TaxExempt2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt2
        {
            get
            {
                return this._TaxExempt2;
            }
            set
            {
                if (this._TaxExempt2 != value)
                {
                    this.OnTaxExempt2Changing(value);
                    this.SendPropertyChanging("TaxExempt2");
                    this._TaxExempt2 = value;
                    this.SendPropertyChanged("TaxExempt2");
                    this.OnTaxExempt2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt3 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt3", Storage = "_TaxExempt3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt3
        {
            get
            {
                return this._TaxExempt3;
            }
            set
            {
                if (this._TaxExempt3 != value)
                {
                    this.OnTaxExempt3Changing(value);
                    this.SendPropertyChanging("TaxExempt3");
                    this._TaxExempt3 = value;
                    this.SendPropertyChanged("TaxExempt3");
                    this.OnTaxExempt3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt4 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt4", Storage = "_TaxExempt4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt4
        {
            get
            {
                return this._TaxExempt4;
            }
            set
            {
                if (this._TaxExempt4 != value)
                {
                    this.OnTaxExempt4Changing(value);
                    this.SendPropertyChanging("TaxExempt4");
                    this._TaxExempt4 = value;
                    this.SendPropertyChanged("TaxExempt4");
                    this.OnTaxExempt4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt5 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt5", Storage = "_TaxExempt5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt5
        {
            get
            {
                return this._TaxExempt5;
            }
            set
            {
                if (this._TaxExempt5 != value)
                {
                    this.OnTaxExempt5Changing(value);
                    this.SendPropertyChanging("TaxExempt5");
                    this._TaxExempt5 = value;
                    this.SendPropertyChanged("TaxExempt5");
                    this.OnTaxExempt5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentDeliveryTypeId in the schema.
        /// </summary>
        [Column(Name = @"document_delivery_type_id", Storage = "_DocumentDeliveryTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DocumentDeliveryTypeId
        {
            get
            {
                return this._DocumentDeliveryTypeId;
            }
            set
            {
                if (this._DocumentDeliveryTypeId != value)
                {
                    this.OnDocumentDeliveryTypeIdChanging(value);
                    this.SendPropertyChanging("DocumentDeliveryTypeId");
                    this._DocumentDeliveryTypeId = value;
                    this.SendPropertyChanged("DocumentDeliveryTypeId");
                    this.OnDocumentDeliveryTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactId in the schema.
        /// </summary>
        [Column(Name = @"contact_id", Storage = "_ContactId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    if (this._Contact.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging("ContactId");
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactTelephoneOverride in the schema.
        /// </summary>
        [Column(Name = @"contact_telephone_override", Storage = "_ContactTelephoneOverride", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string ContactTelephoneOverride
        {
            get
            {
                return this._ContactTelephoneOverride;
            }
            set
            {
                if (this._ContactTelephoneOverride != value)
                {
                    this.OnContactTelephoneOverrideChanging(value);
                    this.SendPropertyChanging("ContactTelephoneOverride");
                    this._ContactTelephoneOverride = value;
                    this.SendPropertyChanged("ContactTelephoneOverride");
                    this.OnContactTelephoneOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactMobileOverride in the schema.
        /// </summary>
        [Column(Name = @"contact_mobile_override", Storage = "_ContactMobileOverride", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string ContactMobileOverride
        {
            get
            {
                return this._ContactMobileOverride;
            }
            set
            {
                if (this._ContactMobileOverride != value)
                {
                    this.OnContactMobileOverrideChanging(value);
                    this.SendPropertyChanging("ContactMobileOverride");
                    this._ContactMobileOverride = value;
                    this.SendPropertyChanged("ContactMobileOverride");
                    this.OnContactMobileOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactFaxOverride in the schema.
        /// </summary>
        [Column(Name = @"contact_fax_override", Storage = "_ContactFaxOverride", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string ContactFaxOverride
        {
            get
            {
                return this._ContactFaxOverride;
            }
            set
            {
                if (this._ContactFaxOverride != value)
                {
                    this.OnContactFaxOverrideChanging(value);
                    this.SendPropertyChanging("ContactFaxOverride");
                    this._ContactFaxOverride = value;
                    this.SendPropertyChanged("ContactFaxOverride");
                    this.OnContactFaxOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactEmailOverride in the schema.
        /// </summary>
        [Column(Name = @"contact_email_override", Storage = "_ContactEmailOverride", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string ContactEmailOverride
        {
            get
            {
                return this._ContactEmailOverride;
            }
            set
            {
                if (this._ContactEmailOverride != value)
                {
                    this.OnContactEmailOverrideChanging(value);
                    this.SendPropertyChanging("ContactEmailOverride");
                    this._ContactEmailOverride = value;
                    this.SendPropertyChanged("ContactEmailOverride");
                    this.OnContactEmailOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactWebAddressOverride in the schema.
        /// </summary>
        [Column(Name = @"contact_web_address_override", Storage = "_ContactWebAddressOverride", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string ContactWebAddressOverride
        {
            get
            {
                return this._ContactWebAddressOverride;
            }
            set
            {
                if (this._ContactWebAddressOverride != value)
                {
                    this.OnContactWebAddressOverrideChanging(value);
                    this.SendPropertyChanging("ContactWebAddressOverride");
                    this._ContactWebAddressOverride = value;
                    this.SendPropertyChanged("ContactWebAddressOverride");
                    this.OnContactWebAddressOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuttingHeaderId in the schema.
        /// </summary>
        [Column(Name = @"cutting_header_id", Storage = "_CuttingHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuttingHeaderId
        {
            get
            {
                return this._CuttingHeaderId;
            }
            set
            {
                if (this._CuttingHeaderId != value)
                {
                    this.OnCuttingHeaderIdChanging(value);
                    this.SendPropertyChanging("CuttingHeaderId");
                    this._CuttingHeaderId = value;
                    this.SendPropertyChanged("CuttingHeaderId");
                    this.OnCuttingHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FooterInternalText in the schema.
        /// </summary>
        [Column(Name = @"footer_internal_text", Storage = "_FooterInternalText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FooterInternalText
        {
            get
            {
                return this._FooterInternalText;
            }
            set
            {
                if (this._FooterInternalText != value)
                {
                    this.OnFooterInternalTextChanging(value);
                    this.SendPropertyChanging("FooterInternalText");
                    this._FooterInternalText = value;
                    this.SendPropertyChanged("FooterInternalText");
                    this.OnFooterInternalTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FooterExternalText in the schema.
        /// </summary>
        [Column(Name = @"footer_external_text", Storage = "_FooterExternalText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FooterExternalText
        {
            get
            {
                return this._FooterExternalText;
            }
            set
            {
                if (this._FooterExternalText != value)
                {
                    this.OnFooterExternalTextChanging(value);
                    this.SendPropertyChanging("FooterExternalText");
                    this._FooterExternalText = value;
                    this.SendPropertyChanged("FooterExternalText");
                    this.OnFooterExternalTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlanketHeaderId in the schema.
        /// </summary>
        [Column(Name = @"blanket_header_id", Storage = "_BlanketHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BlanketHeaderId
        {
            get
            {
                return this._BlanketHeaderId;
            }
            set
            {
                if (this._BlanketHeaderId != value)
                {
                    if (this._SalesHeader_BlanketHeaderId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBlanketHeaderIdChanging(value);
                    this.SendPropertyChanging("BlanketHeaderId");
                    this._BlanketHeaderId = value;
                    this.SendPropertyChanged("BlanketHeaderId");
                    this.OnBlanketHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportCharged in the schema.
        /// </summary>
        [Column(Name = @"transport_charged", Storage = "_TransportCharged", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool TransportCharged
        {
            get
            {
                return this._TransportCharged;
            }
            set
            {
                if (this._TransportCharged != value)
                {
                    this.OnTransportChargedChanging(value);
                    this.SendPropertyChanging("TransportCharged");
                    this._TransportCharged = value;
                    this.SendPropertyChanged("TransportCharged");
                    this.OnTransportChargedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixDate in the schema.
        /// </summary>
        [Column(Name = @"fix_date", Storage = "_FixDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? FixDate
        {
            get
            {
                return this._FixDate;
            }
            set
            {
                if (this._FixDate != value)
                {
                    this.OnFixDateChanging(value);
                    this.SendPropertyChanging("FixDate");
                    this._FixDate = value;
                    this.SendPropertyChanged("FixDate");
                    this.OnFixDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Name = @"expiry_date", Storage = "_ExpiryDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging("ExpiryDate");
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NoFixedDate in the schema.
        /// </summary>
        [Column(Name = @"no_fixed_date", Storage = "_NoFixedDate", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? NoFixedDate
        {
            get
            {
                return this._NoFixedDate;
            }
            set
            {
                if (this._NoFixedDate != value)
                {
                    this.OnNoFixedDateChanging(value);
                    this.SendPropertyChanging("NoFixedDate");
                    this._NoFixedDate = value;
                    this.SendPropertyChanged("NoFixedDate");
                    this.OnNoFixedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedDeliveryDate in the schema.
        /// </summary>
        [Column(Name = @"credited_delivery_date", Storage = "_CreditedDeliveryDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CreditedDeliveryDate
        {
            get
            {
                return this._CreditedDeliveryDate;
            }
            set
            {
                if (this._CreditedDeliveryDate != value)
                {
                    this.OnCreditedDeliveryDateChanging(value);
                    this.SendPropertyChanging("CreditedDeliveryDate");
                    this._CreditedDeliveryDate = value;
                    this.SendPropertyChanged("CreditedDeliveryDate");
                    this.OnCreditedDeliveryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditHeldAtDespatch in the schema.
        /// </summary>
        [Column(Name = @"credit_held_at_despatch", Storage = "_CreditHeldAtDespatch", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool CreditHeldAtDespatch
        {
            get
            {
                return this._CreditHeldAtDespatch;
            }
            set
            {
                if (this._CreditHeldAtDespatch != value)
                {
                    this.OnCreditHeldAtDespatchChanging(value);
                    this.SendPropertyChanging("CreditHeldAtDespatch");
                    this._CreditHeldAtDespatch = value;
                    this.SendPropertyChanged("CreditHeldAtDespatch");
                    this.OnCreditHeldAtDespatchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConsignmentOrder in the schema.
        /// </summary>
        [Column(Name = @"consignment_order", Storage = "_ConsignmentOrder", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool ConsignmentOrder
        {
            get
            {
                return this._ConsignmentOrder;
            }
            set
            {
                if (this._ConsignmentOrder != value)
                {
                    this.OnConsignmentOrderChanging(value);
                    this.SendPropertyChanging("ConsignmentOrder");
                    this._ConsignmentOrder = value;
                    this.SendPropertyChanged("ConsignmentOrder");
                    this.OnConsignmentOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportBatchNumber in the schema.
        /// </summary>
        [Column(Name = @"import_batch_number", Storage = "_ImportBatchNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ImportBatchNumber
        {
            get
            {
                return this._ImportBatchNumber;
            }
            set
            {
                if (this._ImportBatchNumber != value)
                {
                    this.OnImportBatchNumberChanging(value);
                    this.SendPropertyChanging("ImportBatchNumber");
                    this._ImportBatchNumber = value;
                    this.SendPropertyChanged("ImportBatchNumber");
                    this.OnImportBatchNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportSource in the schema.
        /// </summary>
        [Column(Name = @"import_source", Storage = "_ImportSource", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ImportSource
        {
            get
            {
                return this._ImportSource;
            }
            set
            {
                if (this._ImportSource != value)
                {
                    this.OnImportSourceChanging(value);
                    this.SendPropertyChanging("ImportSource");
                    this._ImportSource = value;
                    this.SendPropertyChanged("ImportSource");
                    this.OnImportSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportNumber in the schema.
        /// </summary>
        [Column(Name = @"import_number", Storage = "_ImportNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ImportNumber
        {
            get
            {
                return this._ImportNumber;
            }
            set
            {
                if (this._ImportNumber != value)
                {
                    this.OnImportNumberChanging(value);
                    this.SendPropertyChanging("ImportNumber");
                    this._ImportNumber = value;
                    this.SendPropertyChanged("ImportNumber");
                    this.OnImportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostReasonValue in the schema.
        /// </summary>
        [Column(Name = @"lost_reason_value", Storage = "_LostReasonValue", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? LostReasonValue
        {
            get
            {
                return this._LostReasonValue;
            }
            set
            {
                if (this._LostReasonValue != value)
                {
                    this.OnLostReasonValueChanging(value);
                    this.SendPropertyChanging("LostReasonValue");
                    this._LostReasonValue = value;
                    this.SendPropertyChanged("LostReasonValue");
                    this.OnLostReasonValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    if (this._SalesGroup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"local_exchange_rate", Storage = "_LocalExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? LocalExchangeRate
        {
            get
            {
                return this._LocalExchangeRate;
            }
            set
            {
                if (this._LocalExchangeRate != value)
                {
                    this.OnLocalExchangeRateChanging(value);
                    this.SendPropertyChanging("LocalExchangeRate");
                    this._LocalExchangeRate = value;
                    this.SendPropertyChanged("LocalExchangeRate");
                    this.OnLocalExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommercialTermsId in the schema.
        /// </summary>
        [Column(Name = @"commercial_terms_id", Storage = "_CommercialTermsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CommercialTermsId
        {
            get
            {
                return this._CommercialTermsId;
            }
            set
            {
                if (this._CommercialTermsId != value)
                {
                    this.OnCommercialTermsIdChanging(value);
                    this.SendPropertyChanging("CommercialTermsId");
                    this._CommercialTermsId = value;
                    this.SendPropertyChanged("CommercialTermsId");
                    this.OnCommercialTermsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderClassificationId in the schema.
        /// </summary>
        [Column(Name = @"order_classification_id", Storage = "_OrderClassificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OrderClassificationId
        {
            get
            {
                return this._OrderClassificationId;
            }
            set
            {
                if (this._OrderClassificationId != value)
                {
                    if (this._OrderClassification.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderClassificationIdChanging(value);
                    this.SendPropertyChanging("OrderClassificationId");
                    this._OrderClassificationId = value;
                    this.SendPropertyChanged("OrderClassificationId");
                    this.OnOrderClassificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceBaseCurrencyExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"invoice_base_currency_exchange_rate", Storage = "_InvoiceBaseCurrencyExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InvoiceBaseCurrencyExchangeRate
        {
            get
            {
                return this._InvoiceBaseCurrencyExchangeRate;
            }
            set
            {
                if (this._InvoiceBaseCurrencyExchangeRate != value)
                {
                    this.OnInvoiceBaseCurrencyExchangeRateChanging(value);
                    this.SendPropertyChanging("InvoiceBaseCurrencyExchangeRate");
                    this._InvoiceBaseCurrencyExchangeRate = value;
                    this.SendPropertyChanged("InvoiceBaseCurrencyExchangeRate");
                    this.OnInvoiceBaseCurrencyExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkOrderPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"work_order_printed_date", Storage = "_WorkOrderPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? WorkOrderPrintedDate
        {
            get
            {
                return this._WorkOrderPrintedDate;
            }
            set
            {
                if (this._WorkOrderPrintedDate != value)
                {
                    this.OnWorkOrderPrintedDateChanging(value);
                    this.SendPropertyChanging("WorkOrderPrintedDate");
                    this._WorkOrderPrintedDate = value;
                    this.SendPropertyChanged("WorkOrderPrintedDate");
                    this.OnWorkOrderPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesOrderPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"sales_order_printed_date", Storage = "_SalesOrderPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? SalesOrderPrintedDate
        {
            get
            {
                return this._SalesOrderPrintedDate;
            }
            set
            {
                if (this._SalesOrderPrintedDate != value)
                {
                    this.OnSalesOrderPrintedDateChanging(value);
                    this.SendPropertyChanging("SalesOrderPrintedDate");
                    this._SalesOrderPrintedDate = value;
                    this.SendPropertyChanged("SalesOrderPrintedDate");
                    this.OnSalesOrderPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SignOffPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"sign_off_printed_date", Storage = "_SignOffPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? SignOffPrintedDate
        {
            get
            {
                return this._SignOffPrintedDate;
            }
            set
            {
                if (this._SignOffPrintedDate != value)
                {
                    this.OnSignOffPrintedDateChanging(value);
                    this.SendPropertyChanging("SignOffPrintedDate");
                    this._SignOffPrintedDate = value;
                    this.SendPropertyChanged("SignOffPrintedDate");
                    this.OnSignOffPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"transport_printed_date", Storage = "_TransportPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? TransportPrintedDate
        {
            get
            {
                return this._TransportPrintedDate;
            }
            set
            {
                if (this._TransportPrintedDate != value)
                {
                    this.OnTransportPrintedDateChanging(value);
                    this.SendPropertyChanging("TransportPrintedDate");
                    this._TransportPrintedDate = value;
                    this.SendPropertyChanged("TransportPrintedDate");
                    this.OnTransportPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeighbridgePrintedDate in the schema.
        /// </summary>
        [Column(Name = @"weighbridge_printed_date", Storage = "_WeighbridgePrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? WeighbridgePrintedDate
        {
            get
            {
                return this._WeighbridgePrintedDate;
            }
            set
            {
                if (this._WeighbridgePrintedDate != value)
                {
                    this.OnWeighbridgePrintedDateChanging(value);
                    this.SendPropertyChanging("WeighbridgePrintedDate");
                    this._WeighbridgePrintedDate = value;
                    this.SendPropertyChanged("WeighbridgePrintedDate");
                    this.OnWeighbridgePrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for YardOrderPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"yard_order_printed_date", Storage = "_YardOrderPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? YardOrderPrintedDate
        {
            get
            {
                return this._YardOrderPrintedDate;
            }
            set
            {
                if (this._YardOrderPrintedDate != value)
                {
                    this.OnYardOrderPrintedDateChanging(value);
                    this.SendPropertyChanging("YardOrderPrintedDate");
                    this._YardOrderPrintedDate = value;
                    this.SendPropertyChanged("YardOrderPrintedDate");
                    this.OnYardOrderPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TravelCardPrintedDate in the schema.
        /// </summary>
        [Column(Name = @"travel_card_printed_date", Storage = "_TravelCardPrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? TravelCardPrintedDate
        {
            get
            {
                return this._TravelCardPrintedDate;
            }
            set
            {
                if (this._TravelCardPrintedDate != value)
                {
                    this.OnTravelCardPrintedDateChanging(value);
                    this.SendPropertyChanging("TravelCardPrintedDate");
                    this._TravelCardPrintedDate = value;
                    this.SendPropertyChanged("TravelCardPrintedDate");
                    this.OnTravelCardPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CounterSale in the schema.
        /// </summary>
        [Column(Name = @"counter_sales", Storage = "_CounterSale", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? CounterSale
        {
            get
            {
                return this._CounterSale;
            }
            set
            {
                if (this._CounterSale != value)
                {
                    this.OnCounterSaleChanging(value);
                    this.SendPropertyChanging("CounterSale");
                    this._CounterSale = value;
                    this.SendPropertyChanged("CounterSale");
                    this.OnCounterSaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceToPay in the schema.
        /// </summary>
        [Column(Name = @"balance_to_pay", Storage = "_BalanceToPay", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? BalanceToPay
        {
            get
            {
                return this._BalanceToPay;
            }
            set
            {
                if (this._BalanceToPay != value)
                {
                    this.OnBalanceToPayChanging(value);
                    this.SendPropertyChanging("BalanceToPay");
                    this._BalanceToPay = value;
                    this.SendPropertyChanged("BalanceToPay");
                    this.OnBalanceToPayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportUserName in the schema.
        /// </summary>
        [Column(Name = @"import_user_name", Storage = "_ImportUserName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ImportUserName
        {
            get
            {
                return this._ImportUserName;
            }
            set
            {
                if (this._ImportUserName != value)
                {
                    this.OnImportUserNameChanging(value);
                    this.SendPropertyChanging("ImportUserName");
                    this._ImportUserName = value;
                    this.SendPropertyChanged("ImportUserName");
                    this.OnImportUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesExportDetailsId in the schema.
        /// </summary>
        [Column(Name = @"sales_export_details_id", Storage = "_SalesExportDetailsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalesExportDetailsId
        {
            get
            {
                return this._SalesExportDetailsId;
            }
            set
            {
                if (this._SalesExportDetailsId != value)
                {
                    this.OnSalesExportDetailsIdChanging(value);
                    this.SendPropertyChanging("SalesExportDetailsId");
                    this._SalesExportDetailsId = value;
                    this.SendPropertyChanged("SalesExportDetailsId");
                    this.OnSalesExportDetailsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountDay in the schema.
        /// </summary>
        [Column(Name = @"discount_days", Storage = "_DiscountDay", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DiscountDay
        {
            get
            {
                return this._DiscountDay;
            }
            set
            {
                if (this._DiscountDay != value)
                {
                    this.OnDiscountDayChanging(value);
                    this.SendPropertyChanging("DiscountDay");
                    this._DiscountDay = value;
                    this.SendPropertyChanged("DiscountDay");
                    this.OnDiscountDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountDate in the schema.
        /// </summary>
        [Column(Name = @"discount_date", Storage = "_DiscountDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DiscountDate
        {
            get
            {
                return this._DiscountDate;
            }
            set
            {
                if (this._DiscountDate != value)
                {
                    this.OnDiscountDateChanging(value);
                    this.SendPropertyChanging("DiscountDate");
                    this._DiscountDate = value;
                    this.SendPropertyChanged("DiscountDate");
                    this.OnDiscountDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPercentage in the schema.
        /// </summary>
        [Column(Name = @"discount_percentage", Storage = "_DiscountPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? DiscountPercentage
        {
            get
            {
                return this._DiscountPercentage;
            }
            set
            {
                if (this._DiscountPercentage != value)
                {
                    this.OnDiscountPercentageChanging(value);
                    this.SendPropertyChanging("DiscountPercentage");
                    this._DiscountPercentage = value;
                    this.SendPropertyChanged("DiscountPercentage");
                    this.OnDiscountPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractJobId in the schema.
        /// </summary>
        [Column(Name = @"contract_job_id", Storage = "_ContractJobId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ContractJobId
        {
            get
            {
                return this._ContractJobId;
            }
            set
            {
                if (this._ContractJobId != value)
                {
                    this.OnContractJobIdChanging(value);
                    this.SendPropertyChanging("ContractJobId");
                    this._ContractJobId = value;
                    this.SendPropertyChanged("ContractJobId");
                    this.OnContractJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportChargeTax in the schema.
        /// </summary>
        [Column(Name = @"transport_charge_tax", Storage = "_TransportChargeTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TransportChargeTax
        {
            get
            {
                return this._TransportChargeTax;
            }
            set
            {
                if (this._TransportChargeTax != value)
                {
                    this.OnTransportChargeTaxChanging(value);
                    this.SendPropertyChanging("TransportChargeTax");
                    this._TransportChargeTax = value;
                    this.SendPropertyChanged("TransportChargeTax");
                    this.OnTransportChargeTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProjectTypeId in the schema.
        /// </summary>
        [Column(Name = @"project_type_id", Storage = "_ProjectTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ProjectTypeId
        {
            get
            {
                return this._ProjectTypeId;
            }
            set
            {
                if (this._ProjectTypeId != value)
                {
                    this.OnProjectTypeIdChanging(value);
                    this.SendPropertyChanging("ProjectTypeId");
                    this._ProjectTypeId = value;
                    this.SendPropertyChanged("ProjectTypeId");
                    this.OnProjectTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FinalDestinationId in the schema.
        /// </summary>
        [Column(Name = @"final_destination_id", Storage = "_FinalDestinationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? FinalDestinationId
        {
            get
            {
                return this._FinalDestinationId;
            }
            set
            {
                if (this._FinalDestinationId != value)
                {
                    if (this._CountryCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFinalDestinationIdChanging(value);
                    this.SendPropertyChanging("FinalDestinationId");
                    this._FinalDestinationId = value;
                    this.SendPropertyChanged("FinalDestinationId");
                    this.OnFinalDestinationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuoteVersionId in the schema.
        /// </summary>
        [Column(Name = @"quote_version_id", Storage = "_QuoteVersionId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? QuoteVersionId
        {
            get
            {
                return this._QuoteVersionId;
            }
            set
            {
                if (this._QuoteVersionId != value)
                {
                    this.OnQuoteVersionIdChanging(value);
                    this.SendPropertyChanging("QuoteVersionId");
                    this._QuoteVersionId = value;
                    this.SendPropertyChanged("QuoteVersionId");
                    this.OnQuoteVersionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DuplicateReasonId in the schema.
        /// </summary>
        [Column(Name = @"duplicate_reason_id", Storage = "_DuplicateReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DuplicateReasonId
        {
            get
            {
                return this._DuplicateReasonId;
            }
            set
            {
                if (this._DuplicateReasonId != value)
                {
                    this.OnDuplicateReasonIdChanging(value);
                    this.SendPropertyChanging("DuplicateReasonId");
                    this._DuplicateReasonId = value;
                    this.SendPropertyChanged("DuplicateReasonId");
                    this.OnDuplicateReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuotationTypeId in the schema.
        /// </summary>
        [Column(Name = @"quotation_type_id", Storage = "_QuotationTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? QuotationTypeId
        {
            get
            {
                return this._QuotationTypeId;
            }
            set
            {
                if (this._QuotationTypeId != value)
                {
                    this.OnQuotationTypeIdChanging(value);
                    this.SendPropertyChanging("QuotationTypeId");
                    this._QuotationTypeId = value;
                    this.SendPropertyChanged("QuotationTypeId");
                    this.OnQuotationTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesItem", Storage="_SalesItem", ThisKey="Id", OtherKey="SalesHeaderId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem
        {
            get
            {
                return this._SalesItem;
            }
            set
            {
                this._SalesItem.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotal_BalanceTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader", Storage="_SalesTotal_BalanceTotalId", ThisKey="BalanceTotalId", OtherKey="Id", IsForeignKey=true)]
        public SalesTotal SalesTotal_BalanceTotalId
        {
            get
            {
                return this._SalesTotal_BalanceTotalId.Entity;
            }
            set
            {
                SalesTotal previousValue = this._SalesTotal_BalanceTotalId.Entity;
                if ((previousValue != value) || (this._SalesTotal_BalanceTotalId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesTotal_BalanceTotalId");
                    if (previousValue != null)
                    {
                        this._SalesTotal_BalanceTotalId.Entity = null;
                        previousValue.SalesHeader_BalanceTotalId.Remove(this);
                    }
                    this._SalesTotal_BalanceTotalId.Entity = value;
                    if (value != null)
                    {
                        this._BalanceTotalId = value.Id;
                        value.SalesHeader_BalanceTotalId.Add(this);
                    }
                    else
                    {
                        this._BalanceTotalId = default(int?);
                    }
                    this.SendPropertyChanged("SalesTotal_BalanceTotalId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_BlanketHeaderId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader", Storage="_SalesHeader_BlanketHeaderId1", ThisKey="Id", OtherKey="BlanketHeaderId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_BlanketHeaderId1
        {
            get
            {
                return this._SalesHeader_BlanketHeaderId1;
            }
            set
            {
                this._SalesHeader_BlanketHeaderId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_BlanketHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader", Storage="_SalesHeader_BlanketHeaderId", ThisKey="BlanketHeaderId", OtherKey="Id", IsForeignKey=true)]
        public SalesHeader SalesHeader_BlanketHeaderId
        {
            get
            {
                return this._SalesHeader_BlanketHeaderId.Entity;
            }
            set
            {
                SalesHeader previousValue = this._SalesHeader_BlanketHeaderId.Entity;
                if ((previousValue != value) || (this._SalesHeader_BlanketHeaderId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesHeader_BlanketHeaderId");
                    if (previousValue != null)
                    {
                        this._SalesHeader_BlanketHeaderId.Entity = null;
                        previousValue.SalesHeader_BlanketHeaderId1.Remove(this);
                    }
                    this._SalesHeader_BlanketHeaderId.Entity = value;
                    if (value != null)
                    {
                        this._BlanketHeaderId = value.Id;
                        value.SalesHeader_BlanketHeaderId1.Add(this);
                    }
                    else
                    {
                        this._BlanketHeaderId = default(int?);
                    }
                    this.SendPropertyChanged("SalesHeader_BlanketHeaderId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_BranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader", Storage="_Branch_BranchId", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_BranchId
        {
            get
            {
                return this._Branch_BranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_BranchId.Entity;
                if ((previousValue != value) || (this._Branch_BranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_BranchId");
                    if (previousValue != null)
                    {
                        this._Branch_BranchId.Entity = null;
                        previousValue.SalesHeader_BranchId.Remove(this);
                    }
                    this._Branch_BranchId.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.SalesHeader_BranchId.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_BranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CarrierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_SalesHeader", Storage="_Company_CarrierId", ThisKey="CarrierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_CarrierId
        {
            get
            {
                return this._Company_CarrierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_CarrierId.Entity;
                if ((previousValue != value) || (this._Company_CarrierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_CarrierId");
                    if (previousValue != null)
                    {
                        this._Company_CarrierId.Entity = null;
                        previousValue.SalesHeader_CarrierId.Remove(this);
                    }
                    this._Company_CarrierId.Entity = value;
                    if (value != null)
                    {
                        this._CarrierId = value.Id;
                        value.SalesHeader_CarrierId.Add(this);
                    }
                    else
                    {
                        this._CarrierId = default(int?);
                    }
                    this.SendPropertyChanged("Company_CarrierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificationRequirement in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CertificationRequirement_SalesHeader", Storage="_CertificationRequirement", ThisKey="CertificationsId", OtherKey="Id", IsForeignKey=true)]
        public CertificationRequirement CertificationRequirement
        {
            get
            {
                return this._CertificationRequirement.Entity;
            }
            set
            {
                CertificationRequirement previousValue = this._CertificationRequirement.Entity;
                if ((previousValue != value) || (this._CertificationRequirement.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CertificationRequirement");
                    if (previousValue != null)
                    {
                        this._CertificationRequirement.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._CertificationRequirement.Entity = value;
                    if (value != null)
                    {
                        this._CertificationsId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._CertificationsId = default(int?);
                    }
                    this.SendPropertyChanged("CertificationRequirement");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contact_SalesHeader", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
        public Contact Contact
        {
            get
            {
                return this._Contact.Entity;
            }
            set
            {
                Contact previousValue = this._Contact.Entity;
                if ((previousValue != value) || (this._Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Contact");
                    if (previousValue != null)
                    {
                        this._Contact.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._Contact.Entity = value;
                    if (value != null)
                    {
                        this._ContactId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._ContactId = default(int?);
                    }
                    this.SendPropertyChanged("Contact");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_CreditedDespatchBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader1", Storage="_Branch_CreditedDespatchBranchId", ThisKey="CreditedDespatchBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_CreditedDespatchBranchId
        {
            get
            {
                return this._Branch_CreditedDespatchBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_CreditedDespatchBranchId.Entity;
                if ((previousValue != value) || (this._Branch_CreditedDespatchBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_CreditedDespatchBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_CreditedDespatchBranchId.Entity = null;
                        previousValue.SalesHeader_CreditedDespatchBranchId.Remove(this);
                    }
                    this._Branch_CreditedDespatchBranchId.Entity = value;
                    if (value != null)
                    {
                        this._CreditedDespatchBranchId = value.Id;
                        value.SalesHeader_CreditedDespatchBranchId.Add(this);
                    }
                    else
                    {
                        this._CreditedDespatchBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_CreditedDespatchBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_CreditedInvoiceBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader2", Storage="_Branch_CreditedInvoiceBranchId", ThisKey="CreditedInvoiceBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_CreditedInvoiceBranchId
        {
            get
            {
                return this._Branch_CreditedInvoiceBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_CreditedInvoiceBranchId.Entity;
                if ((previousValue != value) || (this._Branch_CreditedInvoiceBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_CreditedInvoiceBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_CreditedInvoiceBranchId.Entity = null;
                        previousValue.SalesHeader_CreditedInvoiceBranchId.Remove(this);
                    }
                    this._Branch_CreditedInvoiceBranchId.Entity = value;
                    if (value != null)
                    {
                        this._CreditedInvoiceBranchId = value.Id;
                        value.SalesHeader_CreditedInvoiceBranchId.Add(this);
                    }
                    else
                    {
                        this._CreditedInvoiceBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_CreditedInvoiceBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_CreditedOrderBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader3", Storage="_Branch_CreditedOrderBranchId", ThisKey="CreditedOrderBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_CreditedOrderBranchId
        {
            get
            {
                return this._Branch_CreditedOrderBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_CreditedOrderBranchId.Entity;
                if ((previousValue != value) || (this._Branch_CreditedOrderBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_CreditedOrderBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_CreditedOrderBranchId.Entity = null;
                        previousValue.SalesHeader_CreditedOrderBranchId.Remove(this);
                    }
                    this._Branch_CreditedOrderBranchId.Entity = value;
                    if (value != null)
                    {
                        this._CreditedOrderBranchId = value.Id;
                        value.SalesHeader_CreditedOrderBranchId.Add(this);
                    }
                    else
                    {
                        this._CreditedOrderBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_CreditedOrderBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CurrencyCode_SalesHeader", Storage="_CurrencyCode", ThisKey="CurrencyId", OtherKey="Id", IsForeignKey=true)]
        public CurrencyCode CurrencyCode
        {
            get
            {
                return this._CurrencyCode.Entity;
            }
            set
            {
                CurrencyCode previousValue = this._CurrencyCode.Entity;
                if ((previousValue != value) || (this._CurrencyCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CurrencyCode");
                    if (previousValue != null)
                    {
                        this._CurrencyCode.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._CurrencyCode.Entity = value;
                    if (value != null)
                    {
                        this._CurrencyId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._CurrencyId = default(int?);
                    }
                    this.SendPropertyChanged("CurrencyCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_CustomerAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_SalesHeader", Storage="_Address_CustomerAddressId", ThisKey="CustomerAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_CustomerAddressId
        {
            get
            {
                return this._Address_CustomerAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_CustomerAddressId.Entity;
                if ((previousValue != value) || (this._Address_CustomerAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_CustomerAddressId");
                    if (previousValue != null)
                    {
                        this._Address_CustomerAddressId.Entity = null;
                        previousValue.SalesHeader_CustomerAddressId.Remove(this);
                    }
                    this._Address_CustomerAddressId.Entity = value;
                    if (value != null)
                    {
                        this._CustomerAddressId = value.Id;
                        value.SalesHeader_CustomerAddressId.Add(this);
                    }
                    else
                    {
                        this._CustomerAddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address_CustomerAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CustomerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_SalesHeader1", Storage="_Company_CustomerId", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_CustomerId
        {
            get
            {
                return this._Company_CustomerId.Entity;
            }
            set
            {
                Company previousValue = this._Company_CustomerId.Entity;
                if ((previousValue != value) || (this._Company_CustomerId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_CustomerId");
                    if (previousValue != null)
                    {
                        this._Company_CustomerId.Entity = null;
                        previousValue.SalesHeader_CustomerId.Remove(this);
                    }
                    this._Company_CustomerId.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.SalesHeader_CustomerId.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(int?);
                    }
                    this.SendPropertyChanged("Company_CustomerId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_DeliverToAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_SalesHeader1", Storage="_Address_DeliverToAddressId", ThisKey="DeliverToAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_DeliverToAddressId
        {
            get
            {
                return this._Address_DeliverToAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_DeliverToAddressId.Entity;
                if ((previousValue != value) || (this._Address_DeliverToAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_DeliverToAddressId");
                    if (previousValue != null)
                    {
                        this._Address_DeliverToAddressId.Entity = null;
                        previousValue.SalesHeader_DeliverToAddressId.Remove(this);
                    }
                    this._Address_DeliverToAddressId.Entity = value;
                    if (value != null)
                    {
                        this._DeliverToAddressId = value.Id;
                        value.SalesHeader_DeliverToAddressId.Add(this);
                    }
                    else
                    {
                        this._DeliverToAddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address_DeliverToAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanySubAddress_SalesHeader", Storage="_CompanySubAddress", ThisKey="DeliverToId", OtherKey="Id", IsForeignKey=true)]
        public CompanySubAddress CompanySubAddress
        {
            get
            {
                return this._CompanySubAddress.Entity;
            }
            set
            {
                CompanySubAddress previousValue = this._CompanySubAddress.Entity;
                if ((previousValue != value) || (this._CompanySubAddress.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanySubAddress");
                    if (previousValue != null)
                    {
                        this._CompanySubAddress.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._CompanySubAddress.Entity = value;
                    if (value != null)
                    {
                        this._DeliverToId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._DeliverToId = default(int?);
                    }
                    this.SendPropertyChanged("CompanySubAddress");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_DeliveryAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_SalesHeader2", Storage="_Address_DeliveryAddressId", ThisKey="DeliveryAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_DeliveryAddressId
        {
            get
            {
                return this._Address_DeliveryAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_DeliveryAddressId.Entity;
                if ((previousValue != value) || (this._Address_DeliveryAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_DeliveryAddressId");
                    if (previousValue != null)
                    {
                        this._Address_DeliveryAddressId.Entity = null;
                        previousValue.SalesHeader_DeliveryAddressId.Remove(this);
                    }
                    this._Address_DeliveryAddressId.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryAddressId = value.Id;
                        value.SalesHeader_DeliveryAddressId.Add(this);
                    }
                    else
                    {
                        this._DeliveryAddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address_DeliveryAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_DeliveryBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader4", Storage="_Branch_DeliveryBranchId", ThisKey="DeliveryBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_DeliveryBranchId
        {
            get
            {
                return this._Branch_DeliveryBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_DeliveryBranchId.Entity;
                if ((previousValue != value) || (this._Branch_DeliveryBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_DeliveryBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_DeliveryBranchId.Entity = null;
                        previousValue.SalesHeader_DeliveryBranchId.Remove(this);
                    }
                    this._Branch_DeliveryBranchId.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryBranchId = value.Id;
                        value.SalesHeader_DeliveryBranchId.Add(this);
                    }
                    else
                    {
                        this._DeliveryBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_DeliveryBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_EnquiryId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader1", Storage="_SalesHeader_EnquiryId1", ThisKey="Id", OtherKey="EnquiryId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_EnquiryId1
        {
            get
            {
                return this._SalesHeader_EnquiryId1;
            }
            set
            {
                this._SalesHeader_EnquiryId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_EnquiryId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader1", Storage="_SalesHeader_EnquiryId", ThisKey="EnquiryId", OtherKey="Id", IsForeignKey=true)]
        public SalesHeader SalesHeader_EnquiryId
        {
            get
            {
                return this._SalesHeader_EnquiryId.Entity;
            }
            set
            {
                SalesHeader previousValue = this._SalesHeader_EnquiryId.Entity;
                if ((previousValue != value) || (this._SalesHeader_EnquiryId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesHeader_EnquiryId");
                    if (previousValue != null)
                    {
                        this._SalesHeader_EnquiryId.Entity = null;
                        previousValue.SalesHeader_EnquiryId1.Remove(this);
                    }
                    this._SalesHeader_EnquiryId.Entity = value;
                    if (value != null)
                    {
                        this._EnquiryId = value.Id;
                        value.SalesHeader_EnquiryId1.Add(this);
                    }
                    else
                    {
                        this._EnquiryId = default(int?);
                    }
                    this.SendPropertyChanged("SalesHeader_EnquiryId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_OrderId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader2", Storage="_SalesHeader_OrderId1", ThisKey="Id", OtherKey="OrderId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_OrderId1
        {
            get
            {
                return this._SalesHeader_OrderId1;
            }
            set
            {
                this._SalesHeader_OrderId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_OrderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesHeader2", Storage="_SalesHeader_OrderId", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
        public SalesHeader SalesHeader_OrderId
        {
            get
            {
                return this._SalesHeader_OrderId.Entity;
            }
            set
            {
                SalesHeader previousValue = this._SalesHeader_OrderId.Entity;
                if ((previousValue != value) || (this._SalesHeader_OrderId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesHeader_OrderId");
                    if (previousValue != null)
                    {
                        this._SalesHeader_OrderId.Entity = null;
                        previousValue.SalesHeader_OrderId1.Remove(this);
                    }
                    this._SalesHeader_OrderId.Entity = value;
                    if (value != null)
                    {
                        this._OrderId = value.Id;
                        value.SalesHeader_OrderId1.Add(this);
                    }
                    else
                    {
                        this._OrderId = default(int?);
                    }
                    this.SendPropertyChanged("SalesHeader_OrderId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotal_SalesEntryTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader1", Storage="_SalesTotal_SalesEntryTotalId", ThisKey="SalesEntryTotalId", OtherKey="Id", IsForeignKey=true)]
        public SalesTotal SalesTotal_SalesEntryTotalId
        {
            get
            {
                return this._SalesTotal_SalesEntryTotalId.Entity;
            }
            set
            {
                SalesTotal previousValue = this._SalesTotal_SalesEntryTotalId.Entity;
                if ((previousValue != value) || (this._SalesTotal_SalesEntryTotalId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesTotal_SalesEntryTotalId");
                    if (previousValue != null)
                    {
                        this._SalesTotal_SalesEntryTotalId.Entity = null;
                        previousValue.SalesHeader_SalesEntryTotalId.Remove(this);
                    }
                    this._SalesTotal_SalesEntryTotalId.Entity = value;
                    if (value != null)
                    {
                        this._SalesEntryTotalId = value.Id;
                        value.SalesHeader_SalesEntryTotalId.Add(this);
                    }
                    else
                    {
                        this._SalesEntryTotalId = default(int?);
                    }
                    this.SendPropertyChanged("SalesTotal_SalesEntryTotalId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesGroup_SalesHeader", Storage="_SalesGroup", ThisKey="SalesGroupId", OtherKey="Id", IsForeignKey=true)]
        public SalesGroup SalesGroup
        {
            get
            {
                return this._SalesGroup.Entity;
            }
            set
            {
                SalesGroup previousValue = this._SalesGroup.Entity;
                if ((previousValue != value) || (this._SalesGroup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesGroup");
                    if (previousValue != null)
                    {
                        this._SalesGroup.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._SalesGroup.Entity = value;
                    if (value != null)
                    {
                        this._SalesGroupId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._SalesGroupId = default(int?);
                    }
                    this.SendPropertyChanged("SalesGroup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotal_SalesTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesHeader2", Storage="_SalesTotal_SalesTotalId", ThisKey="SalesTotalId", OtherKey="Id", IsForeignKey=true)]
        public SalesTotal SalesTotal_SalesTotalId
        {
            get
            {
                return this._SalesTotal_SalesTotalId.Entity;
            }
            set
            {
                SalesTotal previousValue = this._SalesTotal_SalesTotalId.Entity;
                if ((previousValue != value) || (this._SalesTotal_SalesTotalId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesTotal_SalesTotalId");
                    if (previousValue != null)
                    {
                        this._SalesTotal_SalesTotalId.Entity = null;
                        previousValue.SalesHeader_SalesTotalId.Remove(this);
                    }
                    this._SalesTotal_SalesTotalId.Entity = value;
                    if (value != null)
                    {
                        this._SalesTotalId = value.Id;
                        value.SalesHeader_SalesTotalId.Add(this);
                    }
                    else
                    {
                        this._SalesTotalId = default(int?);
                    }
                    this.SendPropertyChanged("SalesTotal_SalesTotalId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesStatusCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesStatusCode_SalesHeader", Storage="_SalesStatusCode", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
        public SalesStatusCode SalesStatusCode
        {
            get
            {
                return this._SalesStatusCode.Entity;
            }
            set
            {
                SalesStatusCode previousValue = this._SalesStatusCode.Entity;
                if ((previousValue != value) || (this._SalesStatusCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesStatusCode");
                    if (previousValue != null)
                    {
                        this._SalesStatusCode.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._SalesStatusCode.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(int?);
                    }
                    this.SendPropertyChanged("SalesStatusCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Term in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_SalesHeader", Storage="_Term", ThisKey="TermsId", OtherKey="Id", IsForeignKey=true)]
        public Term Term
        {
            get
            {
                return this._Term.Entity;
            }
            set
            {
                Term previousValue = this._Term.Entity;
                if ((previousValue != value) || (this._Term.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Term");
                    if (previousValue != null)
                    {
                        this._Term.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._Term.Entity = value;
                    if (value != null)
                    {
                        this._TermsId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._TermsId = default(int?);
                    }
                    this.SendPropertyChanged("Term");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_TransferToBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesHeader5", Storage="_Branch_TransferToBranchId", ThisKey="TransferToBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_TransferToBranchId
        {
            get
            {
                return this._Branch_TransferToBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_TransferToBranchId.Entity;
                if ((previousValue != value) || (this._Branch_TransferToBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_TransferToBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_TransferToBranchId.Entity = null;
                        previousValue.SalesHeader_TransferToBranchId.Remove(this);
                    }
                    this._Branch_TransferToBranchId.Entity = value;
                    if (value != null)
                    {
                        this._TransferToBranchId = value.Id;
                        value.SalesHeader_TransferToBranchId.Add(this);
                    }
                    else
                    {
                        this._TransferToBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_TransferToBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportTypeCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TransportTypeCode_SalesHeader", Storage="_TransportTypeCode", ThisKey="TransportTypeId", OtherKey="Id", IsForeignKey=true)]
        public TransportTypeCode TransportTypeCode
        {
            get
            {
                return this._TransportTypeCode.Entity;
            }
            set
            {
                TransportTypeCode previousValue = this._TransportTypeCode.Entity;
                if ((previousValue != value) || (this._TransportTypeCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TransportTypeCode");
                    if (previousValue != null)
                    {
                        this._TransportTypeCode.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._TransportTypeCode.Entity = value;
                    if (value != null)
                    {
                        this._TransportTypeId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._TransportTypeId = default(int?);
                    }
                    this.SendPropertyChanged("TransportTypeCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesType_SalesHeader", Storage="_SalesType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
        public SalesType SalesType
        {
            get
            {
                return this._SalesType.Entity;
            }
            set
            {
                SalesType previousValue = this._SalesType.Entity;
                if ((previousValue != value) || (this._SalesType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesType");
                    if (previousValue != null)
                    {
                        this._SalesType.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._SalesType.Entity = value;
                    if (value != null)
                    {
                        this._TypeId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._TypeId = default(int?);
                    }
                    this.SendPropertyChanged("SalesType");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderClassification in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OrderClassification_SalesHeader", Storage="_OrderClassification", ThisKey="OrderClassificationId", OtherKey="Id", IsForeignKey=true)]
        public OrderClassification OrderClassification
        {
            get
            {
                return this._OrderClassification.Entity;
            }
            set
            {
                OrderClassification previousValue = this._OrderClassification.Entity;
                if ((previousValue != value) || (this._OrderClassification.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OrderClassification");
                    if (previousValue != null)
                    {
                        this._OrderClassification.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._OrderClassification.Entity = value;
                    if (value != null)
                    {
                        this._OrderClassificationId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._OrderClassificationId = default(int?);
                    }
                    this.SendPropertyChanged("OrderClassification");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CountryCode_SalesHeader", Storage="_CountryCode", ThisKey="FinalDestinationId", OtherKey="Id", IsForeignKey=true)]
        public CountryCode CountryCode
        {
            get
            {
                return this._CountryCode.Entity;
            }
            set
            {
                CountryCode previousValue = this._CountryCode.Entity;
                if ((previousValue != value) || (this._CountryCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CountryCode");
                    if (previousValue != null)
                    {
                        this._CountryCode.Entity = null;
                        previousValue.SalesHeader.Remove(this);
                    }
                    this._CountryCode.Entity = value;
                    if (value != null)
                    {
                        this._FinalDestinationId = value.Id;
                        value.SalesHeader.Add(this);
                    }
                    else
                    {
                        this._FinalDestinationId = default(int?);
                    }
                    this.SendPropertyChanged("CountryCode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.SalesHeader = this;
        }
    
        private void detach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.SalesHeader = null;
        }

        private void attach_SalesHeader_BlanketHeaderId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_BlanketHeaderId1");
            entity.SalesHeader_BlanketHeaderId = this;
        }
    
        private void detach_SalesHeader_BlanketHeaderId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_BlanketHeaderId1");
            entity.SalesHeader_BlanketHeaderId = null;
        }

        private void attach_SalesHeader_EnquiryId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_EnquiryId1");
            entity.SalesHeader_EnquiryId = this;
        }
    
        private void detach_SalesHeader_EnquiryId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_EnquiryId1");
            entity.SalesHeader_EnquiryId = null;
        }

        private void attach_SalesHeader_OrderId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_OrderId1");
            entity.SalesHeader_OrderId = this;
        }
    
        private void detach_SalesHeader_OrderId1(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_OrderId1");
            entity.SalesHeader_OrderId = null;
        }
    }

}
