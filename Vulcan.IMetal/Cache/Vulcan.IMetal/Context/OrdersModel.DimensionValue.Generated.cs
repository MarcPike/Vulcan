//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.DimensionValue in the schema.
    /// </summary>
    [Table(Name = @"public.dimension_values")]
    public partial class DimensionValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<decimal> _Dim1;

        private System.Nullable<decimal> _Dim1NegativeTolerance;

        private System.Nullable<decimal> _Dim1PositiveTolerance;

        private System.Nullable<decimal> _Dim2;

        private System.Nullable<decimal> _Dim2NegativeTolerance;

        private System.Nullable<decimal> _Dim2PositiveTolerance;

        private System.Nullable<decimal> _Dim3;

        private System.Nullable<decimal> _Dim3NegativeTolerance;

        private System.Nullable<decimal> _Dim3PositiveTolerance;

        private System.Nullable<decimal> _Dim4;

        private System.Nullable<decimal> _Dim4NegativeTolerance;

        private System.Nullable<decimal> _Dim4PositiveTolerance;

        private System.Nullable<decimal> _Dim5;

        private System.Nullable<decimal> _Dim5NegativeTolerance;

        private System.Nullable<decimal> _Dim5PositiveTolerance;

        private string _Mark;

        private string _CuttingType = @"S";

        private System.Nullable<bool> _DrillingRequired = false;

        private int _DrillsPerPiece = 0;
        #pragma warning restore 0649

        private EntitySet<SalesItem> _SalesItem;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDim1Changing(System.Nullable<decimal> value);
        partial void OnDim1Changed();
        partial void OnDim1NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1NegativeToleranceChanged();
        partial void OnDim1PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1PositiveToleranceChanged();
        partial void OnDim2Changing(System.Nullable<decimal> value);
        partial void OnDim2Changed();
        partial void OnDim2NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2NegativeToleranceChanged();
        partial void OnDim2PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2PositiveToleranceChanged();
        partial void OnDim3Changing(System.Nullable<decimal> value);
        partial void OnDim3Changed();
        partial void OnDim3NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3NegativeToleranceChanged();
        partial void OnDim3PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3PositiveToleranceChanged();
        partial void OnDim4Changing(System.Nullable<decimal> value);
        partial void OnDim4Changed();
        partial void OnDim4NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4NegativeToleranceChanged();
        partial void OnDim4PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4PositiveToleranceChanged();
        partial void OnDim5Changing(System.Nullable<decimal> value);
        partial void OnDim5Changed();
        partial void OnDim5NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5NegativeToleranceChanged();
        partial void OnDim5PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5PositiveToleranceChanged();
        partial void OnMarkChanging(string value);
        partial void OnMarkChanged();
        partial void OnCuttingTypeChanging(string value);
        partial void OnCuttingTypeChanged();
        partial void OnDrillingRequiredChanging(System.Nullable<bool> value);
        partial void OnDrillingRequiredChanged();
        partial void OnDrillsPerPieceChanging(int value);
        partial void OnDrillsPerPieceChanged();
        #endregion

        public DimensionValue()
        {
            this._SalesItem = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem), new Action<SalesItem>(this.detach_SalesItem));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1 in the schema.
        /// </summary>
        [Column(Name = @"dim1", Storage = "_Dim1", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1
        {
            get
            {
                return this._Dim1;
            }
            set
            {
                if (this._Dim1 != value)
                {
                    this.OnDim1Changing(value);
                    this.SendPropertyChanging("Dim1");
                    this._Dim1 = value;
                    this.SendPropertyChanged("Dim1");
                    this.OnDim1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_negative_tolerance", Storage = "_Dim1NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1NegativeTolerance
        {
            get
            {
                return this._Dim1NegativeTolerance;
            }
            set
            {
                if (this._Dim1NegativeTolerance != value)
                {
                    this.OnDim1NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim1NegativeTolerance");
                    this._Dim1NegativeTolerance = value;
                    this.SendPropertyChanged("Dim1NegativeTolerance");
                    this.OnDim1NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_positive_tolerance", Storage = "_Dim1PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1PositiveTolerance
        {
            get
            {
                return this._Dim1PositiveTolerance;
            }
            set
            {
                if (this._Dim1PositiveTolerance != value)
                {
                    this.OnDim1PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim1PositiveTolerance");
                    this._Dim1PositiveTolerance = value;
                    this.SendPropertyChanged("Dim1PositiveTolerance");
                    this.OnDim1PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2 in the schema.
        /// </summary>
        [Column(Name = @"dim2", Storage = "_Dim2", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2
        {
            get
            {
                return this._Dim2;
            }
            set
            {
                if (this._Dim2 != value)
                {
                    this.OnDim2Changing(value);
                    this.SendPropertyChanging("Dim2");
                    this._Dim2 = value;
                    this.SendPropertyChanged("Dim2");
                    this.OnDim2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_negative_tolerance", Storage = "_Dim2NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2NegativeTolerance
        {
            get
            {
                return this._Dim2NegativeTolerance;
            }
            set
            {
                if (this._Dim2NegativeTolerance != value)
                {
                    this.OnDim2NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim2NegativeTolerance");
                    this._Dim2NegativeTolerance = value;
                    this.SendPropertyChanged("Dim2NegativeTolerance");
                    this.OnDim2NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_positive_tolerance", Storage = "_Dim2PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2PositiveTolerance
        {
            get
            {
                return this._Dim2PositiveTolerance;
            }
            set
            {
                if (this._Dim2PositiveTolerance != value)
                {
                    this.OnDim2PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim2PositiveTolerance");
                    this._Dim2PositiveTolerance = value;
                    this.SendPropertyChanged("Dim2PositiveTolerance");
                    this.OnDim2PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3 in the schema.
        /// </summary>
        [Column(Name = @"dim3", Storage = "_Dim3", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3
        {
            get
            {
                return this._Dim3;
            }
            set
            {
                if (this._Dim3 != value)
                {
                    this.OnDim3Changing(value);
                    this.SendPropertyChanging("Dim3");
                    this._Dim3 = value;
                    this.SendPropertyChanged("Dim3");
                    this.OnDim3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_negative_tolerance", Storage = "_Dim3NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3NegativeTolerance
        {
            get
            {
                return this._Dim3NegativeTolerance;
            }
            set
            {
                if (this._Dim3NegativeTolerance != value)
                {
                    this.OnDim3NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim3NegativeTolerance");
                    this._Dim3NegativeTolerance = value;
                    this.SendPropertyChanged("Dim3NegativeTolerance");
                    this.OnDim3NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_positive_tolerance", Storage = "_Dim3PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3PositiveTolerance
        {
            get
            {
                return this._Dim3PositiveTolerance;
            }
            set
            {
                if (this._Dim3PositiveTolerance != value)
                {
                    this.OnDim3PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim3PositiveTolerance");
                    this._Dim3PositiveTolerance = value;
                    this.SendPropertyChanged("Dim3PositiveTolerance");
                    this.OnDim3PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4 in the schema.
        /// </summary>
        [Column(Name = @"dim4", Storage = "_Dim4", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4
        {
            get
            {
                return this._Dim4;
            }
            set
            {
                if (this._Dim4 != value)
                {
                    this.OnDim4Changing(value);
                    this.SendPropertyChanging("Dim4");
                    this._Dim4 = value;
                    this.SendPropertyChanged("Dim4");
                    this.OnDim4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_negative_tolerance", Storage = "_Dim4NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4NegativeTolerance
        {
            get
            {
                return this._Dim4NegativeTolerance;
            }
            set
            {
                if (this._Dim4NegativeTolerance != value)
                {
                    this.OnDim4NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim4NegativeTolerance");
                    this._Dim4NegativeTolerance = value;
                    this.SendPropertyChanged("Dim4NegativeTolerance");
                    this.OnDim4NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_positive_tolerance", Storage = "_Dim4PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4PositiveTolerance
        {
            get
            {
                return this._Dim4PositiveTolerance;
            }
            set
            {
                if (this._Dim4PositiveTolerance != value)
                {
                    this.OnDim4PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim4PositiveTolerance");
                    this._Dim4PositiveTolerance = value;
                    this.SendPropertyChanged("Dim4PositiveTolerance");
                    this.OnDim4PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5 in the schema.
        /// </summary>
        [Column(Name = @"dim5", Storage = "_Dim5", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5
        {
            get
            {
                return this._Dim5;
            }
            set
            {
                if (this._Dim5 != value)
                {
                    this.OnDim5Changing(value);
                    this.SendPropertyChanging("Dim5");
                    this._Dim5 = value;
                    this.SendPropertyChanged("Dim5");
                    this.OnDim5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_negative_tolerance", Storage = "_Dim5NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5NegativeTolerance
        {
            get
            {
                return this._Dim5NegativeTolerance;
            }
            set
            {
                if (this._Dim5NegativeTolerance != value)
                {
                    this.OnDim5NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim5NegativeTolerance");
                    this._Dim5NegativeTolerance = value;
                    this.SendPropertyChanged("Dim5NegativeTolerance");
                    this.OnDim5NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_positive_tolerance", Storage = "_Dim5PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5PositiveTolerance
        {
            get
            {
                return this._Dim5PositiveTolerance;
            }
            set
            {
                if (this._Dim5PositiveTolerance != value)
                {
                    this.OnDim5PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim5PositiveTolerance");
                    this._Dim5PositiveTolerance = value;
                    this.SendPropertyChanged("Dim5PositiveTolerance");
                    this.OnDim5PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mark in the schema.
        /// </summary>
        [Column(Name = @"mark", Storage = "_Mark", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Mark
        {
            get
            {
                return this._Mark;
            }
            set
            {
                if (this._Mark != value)
                {
                    this.OnMarkChanging(value);
                    this.SendPropertyChanging("Mark");
                    this._Mark = value;
                    this.SendPropertyChanged("Mark");
                    this.OnMarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuttingType in the schema.
        /// </summary>
        [Column(Name = @"cutting_type", Storage = "_CuttingType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string CuttingType
        {
            get
            {
                return this._CuttingType;
            }
            set
            {
                if (this._CuttingType != value)
                {
                    this.OnCuttingTypeChanging(value);
                    this.SendPropertyChanging("CuttingType");
                    this._CuttingType = value;
                    this.SendPropertyChanged("CuttingType");
                    this.OnCuttingTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DrillingRequired in the schema.
        /// </summary>
        [Column(Name = @"drilling_required", Storage = "_DrillingRequired", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DrillingRequired
        {
            get
            {
                return this._DrillingRequired;
            }
            set
            {
                if (this._DrillingRequired != value)
                {
                    this.OnDrillingRequiredChanging(value);
                    this.SendPropertyChanging("DrillingRequired");
                    this._DrillingRequired = value;
                    this.SendPropertyChanged("DrillingRequired");
                    this.OnDrillingRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DrillsPerPiece in the schema.
        /// </summary>
        [Column(Name = @"drills_per_piece", Storage = "_DrillsPerPiece", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DrillsPerPiece
        {
            get
            {
                return this._DrillsPerPiece;
            }
            set
            {
                if (this._DrillsPerPiece != value)
                {
                    this.OnDrillsPerPieceChanging(value);
                    this.SendPropertyChanging("DrillsPerPiece");
                    this._DrillsPerPiece = value;
                    this.SendPropertyChanged("DrillsPerPiece");
                    this.OnDrillsPerPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DimensionValue_SalesItem", Storage="_SalesItem", ThisKey="Id", OtherKey="DimensionsId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem
        {
            get
            {
                return this._SalesItem;
            }
            set
            {
                this._SalesItem.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.DimensionValue = this;
        }
    
        private void detach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.DimensionValue = null;
        }
    }

}
