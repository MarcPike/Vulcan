//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/3/2020 10:11:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.CompanyTotal in the schema.
    /// </summary>
    [Table(Name = @"public.company_totals")]
    public partial class CompanyTotal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private decimal? _OpenOrderValue;

        private decimal? _TotalSalesMtd;

        private decimal? _TotalCostMtd;

        private decimal? _TotalWeightMtd;

        private decimal? _TotalSalesYtd;

        private decimal? _TotalCostYtd;

        private decimal? _TotalWeightYtd;

        private decimal? _OpenOrderTax;

        private decimal? _UnexportedInvoiceValue;

        private decimal? _UnexportedInvoiceTax;

        private decimal? _UncheckedOrderValue;

        private decimal? _UncheckedOrderTax;

        private decimal? _HeldOrderValue;

        private decimal? _HeldOrderTax;

        private decimal? _ExternalOpenOrderValue;

        private decimal? _ExternalOpenOrderTax;
        #pragma warning restore 0649

        private EntitySet<Company> _Company;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnOpenOrderValueChanging(decimal? value);
        partial void OnOpenOrderValueChanged();
        partial void OnTotalSalesMtdChanging(decimal? value);
        partial void OnTotalSalesMtdChanged();
        partial void OnTotalCostMtdChanging(decimal? value);
        partial void OnTotalCostMtdChanged();
        partial void OnTotalWeightMtdChanging(decimal? value);
        partial void OnTotalWeightMtdChanged();
        partial void OnTotalSalesYtdChanging(decimal? value);
        partial void OnTotalSalesYtdChanged();
        partial void OnTotalCostYtdChanging(decimal? value);
        partial void OnTotalCostYtdChanged();
        partial void OnTotalWeightYtdChanging(decimal? value);
        partial void OnTotalWeightYtdChanged();
        partial void OnOpenOrderTaxChanging(decimal? value);
        partial void OnOpenOrderTaxChanged();
        partial void OnUnexportedInvoiceValueChanging(decimal? value);
        partial void OnUnexportedInvoiceValueChanged();
        partial void OnUnexportedInvoiceTaxChanging(decimal? value);
        partial void OnUnexportedInvoiceTaxChanged();
        partial void OnUncheckedOrderValueChanging(decimal? value);
        partial void OnUncheckedOrderValueChanged();
        partial void OnUncheckedOrderTaxChanging(decimal? value);
        partial void OnUncheckedOrderTaxChanged();
        partial void OnHeldOrderValueChanging(decimal? value);
        partial void OnHeldOrderValueChanged();
        partial void OnHeldOrderTaxChanging(decimal? value);
        partial void OnHeldOrderTaxChanged();
        partial void OnExternalOpenOrderValueChanging(decimal? value);
        partial void OnExternalOpenOrderValueChanged();
        partial void OnExternalOpenOrderTaxChanging(decimal? value);
        partial void OnExternalOpenOrderTaxChanged();
        #endregion

        public CompanyTotal()
        {
            this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OpenOrderValue in the schema.
        /// </summary>
        [Column(Name = @"open_order_value", Storage = "_OpenOrderValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? OpenOrderValue
        {
            get
            {
                return this._OpenOrderValue;
            }
            set
            {
                if (this._OpenOrderValue != value)
                {
                    this.OnOpenOrderValueChanging(value);
                    this.SendPropertyChanging("OpenOrderValue");
                    this._OpenOrderValue = value;
                    this.SendPropertyChanged("OpenOrderValue");
                    this.OnOpenOrderValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalSalesMtd in the schema.
        /// </summary>
        [Column(Name = @"total_sales_mtd", Storage = "_TotalSalesMtd", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalSalesMtd
        {
            get
            {
                return this._TotalSalesMtd;
            }
            set
            {
                if (this._TotalSalesMtd != value)
                {
                    this.OnTotalSalesMtdChanging(value);
                    this.SendPropertyChanging("TotalSalesMtd");
                    this._TotalSalesMtd = value;
                    this.SendPropertyChanged("TotalSalesMtd");
                    this.OnTotalSalesMtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCostMtd in the schema.
        /// </summary>
        [Column(Name = @"total_cost_mtd", Storage = "_TotalCostMtd", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalCostMtd
        {
            get
            {
                return this._TotalCostMtd;
            }
            set
            {
                if (this._TotalCostMtd != value)
                {
                    this.OnTotalCostMtdChanging(value);
                    this.SendPropertyChanging("TotalCostMtd");
                    this._TotalCostMtd = value;
                    this.SendPropertyChanged("TotalCostMtd");
                    this.OnTotalCostMtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWeightMtd in the schema.
        /// </summary>
        [Column(Name = @"total_weight_mtd", Storage = "_TotalWeightMtd", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalWeightMtd
        {
            get
            {
                return this._TotalWeightMtd;
            }
            set
            {
                if (this._TotalWeightMtd != value)
                {
                    this.OnTotalWeightMtdChanging(value);
                    this.SendPropertyChanging("TotalWeightMtd");
                    this._TotalWeightMtd = value;
                    this.SendPropertyChanged("TotalWeightMtd");
                    this.OnTotalWeightMtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalSalesYtd in the schema.
        /// </summary>
        [Column(Name = @"total_sales_ytd", Storage = "_TotalSalesYtd", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalSalesYtd
        {
            get
            {
                return this._TotalSalesYtd;
            }
            set
            {
                if (this._TotalSalesYtd != value)
                {
                    this.OnTotalSalesYtdChanging(value);
                    this.SendPropertyChanging("TotalSalesYtd");
                    this._TotalSalesYtd = value;
                    this.SendPropertyChanged("TotalSalesYtd");
                    this.OnTotalSalesYtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCostYtd in the schema.
        /// </summary>
        [Column(Name = @"total_cost_ytd", Storage = "_TotalCostYtd", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalCostYtd
        {
            get
            {
                return this._TotalCostYtd;
            }
            set
            {
                if (this._TotalCostYtd != value)
                {
                    this.OnTotalCostYtdChanging(value);
                    this.SendPropertyChanging("TotalCostYtd");
                    this._TotalCostYtd = value;
                    this.SendPropertyChanged("TotalCostYtd");
                    this.OnTotalCostYtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWeightYtd in the schema.
        /// </summary>
        [Column(Name = @"total_weight_ytd", Storage = "_TotalWeightYtd", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public decimal? TotalWeightYtd
        {
            get
            {
                return this._TotalWeightYtd;
            }
            set
            {
                if (this._TotalWeightYtd != value)
                {
                    this.OnTotalWeightYtdChanging(value);
                    this.SendPropertyChanging("TotalWeightYtd");
                    this._TotalWeightYtd = value;
                    this.SendPropertyChanged("TotalWeightYtd");
                    this.OnTotalWeightYtdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OpenOrderTax in the schema.
        /// </summary>
        [Column(Name = @"open_order_tax", Storage = "_OpenOrderTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? OpenOrderTax
        {
            get
            {
                return this._OpenOrderTax;
            }
            set
            {
                if (this._OpenOrderTax != value)
                {
                    this.OnOpenOrderTaxChanging(value);
                    this.SendPropertyChanging("OpenOrderTax");
                    this._OpenOrderTax = value;
                    this.SendPropertyChanged("OpenOrderTax");
                    this.OnOpenOrderTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnexportedInvoiceValue in the schema.
        /// </summary>
        [Column(Name = @"unexported_invoice_value", Storage = "_UnexportedInvoiceValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? UnexportedInvoiceValue
        {
            get
            {
                return this._UnexportedInvoiceValue;
            }
            set
            {
                if (this._UnexportedInvoiceValue != value)
                {
                    this.OnUnexportedInvoiceValueChanging(value);
                    this.SendPropertyChanging("UnexportedInvoiceValue");
                    this._UnexportedInvoiceValue = value;
                    this.SendPropertyChanged("UnexportedInvoiceValue");
                    this.OnUnexportedInvoiceValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnexportedInvoiceTax in the schema.
        /// </summary>
        [Column(Name = @"unexported_invoice_tax", Storage = "_UnexportedInvoiceTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? UnexportedInvoiceTax
        {
            get
            {
                return this._UnexportedInvoiceTax;
            }
            set
            {
                if (this._UnexportedInvoiceTax != value)
                {
                    this.OnUnexportedInvoiceTaxChanging(value);
                    this.SendPropertyChanging("UnexportedInvoiceTax");
                    this._UnexportedInvoiceTax = value;
                    this.SendPropertyChanged("UnexportedInvoiceTax");
                    this.OnUnexportedInvoiceTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UncheckedOrderValue in the schema.
        /// </summary>
        [Column(Name = @"unchecked_order_value", Storage = "_UncheckedOrderValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? UncheckedOrderValue
        {
            get
            {
                return this._UncheckedOrderValue;
            }
            set
            {
                if (this._UncheckedOrderValue != value)
                {
                    this.OnUncheckedOrderValueChanging(value);
                    this.SendPropertyChanging("UncheckedOrderValue");
                    this._UncheckedOrderValue = value;
                    this.SendPropertyChanged("UncheckedOrderValue");
                    this.OnUncheckedOrderValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UncheckedOrderTax in the schema.
        /// </summary>
        [Column(Name = @"unchecked_order_tax", Storage = "_UncheckedOrderTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? UncheckedOrderTax
        {
            get
            {
                return this._UncheckedOrderTax;
            }
            set
            {
                if (this._UncheckedOrderTax != value)
                {
                    this.OnUncheckedOrderTaxChanging(value);
                    this.SendPropertyChanging("UncheckedOrderTax");
                    this._UncheckedOrderTax = value;
                    this.SendPropertyChanged("UncheckedOrderTax");
                    this.OnUncheckedOrderTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeldOrderValue in the schema.
        /// </summary>
        [Column(Name = @"held_order_value", Storage = "_HeldOrderValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? HeldOrderValue
        {
            get
            {
                return this._HeldOrderValue;
            }
            set
            {
                if (this._HeldOrderValue != value)
                {
                    this.OnHeldOrderValueChanging(value);
                    this.SendPropertyChanging("HeldOrderValue");
                    this._HeldOrderValue = value;
                    this.SendPropertyChanged("HeldOrderValue");
                    this.OnHeldOrderValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeldOrderTax in the schema.
        /// </summary>
        [Column(Name = @"held_order_tax", Storage = "_HeldOrderTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? HeldOrderTax
        {
            get
            {
                return this._HeldOrderTax;
            }
            set
            {
                if (this._HeldOrderTax != value)
                {
                    this.OnHeldOrderTaxChanging(value);
                    this.SendPropertyChanging("HeldOrderTax");
                    this._HeldOrderTax = value;
                    this.SendPropertyChanged("HeldOrderTax");
                    this.OnHeldOrderTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalOpenOrderValue in the schema.
        /// </summary>
        [Column(Name = @"external_open_order_value", Storage = "_ExternalOpenOrderValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ExternalOpenOrderValue
        {
            get
            {
                return this._ExternalOpenOrderValue;
            }
            set
            {
                if (this._ExternalOpenOrderValue != value)
                {
                    this.OnExternalOpenOrderValueChanging(value);
                    this.SendPropertyChanging("ExternalOpenOrderValue");
                    this._ExternalOpenOrderValue = value;
                    this.SendPropertyChanged("ExternalOpenOrderValue");
                    this.OnExternalOpenOrderValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalOpenOrderTax in the schema.
        /// </summary>
        [Column(Name = @"external_open_order_tax", Storage = "_ExternalOpenOrderTax", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ExternalOpenOrderTax
        {
            get
            {
                return this._ExternalOpenOrderTax;
            }
            set
            {
                if (this._ExternalOpenOrderTax != value)
                {
                    this.OnExternalOpenOrderTaxChanging(value);
                    this.SendPropertyChanging("ExternalOpenOrderTax");
                    this._ExternalOpenOrderTax = value;
                    this.SendPropertyChanged("ExternalOpenOrderTax");
                    this.OnExternalOpenOrderTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanyTotal_Company", Storage="_Company", ThisKey="Id", OtherKey="CompanyTotalsId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                this._Company.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CompanyTotal = this;
        }
    
        private void detach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CompanyTotal = null;
        }
    }

}
