//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.ProductSubGroup in the schema.
    /// </summary>
    [Table(Name = @"public.product_sub_groups")]
    public partial class ProductSubGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _ProductId;

        private string _Name;

        private string _Code;

        private System.Nullable<decimal> _Dimension1;

        private System.Nullable<decimal> _Dimension1Min;

        private System.Nullable<decimal> _Dimension1Max;

        private System.Nullable<decimal> _Dimension2;

        private System.Nullable<decimal> _Dimension2Min;

        private System.Nullable<decimal> _Dimension2Max;

        private System.Nullable<decimal> _Dimension3;

        private System.Nullable<decimal> _Dimension3Min;

        private System.Nullable<decimal> _Dimension3Max;

        private System.Nullable<decimal> _Dimension4;

        private System.Nullable<decimal> _Dimension4Min;

        private System.Nullable<decimal> _Dimension4Max;

        private System.Nullable<decimal> _Dimension5;

        private System.Nullable<decimal> _Dimension5Min;

        private System.Nullable<decimal> _Dimension5Max;

        private System.Nullable<decimal> _MinStock;

        private System.Nullable<int> _MinStockUnitId;

        private System.Nullable<decimal> _MaxStock;

        private System.Nullable<int> _MaxStockUnitId;

        private System.Nullable<decimal> _MinStockPeriod;

        private System.Nullable<int> _MinStockPeriodUnitId;

        private System.Nullable<decimal> _MinReorder;

        private System.Nullable<int> _MinReorderUnitId;

        private System.Nullable<decimal> _MaxReorder;

        private System.Nullable<int> _MaxReorderUnitId;

        private System.Nullable<int> _MainSupplierId;

        private System.Nullable<int> _MainSupplierLead;

        private System.Nullable<int> _AlternateSupplierId;

        private System.Nullable<int> _AlternateSupplierLead;

        private System.Nullable<decimal> _GuideCost;

        private System.Nullable<decimal> _GuidePrice;

        private System.Nullable<decimal> _MinimumPrice;

        private System.Nullable<int> _CommodityId;

        private string _PurchasingNote;

        private System.Nullable<decimal> _StandardCost;

        private string _DefaultLocation;

        private System.Nullable<int> _SourceSubGroupId;

        private System.Nullable<int> _ProductionProductId;
        #pragma warning restore 0649

        private EntityRef<Company> _Company_AlternateSupplierId;

        private EntityRef<Company> _Company_MainSupplierId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_MaxReorderUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_MaxStockUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_MinReorderUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_MinStockPeriodUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_MinStockUnitId;

        private EntityRef<Branch> _Branch;

        private EntityRef<Product> _Product_ProductId;

        private EntityRef<Product> _Product_ProductionProductId;

        private EntitySet<ProductSubGroup> _ProductSubGroup_SourceSubGroupId1;

        private EntityRef<ProductSubGroup> _ProductSubGroup_SourceSubGroupId;

        private EntitySet<SalesItem> _SalesItem;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDimension1Changing(System.Nullable<decimal> value);
        partial void OnDimension1Changed();
        partial void OnDimension1MinChanging(System.Nullable<decimal> value);
        partial void OnDimension1MinChanged();
        partial void OnDimension1MaxChanging(System.Nullable<decimal> value);
        partial void OnDimension1MaxChanged();
        partial void OnDimension2Changing(System.Nullable<decimal> value);
        partial void OnDimension2Changed();
        partial void OnDimension2MinChanging(System.Nullable<decimal> value);
        partial void OnDimension2MinChanged();
        partial void OnDimension2MaxChanging(System.Nullable<decimal> value);
        partial void OnDimension2MaxChanged();
        partial void OnDimension3Changing(System.Nullable<decimal> value);
        partial void OnDimension3Changed();
        partial void OnDimension3MinChanging(System.Nullable<decimal> value);
        partial void OnDimension3MinChanged();
        partial void OnDimension3MaxChanging(System.Nullable<decimal> value);
        partial void OnDimension3MaxChanged();
        partial void OnDimension4Changing(System.Nullable<decimal> value);
        partial void OnDimension4Changed();
        partial void OnDimension4MinChanging(System.Nullable<decimal> value);
        partial void OnDimension4MinChanged();
        partial void OnDimension4MaxChanging(System.Nullable<decimal> value);
        partial void OnDimension4MaxChanged();
        partial void OnDimension5Changing(System.Nullable<decimal> value);
        partial void OnDimension5Changed();
        partial void OnDimension5MinChanging(System.Nullable<decimal> value);
        partial void OnDimension5MinChanged();
        partial void OnDimension5MaxChanging(System.Nullable<decimal> value);
        partial void OnDimension5MaxChanged();
        partial void OnMinStockChanging(System.Nullable<decimal> value);
        partial void OnMinStockChanged();
        partial void OnMinStockUnitIdChanging(System.Nullable<int> value);
        partial void OnMinStockUnitIdChanged();
        partial void OnMaxStockChanging(System.Nullable<decimal> value);
        partial void OnMaxStockChanged();
        partial void OnMaxStockUnitIdChanging(System.Nullable<int> value);
        partial void OnMaxStockUnitIdChanged();
        partial void OnMinStockPeriodChanging(System.Nullable<decimal> value);
        partial void OnMinStockPeriodChanged();
        partial void OnMinStockPeriodUnitIdChanging(System.Nullable<int> value);
        partial void OnMinStockPeriodUnitIdChanged();
        partial void OnMinReorderChanging(System.Nullable<decimal> value);
        partial void OnMinReorderChanged();
        partial void OnMinReorderUnitIdChanging(System.Nullable<int> value);
        partial void OnMinReorderUnitIdChanged();
        partial void OnMaxReorderChanging(System.Nullable<decimal> value);
        partial void OnMaxReorderChanged();
        partial void OnMaxReorderUnitIdChanging(System.Nullable<int> value);
        partial void OnMaxReorderUnitIdChanged();
        partial void OnMainSupplierIdChanging(System.Nullable<int> value);
        partial void OnMainSupplierIdChanged();
        partial void OnMainSupplierLeadChanging(System.Nullable<int> value);
        partial void OnMainSupplierLeadChanged();
        partial void OnAlternateSupplierIdChanging(System.Nullable<int> value);
        partial void OnAlternateSupplierIdChanged();
        partial void OnAlternateSupplierLeadChanging(System.Nullable<int> value);
        partial void OnAlternateSupplierLeadChanged();
        partial void OnGuideCostChanging(System.Nullable<decimal> value);
        partial void OnGuideCostChanged();
        partial void OnGuidePriceChanging(System.Nullable<decimal> value);
        partial void OnGuidePriceChanged();
        partial void OnMinimumPriceChanging(System.Nullable<decimal> value);
        partial void OnMinimumPriceChanged();
        partial void OnCommodityIdChanging(System.Nullable<int> value);
        partial void OnCommodityIdChanged();
        partial void OnPurchasingNoteChanging(string value);
        partial void OnPurchasingNoteChanged();
        partial void OnStandardCostChanging(System.Nullable<decimal> value);
        partial void OnStandardCostChanged();
        partial void OnDefaultLocationChanging(string value);
        partial void OnDefaultLocationChanged();
        partial void OnSourceSubGroupIdChanging(System.Nullable<int> value);
        partial void OnSourceSubGroupIdChanged();
        partial void OnProductionProductIdChanging(System.Nullable<int> value);
        partial void OnProductionProductIdChanged();
        #endregion

        public ProductSubGroup()
        {
            this._Company_AlternateSupplierId  = default(EntityRef<Company>);
            this._Company_MainSupplierId  = default(EntityRef<Company>);
            this._UnitsOfMeasure_MaxReorderUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_MaxStockUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_MinReorderUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_MinStockPeriodUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_MinStockUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._Branch  = default(EntityRef<Branch>);
            this._Product_ProductId  = default(EntityRef<Product>);
            this._Product_ProductionProductId  = default(EntityRef<Product>);
            this._ProductSubGroup_SourceSubGroupId1 = new EntitySet<ProductSubGroup>(new Action<ProductSubGroup>(this.attach_ProductSubGroup_SourceSubGroupId1), new Action<ProductSubGroup>(this.detach_ProductSubGroup_SourceSubGroupId1));
            this._ProductSubGroup_SourceSubGroupId  = default(EntityRef<ProductSubGroup>);
            this._SalesItem = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem), new Action<SalesItem>(this.detach_SalesItem));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product_ProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension1 in the schema.
        /// </summary>
        [Column(Name = @"dimension1", Storage = "_Dimension1", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension1
        {
            get
            {
                return this._Dimension1;
            }
            set
            {
                if (this._Dimension1 != value)
                {
                    this.OnDimension1Changing(value);
                    this.SendPropertyChanging("Dimension1");
                    this._Dimension1 = value;
                    this.SendPropertyChanged("Dimension1");
                    this.OnDimension1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension1Min in the schema.
        /// </summary>
        [Column(Name = @"dimension1_min", Storage = "_Dimension1Min", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension1Min
        {
            get
            {
                return this._Dimension1Min;
            }
            set
            {
                if (this._Dimension1Min != value)
                {
                    this.OnDimension1MinChanging(value);
                    this.SendPropertyChanging("Dimension1Min");
                    this._Dimension1Min = value;
                    this.SendPropertyChanged("Dimension1Min");
                    this.OnDimension1MinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension1Max in the schema.
        /// </summary>
        [Column(Name = @"dimension1_max", Storage = "_Dimension1Max", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension1Max
        {
            get
            {
                return this._Dimension1Max;
            }
            set
            {
                if (this._Dimension1Max != value)
                {
                    this.OnDimension1MaxChanging(value);
                    this.SendPropertyChanging("Dimension1Max");
                    this._Dimension1Max = value;
                    this.SendPropertyChanged("Dimension1Max");
                    this.OnDimension1MaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension2 in the schema.
        /// </summary>
        [Column(Name = @"dimension2", Storage = "_Dimension2", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension2
        {
            get
            {
                return this._Dimension2;
            }
            set
            {
                if (this._Dimension2 != value)
                {
                    this.OnDimension2Changing(value);
                    this.SendPropertyChanging("Dimension2");
                    this._Dimension2 = value;
                    this.SendPropertyChanged("Dimension2");
                    this.OnDimension2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension2Min in the schema.
        /// </summary>
        [Column(Name = @"dimension2_min", Storage = "_Dimension2Min", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension2Min
        {
            get
            {
                return this._Dimension2Min;
            }
            set
            {
                if (this._Dimension2Min != value)
                {
                    this.OnDimension2MinChanging(value);
                    this.SendPropertyChanging("Dimension2Min");
                    this._Dimension2Min = value;
                    this.SendPropertyChanged("Dimension2Min");
                    this.OnDimension2MinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension2Max in the schema.
        /// </summary>
        [Column(Name = @"dimension2_max", Storage = "_Dimension2Max", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension2Max
        {
            get
            {
                return this._Dimension2Max;
            }
            set
            {
                if (this._Dimension2Max != value)
                {
                    this.OnDimension2MaxChanging(value);
                    this.SendPropertyChanging("Dimension2Max");
                    this._Dimension2Max = value;
                    this.SendPropertyChanged("Dimension2Max");
                    this.OnDimension2MaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension3 in the schema.
        /// </summary>
        [Column(Name = @"dimension3", Storage = "_Dimension3", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension3
        {
            get
            {
                return this._Dimension3;
            }
            set
            {
                if (this._Dimension3 != value)
                {
                    this.OnDimension3Changing(value);
                    this.SendPropertyChanging("Dimension3");
                    this._Dimension3 = value;
                    this.SendPropertyChanged("Dimension3");
                    this.OnDimension3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension3Min in the schema.
        /// </summary>
        [Column(Name = @"dimension3_min", Storage = "_Dimension3Min", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension3Min
        {
            get
            {
                return this._Dimension3Min;
            }
            set
            {
                if (this._Dimension3Min != value)
                {
                    this.OnDimension3MinChanging(value);
                    this.SendPropertyChanging("Dimension3Min");
                    this._Dimension3Min = value;
                    this.SendPropertyChanged("Dimension3Min");
                    this.OnDimension3MinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension3Max in the schema.
        /// </summary>
        [Column(Name = @"dimension3_max", Storage = "_Dimension3Max", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension3Max
        {
            get
            {
                return this._Dimension3Max;
            }
            set
            {
                if (this._Dimension3Max != value)
                {
                    this.OnDimension3MaxChanging(value);
                    this.SendPropertyChanging("Dimension3Max");
                    this._Dimension3Max = value;
                    this.SendPropertyChanged("Dimension3Max");
                    this.OnDimension3MaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension4 in the schema.
        /// </summary>
        [Column(Name = @"dimension4", Storage = "_Dimension4", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension4
        {
            get
            {
                return this._Dimension4;
            }
            set
            {
                if (this._Dimension4 != value)
                {
                    this.OnDimension4Changing(value);
                    this.SendPropertyChanging("Dimension4");
                    this._Dimension4 = value;
                    this.SendPropertyChanged("Dimension4");
                    this.OnDimension4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension4Min in the schema.
        /// </summary>
        [Column(Name = @"dimension4_min", Storage = "_Dimension4Min", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension4Min
        {
            get
            {
                return this._Dimension4Min;
            }
            set
            {
                if (this._Dimension4Min != value)
                {
                    this.OnDimension4MinChanging(value);
                    this.SendPropertyChanging("Dimension4Min");
                    this._Dimension4Min = value;
                    this.SendPropertyChanged("Dimension4Min");
                    this.OnDimension4MinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension4Max in the schema.
        /// </summary>
        [Column(Name = @"dimension4_max", Storage = "_Dimension4Max", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension4Max
        {
            get
            {
                return this._Dimension4Max;
            }
            set
            {
                if (this._Dimension4Max != value)
                {
                    this.OnDimension4MaxChanging(value);
                    this.SendPropertyChanging("Dimension4Max");
                    this._Dimension4Max = value;
                    this.SendPropertyChanged("Dimension4Max");
                    this.OnDimension4MaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension5 in the schema.
        /// </summary>
        [Column(Name = @"dimension5", Storage = "_Dimension5", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension5
        {
            get
            {
                return this._Dimension5;
            }
            set
            {
                if (this._Dimension5 != value)
                {
                    this.OnDimension5Changing(value);
                    this.SendPropertyChanging("Dimension5");
                    this._Dimension5 = value;
                    this.SendPropertyChanged("Dimension5");
                    this.OnDimension5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension5Min in the schema.
        /// </summary>
        [Column(Name = @"dimension5_min", Storage = "_Dimension5Min", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension5Min
        {
            get
            {
                return this._Dimension5Min;
            }
            set
            {
                if (this._Dimension5Min != value)
                {
                    this.OnDimension5MinChanging(value);
                    this.SendPropertyChanging("Dimension5Min");
                    this._Dimension5Min = value;
                    this.SendPropertyChanged("Dimension5Min");
                    this.OnDimension5MinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dimension5Max in the schema.
        /// </summary>
        [Column(Name = @"dimension5_max", Storage = "_Dimension5Max", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dimension5Max
        {
            get
            {
                return this._Dimension5Max;
            }
            set
            {
                if (this._Dimension5Max != value)
                {
                    this.OnDimension5MaxChanging(value);
                    this.SendPropertyChanging("Dimension5Max");
                    this._Dimension5Max = value;
                    this.SendPropertyChanged("Dimension5Max");
                    this.OnDimension5MaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinStock in the schema.
        /// </summary>
        [Column(Name = @"min_stock", Storage = "_MinStock", DbType = "NUMERIC(8,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinStock
        {
            get
            {
                return this._MinStock;
            }
            set
            {
                if (this._MinStock != value)
                {
                    this.OnMinStockChanging(value);
                    this.SendPropertyChanging("MinStock");
                    this._MinStock = value;
                    this.SendPropertyChanged("MinStock");
                    this.OnMinStockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinStockUnitId in the schema.
        /// </summary>
        [Column(Name = @"min_stock_unit_id", Storage = "_MinStockUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MinStockUnitId
        {
            get
            {
                return this._MinStockUnitId;
            }
            set
            {
                if (this._MinStockUnitId != value)
                {
                    if (this._UnitsOfMeasure_MinStockUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMinStockUnitIdChanging(value);
                    this.SendPropertyChanging("MinStockUnitId");
                    this._MinStockUnitId = value;
                    this.SendPropertyChanged("MinStockUnitId");
                    this.OnMinStockUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxStock in the schema.
        /// </summary>
        [Column(Name = @"max_stock", Storage = "_MaxStock", DbType = "NUMERIC(8,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MaxStock
        {
            get
            {
                return this._MaxStock;
            }
            set
            {
                if (this._MaxStock != value)
                {
                    this.OnMaxStockChanging(value);
                    this.SendPropertyChanging("MaxStock");
                    this._MaxStock = value;
                    this.SendPropertyChanged("MaxStock");
                    this.OnMaxStockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxStockUnitId in the schema.
        /// </summary>
        [Column(Name = @"max_stock_unit_id", Storage = "_MaxStockUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MaxStockUnitId
        {
            get
            {
                return this._MaxStockUnitId;
            }
            set
            {
                if (this._MaxStockUnitId != value)
                {
                    if (this._UnitsOfMeasure_MaxStockUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMaxStockUnitIdChanging(value);
                    this.SendPropertyChanging("MaxStockUnitId");
                    this._MaxStockUnitId = value;
                    this.SendPropertyChanged("MaxStockUnitId");
                    this.OnMaxStockUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinStockPeriod in the schema.
        /// </summary>
        [Column(Name = @"min_stock_period", Storage = "_MinStockPeriod", DbType = "NUMERIC(3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinStockPeriod
        {
            get
            {
                return this._MinStockPeriod;
            }
            set
            {
                if (this._MinStockPeriod != value)
                {
                    this.OnMinStockPeriodChanging(value);
                    this.SendPropertyChanging("MinStockPeriod");
                    this._MinStockPeriod = value;
                    this.SendPropertyChanged("MinStockPeriod");
                    this.OnMinStockPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinStockPeriodUnitId in the schema.
        /// </summary>
        [Column(Name = @"min_stock_period_unit_id", Storage = "_MinStockPeriodUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MinStockPeriodUnitId
        {
            get
            {
                return this._MinStockPeriodUnitId;
            }
            set
            {
                if (this._MinStockPeriodUnitId != value)
                {
                    if (this._UnitsOfMeasure_MinStockPeriodUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMinStockPeriodUnitIdChanging(value);
                    this.SendPropertyChanging("MinStockPeriodUnitId");
                    this._MinStockPeriodUnitId = value;
                    this.SendPropertyChanged("MinStockPeriodUnitId");
                    this.OnMinStockPeriodUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinReorder in the schema.
        /// </summary>
        [Column(Name = @"min_reorder", Storage = "_MinReorder", DbType = "NUMERIC(8,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinReorder
        {
            get
            {
                return this._MinReorder;
            }
            set
            {
                if (this._MinReorder != value)
                {
                    this.OnMinReorderChanging(value);
                    this.SendPropertyChanging("MinReorder");
                    this._MinReorder = value;
                    this.SendPropertyChanged("MinReorder");
                    this.OnMinReorderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinReorderUnitId in the schema.
        /// </summary>
        [Column(Name = @"min_reorder_unit_id", Storage = "_MinReorderUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MinReorderUnitId
        {
            get
            {
                return this._MinReorderUnitId;
            }
            set
            {
                if (this._MinReorderUnitId != value)
                {
                    if (this._UnitsOfMeasure_MinReorderUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMinReorderUnitIdChanging(value);
                    this.SendPropertyChanging("MinReorderUnitId");
                    this._MinReorderUnitId = value;
                    this.SendPropertyChanged("MinReorderUnitId");
                    this.OnMinReorderUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxReorder in the schema.
        /// </summary>
        [Column(Name = @"max_reorder", Storage = "_MaxReorder", DbType = "NUMERIC(8,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MaxReorder
        {
            get
            {
                return this._MaxReorder;
            }
            set
            {
                if (this._MaxReorder != value)
                {
                    this.OnMaxReorderChanging(value);
                    this.SendPropertyChanging("MaxReorder");
                    this._MaxReorder = value;
                    this.SendPropertyChanged("MaxReorder");
                    this.OnMaxReorderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxReorderUnitId in the schema.
        /// </summary>
        [Column(Name = @"max_reorder_unit_id", Storage = "_MaxReorderUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MaxReorderUnitId
        {
            get
            {
                return this._MaxReorderUnitId;
            }
            set
            {
                if (this._MaxReorderUnitId != value)
                {
                    if (this._UnitsOfMeasure_MaxReorderUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMaxReorderUnitIdChanging(value);
                    this.SendPropertyChanging("MaxReorderUnitId");
                    this._MaxReorderUnitId = value;
                    this.SendPropertyChanged("MaxReorderUnitId");
                    this.OnMaxReorderUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainSupplierId in the schema.
        /// </summary>
        [Column(Name = @"main_supplier_id", Storage = "_MainSupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MainSupplierId
        {
            get
            {
                return this._MainSupplierId;
            }
            set
            {
                if (this._MainSupplierId != value)
                {
                    if (this._Company_MainSupplierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMainSupplierIdChanging(value);
                    this.SendPropertyChanging("MainSupplierId");
                    this._MainSupplierId = value;
                    this.SendPropertyChanged("MainSupplierId");
                    this.OnMainSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainSupplierLead in the schema.
        /// </summary>
        [Column(Name = @"main_supplier_lead", Storage = "_MainSupplierLead", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MainSupplierLead
        {
            get
            {
                return this._MainSupplierLead;
            }
            set
            {
                if (this._MainSupplierLead != value)
                {
                    this.OnMainSupplierLeadChanging(value);
                    this.SendPropertyChanging("MainSupplierLead");
                    this._MainSupplierLead = value;
                    this.SendPropertyChanged("MainSupplierLead");
                    this.OnMainSupplierLeadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateSupplierId in the schema.
        /// </summary>
        [Column(Name = @"alternate_supplier_id", Storage = "_AlternateSupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AlternateSupplierId
        {
            get
            {
                return this._AlternateSupplierId;
            }
            set
            {
                if (this._AlternateSupplierId != value)
                {
                    if (this._Company_AlternateSupplierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAlternateSupplierIdChanging(value);
                    this.SendPropertyChanging("AlternateSupplierId");
                    this._AlternateSupplierId = value;
                    this.SendPropertyChanged("AlternateSupplierId");
                    this.OnAlternateSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateSupplierLead in the schema.
        /// </summary>
        [Column(Name = @"alternate_supplier_lead", Storage = "_AlternateSupplierLead", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AlternateSupplierLead
        {
            get
            {
                return this._AlternateSupplierLead;
            }
            set
            {
                if (this._AlternateSupplierLead != value)
                {
                    this.OnAlternateSupplierLeadChanging(value);
                    this.SendPropertyChanging("AlternateSupplierLead");
                    this._AlternateSupplierLead = value;
                    this.SendPropertyChanged("AlternateSupplierLead");
                    this.OnAlternateSupplierLeadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GuideCost in the schema.
        /// </summary>
        [Column(Name = @"guide_cost", Storage = "_GuideCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GuideCost
        {
            get
            {
                return this._GuideCost;
            }
            set
            {
                if (this._GuideCost != value)
                {
                    this.OnGuideCostChanging(value);
                    this.SendPropertyChanging("GuideCost");
                    this._GuideCost = value;
                    this.SendPropertyChanged("GuideCost");
                    this.OnGuideCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GuidePrice in the schema.
        /// </summary>
        [Column(Name = @"guide_price", Storage = "_GuidePrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GuidePrice
        {
            get
            {
                return this._GuidePrice;
            }
            set
            {
                if (this._GuidePrice != value)
                {
                    this.OnGuidePriceChanging(value);
                    this.SendPropertyChanging("GuidePrice");
                    this._GuidePrice = value;
                    this.SendPropertyChanged("GuidePrice");
                    this.OnGuidePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinimumPrice in the schema.
        /// </summary>
        [Column(Name = @"minimum_price", Storage = "_MinimumPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinimumPrice
        {
            get
            {
                return this._MinimumPrice;
            }
            set
            {
                if (this._MinimumPrice != value)
                {
                    this.OnMinimumPriceChanging(value);
                    this.SendPropertyChanging("MinimumPrice");
                    this._MinimumPrice = value;
                    this.SendPropertyChanged("MinimumPrice");
                    this.OnMinimumPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommodityId in the schema.
        /// </summary>
        [Column(Name = @"commodity_id", Storage = "_CommodityId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CommodityId
        {
            get
            {
                return this._CommodityId;
            }
            set
            {
                if (this._CommodityId != value)
                {
                    this.OnCommodityIdChanging(value);
                    this.SendPropertyChanging("CommodityId");
                    this._CommodityId = value;
                    this.SendPropertyChanged("CommodityId");
                    this.OnCommodityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchasingNote in the schema.
        /// </summary>
        [Column(Name = @"purchasing_notes", Storage = "_PurchasingNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PurchasingNote
        {
            get
            {
                return this._PurchasingNote;
            }
            set
            {
                if (this._PurchasingNote != value)
                {
                    this.OnPurchasingNoteChanging(value);
                    this.SendPropertyChanging("PurchasingNote");
                    this._PurchasingNote = value;
                    this.SendPropertyChanged("PurchasingNote");
                    this.OnPurchasingNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardCost in the schema.
        /// </summary>
        [Column(Name = @"standard_cost", Storage = "_StandardCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StandardCost
        {
            get
            {
                return this._StandardCost;
            }
            set
            {
                if (this._StandardCost != value)
                {
                    this.OnStandardCostChanging(value);
                    this.SendPropertyChanging("StandardCost");
                    this._StandardCost = value;
                    this.SendPropertyChanged("StandardCost");
                    this.OnStandardCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultLocation in the schema.
        /// </summary>
        [Column(Name = @"default_location", Storage = "_DefaultLocation", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string DefaultLocation
        {
            get
            {
                return this._DefaultLocation;
            }
            set
            {
                if (this._DefaultLocation != value)
                {
                    this.OnDefaultLocationChanging(value);
                    this.SendPropertyChanging("DefaultLocation");
                    this._DefaultLocation = value;
                    this.SendPropertyChanged("DefaultLocation");
                    this.OnDefaultLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceSubGroupId in the schema.
        /// </summary>
        [Column(Name = @"source_sub_group_id", Storage = "_SourceSubGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SourceSubGroupId
        {
            get
            {
                return this._SourceSubGroupId;
            }
            set
            {
                if (this._SourceSubGroupId != value)
                {
                    if (this._ProductSubGroup_SourceSubGroupId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSourceSubGroupIdChanging(value);
                    this.SendPropertyChanging("SourceSubGroupId");
                    this._SourceSubGroupId = value;
                    this.SendPropertyChanged("SourceSubGroupId");
                    this.OnSourceSubGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionProductId in the schema.
        /// </summary>
        [Column(Name = @"production_product_id", Storage = "_ProductionProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionProductId
        {
            get
            {
                return this._ProductionProductId;
            }
            set
            {
                if (this._ProductionProductId != value)
                {
                    if (this._Product_ProductionProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductionProductIdChanging(value);
                    this.SendPropertyChanging("ProductionProductId");
                    this._ProductionProductId = value;
                    this.SendPropertyChanged("ProductionProductId");
                    this.OnProductionProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_AlternateSupplierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_ProductSubGroup", Storage="_Company_AlternateSupplierId", ThisKey="AlternateSupplierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_AlternateSupplierId
        {
            get
            {
                return this._Company_AlternateSupplierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_AlternateSupplierId.Entity;
                if ((previousValue != value) || (this._Company_AlternateSupplierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_AlternateSupplierId");
                    if (previousValue != null)
                    {
                        this._Company_AlternateSupplierId.Entity = null;
                        previousValue.ProductSubGroup_AlternateSupplierId.Remove(this);
                    }
                    this._Company_AlternateSupplierId.Entity = value;
                    if (value != null)
                    {
                        this._AlternateSupplierId = value.Id;
                        value.ProductSubGroup_AlternateSupplierId.Add(this);
                    }
                    else
                    {
                        this._AlternateSupplierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_AlternateSupplierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_MainSupplierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_ProductSubGroup1", Storage="_Company_MainSupplierId", ThisKey="MainSupplierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_MainSupplierId
        {
            get
            {
                return this._Company_MainSupplierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_MainSupplierId.Entity;
                if ((previousValue != value) || (this._Company_MainSupplierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_MainSupplierId");
                    if (previousValue != null)
                    {
                        this._Company_MainSupplierId.Entity = null;
                        previousValue.ProductSubGroup_MainSupplierId.Remove(this);
                    }
                    this._Company_MainSupplierId.Entity = value;
                    if (value != null)
                    {
                        this._MainSupplierId = value.Id;
                        value.ProductSubGroup_MainSupplierId.Add(this);
                    }
                    else
                    {
                        this._MainSupplierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_MainSupplierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_MaxReorderUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductSubGroup", Storage="_UnitsOfMeasure_MaxReorderUnitId", ThisKey="MaxReorderUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_MaxReorderUnitId
        {
            get
            {
                return this._UnitsOfMeasure_MaxReorderUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_MaxReorderUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_MaxReorderUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_MaxReorderUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_MaxReorderUnitId.Entity = null;
                        previousValue.ProductSubGroup_MaxReorderUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_MaxReorderUnitId.Entity = value;
                    if (value != null)
                    {
                        this._MaxReorderUnitId = value.Id;
                        value.ProductSubGroup_MaxReorderUnitId.Add(this);
                    }
                    else
                    {
                        this._MaxReorderUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_MaxReorderUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_MaxStockUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductSubGroup1", Storage="_UnitsOfMeasure_MaxStockUnitId", ThisKey="MaxStockUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_MaxStockUnitId
        {
            get
            {
                return this._UnitsOfMeasure_MaxStockUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_MaxStockUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_MaxStockUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_MaxStockUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_MaxStockUnitId.Entity = null;
                        previousValue.ProductSubGroup_MaxStockUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_MaxStockUnitId.Entity = value;
                    if (value != null)
                    {
                        this._MaxStockUnitId = value.Id;
                        value.ProductSubGroup_MaxStockUnitId.Add(this);
                    }
                    else
                    {
                        this._MaxStockUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_MaxStockUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_MinReorderUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductSubGroup2", Storage="_UnitsOfMeasure_MinReorderUnitId", ThisKey="MinReorderUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_MinReorderUnitId
        {
            get
            {
                return this._UnitsOfMeasure_MinReorderUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_MinReorderUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_MinReorderUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_MinReorderUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_MinReorderUnitId.Entity = null;
                        previousValue.ProductSubGroup_MinReorderUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_MinReorderUnitId.Entity = value;
                    if (value != null)
                    {
                        this._MinReorderUnitId = value.Id;
                        value.ProductSubGroup_MinReorderUnitId.Add(this);
                    }
                    else
                    {
                        this._MinReorderUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_MinReorderUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_MinStockPeriodUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductSubGroup3", Storage="_UnitsOfMeasure_MinStockPeriodUnitId", ThisKey="MinStockPeriodUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_MinStockPeriodUnitId
        {
            get
            {
                return this._UnitsOfMeasure_MinStockPeriodUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_MinStockPeriodUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_MinStockPeriodUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_MinStockPeriodUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_MinStockPeriodUnitId.Entity = null;
                        previousValue.ProductSubGroup_MinStockPeriodUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_MinStockPeriodUnitId.Entity = value;
                    if (value != null)
                    {
                        this._MinStockPeriodUnitId = value.Id;
                        value.ProductSubGroup_MinStockPeriodUnitId.Add(this);
                    }
                    else
                    {
                        this._MinStockPeriodUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_MinStockPeriodUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_MinStockUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductSubGroup4", Storage="_UnitsOfMeasure_MinStockUnitId", ThisKey="MinStockUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_MinStockUnitId
        {
            get
            {
                return this._UnitsOfMeasure_MinStockUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_MinStockUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_MinStockUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_MinStockUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_MinStockUnitId.Entity = null;
                        previousValue.ProductSubGroup_MinStockUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_MinStockUnitId.Entity = value;
                    if (value != null)
                    {
                        this._MinStockUnitId = value.Id;
                        value.ProductSubGroup_MinStockUnitId.Add(this);
                    }
                    else
                    {
                        this._MinStockUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_MinStockUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_ProductSubGroup", Storage="_Branch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.ProductSubGroup.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.ProductSubGroup.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_ProductSubGroup", Storage="_Product_ProductId", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_ProductId
        {
            get
            {
                return this._Product_ProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_ProductId.Entity;
                if ((previousValue != value) || (this._Product_ProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_ProductId");
                    if (previousValue != null)
                    {
                        this._Product_ProductId.Entity = null;
                        previousValue.ProductSubGroup_ProductId.Remove(this);
                    }
                    this._Product_ProductId.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.ProductSubGroup_ProductId.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_ProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ProductionProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_ProductSubGroup1", Storage="_Product_ProductionProductId", ThisKey="ProductionProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_ProductionProductId
        {
            get
            {
                return this._Product_ProductionProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_ProductionProductId.Entity;
                if ((previousValue != value) || (this._Product_ProductionProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_ProductionProductId");
                    if (previousValue != null)
                    {
                        this._Product_ProductionProductId.Entity = null;
                        previousValue.ProductSubGroup_ProductionProductId.Remove(this);
                    }
                    this._Product_ProductionProductId.Entity = value;
                    if (value != null)
                    {
                        this._ProductionProductId = value.Id;
                        value.ProductSubGroup_ProductionProductId.Add(this);
                    }
                    else
                    {
                        this._ProductionProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_ProductionProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroup_SourceSubGroupId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductSubGroup_ProductSubGroup", Storage="_ProductSubGroup_SourceSubGroupId1", ThisKey="Id", OtherKey="SourceSubGroupId", DeleteRule="NO ACTION")]
        public EntitySet<ProductSubGroup> ProductSubGroup_SourceSubGroupId1
        {
            get
            {
                return this._ProductSubGroup_SourceSubGroupId1;
            }
            set
            {
                this._ProductSubGroup_SourceSubGroupId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroup_SourceSubGroupId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductSubGroup_ProductSubGroup", Storage="_ProductSubGroup_SourceSubGroupId", ThisKey="SourceSubGroupId", OtherKey="Id", IsForeignKey=true)]
        public ProductSubGroup ProductSubGroup_SourceSubGroupId
        {
            get
            {
                return this._ProductSubGroup_SourceSubGroupId.Entity;
            }
            set
            {
                ProductSubGroup previousValue = this._ProductSubGroup_SourceSubGroupId.Entity;
                if ((previousValue != value) || (this._ProductSubGroup_SourceSubGroupId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductSubGroup_SourceSubGroupId");
                    if (previousValue != null)
                    {
                        this._ProductSubGroup_SourceSubGroupId.Entity = null;
                        previousValue.ProductSubGroup_SourceSubGroupId1.Remove(this);
                    }
                    this._ProductSubGroup_SourceSubGroupId.Entity = value;
                    if (value != null)
                    {
                        this._SourceSubGroupId = value.Id;
                        value.ProductSubGroup_SourceSubGroupId1.Add(this);
                    }
                    else
                    {
                        this._SourceSubGroupId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductSubGroup_SourceSubGroupId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductSubGroup_SalesItem", Storage="_SalesItem", ThisKey="Id", OtherKey="ProductSubGroupId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem
        {
            get
            {
                return this._SalesItem;
            }
            set
            {
                this._SalesItem.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductSubGroup_SourceSubGroupId1(ProductSubGroup entity)
        {
            this.SendPropertyChanging("ProductSubGroup_SourceSubGroupId1");
            entity.ProductSubGroup_SourceSubGroupId = this;
        }
    
        private void detach_ProductSubGroup_SourceSubGroupId1(ProductSubGroup entity)
        {
            this.SendPropertyChanging("ProductSubGroup_SourceSubGroupId1");
            entity.ProductSubGroup_SourceSubGroupId = null;
        }

        private void attach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.ProductSubGroup = this;
        }
    
        private void detach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.ProductSubGroup = null;
        }
    }

}
