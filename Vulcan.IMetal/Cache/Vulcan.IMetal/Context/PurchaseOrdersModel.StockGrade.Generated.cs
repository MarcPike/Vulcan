//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.StockGrade in the schema.
    /// </summary>
    [Table(Name = @"public.stock_grades")]
    public partial class StockGrade : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Code;

        private string _Description;

        private System.Nullable<bool> _IgnoreElement;

        private string _AlloyGroup;

        private System.Nullable<decimal> _CopperPercentage;

        private System.Nullable<decimal> _TinPercentage;

        private System.Nullable<decimal> _ZincPercentage;

        private System.Nullable<decimal> _NickelPercentage;

        private System.Nullable<decimal> _OtherPercentage;
        #pragma warning restore 0649

        private EntitySet<StockCast> _StockCast;

        private EntitySet<Product> _Product_GradeId;

        private EntitySet<Product> _Product_MinimumGradeId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIgnoreElementChanging(System.Nullable<bool> value);
        partial void OnIgnoreElementChanged();
        partial void OnAlloyGroupChanging(string value);
        partial void OnAlloyGroupChanged();
        partial void OnCopperPercentageChanging(System.Nullable<decimal> value);
        partial void OnCopperPercentageChanged();
        partial void OnTinPercentageChanging(System.Nullable<decimal> value);
        partial void OnTinPercentageChanged();
        partial void OnZincPercentageChanging(System.Nullable<decimal> value);
        partial void OnZincPercentageChanged();
        partial void OnNickelPercentageChanging(System.Nullable<decimal> value);
        partial void OnNickelPercentageChanged();
        partial void OnOtherPercentageChanging(System.Nullable<decimal> value);
        partial void OnOtherPercentageChanged();
        #endregion

        public StockGrade()
        {
            this._StockCast = new EntitySet<StockCast>(new Action<StockCast>(this.attach_StockCast), new Action<StockCast>(this.detach_StockCast));
            this._Product_GradeId = new EntitySet<Product>(new Action<Product>(this.attach_Product_GradeId), new Action<Product>(this.detach_Product_GradeId));
            this._Product_MinimumGradeId = new EntitySet<Product>(new Action<Product>(this.attach_Product_MinimumGradeId), new Action<Product>(this.detach_Product_MinimumGradeId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IgnoreElement in the schema.
        /// </summary>
        [Column(Name = @"ignore_elements", Storage = "_IgnoreElement", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> IgnoreElement
        {
            get
            {
                return this._IgnoreElement;
            }
            set
            {
                if (this._IgnoreElement != value)
                {
                    this.OnIgnoreElementChanging(value);
                    this.SendPropertyChanging("IgnoreElement");
                    this._IgnoreElement = value;
                    this.SendPropertyChanged("IgnoreElement");
                    this.OnIgnoreElementChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlloyGroup in the schema.
        /// </summary>
        [Column(Name = @"alloy_group", Storage = "_AlloyGroup", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string AlloyGroup
        {
            get
            {
                return this._AlloyGroup;
            }
            set
            {
                if (this._AlloyGroup != value)
                {
                    this.OnAlloyGroupChanging(value);
                    this.SendPropertyChanging("AlloyGroup");
                    this._AlloyGroup = value;
                    this.SendPropertyChanged("AlloyGroup");
                    this.OnAlloyGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CopperPercentage in the schema.
        /// </summary>
        [Column(Name = @"copper_percentage", Storage = "_CopperPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CopperPercentage
        {
            get
            {
                return this._CopperPercentage;
            }
            set
            {
                if (this._CopperPercentage != value)
                {
                    this.OnCopperPercentageChanging(value);
                    this.SendPropertyChanging("CopperPercentage");
                    this._CopperPercentage = value;
                    this.SendPropertyChanged("CopperPercentage");
                    this.OnCopperPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TinPercentage in the schema.
        /// </summary>
        [Column(Name = @"tin_percentage", Storage = "_TinPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TinPercentage
        {
            get
            {
                return this._TinPercentage;
            }
            set
            {
                if (this._TinPercentage != value)
                {
                    this.OnTinPercentageChanging(value);
                    this.SendPropertyChanging("TinPercentage");
                    this._TinPercentage = value;
                    this.SendPropertyChanged("TinPercentage");
                    this.OnTinPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZincPercentage in the schema.
        /// </summary>
        [Column(Name = @"zinc_percentage", Storage = "_ZincPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ZincPercentage
        {
            get
            {
                return this._ZincPercentage;
            }
            set
            {
                if (this._ZincPercentage != value)
                {
                    this.OnZincPercentageChanging(value);
                    this.SendPropertyChanging("ZincPercentage");
                    this._ZincPercentage = value;
                    this.SendPropertyChanged("ZincPercentage");
                    this.OnZincPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NickelPercentage in the schema.
        /// </summary>
        [Column(Name = @"nickel_percentage", Storage = "_NickelPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> NickelPercentage
        {
            get
            {
                return this._NickelPercentage;
            }
            set
            {
                if (this._NickelPercentage != value)
                {
                    this.OnNickelPercentageChanging(value);
                    this.SendPropertyChanging("NickelPercentage");
                    this._NickelPercentage = value;
                    this.SendPropertyChanged("NickelPercentage");
                    this.OnNickelPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherPercentage in the schema.
        /// </summary>
        [Column(Name = @"other_percentage", Storage = "_OtherPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OtherPercentage
        {
            get
            {
                return this._OtherPercentage;
            }
            set
            {
                if (this._OtherPercentage != value)
                {
                    this.OnOtherPercentageChanging(value);
                    this.SendPropertyChanging("OtherPercentage");
                    this._OtherPercentage = value;
                    this.SendPropertyChanged("OtherPercentage");
                    this.OnOtherPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCast in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_StockCast", Storage="_StockCast", ThisKey="Id", OtherKey="GradeId", DeleteRule="NO ACTION")]
        public EntitySet<StockCast> StockCast
        {
            get
            {
                return this._StockCast;
            }
            set
            {
                this._StockCast.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product_GradeId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_Product", Storage="_Product_GradeId", ThisKey="Id", OtherKey="GradeId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product_GradeId
        {
            get
            {
                return this._Product_GradeId;
            }
            set
            {
                this._Product_GradeId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product_MinimumGradeId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_Product1", Storage="_Product_MinimumGradeId", ThisKey="Id", OtherKey="MinimumGradeId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product_MinimumGradeId
        {
            get
            {
                return this._Product_MinimumGradeId;
            }
            set
            {
                this._Product_MinimumGradeId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.StockGrade = this;
        }
    
        private void detach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.StockGrade = null;
        }

        private void attach_Product_GradeId(Product entity)
        {
            this.SendPropertyChanging("Product_GradeId");
            entity.StockGrade_GradeId = this;
        }
    
        private void detach_Product_GradeId(Product entity)
        {
            this.SendPropertyChanging("Product_GradeId");
            entity.StockGrade_GradeId = null;
        }

        private void attach_Product_MinimumGradeId(Product entity)
        {
            this.SendPropertyChanging("Product_MinimumGradeId");
            entity.StockGrade_MinimumGradeId = this;
        }
    
        private void detach_Product_MinimumGradeId(Product entity)
        {
            this.SendPropertyChanging("Product_MinimumGradeId");
            entity.StockGrade_MinimumGradeId = null;
        }
    }

}
