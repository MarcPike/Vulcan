//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.PurchaseOrderHeader in the schema.
    /// </summary>
    [Table(Name = @"public.purchase_order_headers")]
    public partial class PurchaseOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _Number;

        private System.Nullable<int> _SupplierId;

        private string _SupplierNameOverride;

        private System.Nullable<int> _SupplierAddressId;

        private System.Nullable<int> _DeliverFromId;

        private string _DeliverFromNameOverride;

        private System.Nullable<int> _DeliverFromAddressId;

        private string _Salesperson;

        private System.Nullable<int> _BuyerId;

        private System.Nullable<int> _DeliveryBranchId;

        private System.Nullable<int> _DeliveryWarehouseId;

        private string _DeliveryName;

        private System.Nullable<int> _DeliveryAddressId;

        private System.Nullable<int> _StatusId;

        private System.Nullable<int> _TypeId;

        private System.Nullable<int> _CategoryId;

        private System.Nullable<System.DateTime> _RaisedDate;

        private System.Nullable<System.DateTime> _DueDate;

        private System.Nullable<System.DateTime> _OriginalDueDate;

        private string _ManualDate;

        private System.Nullable<int> _RollingWeek;

        private string _RollingReference;

        private System.Nullable<int> _TransportTypeId;

        private string _DeliveryPoint;

        private System.Nullable<int> _CarrierId;

        private System.Nullable<decimal> _CostRate;

        private System.Nullable<int> _CostRateUnitId;

        private System.Nullable<decimal> _CostAmount;

        private System.Nullable<decimal> _TransportExchangeRate;

        private string _TransportExchangeRateType;

        private System.Nullable<int> _TransportExchangeRateTypeId;

        private System.Nullable<bool> _Acknowledged;

        private System.Nullable<System.DateTime> _AcknowledgedDate;

        private System.Nullable<bool> _Printed;

        private System.Nullable<decimal> _ExchangeRate;

        private string _ExchangeRateType;

        private System.Nullable<int> _ExchangeRateTypeId;

        private System.Nullable<int> _TermsId;

        private System.Nullable<int> _CertificationsId;

        private string _ExternalHeaderText;

        private string _ExternalFooterText;

        private string _InternalHeaderText;

        private string _InternalFooterText;

        private System.Nullable<System.DateTime> _PrintedDate;

        private System.Nullable<System.DateTime> _CompletedDate;

        private string _SupplierOrder;

        private System.Nullable<int> _PurchaseOrderTotalsId;

        private System.Nullable<int> _PurchaseEntryTotalsId;

        private bool _Locked = false;

        private System.Nullable<int> _TransportPurchaseOrderBranchId;

        private System.Nullable<int> _TransportPurchaseOrderHeaderId;

        private System.Nullable<int> _TransportPurchaseOrderItemId;

        private string _TransportBillingRef;

        private string _GoodsInwardsNote;

        private System.Nullable<System.DateTime> _DespatchDate;

        private System.Nullable<System.DateTime> _FixDate;

        private System.Nullable<bool> _OutsideProcessing = false;

        private System.Nullable<int> _DeletionReasonId;

        private string _DeletionReasonDescription;

        private string _PurchaseType;

        private System.Nullable<int> _Contact1Id;

        private System.Nullable<int> _Contact2Id;

        private string _Contact3Name;

        private string _Contact4Name;

        private string _SupplierReference;

        private string _AcknowledgementNumber;

        private string _ProgressionHeaderText;

        private string _RequestType;

        private string _DespatchNote;

        private string _GroupingKey;

        private string _HeaderIndex;

        private string _TransferType;

        private System.Nullable<int> _TransportPurchaseGroupId;

        private System.Nullable<int> _ImportBatchNumber;

        private string _ImportSource;

        private System.Nullable<int> _ImportNumber;

        private System.Nullable<int> _ContactId;
        #pragma warning restore 0649

        private EntityRef<Company> _Company_CarrierId;

        private EntityRef<Company> _Company_SupplierId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<PurchaseStatusCode> _PurchaseStatusCode;

        private EntitySet<PurchaseOrderHeader> _PurchaseOrderHeader_TransportPurchaseOrderHeaderId1;

        private EntityRef<PurchaseOrderHeader> _PurchaseOrderHeader_TransportPurchaseOrderHeaderId;

        private EntityRef<PurchaseOrderItem> _PurchaseOrderItem_TransportPurchaseOrderItemId;

        private EntitySet<PurchaseOrderItem> _PurchaseOrderItem_BtbPurchaseHeaderId;

        private EntitySet<PurchaseOrderItem> _PurchaseOrderItem_PurchaseHeaderId;

        private EntityRef<PurchaseCategoryCode> _PurchaseCategoryCode;

        private EntityRef<Address> _Address_DeliverFromAddressId;

        private EntityRef<CompanySubAddress> _CompanySubAddress;

        private EntityRef<Address> _Address_DeliveryAddressId;

        private EntityRef<Address> _Address_SupplierAddressId;

        private EntityRef<Buyer> _Buyer;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnNumberChanging(System.Nullable<int> value);
        partial void OnNumberChanged();
        partial void OnSupplierIdChanging(System.Nullable<int> value);
        partial void OnSupplierIdChanged();
        partial void OnSupplierNameOverrideChanging(string value);
        partial void OnSupplierNameOverrideChanged();
        partial void OnSupplierAddressIdChanging(System.Nullable<int> value);
        partial void OnSupplierAddressIdChanged();
        partial void OnDeliverFromIdChanging(System.Nullable<int> value);
        partial void OnDeliverFromIdChanged();
        partial void OnDeliverFromNameOverrideChanging(string value);
        partial void OnDeliverFromNameOverrideChanged();
        partial void OnDeliverFromAddressIdChanging(System.Nullable<int> value);
        partial void OnDeliverFromAddressIdChanged();
        partial void OnSalespersonChanging(string value);
        partial void OnSalespersonChanged();
        partial void OnBuyerIdChanging(System.Nullable<int> value);
        partial void OnBuyerIdChanged();
        partial void OnDeliveryBranchIdChanging(System.Nullable<int> value);
        partial void OnDeliveryBranchIdChanged();
        partial void OnDeliveryWarehouseIdChanging(System.Nullable<int> value);
        partial void OnDeliveryWarehouseIdChanged();
        partial void OnDeliveryNameChanging(string value);
        partial void OnDeliveryNameChanged();
        partial void OnDeliveryAddressIdChanging(System.Nullable<int> value);
        partial void OnDeliveryAddressIdChanged();
        partial void OnStatusIdChanging(System.Nullable<int> value);
        partial void OnStatusIdChanged();
        partial void OnTypeIdChanging(System.Nullable<int> value);
        partial void OnTypeIdChanged();
        partial void OnCategoryIdChanging(System.Nullable<int> value);
        partial void OnCategoryIdChanged();
        partial void OnRaisedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnRaisedDateChanged();
        partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDueDateChanged();
        partial void OnOriginalDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOriginalDueDateChanged();
        partial void OnManualDateChanging(string value);
        partial void OnManualDateChanged();
        partial void OnRollingWeekChanging(System.Nullable<int> value);
        partial void OnRollingWeekChanged();
        partial void OnRollingReferenceChanging(string value);
        partial void OnRollingReferenceChanged();
        partial void OnTransportTypeIdChanging(System.Nullable<int> value);
        partial void OnTransportTypeIdChanged();
        partial void OnDeliveryPointChanging(string value);
        partial void OnDeliveryPointChanged();
        partial void OnCarrierIdChanging(System.Nullable<int> value);
        partial void OnCarrierIdChanged();
        partial void OnCostRateChanging(System.Nullable<decimal> value);
        partial void OnCostRateChanged();
        partial void OnCostRateUnitIdChanging(System.Nullable<int> value);
        partial void OnCostRateUnitIdChanged();
        partial void OnCostAmountChanging(System.Nullable<decimal> value);
        partial void OnCostAmountChanged();
        partial void OnTransportExchangeRateChanging(System.Nullable<decimal> value);
        partial void OnTransportExchangeRateChanged();
        partial void OnTransportExchangeRateTypeChanging(string value);
        partial void OnTransportExchangeRateTypeChanged();
        partial void OnTransportExchangeRateTypeIdChanging(System.Nullable<int> value);
        partial void OnTransportExchangeRateTypeIdChanged();
        partial void OnAcknowledgedChanging(System.Nullable<bool> value);
        partial void OnAcknowledgedChanged();
        partial void OnAcknowledgedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnAcknowledgedDateChanged();
        partial void OnPrintedChanging(System.Nullable<bool> value);
        partial void OnPrintedChanged();
        partial void OnExchangeRateChanging(System.Nullable<decimal> value);
        partial void OnExchangeRateChanged();
        partial void OnExchangeRateTypeChanging(string value);
        partial void OnExchangeRateTypeChanged();
        partial void OnExchangeRateTypeIdChanging(System.Nullable<int> value);
        partial void OnExchangeRateTypeIdChanged();
        partial void OnTermsIdChanging(System.Nullable<int> value);
        partial void OnTermsIdChanged();
        partial void OnCertificationsIdChanging(System.Nullable<int> value);
        partial void OnCertificationsIdChanged();
        partial void OnExternalHeaderTextChanging(string value);
        partial void OnExternalHeaderTextChanged();
        partial void OnExternalFooterTextChanging(string value);
        partial void OnExternalFooterTextChanged();
        partial void OnInternalHeaderTextChanging(string value);
        partial void OnInternalHeaderTextChanged();
        partial void OnInternalFooterTextChanging(string value);
        partial void OnInternalFooterTextChanged();
        partial void OnPrintedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPrintedDateChanged();
        partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCompletedDateChanged();
        partial void OnSupplierOrderChanging(string value);
        partial void OnSupplierOrderChanged();
        partial void OnPurchaseOrderTotalsIdChanging(System.Nullable<int> value);
        partial void OnPurchaseOrderTotalsIdChanged();
        partial void OnPurchaseEntryTotalsIdChanging(System.Nullable<int> value);
        partial void OnPurchaseEntryTotalsIdChanged();
        partial void OnLockedChanging(bool value);
        partial void OnLockedChanged();
        partial void OnTransportPurchaseOrderBranchIdChanging(System.Nullable<int> value);
        partial void OnTransportPurchaseOrderBranchIdChanged();
        partial void OnTransportPurchaseOrderHeaderIdChanging(System.Nullable<int> value);
        partial void OnTransportPurchaseOrderHeaderIdChanged();
        partial void OnTransportPurchaseOrderItemIdChanging(System.Nullable<int> value);
        partial void OnTransportPurchaseOrderItemIdChanged();
        partial void OnTransportBillingRefChanging(string value);
        partial void OnTransportBillingRefChanged();
        partial void OnGoodsInwardsNoteChanging(string value);
        partial void OnGoodsInwardsNoteChanged();
        partial void OnDespatchDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDespatchDateChanged();
        partial void OnFixDateChanging(System.Nullable<System.DateTime> value);
        partial void OnFixDateChanged();
        partial void OnOutsideProcessingChanging(System.Nullable<bool> value);
        partial void OnOutsideProcessingChanged();
        partial void OnDeletionReasonIdChanging(System.Nullable<int> value);
        partial void OnDeletionReasonIdChanged();
        partial void OnDeletionReasonDescriptionChanging(string value);
        partial void OnDeletionReasonDescriptionChanged();
        partial void OnPurchaseTypeChanging(string value);
        partial void OnPurchaseTypeChanged();
        partial void OnContact1IdChanging(System.Nullable<int> value);
        partial void OnContact1IdChanged();
        partial void OnContact2IdChanging(System.Nullable<int> value);
        partial void OnContact2IdChanged();
        partial void OnContact3NameChanging(string value);
        partial void OnContact3NameChanged();
        partial void OnContact4NameChanging(string value);
        partial void OnContact4NameChanged();
        partial void OnSupplierReferenceChanging(string value);
        partial void OnSupplierReferenceChanged();
        partial void OnAcknowledgementNumberChanging(string value);
        partial void OnAcknowledgementNumberChanged();
        partial void OnProgressionHeaderTextChanging(string value);
        partial void OnProgressionHeaderTextChanged();
        partial void OnRequestTypeChanging(string value);
        partial void OnRequestTypeChanged();
        partial void OnDespatchNoteChanging(string value);
        partial void OnDespatchNoteChanged();
        partial void OnGroupingKeyChanging(string value);
        partial void OnGroupingKeyChanged();
        partial void OnHeaderIndexChanging(string value);
        partial void OnHeaderIndexChanged();
        partial void OnTransferTypeChanging(string value);
        partial void OnTransferTypeChanged();
        partial void OnTransportPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnTransportPurchaseGroupIdChanged();
        partial void OnImportBatchNumberChanging(System.Nullable<int> value);
        partial void OnImportBatchNumberChanged();
        partial void OnImportSourceChanging(string value);
        partial void OnImportSourceChanged();
        partial void OnImportNumberChanging(System.Nullable<int> value);
        partial void OnImportNumberChanged();
        partial void OnContactIdChanging(System.Nullable<int> value);
        partial void OnContactIdChanged();
        #endregion

        public PurchaseOrderHeader()
        {
            this._Company_CarrierId  = default(EntityRef<Company>);
            this._Company_SupplierId  = default(EntityRef<Company>);
            this._UnitsOfMeasure  = default(EntityRef<UnitsOfMeasure>);
            this._Warehouse  = default(EntityRef<Warehouse>);
            this._PurchaseStatusCode  = default(EntityRef<PurchaseStatusCode>);
            this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId1 = new EntitySet<PurchaseOrderHeader>(new Action<PurchaseOrderHeader>(this.attach_PurchaseOrderHeader_TransportPurchaseOrderHeaderId1), new Action<PurchaseOrderHeader>(this.detach_PurchaseOrderHeader_TransportPurchaseOrderHeaderId1));
            this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId  = default(EntityRef<PurchaseOrderHeader>);
            this._PurchaseOrderItem_TransportPurchaseOrderItemId  = default(EntityRef<PurchaseOrderItem>);
            this._PurchaseOrderItem_BtbPurchaseHeaderId = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItem_BtbPurchaseHeaderId), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItem_BtbPurchaseHeaderId));
            this._PurchaseOrderItem_PurchaseHeaderId = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItem_PurchaseHeaderId), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItem_PurchaseHeaderId));
            this._PurchaseCategoryCode  = default(EntityRef<PurchaseCategoryCode>);
            this._Address_DeliverFromAddressId  = default(EntityRef<Address>);
            this._CompanySubAddress  = default(EntityRef<CompanySubAddress>);
            this._Address_DeliveryAddressId  = default(EntityRef<Address>);
            this._Address_SupplierAddressId  = default(EntityRef<Address>);
            this._Buyer  = default(EntityRef<Buyer>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Name = @"""number""", Storage = "_Number", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging("Number");
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"supplier_id", Storage = "_SupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    if (this._Company_SupplierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging("SupplierId");
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierNameOverride in the schema.
        /// </summary>
        [Column(Name = @"supplier_name_override", Storage = "_SupplierNameOverride", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string SupplierNameOverride
        {
            get
            {
                return this._SupplierNameOverride;
            }
            set
            {
                if (this._SupplierNameOverride != value)
                {
                    this.OnSupplierNameOverrideChanging(value);
                    this.SendPropertyChanging("SupplierNameOverride");
                    this._SupplierNameOverride = value;
                    this.SendPropertyChanged("SupplierNameOverride");
                    this.OnSupplierNameOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierAddressId in the schema.
        /// </summary>
        [Column(Name = @"supplier_address_id", Storage = "_SupplierAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SupplierAddressId
        {
            get
            {
                return this._SupplierAddressId;
            }
            set
            {
                if (this._SupplierAddressId != value)
                {
                    if (this._Address_SupplierAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSupplierAddressIdChanging(value);
                    this.SendPropertyChanging("SupplierAddressId");
                    this._SupplierAddressId = value;
                    this.SendPropertyChanged("SupplierAddressId");
                    this.OnSupplierAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverFromId in the schema.
        /// </summary>
        [Column(Name = @"deliver_from_id", Storage = "_DeliverFromId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliverFromId
        {
            get
            {
                return this._DeliverFromId;
            }
            set
            {
                if (this._DeliverFromId != value)
                {
                    if (this._CompanySubAddress.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliverFromIdChanging(value);
                    this.SendPropertyChanging("DeliverFromId");
                    this._DeliverFromId = value;
                    this.SendPropertyChanged("DeliverFromId");
                    this.OnDeliverFromIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverFromNameOverride in the schema.
        /// </summary>
        [Column(Name = @"deliver_from_name_override", Storage = "_DeliverFromNameOverride", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliverFromNameOverride
        {
            get
            {
                return this._DeliverFromNameOverride;
            }
            set
            {
                if (this._DeliverFromNameOverride != value)
                {
                    this.OnDeliverFromNameOverrideChanging(value);
                    this.SendPropertyChanging("DeliverFromNameOverride");
                    this._DeliverFromNameOverride = value;
                    this.SendPropertyChanged("DeliverFromNameOverride");
                    this.OnDeliverFromNameOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverFromAddressId in the schema.
        /// </summary>
        [Column(Name = @"deliver_from_address_id", Storage = "_DeliverFromAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliverFromAddressId
        {
            get
            {
                return this._DeliverFromAddressId;
            }
            set
            {
                if (this._DeliverFromAddressId != value)
                {
                    if (this._Address_DeliverFromAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliverFromAddressIdChanging(value);
                    this.SendPropertyChanging("DeliverFromAddressId");
                    this._DeliverFromAddressId = value;
                    this.SendPropertyChanged("DeliverFromAddressId");
                    this.OnDeliverFromAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salesperson in the schema.
        /// </summary>
        [Column(Name = @"salesperson", Storage = "_Salesperson", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Salesperson
        {
            get
            {
                return this._Salesperson;
            }
            set
            {
                if (this._Salesperson != value)
                {
                    this.OnSalespersonChanging(value);
                    this.SendPropertyChanging("Salesperson");
                    this._Salesperson = value;
                    this.SendPropertyChanged("Salesperson");
                    this.OnSalespersonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyerId in the schema.
        /// </summary>
        [Column(Name = @"buyer_id", Storage = "_BuyerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BuyerId
        {
            get
            {
                return this._BuyerId;
            }
            set
            {
                if (this._BuyerId != value)
                {
                    if (this._Buyer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBuyerIdChanging(value);
                    this.SendPropertyChanging("BuyerId");
                    this._BuyerId = value;
                    this.SendPropertyChanged("BuyerId");
                    this.OnBuyerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryBranchId in the schema.
        /// </summary>
        [Column(Name = @"delivery_branch_id", Storage = "_DeliveryBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveryBranchId
        {
            get
            {
                return this._DeliveryBranchId;
            }
            set
            {
                if (this._DeliveryBranchId != value)
                {
                    this.OnDeliveryBranchIdChanging(value);
                    this.SendPropertyChanging("DeliveryBranchId");
                    this._DeliveryBranchId = value;
                    this.SendPropertyChanged("DeliveryBranchId");
                    this.OnDeliveryBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"delivery_warehouse_id", Storage = "_DeliveryWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveryWarehouseId
        {
            get
            {
                return this._DeliveryWarehouseId;
            }
            set
            {
                if (this._DeliveryWarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryWarehouseIdChanging(value);
                    this.SendPropertyChanging("DeliveryWarehouseId");
                    this._DeliveryWarehouseId = value;
                    this.SendPropertyChanged("DeliveryWarehouseId");
                    this.OnDeliveryWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryName in the schema.
        /// </summary>
        [Column(Name = @"delivery_name", Storage = "_DeliveryName", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryName
        {
            get
            {
                return this._DeliveryName;
            }
            set
            {
                if (this._DeliveryName != value)
                {
                    this.OnDeliveryNameChanging(value);
                    this.SendPropertyChanging("DeliveryName");
                    this._DeliveryName = value;
                    this.SendPropertyChanged("DeliveryName");
                    this.OnDeliveryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryAddressId in the schema.
        /// </summary>
        [Column(Name = @"delivery_address_id", Storage = "_DeliveryAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveryAddressId
        {
            get
            {
                return this._DeliveryAddressId;
            }
            set
            {
                if (this._DeliveryAddressId != value)
                {
                    if (this._Address_DeliveryAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryAddressIdChanging(value);
                    this.SendPropertyChanging("DeliveryAddressId");
                    this._DeliveryAddressId = value;
                    this.SendPropertyChanged("DeliveryAddressId");
                    this.OnDeliveryAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._PurchaseStatusCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"type_id", Storage = "_TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._PurchaseCategoryCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RaisedDate in the schema.
        /// </summary>
        [Column(Name = @"raised_date", Storage = "_RaisedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> RaisedDate
        {
            get
            {
                return this._RaisedDate;
            }
            set
            {
                if (this._RaisedDate != value)
                {
                    this.OnRaisedDateChanging(value);
                    this.SendPropertyChanging("RaisedDate");
                    this._RaisedDate = value;
                    this.SendPropertyChanged("RaisedDate");
                    this.OnRaisedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DueDate in the schema.
        /// </summary>
        [Column(Name = @"due_date", Storage = "_DueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DueDate
        {
            get
            {
                return this._DueDate;
            }
            set
            {
                if (this._DueDate != value)
                {
                    this.OnDueDateChanging(value);
                    this.SendPropertyChanging("DueDate");
                    this._DueDate = value;
                    this.SendPropertyChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalDueDate in the schema.
        /// </summary>
        [Column(Name = @"original_due_date", Storage = "_OriginalDueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> OriginalDueDate
        {
            get
            {
                return this._OriginalDueDate;
            }
            set
            {
                if (this._OriginalDueDate != value)
                {
                    this.OnOriginalDueDateChanging(value);
                    this.SendPropertyChanging("OriginalDueDate");
                    this._OriginalDueDate = value;
                    this.SendPropertyChanged("OriginalDueDate");
                    this.OnOriginalDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManualDate in the schema.
        /// </summary>
        [Column(Name = @"manual_date", Storage = "_ManualDate", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string ManualDate
        {
            get
            {
                return this._ManualDate;
            }
            set
            {
                if (this._ManualDate != value)
                {
                    this.OnManualDateChanging(value);
                    this.SendPropertyChanging("ManualDate");
                    this._ManualDate = value;
                    this.SendPropertyChanged("ManualDate");
                    this.OnManualDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RollingWeek in the schema.
        /// </summary>
        [Column(Name = @"rolling_week", Storage = "_RollingWeek", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RollingWeek
        {
            get
            {
                return this._RollingWeek;
            }
            set
            {
                if (this._RollingWeek != value)
                {
                    this.OnRollingWeekChanging(value);
                    this.SendPropertyChanging("RollingWeek");
                    this._RollingWeek = value;
                    this.SendPropertyChanged("RollingWeek");
                    this.OnRollingWeekChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RollingReference in the schema.
        /// </summary>
        [Column(Name = @"rolling_reference", Storage = "_RollingReference", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string RollingReference
        {
            get
            {
                return this._RollingReference;
            }
            set
            {
                if (this._RollingReference != value)
                {
                    this.OnRollingReferenceChanging(value);
                    this.SendPropertyChanging("RollingReference");
                    this._RollingReference = value;
                    this.SendPropertyChanged("RollingReference");
                    this.OnRollingReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportTypeId in the schema.
        /// </summary>
        [Column(Name = @"transport_type_id", Storage = "_TransportTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportTypeId
        {
            get
            {
                return this._TransportTypeId;
            }
            set
            {
                if (this._TransportTypeId != value)
                {
                    this.OnTransportTypeIdChanging(value);
                    this.SendPropertyChanging("TransportTypeId");
                    this._TransportTypeId = value;
                    this.SendPropertyChanged("TransportTypeId");
                    this.OnTransportTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryPoint in the schema.
        /// </summary>
        [Column(Name = @"delivery_point", Storage = "_DeliveryPoint", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryPoint
        {
            get
            {
                return this._DeliveryPoint;
            }
            set
            {
                if (this._DeliveryPoint != value)
                {
                    this.OnDeliveryPointChanging(value);
                    this.SendPropertyChanging("DeliveryPoint");
                    this._DeliveryPoint = value;
                    this.SendPropertyChanged("DeliveryPoint");
                    this.OnDeliveryPointChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CarrierId in the schema.
        /// </summary>
        [Column(Name = @"carrier_id", Storage = "_CarrierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CarrierId
        {
            get
            {
                return this._CarrierId;
            }
            set
            {
                if (this._CarrierId != value)
                {
                    if (this._Company_CarrierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCarrierIdChanging(value);
                    this.SendPropertyChanging("CarrierId");
                    this._CarrierId = value;
                    this.SendPropertyChanged("CarrierId");
                    this.OnCarrierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostRate in the schema.
        /// </summary>
        [Column(Name = @"cost_rate", Storage = "_CostRate", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CostRate
        {
            get
            {
                return this._CostRate;
            }
            set
            {
                if (this._CostRate != value)
                {
                    this.OnCostRateChanging(value);
                    this.SendPropertyChanging("CostRate");
                    this._CostRate = value;
                    this.SendPropertyChanged("CostRate");
                    this.OnCostRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostRateUnitId in the schema.
        /// </summary>
        [Column(Name = @"cost_rate_unit_id", Storage = "_CostRateUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostRateUnitId
        {
            get
            {
                return this._CostRateUnitId;
            }
            set
            {
                if (this._CostRateUnitId != value)
                {
                    if (this._UnitsOfMeasure.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostRateUnitIdChanging(value);
                    this.SendPropertyChanging("CostRateUnitId");
                    this._CostRateUnitId = value;
                    this.SendPropertyChanged("CostRateUnitId");
                    this.OnCostRateUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostAmount in the schema.
        /// </summary>
        [Column(Name = @"cost_amount", Storage = "_CostAmount", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CostAmount
        {
            get
            {
                return this._CostAmount;
            }
            set
            {
                if (this._CostAmount != value)
                {
                    this.OnCostAmountChanging(value);
                    this.SendPropertyChanging("CostAmount");
                    this._CostAmount = value;
                    this.SendPropertyChanged("CostAmount");
                    this.OnCostAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"transport_exchange_rate", Storage = "_TransportExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportExchangeRate
        {
            get
            {
                return this._TransportExchangeRate;
            }
            set
            {
                if (this._TransportExchangeRate != value)
                {
                    this.OnTransportExchangeRateChanging(value);
                    this.SendPropertyChanging("TransportExchangeRate");
                    this._TransportExchangeRate = value;
                    this.SendPropertyChanged("TransportExchangeRate");
                    this.OnTransportExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportExchangeRateType in the schema.
        /// </summary>
        [Column(Name = @"transport_exchange_rate_type", Storage = "_TransportExchangeRateType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TransportExchangeRateType
        {
            get
            {
                return this._TransportExchangeRateType;
            }
            set
            {
                if (this._TransportExchangeRateType != value)
                {
                    this.OnTransportExchangeRateTypeChanging(value);
                    this.SendPropertyChanging("TransportExchangeRateType");
                    this._TransportExchangeRateType = value;
                    this.SendPropertyChanged("TransportExchangeRateType");
                    this.OnTransportExchangeRateTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportExchangeRateTypeId in the schema.
        /// </summary>
        [Column(Name = @"transport_exchange_rate_type_id", Storage = "_TransportExchangeRateTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportExchangeRateTypeId
        {
            get
            {
                return this._TransportExchangeRateTypeId;
            }
            set
            {
                if (this._TransportExchangeRateTypeId != value)
                {
                    this.OnTransportExchangeRateTypeIdChanging(value);
                    this.SendPropertyChanging("TransportExchangeRateTypeId");
                    this._TransportExchangeRateTypeId = value;
                    this.SendPropertyChanged("TransportExchangeRateTypeId");
                    this.OnTransportExchangeRateTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acknowledged in the schema.
        /// </summary>
        [Column(Name = @"acknowledged", Storage = "_Acknowledged", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Acknowledged
        {
            get
            {
                return this._Acknowledged;
            }
            set
            {
                if (this._Acknowledged != value)
                {
                    this.OnAcknowledgedChanging(value);
                    this.SendPropertyChanging("Acknowledged");
                    this._Acknowledged = value;
                    this.SendPropertyChanged("Acknowledged");
                    this.OnAcknowledgedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcknowledgedDate in the schema.
        /// </summary>
        [Column(Name = @"acknowledged_date", Storage = "_AcknowledgedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> AcknowledgedDate
        {
            get
            {
                return this._AcknowledgedDate;
            }
            set
            {
                if (this._AcknowledgedDate != value)
                {
                    this.OnAcknowledgedDateChanging(value);
                    this.SendPropertyChanging("AcknowledgedDate");
                    this._AcknowledgedDate = value;
                    this.SendPropertyChanged("AcknowledgedDate");
                    this.OnAcknowledgedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Printed in the schema.
        /// </summary>
        [Column(Name = @"printed", Storage = "_Printed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Printed
        {
            get
            {
                return this._Printed;
            }
            set
            {
                if (this._Printed != value)
                {
                    this.OnPrintedChanging(value);
                    this.SendPropertyChanging("Printed");
                    this._Printed = value;
                    this.SendPropertyChanged("Printed");
                    this.OnPrintedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate", Storage = "_ExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ExchangeRate
        {
            get
            {
                return this._ExchangeRate;
            }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this.OnExchangeRateChanging(value);
                    this.SendPropertyChanging("ExchangeRate");
                    this._ExchangeRate = value;
                    this.SendPropertyChanged("ExchangeRate");
                    this.OnExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRateType in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate_type", Storage = "_ExchangeRateType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ExchangeRateType
        {
            get
            {
                return this._ExchangeRateType;
            }
            set
            {
                if (this._ExchangeRateType != value)
                {
                    this.OnExchangeRateTypeChanging(value);
                    this.SendPropertyChanging("ExchangeRateType");
                    this._ExchangeRateType = value;
                    this.SendPropertyChanged("ExchangeRateType");
                    this.OnExchangeRateTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRateTypeId in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate_type_id", Storage = "_ExchangeRateTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ExchangeRateTypeId
        {
            get
            {
                return this._ExchangeRateTypeId;
            }
            set
            {
                if (this._ExchangeRateTypeId != value)
                {
                    this.OnExchangeRateTypeIdChanging(value);
                    this.SendPropertyChanging("ExchangeRateTypeId");
                    this._ExchangeRateTypeId = value;
                    this.SendPropertyChanged("ExchangeRateTypeId");
                    this.OnExchangeRateTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermsId in the schema.
        /// </summary>
        [Column(Name = @"terms_id", Storage = "_TermsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TermsId
        {
            get
            {
                return this._TermsId;
            }
            set
            {
                if (this._TermsId != value)
                {
                    this.OnTermsIdChanging(value);
                    this.SendPropertyChanging("TermsId");
                    this._TermsId = value;
                    this.SendPropertyChanged("TermsId");
                    this.OnTermsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificationsId in the schema.
        /// </summary>
        [Column(Name = @"certifications_id", Storage = "_CertificationsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CertificationsId
        {
            get
            {
                return this._CertificationsId;
            }
            set
            {
                if (this._CertificationsId != value)
                {
                    this.OnCertificationsIdChanging(value);
                    this.SendPropertyChanging("CertificationsId");
                    this._CertificationsId = value;
                    this.SendPropertyChanged("CertificationsId");
                    this.OnCertificationsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalHeaderText in the schema.
        /// </summary>
        [Column(Name = @"external_header_text", Storage = "_ExternalHeaderText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ExternalHeaderText
        {
            get
            {
                return this._ExternalHeaderText;
            }
            set
            {
                if (this._ExternalHeaderText != value)
                {
                    this.OnExternalHeaderTextChanging(value);
                    this.SendPropertyChanging("ExternalHeaderText");
                    this._ExternalHeaderText = value;
                    this.SendPropertyChanged("ExternalHeaderText");
                    this.OnExternalHeaderTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalFooterText in the schema.
        /// </summary>
        [Column(Name = @"external_footer_text", Storage = "_ExternalFooterText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ExternalFooterText
        {
            get
            {
                return this._ExternalFooterText;
            }
            set
            {
                if (this._ExternalFooterText != value)
                {
                    this.OnExternalFooterTextChanging(value);
                    this.SendPropertyChanging("ExternalFooterText");
                    this._ExternalFooterText = value;
                    this.SendPropertyChanged("ExternalFooterText");
                    this.OnExternalFooterTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalHeaderText in the schema.
        /// </summary>
        [Column(Name = @"internal_header_text", Storage = "_InternalHeaderText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InternalHeaderText
        {
            get
            {
                return this._InternalHeaderText;
            }
            set
            {
                if (this._InternalHeaderText != value)
                {
                    this.OnInternalHeaderTextChanging(value);
                    this.SendPropertyChanging("InternalHeaderText");
                    this._InternalHeaderText = value;
                    this.SendPropertyChanged("InternalHeaderText");
                    this.OnInternalHeaderTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalFooterText in the schema.
        /// </summary>
        [Column(Name = @"internal_footer_text", Storage = "_InternalFooterText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InternalFooterText
        {
            get
            {
                return this._InternalFooterText;
            }
            set
            {
                if (this._InternalFooterText != value)
                {
                    this.OnInternalFooterTextChanging(value);
                    this.SendPropertyChanging("InternalFooterText");
                    this._InternalFooterText = value;
                    this.SendPropertyChanged("InternalFooterText");
                    this.OnInternalFooterTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintedDate in the schema.
        /// </summary>
        [Column(Name = @"printed_date", Storage = "_PrintedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> PrintedDate
        {
            get
            {
                return this._PrintedDate;
            }
            set
            {
                if (this._PrintedDate != value)
                {
                    this.OnPrintedDateChanging(value);
                    this.SendPropertyChanging("PrintedDate");
                    this._PrintedDate = value;
                    this.SendPropertyChanged("PrintedDate");
                    this.OnPrintedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompletedDate in the schema.
        /// </summary>
        [Column(Name = @"completed_date", Storage = "_CompletedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CompletedDate
        {
            get
            {
                return this._CompletedDate;
            }
            set
            {
                if (this._CompletedDate != value)
                {
                    this.OnCompletedDateChanging(value);
                    this.SendPropertyChanging("CompletedDate");
                    this._CompletedDate = value;
                    this.SendPropertyChanged("CompletedDate");
                    this.OnCompletedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierOrder in the schema.
        /// </summary>
        [Column(Name = @"supplier_order", Storage = "_SupplierOrder", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string SupplierOrder
        {
            get
            {
                return this._SupplierOrder;
            }
            set
            {
                if (this._SupplierOrder != value)
                {
                    this.OnSupplierOrderChanging(value);
                    this.SendPropertyChanging("SupplierOrder");
                    this._SupplierOrder = value;
                    this.SendPropertyChanged("SupplierOrder");
                    this.OnSupplierOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderTotalsId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_totals_id", Storage = "_PurchaseOrderTotalsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseOrderTotalsId
        {
            get
            {
                return this._PurchaseOrderTotalsId;
            }
            set
            {
                if (this._PurchaseOrderTotalsId != value)
                {
                    this.OnPurchaseOrderTotalsIdChanging(value);
                    this.SendPropertyChanging("PurchaseOrderTotalsId");
                    this._PurchaseOrderTotalsId = value;
                    this.SendPropertyChanged("PurchaseOrderTotalsId");
                    this.OnPurchaseOrderTotalsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseEntryTotalsId in the schema.
        /// </summary>
        [Column(Name = @"purchase_entry_totals_id", Storage = "_PurchaseEntryTotalsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseEntryTotalsId
        {
            get
            {
                return this._PurchaseEntryTotalsId;
            }
            set
            {
                if (this._PurchaseEntryTotalsId != value)
                {
                    this.OnPurchaseEntryTotalsIdChanging(value);
                    this.SendPropertyChanging("PurchaseEntryTotalsId");
                    this._PurchaseEntryTotalsId = value;
                    this.SendPropertyChanged("PurchaseEntryTotalsId");
                    this.OnPurchaseEntryTotalsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locked in the schema.
        /// </summary>
        [Column(Name = @"locked", Storage = "_Locked", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Locked
        {
            get
            {
                return this._Locked;
            }
            set
            {
                if (this._Locked != value)
                {
                    this.OnLockedChanging(value);
                    this.SendPropertyChanging("Locked");
                    this._Locked = value;
                    this.SendPropertyChanged("Locked");
                    this.OnLockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPurchaseOrderBranchId in the schema.
        /// </summary>
        [Column(Name = @"transport_purchase_order_branch_id", Storage = "_TransportPurchaseOrderBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPurchaseOrderBranchId
        {
            get
            {
                return this._TransportPurchaseOrderBranchId;
            }
            set
            {
                if (this._TransportPurchaseOrderBranchId != value)
                {
                    this.OnTransportPurchaseOrderBranchIdChanging(value);
                    this.SendPropertyChanging("TransportPurchaseOrderBranchId");
                    this._TransportPurchaseOrderBranchId = value;
                    this.SendPropertyChanged("TransportPurchaseOrderBranchId");
                    this.OnTransportPurchaseOrderBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPurchaseOrderHeaderId in the schema.
        /// </summary>
        [Column(Name = @"transport_purchase_order_header_id", Storage = "_TransportPurchaseOrderHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPurchaseOrderHeaderId
        {
            get
            {
                return this._TransportPurchaseOrderHeaderId;
            }
            set
            {
                if (this._TransportPurchaseOrderHeaderId != value)
                {
                    if (this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransportPurchaseOrderHeaderIdChanging(value);
                    this.SendPropertyChanging("TransportPurchaseOrderHeaderId");
                    this._TransportPurchaseOrderHeaderId = value;
                    this.SendPropertyChanged("TransportPurchaseOrderHeaderId");
                    this.OnTransportPurchaseOrderHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPurchaseOrderItemId in the schema.
        /// </summary>
        [Column(Name = @"transport_purchase_order_item_id", Storage = "_TransportPurchaseOrderItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPurchaseOrderItemId
        {
            get
            {
                return this._TransportPurchaseOrderItemId;
            }
            set
            {
                if (this._TransportPurchaseOrderItemId != value)
                {
                    if (this._PurchaseOrderItem_TransportPurchaseOrderItemId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransportPurchaseOrderItemIdChanging(value);
                    this.SendPropertyChanging("TransportPurchaseOrderItemId");
                    this._TransportPurchaseOrderItemId = value;
                    this.SendPropertyChanged("TransportPurchaseOrderItemId");
                    this.OnTransportPurchaseOrderItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportBillingRef in the schema.
        /// </summary>
        [Column(Name = @"transport_billing_ref", Storage = "_TransportBillingRef", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string TransportBillingRef
        {
            get
            {
                return this._TransportBillingRef;
            }
            set
            {
                if (this._TransportBillingRef != value)
                {
                    this.OnTransportBillingRefChanging(value);
                    this.SendPropertyChanging("TransportBillingRef");
                    this._TransportBillingRef = value;
                    this.SendPropertyChanged("TransportBillingRef");
                    this.OnTransportBillingRefChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsInwardsNote in the schema.
        /// </summary>
        [Column(Name = @"goods_inwards_notes", Storage = "_GoodsInwardsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GoodsInwardsNote
        {
            get
            {
                return this._GoodsInwardsNote;
            }
            set
            {
                if (this._GoodsInwardsNote != value)
                {
                    this.OnGoodsInwardsNoteChanging(value);
                    this.SendPropertyChanging("GoodsInwardsNote");
                    this._GoodsInwardsNote = value;
                    this.SendPropertyChanged("GoodsInwardsNote");
                    this.OnGoodsInwardsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchDate in the schema.
        /// </summary>
        [Column(Name = @"despatch_date", Storage = "_DespatchDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DespatchDate
        {
            get
            {
                return this._DespatchDate;
            }
            set
            {
                if (this._DespatchDate != value)
                {
                    this.OnDespatchDateChanging(value);
                    this.SendPropertyChanging("DespatchDate");
                    this._DespatchDate = value;
                    this.SendPropertyChanged("DespatchDate");
                    this.OnDespatchDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixDate in the schema.
        /// </summary>
        [Column(Name = @"fix_date", Storage = "_FixDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> FixDate
        {
            get
            {
                return this._FixDate;
            }
            set
            {
                if (this._FixDate != value)
                {
                    this.OnFixDateChanging(value);
                    this.SendPropertyChanging("FixDate");
                    this._FixDate = value;
                    this.SendPropertyChanged("FixDate");
                    this.OnFixDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideProcessing in the schema.
        /// </summary>
        [Column(Name = @"outside_processing", Storage = "_OutsideProcessing", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> OutsideProcessing
        {
            get
            {
                return this._OutsideProcessing;
            }
            set
            {
                if (this._OutsideProcessing != value)
                {
                    this.OnOutsideProcessingChanging(value);
                    this.SendPropertyChanging("OutsideProcessing");
                    this._OutsideProcessing = value;
                    this.SendPropertyChanged("OutsideProcessing");
                    this.OnOutsideProcessingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeletionReasonId in the schema.
        /// </summary>
        [Column(Name = @"deletion_reason_id", Storage = "_DeletionReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeletionReasonId
        {
            get
            {
                return this._DeletionReasonId;
            }
            set
            {
                if (this._DeletionReasonId != value)
                {
                    this.OnDeletionReasonIdChanging(value);
                    this.SendPropertyChanging("DeletionReasonId");
                    this._DeletionReasonId = value;
                    this.SendPropertyChanged("DeletionReasonId");
                    this.OnDeletionReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeletionReasonDescription in the schema.
        /// </summary>
        [Column(Name = @"deletion_reason_description", Storage = "_DeletionReasonDescription", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string DeletionReasonDescription
        {
            get
            {
                return this._DeletionReasonDescription;
            }
            set
            {
                if (this._DeletionReasonDescription != value)
                {
                    this.OnDeletionReasonDescriptionChanging(value);
                    this.SendPropertyChanging("DeletionReasonDescription");
                    this._DeletionReasonDescription = value;
                    this.SendPropertyChanged("DeletionReasonDescription");
                    this.OnDeletionReasonDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseType in the schema.
        /// </summary>
        [Column(Name = @"purchase_type", Storage = "_PurchaseType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseType
        {
            get
            {
                return this._PurchaseType;
            }
            set
            {
                if (this._PurchaseType != value)
                {
                    this.OnPurchaseTypeChanging(value);
                    this.SendPropertyChanging("PurchaseType");
                    this._PurchaseType = value;
                    this.SendPropertyChanged("PurchaseType");
                    this.OnPurchaseTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact1Id in the schema.
        /// </summary>
        [Column(Name = @"contact1_id", Storage = "_Contact1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Contact1Id
        {
            get
            {
                return this._Contact1Id;
            }
            set
            {
                if (this._Contact1Id != value)
                {
                    this.OnContact1IdChanging(value);
                    this.SendPropertyChanging("Contact1Id");
                    this._Contact1Id = value;
                    this.SendPropertyChanged("Contact1Id");
                    this.OnContact1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact2Id in the schema.
        /// </summary>
        [Column(Name = @"contact2_id", Storage = "_Contact2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Contact2Id
        {
            get
            {
                return this._Contact2Id;
            }
            set
            {
                if (this._Contact2Id != value)
                {
                    this.OnContact2IdChanging(value);
                    this.SendPropertyChanging("Contact2Id");
                    this._Contact2Id = value;
                    this.SendPropertyChanged("Contact2Id");
                    this.OnContact2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact3Name in the schema.
        /// </summary>
        [Column(Name = @"contact3_name", Storage = "_Contact3Name", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Contact3Name
        {
            get
            {
                return this._Contact3Name;
            }
            set
            {
                if (this._Contact3Name != value)
                {
                    this.OnContact3NameChanging(value);
                    this.SendPropertyChanging("Contact3Name");
                    this._Contact3Name = value;
                    this.SendPropertyChanged("Contact3Name");
                    this.OnContact3NameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact4Name in the schema.
        /// </summary>
        [Column(Name = @"contact4_name", Storage = "_Contact4Name", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Contact4Name
        {
            get
            {
                return this._Contact4Name;
            }
            set
            {
                if (this._Contact4Name != value)
                {
                    this.OnContact4NameChanging(value);
                    this.SendPropertyChanging("Contact4Name");
                    this._Contact4Name = value;
                    this.SendPropertyChanged("Contact4Name");
                    this.OnContact4NameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierReference in the schema.
        /// </summary>
        [Column(Name = @"supplier_reference", Storage = "_SupplierReference", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string SupplierReference
        {
            get
            {
                return this._SupplierReference;
            }
            set
            {
                if (this._SupplierReference != value)
                {
                    this.OnSupplierReferenceChanging(value);
                    this.SendPropertyChanging("SupplierReference");
                    this._SupplierReference = value;
                    this.SendPropertyChanged("SupplierReference");
                    this.OnSupplierReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcknowledgementNumber in the schema.
        /// </summary>
        [Column(Name = @"acknowledgement_number", Storage = "_AcknowledgementNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string AcknowledgementNumber
        {
            get
            {
                return this._AcknowledgementNumber;
            }
            set
            {
                if (this._AcknowledgementNumber != value)
                {
                    this.OnAcknowledgementNumberChanging(value);
                    this.SendPropertyChanging("AcknowledgementNumber");
                    this._AcknowledgementNumber = value;
                    this.SendPropertyChanged("AcknowledgementNumber");
                    this.OnAcknowledgementNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProgressionHeaderText in the schema.
        /// </summary>
        [Column(Name = @"progression_header_text", Storage = "_ProgressionHeaderText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProgressionHeaderText
        {
            get
            {
                return this._ProgressionHeaderText;
            }
            set
            {
                if (this._ProgressionHeaderText != value)
                {
                    this.OnProgressionHeaderTextChanging(value);
                    this.SendPropertyChanging("ProgressionHeaderText");
                    this._ProgressionHeaderText = value;
                    this.SendPropertyChanged("ProgressionHeaderText");
                    this.OnProgressionHeaderTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestType in the schema.
        /// </summary>
        [Column(Name = @"request_type", Storage = "_RequestType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string RequestType
        {
            get
            {
                return this._RequestType;
            }
            set
            {
                if (this._RequestType != value)
                {
                    this.OnRequestTypeChanging(value);
                    this.SendPropertyChanging("RequestType");
                    this._RequestType = value;
                    this.SendPropertyChanged("RequestType");
                    this.OnRequestTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchNote in the schema.
        /// </summary>
        [Column(Name = @"despatch_notes", Storage = "_DespatchNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DespatchNote
        {
            get
            {
                return this._DespatchNote;
            }
            set
            {
                if (this._DespatchNote != value)
                {
                    this.OnDespatchNoteChanging(value);
                    this.SendPropertyChanging("DespatchNote");
                    this._DespatchNote = value;
                    this.SendPropertyChanged("DespatchNote");
                    this.OnDespatchNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupingKey in the schema.
        /// </summary>
        [Column(Name = @"grouping_key", Storage = "_GroupingKey", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string GroupingKey
        {
            get
            {
                return this._GroupingKey;
            }
            set
            {
                if (this._GroupingKey != value)
                {
                    this.OnGroupingKeyChanging(value);
                    this.SendPropertyChanging("GroupingKey");
                    this._GroupingKey = value;
                    this.SendPropertyChanged("GroupingKey");
                    this.OnGroupingKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeaderIndex in the schema.
        /// </summary>
        [Column(Name = @"header_index", Storage = "_HeaderIndex", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string HeaderIndex
        {
            get
            {
                return this._HeaderIndex;
            }
            set
            {
                if (this._HeaderIndex != value)
                {
                    this.OnHeaderIndexChanging(value);
                    this.SendPropertyChanging("HeaderIndex");
                    this._HeaderIndex = value;
                    this.SendPropertyChanged("HeaderIndex");
                    this.OnHeaderIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferType in the schema.
        /// </summary>
        [Column(Name = @"transfer_type", Storage = "_TransferType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TransferType
        {
            get
            {
                return this._TransferType;
            }
            set
            {
                if (this._TransferType != value)
                {
                    this.OnTransferTypeChanging(value);
                    this.SendPropertyChanging("TransferType");
                    this._TransferType = value;
                    this.SendPropertyChanged("TransferType");
                    this.OnTransferTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"transport_purchase_group_id", Storage = "_TransportPurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPurchaseGroupId
        {
            get
            {
                return this._TransportPurchaseGroupId;
            }
            set
            {
                if (this._TransportPurchaseGroupId != value)
                {
                    this.OnTransportPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("TransportPurchaseGroupId");
                    this._TransportPurchaseGroupId = value;
                    this.SendPropertyChanged("TransportPurchaseGroupId");
                    this.OnTransportPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportBatchNumber in the schema.
        /// </summary>
        [Column(Name = @"import_batch_number", Storage = "_ImportBatchNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportBatchNumber
        {
            get
            {
                return this._ImportBatchNumber;
            }
            set
            {
                if (this._ImportBatchNumber != value)
                {
                    this.OnImportBatchNumberChanging(value);
                    this.SendPropertyChanging("ImportBatchNumber");
                    this._ImportBatchNumber = value;
                    this.SendPropertyChanged("ImportBatchNumber");
                    this.OnImportBatchNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportSource in the schema.
        /// </summary>
        [Column(Name = @"import_source", Storage = "_ImportSource", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ImportSource
        {
            get
            {
                return this._ImportSource;
            }
            set
            {
                if (this._ImportSource != value)
                {
                    this.OnImportSourceChanging(value);
                    this.SendPropertyChanging("ImportSource");
                    this._ImportSource = value;
                    this.SendPropertyChanged("ImportSource");
                    this.OnImportSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportNumber in the schema.
        /// </summary>
        [Column(Name = @"import_number", Storage = "_ImportNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportNumber
        {
            get
            {
                return this._ImportNumber;
            }
            set
            {
                if (this._ImportNumber != value)
                {
                    this.OnImportNumberChanging(value);
                    this.SendPropertyChanging("ImportNumber");
                    this._ImportNumber = value;
                    this.SendPropertyChanged("ImportNumber");
                    this.OnImportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactId in the schema.
        /// </summary>
        [Column(Name = @"contact_id", Storage = "_ContactId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging("ContactId");
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CarrierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_PurchaseOrderHeader", Storage="_Company_CarrierId", ThisKey="CarrierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_CarrierId
        {
            get
            {
                return this._Company_CarrierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_CarrierId.Entity;
                if ((previousValue != value) || (this._Company_CarrierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_CarrierId");
                    if (previousValue != null)
                    {
                        this._Company_CarrierId.Entity = null;
                        previousValue.PurchaseOrderHeader_CarrierId.Remove(this);
                    }
                    this._Company_CarrierId.Entity = value;
                    if (value != null)
                    {
                        this._CarrierId = value.Id;
                        value.PurchaseOrderHeader_CarrierId.Add(this);
                    }
                    else
                    {
                        this._CarrierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CarrierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_SupplierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_PurchaseOrderHeader1", Storage="_Company_SupplierId", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_SupplierId
        {
            get
            {
                return this._Company_SupplierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_SupplierId.Entity;
                if ((previousValue != value) || (this._Company_SupplierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_SupplierId");
                    if (previousValue != null)
                    {
                        this._Company_SupplierId.Entity = null;
                        previousValue.PurchaseOrderHeader_SupplierId.Remove(this);
                    }
                    this._Company_SupplierId.Entity = value;
                    if (value != null)
                    {
                        this._SupplierId = value.Id;
                        value.PurchaseOrderHeader_SupplierId.Add(this);
                    }
                    else
                    {
                        this._SupplierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_SupplierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_PurchaseOrderHeader", Storage="_UnitsOfMeasure", ThisKey="CostRateUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure
        {
            get
            {
                return this._UnitsOfMeasure.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._UnitsOfMeasure.Entity = value;
                    if (value != null)
                    {
                        this._CostRateUnitId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._CostRateUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Warehouse in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_PurchaseOrderHeader", Storage="_Warehouse", ThisKey="DeliveryWarehouseId", OtherKey="Id", IsForeignKey=true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Warehouse");
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryWarehouseId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._DeliveryWarehouseId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseStatusCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseStatusCode_PurchaseOrderHeader", Storage="_PurchaseStatusCode", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseStatusCode PurchaseStatusCode
        {
            get
            {
                return this._PurchaseStatusCode.Entity;
            }
            set
            {
                PurchaseStatusCode previousValue = this._PurchaseStatusCode.Entity;
                if ((previousValue != value) || (this._PurchaseStatusCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseStatusCode");
                    if (previousValue != null)
                    {
                        this._PurchaseStatusCode.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._PurchaseStatusCode.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseStatusCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderHeader_TransportPurchaseOrderHeaderId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderHeader", Storage="_PurchaseOrderHeader_TransportPurchaseOrderHeaderId1", ThisKey="Id", OtherKey="TransportPurchaseOrderHeaderId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseOrderHeader> PurchaseOrderHeader_TransportPurchaseOrderHeaderId1
        {
            get
            {
                return this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId1;
            }
            set
            {
                this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderHeader_TransportPurchaseOrderHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderHeader", Storage="_PurchaseOrderHeader_TransportPurchaseOrderHeaderId", ThisKey="TransportPurchaseOrderHeaderId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderHeader PurchaseOrderHeader_TransportPurchaseOrderHeaderId
        {
            get
            {
                return this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.Entity;
            }
            set
            {
                PurchaseOrderHeader previousValue = this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.Entity;
                if ((previousValue != value) || (this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderHeader_TransportPurchaseOrderHeaderId");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.Entity = null;
                        previousValue.PurchaseOrderHeader_TransportPurchaseOrderHeaderId1.Remove(this);
                    }
                    this._PurchaseOrderHeader_TransportPurchaseOrderHeaderId.Entity = value;
                    if (value != null)
                    {
                        this._TransportPurchaseOrderHeaderId = value.Id;
                        value.PurchaseOrderHeader_TransportPurchaseOrderHeaderId1.Add(this);
                    }
                    else
                    {
                        this._TransportPurchaseOrderHeaderId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderHeader_TransportPurchaseOrderHeaderId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem_TransportPurchaseOrderItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderItem_PurchaseOrderHeader", Storage="_PurchaseOrderItem_TransportPurchaseOrderItemId", ThisKey="TransportPurchaseOrderItemId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderItem PurchaseOrderItem_TransportPurchaseOrderItemId
        {
            get
            {
                return this._PurchaseOrderItem_TransportPurchaseOrderItemId.Entity;
            }
            set
            {
                PurchaseOrderItem previousValue = this._PurchaseOrderItem_TransportPurchaseOrderItemId.Entity;
                if ((previousValue != value) || (this._PurchaseOrderItem_TransportPurchaseOrderItemId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderItem_TransportPurchaseOrderItemId");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderItem_TransportPurchaseOrderItemId.Entity = null;
                        previousValue.PurchaseOrderHeader_TransportPurchaseOrderItemId.Remove(this);
                    }
                    this._PurchaseOrderItem_TransportPurchaseOrderItemId.Entity = value;
                    if (value != null)
                    {
                        this._TransportPurchaseOrderItemId = value.Id;
                        value.PurchaseOrderHeader_TransportPurchaseOrderItemId.Add(this);
                    }
                    else
                    {
                        this._TransportPurchaseOrderItemId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderItem_TransportPurchaseOrderItemId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem_BtbPurchaseHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderItem", Storage="_PurchaseOrderItem_BtbPurchaseHeaderId", ThisKey="Id", OtherKey="BtbPurchaseHeaderId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseOrderItem> PurchaseOrderItem_BtbPurchaseHeaderId
        {
            get
            {
                return this._PurchaseOrderItem_BtbPurchaseHeaderId;
            }
            set
            {
                this._PurchaseOrderItem_BtbPurchaseHeaderId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem_PurchaseHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderItem1", Storage="_PurchaseOrderItem_PurchaseHeaderId", ThisKey="Id", OtherKey="PurchaseHeaderId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseOrderItem> PurchaseOrderItem_PurchaseHeaderId
        {
            get
            {
                return this._PurchaseOrderItem_PurchaseHeaderId;
            }
            set
            {
                this._PurchaseOrderItem_PurchaseHeaderId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseCategoryCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseCategoryCode_PurchaseOrderHeader", Storage="_PurchaseCategoryCode", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseCategoryCode PurchaseCategoryCode
        {
            get
            {
                return this._PurchaseCategoryCode.Entity;
            }
            set
            {
                PurchaseCategoryCode previousValue = this._PurchaseCategoryCode.Entity;
                if ((previousValue != value) || (this._PurchaseCategoryCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseCategoryCode");
                    if (previousValue != null)
                    {
                        this._PurchaseCategoryCode.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._PurchaseCategoryCode.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseCategoryCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_DeliverFromAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_PurchaseOrderHeader", Storage="_Address_DeliverFromAddressId", ThisKey="DeliverFromAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_DeliverFromAddressId
        {
            get
            {
                return this._Address_DeliverFromAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_DeliverFromAddressId.Entity;
                if ((previousValue != value) || (this._Address_DeliverFromAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_DeliverFromAddressId");
                    if (previousValue != null)
                    {
                        this._Address_DeliverFromAddressId.Entity = null;
                        previousValue.PurchaseOrderHeader_DeliverFromAddressId.Remove(this);
                    }
                    this._Address_DeliverFromAddressId.Entity = value;
                    if (value != null)
                    {
                        this._DeliverFromAddressId = value.Id;
                        value.PurchaseOrderHeader_DeliverFromAddressId.Add(this);
                    }
                    else
                    {
                        this._DeliverFromAddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Address_DeliverFromAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanySubAddress_PurchaseOrderHeader", Storage="_CompanySubAddress", ThisKey="DeliverFromId", OtherKey="Id", IsForeignKey=true)]
        public CompanySubAddress CompanySubAddress
        {
            get
            {
                return this._CompanySubAddress.Entity;
            }
            set
            {
                CompanySubAddress previousValue = this._CompanySubAddress.Entity;
                if ((previousValue != value) || (this._CompanySubAddress.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanySubAddress");
                    if (previousValue != null)
                    {
                        this._CompanySubAddress.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._CompanySubAddress.Entity = value;
                    if (value != null)
                    {
                        this._DeliverFromId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._DeliverFromId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("CompanySubAddress");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_DeliveryAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_PurchaseOrderHeader1", Storage="_Address_DeliveryAddressId", ThisKey="DeliveryAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_DeliveryAddressId
        {
            get
            {
                return this._Address_DeliveryAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_DeliveryAddressId.Entity;
                if ((previousValue != value) || (this._Address_DeliveryAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_DeliveryAddressId");
                    if (previousValue != null)
                    {
                        this._Address_DeliveryAddressId.Entity = null;
                        previousValue.PurchaseOrderHeader_DeliveryAddressId.Remove(this);
                    }
                    this._Address_DeliveryAddressId.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryAddressId = value.Id;
                        value.PurchaseOrderHeader_DeliveryAddressId.Add(this);
                    }
                    else
                    {
                        this._DeliveryAddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Address_DeliveryAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address_SupplierAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_PurchaseOrderHeader2", Storage="_Address_SupplierAddressId", ThisKey="SupplierAddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address_SupplierAddressId
        {
            get
            {
                return this._Address_SupplierAddressId.Entity;
            }
            set
            {
                Address previousValue = this._Address_SupplierAddressId.Entity;
                if ((previousValue != value) || (this._Address_SupplierAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address_SupplierAddressId");
                    if (previousValue != null)
                    {
                        this._Address_SupplierAddressId.Entity = null;
                        previousValue.PurchaseOrderHeader_SupplierAddressId.Remove(this);
                    }
                    this._Address_SupplierAddressId.Entity = value;
                    if (value != null)
                    {
                        this._SupplierAddressId = value.Id;
                        value.PurchaseOrderHeader_SupplierAddressId.Add(this);
                    }
                    else
                    {
                        this._SupplierAddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Address_SupplierAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Buyer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Buyer_PurchaseOrderHeader", Storage="_Buyer", ThisKey="BuyerId", OtherKey="Id", IsForeignKey=true)]
        public Buyer Buyer
        {
            get
            {
                return this._Buyer.Entity;
            }
            set
            {
                Buyer previousValue = this._Buyer.Entity;
                if ((previousValue != value) || (this._Buyer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Buyer");
                    if (previousValue != null)
                    {
                        this._Buyer.Entity = null;
                        previousValue.PurchaseOrderHeader.Remove(this);
                    }
                    this._Buyer.Entity = value;
                    if (value != null)
                    {
                        this._BuyerId = value.Id;
                        value.PurchaseOrderHeader.Add(this);
                    }
                    else
                    {
                        this._BuyerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Buyer");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PurchaseOrderHeader_TransportPurchaseOrderHeaderId1(PurchaseOrderHeader entity)
        {
            this.SendPropertyChanging("PurchaseOrderHeader_TransportPurchaseOrderHeaderId1");
            entity.PurchaseOrderHeader_TransportPurchaseOrderHeaderId = this;
        }
    
        private void detach_PurchaseOrderHeader_TransportPurchaseOrderHeaderId1(PurchaseOrderHeader entity)
        {
            this.SendPropertyChanging("PurchaseOrderHeader_TransportPurchaseOrderHeaderId1");
            entity.PurchaseOrderHeader_TransportPurchaseOrderHeaderId = null;
        }

        private void attach_PurchaseOrderItem_BtbPurchaseHeaderId(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem_BtbPurchaseHeaderId");
            entity.PurchaseOrderHeader_BtbPurchaseHeaderId = this;
        }
    
        private void detach_PurchaseOrderItem_BtbPurchaseHeaderId(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem_BtbPurchaseHeaderId");
            entity.PurchaseOrderHeader_BtbPurchaseHeaderId = null;
        }

        private void attach_PurchaseOrderItem_PurchaseHeaderId(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem_PurchaseHeaderId");
            entity.PurchaseOrderHeader_PurchaseHeaderId = this;
        }
    
        private void detach_PurchaseOrderItem_PurchaseHeaderId(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem_PurchaseHeaderId");
            entity.PurchaseOrderHeader_PurchaseHeaderId = null;
        }
    }

}
