//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/28/2017 9:10:34 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace LiveEmetalContext
{

    [DatabaseAttribute(Name = "live_emetal")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class LiveEmetalDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(LiveEmetalDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAddress(Address instance);
        partial void UpdateAddress(Address instance);
        partial void DeleteAddress(Address instance);

        #endregion

        public LiveEmetalDataContext() :
        base(GetConnectionString("LiveEmetalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public LiveEmetalDataContext(MappingSource mappingSource) :
        base(GetConnectionString("LiveEmetalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public LiveEmetalDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LiveEmetalDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LiveEmetalDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LiveEmetalDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Address> Address
        {
            get
            {
                return this.GetTable<Address>();
            }
        }
    }
}

namespace LiveEmetalContext
{

    /// <summary>
    /// There are no comments for LiveEmetalContext.Address in the schema.
    /// </summary>
    [Table(Name = @"public.addresses")]
    public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Address1;

        private string _Town;

        private string _County;

        private string _Postcode;

        private System.Nullable<int> _CountryId;

        private System.Nullable<int> _TransportAreaId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnTownChanging(string value);
        partial void OnTownChanged();
        partial void OnCountyChanging(string value);
        partial void OnCountyChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnCountryIdChanging(System.Nullable<int> value);
        partial void OnCountryIdChanged();
        partial void OnTransportAreaIdChanging(System.Nullable<int> value);
        partial void OnTransportAreaIdChanged();
        #endregion

        public Address()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address1 in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address1", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if (this._Address1 != value)
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging("Address1");
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Town in the schema.
        /// </summary>
        [Column(Name = @"town", Storage = "_Town", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Town
        {
            get
            {
                return this._Town;
            }
            set
            {
                if (this._Town != value)
                {
                    this.OnTownChanging(value);
                    this.SendPropertyChanging("Town");
                    this._Town = value;
                    this.SendPropertyChanged("Town");
                    this.OnTownChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for County in the schema.
        /// </summary>
        [Column(Name = @"county", Storage = "_County", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string County
        {
            get
            {
                return this._County;
            }
            set
            {
                if (this._County != value)
                {
                    this.OnCountyChanging(value);
                    this.SendPropertyChanging("County");
                    this._County = value;
                    this.SendPropertyChanged("County");
                    this.OnCountyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Name = @"postcode", Storage = "_Postcode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging("Postcode");
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"country_id", Storage = "_CountryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging("CountryId");
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportAreaId in the schema.
        /// </summary>
        [Column(Name = @"transport_area_id", Storage = "_TransportAreaId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportAreaId
        {
            get
            {
                return this._TransportAreaId;
            }
            set
            {
                if (this._TransportAreaId != value)
                {
                    this.OnTransportAreaIdChanging(value);
                    this.SendPropertyChanging("TransportAreaId");
                    this._TransportAreaId = value;
                    this.SendPropertyChanged("TransportAreaId");
                    this.OnTransportAreaIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
