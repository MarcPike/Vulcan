//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/22/2018 7:34:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.StockItems
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.StockItems.Product in the schema.
    /// </summary>
    [Table(Name = @"public.products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Code;

        private string _OtherCode;

        private System.Nullable<int> _CategoryId;

        private string _Size;

        private System.Nullable<int> _GradeId;

        private string _Sequence;

        private string _Description;

        private string _SizeDescription;

        private System.Nullable<bool> _SizeInDescription;

        private System.Nullable<decimal> _Density;

        private System.Nullable<int> _IdentifyingMarkId;

        private System.Nullable<int> _Analysis1Id;

        private System.Nullable<int> _Analysis2Id;

        private System.Nullable<int> _Analysis3Id;

        private System.Nullable<int> _Analysis4Id;

        private System.Nullable<int> _VatType1Id;

        private System.Nullable<int> _VatType2Id;

        private System.Nullable<int> _VatType3Id;

        private System.Nullable<int> _VatType4Id;

        private System.Nullable<int> _CommodityId;

        private System.Nullable<int> _BuyerId;

        private System.Nullable<decimal> _Dim1StaticDimension;

        private System.Nullable<decimal> _Dim1MinimumOffcut;

        private System.Nullable<decimal> _Dim2StaticDimension;

        private System.Nullable<decimal> _Dim2MinimumOffcut;

        private System.Nullable<decimal> _Dim3StaticDimension;

        private System.Nullable<decimal> _Dim3MinimumOffcut;

        private System.Nullable<decimal> _Dim4StaticDimension;

        private System.Nullable<decimal> _Dim4MinimumOffcut;

        private System.Nullable<decimal> _Dim5StaticDimension;

        private System.Nullable<decimal> _Dim5MinimumOffcut;

        private string _Note;

        private string _SpecificationValue1;

        private string _SpecificationValue2;

        private string _SpecificationValue3;

        private string _SpecificationValue4;

        private string _SpecificationValue5;

        private System.Nullable<int> _SalesCostingTypeId;

        private System.Nullable<int> _EnquiryCostShownId;

        private System.Nullable<int> _SourceProductId;

        private System.Nullable<decimal> _StandardCost;

        private System.Nullable<int> _SalesGroupId;

        private System.Nullable<int> _MinimumGradeId;

        private string _DescriptionFormula;

        private System.Nullable<decimal> _MinimumMargin;

        private string _SalesNote;

        private string _PurchaseNote;

        private string _SpecificationValue6;

        private string _SpecificationValue7;

        private string _SpecificationValue8;

        private string _SpecificationValue9;

        private string _SpecificationValue10;

        private System.Nullable<int> _PurchaseGroupId;

        private bool _Dim1ProductionOverride = false;

        private bool _Dim2ProductionOverride = false;

        private bool _Dim3ProductionOverride = false;

        private bool _Dim4ProductionOverride = false;

        private bool _Dim5ProductionOverride = false;

        private bool _RequireCertification = false;

        private System.Nullable<int> _AlternateProductId;

        private System.Nullable<int> _Specification1Id;

        private System.Nullable<int> _Specification2Id;

        private System.Nullable<int> _Specification3Id;

        private System.Nullable<int> _Specification4Id;

        private System.Nullable<int> _Specification5Id;

        private System.Nullable<int> _Specification6Id;

        private System.Nullable<int> _Specification7Id;

        private System.Nullable<int> _Specification8Id;

        private System.Nullable<int> _Specification9Id;

        private System.Nullable<int> _Specification10Id;

        private System.Nullable<int> _Dim1TypeId;

        private System.Nullable<int> _Dim2TypeId;

        private System.Nullable<int> _Dim3TypeId;

        private System.Nullable<int> _Dim4TypeId;

        private System.Nullable<int> _Dim5TypeId;

        private string _LedgerSegmentCode;

        private System.Nullable<int> _DefaultStockStatusId;

        private string _TestingNote;

        private System.Nullable<int> _CuttingGroupCostId;

        private System.Nullable<decimal> _GuideCost;

        private System.Nullable<decimal> _GuidePrice;

        private System.Nullable<decimal> _FabricationPrice;

        private System.Nullable<int> _ScrapProductId;

        private System.Nullable<decimal> _Dim1NegativeTolerance;

        private System.Nullable<decimal> _Dim1PositiveTolerance;

        private System.Nullable<decimal> _Dim2NegativeTolerance;

        private System.Nullable<decimal> _Dim2PositiveTolerance;

        private System.Nullable<decimal> _Dim3NegativeTolerance;

        private System.Nullable<decimal> _Dim3PositiveTolerance;

        private System.Nullable<decimal> _Dim4NegativeTolerance;

        private System.Nullable<decimal> _Dim4PositiveTolerance;

        private System.Nullable<decimal> _Dim5NegativeTolerance;

        private System.Nullable<decimal> _Dim5PositiveTolerance;

        private System.Nullable<bool> _NonTraceableUsesLocation = false;

        private System.Nullable<decimal> _Dim1Kerf;

        private System.Nullable<decimal> _Dim2Kerf;

        private System.Nullable<decimal> _Dim3Kerf;

        private System.Nullable<decimal> _Dim4Kerf;

        private System.Nullable<decimal> _Dim5Kerf;

        private System.Nullable<bool> _DefaultConsumedDimInProduction1 = false;

        private System.Nullable<bool> _DefaultConsumedDimInProduction2 = false;

        private System.Nullable<bool> _DefaultConsumedDimInProduction3 = false;

        private System.Nullable<bool> _DefaultConsumedDimInProduction4 = false;

        private System.Nullable<bool> _DefaultConsumedDimInProduction5 = false;
        #pragma warning restore 0649

        private EntitySet<StockItem> _StockItem;

        private EntityRef<StockGrade> _StockGrade_GradeId;

        private EntityRef<StockGrade> _StockGrade_MinimumGradeId;

        private EntityRef<ProductCategory> _ProductCategory;

        private EntitySet<StockCast> _StockCast;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis1Id;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis2Id;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis3Id;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis4Id;

        private EntitySet<Product> _Product_AlternateProductId1;

        private EntityRef<Product> _Product_AlternateProductId;

        private EntitySet<Product> _Product_ScrapProductId1;

        private EntityRef<Product> _Product_ScrapProductId;

        private EntitySet<Product> _Product_SourceProductId1;

        private EntityRef<Product> _Product_SourceProductId;

        private EntitySet<ProductBalance> _ProductBalance;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnOtherCodeChanging(string value);
        partial void OnOtherCodeChanged();
        partial void OnCategoryIdChanging(System.Nullable<int> value);
        partial void OnCategoryIdChanged();
        partial void OnSizeChanging(string value);
        partial void OnSizeChanged();
        partial void OnGradeIdChanging(System.Nullable<int> value);
        partial void OnGradeIdChanged();
        partial void OnSequenceChanging(string value);
        partial void OnSequenceChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSizeDescriptionChanging(string value);
        partial void OnSizeDescriptionChanged();
        partial void OnSizeInDescriptionChanging(System.Nullable<bool> value);
        partial void OnSizeInDescriptionChanged();
        partial void OnDensityChanging(System.Nullable<decimal> value);
        partial void OnDensityChanged();
        partial void OnIdentifyingMarkIdChanging(System.Nullable<int> value);
        partial void OnIdentifyingMarkIdChanged();
        partial void OnAnalysis1IdChanging(System.Nullable<int> value);
        partial void OnAnalysis1IdChanged();
        partial void OnAnalysis2IdChanging(System.Nullable<int> value);
        partial void OnAnalysis2IdChanged();
        partial void OnAnalysis3IdChanging(System.Nullable<int> value);
        partial void OnAnalysis3IdChanged();
        partial void OnAnalysis4IdChanging(System.Nullable<int> value);
        partial void OnAnalysis4IdChanged();
        partial void OnVatType1IdChanging(System.Nullable<int> value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(System.Nullable<int> value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(System.Nullable<int> value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(System.Nullable<int> value);
        partial void OnVatType4IdChanged();
        partial void OnCommodityIdChanging(System.Nullable<int> value);
        partial void OnCommodityIdChanged();
        partial void OnBuyerIdChanging(System.Nullable<int> value);
        partial void OnBuyerIdChanged();
        partial void OnDim1StaticDimensionChanging(System.Nullable<decimal> value);
        partial void OnDim1StaticDimensionChanged();
        partial void OnDim1MinimumOffcutChanging(System.Nullable<decimal> value);
        partial void OnDim1MinimumOffcutChanged();
        partial void OnDim2StaticDimensionChanging(System.Nullable<decimal> value);
        partial void OnDim2StaticDimensionChanged();
        partial void OnDim2MinimumOffcutChanging(System.Nullable<decimal> value);
        partial void OnDim2MinimumOffcutChanged();
        partial void OnDim3StaticDimensionChanging(System.Nullable<decimal> value);
        partial void OnDim3StaticDimensionChanged();
        partial void OnDim3MinimumOffcutChanging(System.Nullable<decimal> value);
        partial void OnDim3MinimumOffcutChanged();
        partial void OnDim4StaticDimensionChanging(System.Nullable<decimal> value);
        partial void OnDim4StaticDimensionChanged();
        partial void OnDim4MinimumOffcutChanging(System.Nullable<decimal> value);
        partial void OnDim4MinimumOffcutChanged();
        partial void OnDim5StaticDimensionChanging(System.Nullable<decimal> value);
        partial void OnDim5StaticDimensionChanged();
        partial void OnDim5MinimumOffcutChanging(System.Nullable<decimal> value);
        partial void OnDim5MinimumOffcutChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnSpecificationValue1Changing(string value);
        partial void OnSpecificationValue1Changed();
        partial void OnSpecificationValue2Changing(string value);
        partial void OnSpecificationValue2Changed();
        partial void OnSpecificationValue3Changing(string value);
        partial void OnSpecificationValue3Changed();
        partial void OnSpecificationValue4Changing(string value);
        partial void OnSpecificationValue4Changed();
        partial void OnSpecificationValue5Changing(string value);
        partial void OnSpecificationValue5Changed();
        partial void OnSalesCostingTypeIdChanging(System.Nullable<int> value);
        partial void OnSalesCostingTypeIdChanged();
        partial void OnEnquiryCostShownIdChanging(System.Nullable<int> value);
        partial void OnEnquiryCostShownIdChanged();
        partial void OnSourceProductIdChanging(System.Nullable<int> value);
        partial void OnSourceProductIdChanged();
        partial void OnStandardCostChanging(System.Nullable<decimal> value);
        partial void OnStandardCostChanged();
        partial void OnSalesGroupIdChanging(System.Nullable<int> value);
        partial void OnSalesGroupIdChanged();
        partial void OnMinimumGradeIdChanging(System.Nullable<int> value);
        partial void OnMinimumGradeIdChanged();
        partial void OnDescriptionFormulaChanging(string value);
        partial void OnDescriptionFormulaChanged();
        partial void OnMinimumMarginChanging(System.Nullable<decimal> value);
        partial void OnMinimumMarginChanged();
        partial void OnSalesNoteChanging(string value);
        partial void OnSalesNoteChanged();
        partial void OnPurchaseNoteChanging(string value);
        partial void OnPurchaseNoteChanged();
        partial void OnSpecificationValue6Changing(string value);
        partial void OnSpecificationValue6Changed();
        partial void OnSpecificationValue7Changing(string value);
        partial void OnSpecificationValue7Changed();
        partial void OnSpecificationValue8Changing(string value);
        partial void OnSpecificationValue8Changed();
        partial void OnSpecificationValue9Changing(string value);
        partial void OnSpecificationValue9Changed();
        partial void OnSpecificationValue10Changing(string value);
        partial void OnSpecificationValue10Changed();
        partial void OnPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnPurchaseGroupIdChanged();
        partial void OnDim1ProductionOverrideChanging(bool value);
        partial void OnDim1ProductionOverrideChanged();
        partial void OnDim2ProductionOverrideChanging(bool value);
        partial void OnDim2ProductionOverrideChanged();
        partial void OnDim3ProductionOverrideChanging(bool value);
        partial void OnDim3ProductionOverrideChanged();
        partial void OnDim4ProductionOverrideChanging(bool value);
        partial void OnDim4ProductionOverrideChanged();
        partial void OnDim5ProductionOverrideChanging(bool value);
        partial void OnDim5ProductionOverrideChanged();
        partial void OnRequireCertificationChanging(bool value);
        partial void OnRequireCertificationChanged();
        partial void OnAlternateProductIdChanging(System.Nullable<int> value);
        partial void OnAlternateProductIdChanged();
        partial void OnSpecification1IdChanging(System.Nullable<int> value);
        partial void OnSpecification1IdChanged();
        partial void OnSpecification2IdChanging(System.Nullable<int> value);
        partial void OnSpecification2IdChanged();
        partial void OnSpecification3IdChanging(System.Nullable<int> value);
        partial void OnSpecification3IdChanged();
        partial void OnSpecification4IdChanging(System.Nullable<int> value);
        partial void OnSpecification4IdChanged();
        partial void OnSpecification5IdChanging(System.Nullable<int> value);
        partial void OnSpecification5IdChanged();
        partial void OnSpecification6IdChanging(System.Nullable<int> value);
        partial void OnSpecification6IdChanged();
        partial void OnSpecification7IdChanging(System.Nullable<int> value);
        partial void OnSpecification7IdChanged();
        partial void OnSpecification8IdChanging(System.Nullable<int> value);
        partial void OnSpecification8IdChanged();
        partial void OnSpecification9IdChanging(System.Nullable<int> value);
        partial void OnSpecification9IdChanged();
        partial void OnSpecification10IdChanging(System.Nullable<int> value);
        partial void OnSpecification10IdChanged();
        partial void OnDim1TypeIdChanging(System.Nullable<int> value);
        partial void OnDim1TypeIdChanged();
        partial void OnDim2TypeIdChanging(System.Nullable<int> value);
        partial void OnDim2TypeIdChanged();
        partial void OnDim3TypeIdChanging(System.Nullable<int> value);
        partial void OnDim3TypeIdChanged();
        partial void OnDim4TypeIdChanging(System.Nullable<int> value);
        partial void OnDim4TypeIdChanged();
        partial void OnDim5TypeIdChanging(System.Nullable<int> value);
        partial void OnDim5TypeIdChanged();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnDefaultStockStatusIdChanging(System.Nullable<int> value);
        partial void OnDefaultStockStatusIdChanged();
        partial void OnTestingNoteChanging(string value);
        partial void OnTestingNoteChanged();
        partial void OnCuttingGroupCostIdChanging(System.Nullable<int> value);
        partial void OnCuttingGroupCostIdChanged();
        partial void OnGuideCostChanging(System.Nullable<decimal> value);
        partial void OnGuideCostChanged();
        partial void OnGuidePriceChanging(System.Nullable<decimal> value);
        partial void OnGuidePriceChanged();
        partial void OnFabricationPriceChanging(System.Nullable<decimal> value);
        partial void OnFabricationPriceChanged();
        partial void OnScrapProductIdChanging(System.Nullable<int> value);
        partial void OnScrapProductIdChanged();
        partial void OnDim1NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1NegativeToleranceChanged();
        partial void OnDim1PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1PositiveToleranceChanged();
        partial void OnDim2NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2NegativeToleranceChanged();
        partial void OnDim2PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2PositiveToleranceChanged();
        partial void OnDim3NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3NegativeToleranceChanged();
        partial void OnDim3PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3PositiveToleranceChanged();
        partial void OnDim4NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4NegativeToleranceChanged();
        partial void OnDim4PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4PositiveToleranceChanged();
        partial void OnDim5NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5NegativeToleranceChanged();
        partial void OnDim5PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5PositiveToleranceChanged();
        partial void OnNonTraceableUsesLocationChanging(System.Nullable<bool> value);
        partial void OnNonTraceableUsesLocationChanged();
        partial void OnDim1KerfChanging(System.Nullable<decimal> value);
        partial void OnDim1KerfChanged();
        partial void OnDim2KerfChanging(System.Nullable<decimal> value);
        partial void OnDim2KerfChanged();
        partial void OnDim3KerfChanging(System.Nullable<decimal> value);
        partial void OnDim3KerfChanged();
        partial void OnDim4KerfChanging(System.Nullable<decimal> value);
        partial void OnDim4KerfChanged();
        partial void OnDim5KerfChanging(System.Nullable<decimal> value);
        partial void OnDim5KerfChanged();
        partial void OnDefaultConsumedDimInProduction1Changing(System.Nullable<bool> value);
        partial void OnDefaultConsumedDimInProduction1Changed();
        partial void OnDefaultConsumedDimInProduction2Changing(System.Nullable<bool> value);
        partial void OnDefaultConsumedDimInProduction2Changed();
        partial void OnDefaultConsumedDimInProduction3Changing(System.Nullable<bool> value);
        partial void OnDefaultConsumedDimInProduction3Changed();
        partial void OnDefaultConsumedDimInProduction4Changing(System.Nullable<bool> value);
        partial void OnDefaultConsumedDimInProduction4Changed();
        partial void OnDefaultConsumedDimInProduction5Changing(System.Nullable<bool> value);
        partial void OnDefaultConsumedDimInProduction5Changed();
        #endregion

        public Product()
        {
            this._StockItem = new EntitySet<StockItem>(new Action<StockItem>(this.attach_StockItem), new Action<StockItem>(this.detach_StockItem));
            this._StockGrade_GradeId  = default(EntityRef<StockGrade>);
            this._StockGrade_MinimumGradeId  = default(EntityRef<StockGrade>);
            this._ProductCategory  = default(EntityRef<ProductCategory>);
            this._StockCast = new EntitySet<StockCast>(new Action<StockCast>(this.attach_StockCast), new Action<StockCast>(this.detach_StockCast));
            this._StockAnalysisCode_Analysis1Id  = default(EntityRef<StockAnalysisCode>);
            this._StockAnalysisCode_Analysis2Id  = default(EntityRef<StockAnalysisCode>);
            this._StockAnalysisCode_Analysis3Id  = default(EntityRef<StockAnalysisCode>);
            this._StockAnalysisCode_Analysis4Id  = default(EntityRef<StockAnalysisCode>);
            this._Product_AlternateProductId1 = new EntitySet<Product>(new Action<Product>(this.attach_Product_AlternateProductId1), new Action<Product>(this.detach_Product_AlternateProductId1));
            this._Product_AlternateProductId  = default(EntityRef<Product>);
            this._Product_ScrapProductId1 = new EntitySet<Product>(new Action<Product>(this.attach_Product_ScrapProductId1), new Action<Product>(this.detach_Product_ScrapProductId1));
            this._Product_ScrapProductId  = default(EntityRef<Product>);
            this._Product_SourceProductId1 = new EntitySet<Product>(new Action<Product>(this.attach_Product_SourceProductId1), new Action<Product>(this.detach_Product_SourceProductId1));
            this._Product_SourceProductId  = default(EntityRef<Product>);
            this._ProductBalance = new EntitySet<ProductBalance>(new Action<ProductBalance>(this.attach_ProductBalance), new Action<ProductBalance>(this.detach_ProductBalance));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherCode in the schema.
        /// </summary>
        [Column(Name = @"other_code", Storage = "_OtherCode", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string OtherCode
        {
            get
            {
                return this._OtherCode;
            }
            set
            {
                if (this._OtherCode != value)
                {
                    this.OnOtherCodeChanging(value);
                    this.SendPropertyChanging("OtherCode");
                    this._OtherCode = value;
                    this.SendPropertyChanged("OtherCode");
                    this.OnOtherCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._ProductCategory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Size in the schema.
        /// </summary>
        [Column(Name = @"size", Storage = "_Size", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging("Size");
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GradeId in the schema.
        /// </summary>
        [Column(Name = @"grade_id", Storage = "_GradeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GradeId
        {
            get
            {
                return this._GradeId;
            }
            set
            {
                if (this._GradeId != value)
                {
                    if (this._StockGrade_GradeId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGradeIdChanging(value);
                    this.SendPropertyChanging("GradeId");
                    this._GradeId = value;
                    this.SendPropertyChanged("GradeId");
                    this.OnGradeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sequence in the schema.
        /// </summary>
        [Column(Name = @"""sequence""", Storage = "_Sequence", DbType = "VARCHAR(32)", UpdateCheck = UpdateCheck.Never)]
        public string Sequence
        {
            get
            {
                return this._Sequence;
            }
            set
            {
                if (this._Sequence != value)
                {
                    this.OnSequenceChanging(value);
                    this.SendPropertyChanging("Sequence");
                    this._Sequence = value;
                    this.SendPropertyChanged("Sequence");
                    this.OnSequenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeDescription in the schema.
        /// </summary>
        [Column(Name = @"size_description", Storage = "_SizeDescription", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string SizeDescription
        {
            get
            {
                return this._SizeDescription;
            }
            set
            {
                if (this._SizeDescription != value)
                {
                    this.OnSizeDescriptionChanging(value);
                    this.SendPropertyChanging("SizeDescription");
                    this._SizeDescription = value;
                    this.SendPropertyChanged("SizeDescription");
                    this.OnSizeDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeInDescription in the schema.
        /// </summary>
        [Column(Name = @"size_in_description", Storage = "_SizeInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> SizeInDescription
        {
            get
            {
                return this._SizeInDescription;
            }
            set
            {
                if (this._SizeInDescription != value)
                {
                    this.OnSizeInDescriptionChanging(value);
                    this.SendPropertyChanging("SizeInDescription");
                    this._SizeInDescription = value;
                    this.SendPropertyChanged("SizeInDescription");
                    this.OnSizeInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Density in the schema.
        /// </summary>
        [Column(Name = @"density", Storage = "_Density", DbType = "NUMERIC(16,6)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Density
        {
            get
            {
                return this._Density;
            }
            set
            {
                if (this._Density != value)
                {
                    this.OnDensityChanging(value);
                    this.SendPropertyChanging("Density");
                    this._Density = value;
                    this.SendPropertyChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdentifyingMarkId in the schema.
        /// </summary>
        [Column(Name = @"identifying_mark_id", Storage = "_IdentifyingMarkId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdentifyingMarkId
        {
            get
            {
                return this._IdentifyingMarkId;
            }
            set
            {
                if (this._IdentifyingMarkId != value)
                {
                    this.OnIdentifyingMarkIdChanging(value);
                    this.SendPropertyChanging("IdentifyingMarkId");
                    this._IdentifyingMarkId = value;
                    this.SendPropertyChanged("IdentifyingMarkId");
                    this.OnIdentifyingMarkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis1Id in the schema.
        /// </summary>
        [Column(Name = @"analysis1_id", Storage = "_Analysis1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis1Id
        {
            get
            {
                return this._Analysis1Id;
            }
            set
            {
                if (this._Analysis1Id != value)
                {
                    if (this._StockAnalysisCode_Analysis1Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis1IdChanging(value);
                    this.SendPropertyChanging("Analysis1Id");
                    this._Analysis1Id = value;
                    this.SendPropertyChanged("Analysis1Id");
                    this.OnAnalysis1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis2Id in the schema.
        /// </summary>
        [Column(Name = @"analysis2_id", Storage = "_Analysis2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis2Id
        {
            get
            {
                return this._Analysis2Id;
            }
            set
            {
                if (this._Analysis2Id != value)
                {
                    if (this._StockAnalysisCode_Analysis2Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis2IdChanging(value);
                    this.SendPropertyChanging("Analysis2Id");
                    this._Analysis2Id = value;
                    this.SendPropertyChanged("Analysis2Id");
                    this.OnAnalysis2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis3Id in the schema.
        /// </summary>
        [Column(Name = @"analysis3_id", Storage = "_Analysis3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis3Id
        {
            get
            {
                return this._Analysis3Id;
            }
            set
            {
                if (this._Analysis3Id != value)
                {
                    if (this._StockAnalysisCode_Analysis3Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis3IdChanging(value);
                    this.SendPropertyChanging("Analysis3Id");
                    this._Analysis3Id = value;
                    this.SendPropertyChanged("Analysis3Id");
                    this.OnAnalysis3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis4Id in the schema.
        /// </summary>
        [Column(Name = @"analysis4_id", Storage = "_Analysis4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis4Id
        {
            get
            {
                return this._Analysis4Id;
            }
            set
            {
                if (this._Analysis4Id != value)
                {
                    if (this._StockAnalysisCode_Analysis4Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis4IdChanging(value);
                    this.SendPropertyChanging("Analysis4Id");
                    this._Analysis4Id = value;
                    this.SendPropertyChanged("Analysis4Id");
                    this.OnAnalysis4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommodityId in the schema.
        /// </summary>
        [Column(Name = @"commodity_id", Storage = "_CommodityId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CommodityId
        {
            get
            {
                return this._CommodityId;
            }
            set
            {
                if (this._CommodityId != value)
                {
                    this.OnCommodityIdChanging(value);
                    this.SendPropertyChanging("CommodityId");
                    this._CommodityId = value;
                    this.SendPropertyChanged("CommodityId");
                    this.OnCommodityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyerId in the schema.
        /// </summary>
        [Column(Name = @"buyer_id", Storage = "_BuyerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BuyerId
        {
            get
            {
                return this._BuyerId;
            }
            set
            {
                if (this._BuyerId != value)
                {
                    this.OnBuyerIdChanging(value);
                    this.SendPropertyChanging("BuyerId");
                    this._BuyerId = value;
                    this.SendPropertyChanged("BuyerId");
                    this.OnBuyerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1StaticDimension in the schema.
        /// </summary>
        [Column(Name = @"dim1_static_dimension", Storage = "_Dim1StaticDimension", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1StaticDimension
        {
            get
            {
                return this._Dim1StaticDimension;
            }
            set
            {
                if (this._Dim1StaticDimension != value)
                {
                    this.OnDim1StaticDimensionChanging(value);
                    this.SendPropertyChanging("Dim1StaticDimension");
                    this._Dim1StaticDimension = value;
                    this.SendPropertyChanged("Dim1StaticDimension");
                    this.OnDim1StaticDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1MinimumOffcut in the schema.
        /// </summary>
        [Column(Name = @"dim1_minimum_offcut", Storage = "_Dim1MinimumOffcut", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1MinimumOffcut
        {
            get
            {
                return this._Dim1MinimumOffcut;
            }
            set
            {
                if (this._Dim1MinimumOffcut != value)
                {
                    this.OnDim1MinimumOffcutChanging(value);
                    this.SendPropertyChanging("Dim1MinimumOffcut");
                    this._Dim1MinimumOffcut = value;
                    this.SendPropertyChanged("Dim1MinimumOffcut");
                    this.OnDim1MinimumOffcutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2StaticDimension in the schema.
        /// </summary>
        [Column(Name = @"dim2_static_dimension", Storage = "_Dim2StaticDimension", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2StaticDimension
        {
            get
            {
                return this._Dim2StaticDimension;
            }
            set
            {
                if (this._Dim2StaticDimension != value)
                {
                    this.OnDim2StaticDimensionChanging(value);
                    this.SendPropertyChanging("Dim2StaticDimension");
                    this._Dim2StaticDimension = value;
                    this.SendPropertyChanged("Dim2StaticDimension");
                    this.OnDim2StaticDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2MinimumOffcut in the schema.
        /// </summary>
        [Column(Name = @"dim2_minimum_offcut", Storage = "_Dim2MinimumOffcut", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2MinimumOffcut
        {
            get
            {
                return this._Dim2MinimumOffcut;
            }
            set
            {
                if (this._Dim2MinimumOffcut != value)
                {
                    this.OnDim2MinimumOffcutChanging(value);
                    this.SendPropertyChanging("Dim2MinimumOffcut");
                    this._Dim2MinimumOffcut = value;
                    this.SendPropertyChanged("Dim2MinimumOffcut");
                    this.OnDim2MinimumOffcutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3StaticDimension in the schema.
        /// </summary>
        [Column(Name = @"dim3_static_dimension", Storage = "_Dim3StaticDimension", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3StaticDimension
        {
            get
            {
                return this._Dim3StaticDimension;
            }
            set
            {
                if (this._Dim3StaticDimension != value)
                {
                    this.OnDim3StaticDimensionChanging(value);
                    this.SendPropertyChanging("Dim3StaticDimension");
                    this._Dim3StaticDimension = value;
                    this.SendPropertyChanged("Dim3StaticDimension");
                    this.OnDim3StaticDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3MinimumOffcut in the schema.
        /// </summary>
        [Column(Name = @"dim3_minimum_offcut", Storage = "_Dim3MinimumOffcut", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3MinimumOffcut
        {
            get
            {
                return this._Dim3MinimumOffcut;
            }
            set
            {
                if (this._Dim3MinimumOffcut != value)
                {
                    this.OnDim3MinimumOffcutChanging(value);
                    this.SendPropertyChanging("Dim3MinimumOffcut");
                    this._Dim3MinimumOffcut = value;
                    this.SendPropertyChanged("Dim3MinimumOffcut");
                    this.OnDim3MinimumOffcutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4StaticDimension in the schema.
        /// </summary>
        [Column(Name = @"dim4_static_dimension", Storage = "_Dim4StaticDimension", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4StaticDimension
        {
            get
            {
                return this._Dim4StaticDimension;
            }
            set
            {
                if (this._Dim4StaticDimension != value)
                {
                    this.OnDim4StaticDimensionChanging(value);
                    this.SendPropertyChanging("Dim4StaticDimension");
                    this._Dim4StaticDimension = value;
                    this.SendPropertyChanged("Dim4StaticDimension");
                    this.OnDim4StaticDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4MinimumOffcut in the schema.
        /// </summary>
        [Column(Name = @"dim4_minimum_offcut", Storage = "_Dim4MinimumOffcut", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4MinimumOffcut
        {
            get
            {
                return this._Dim4MinimumOffcut;
            }
            set
            {
                if (this._Dim4MinimumOffcut != value)
                {
                    this.OnDim4MinimumOffcutChanging(value);
                    this.SendPropertyChanging("Dim4MinimumOffcut");
                    this._Dim4MinimumOffcut = value;
                    this.SendPropertyChanged("Dim4MinimumOffcut");
                    this.OnDim4MinimumOffcutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5StaticDimension in the schema.
        /// </summary>
        [Column(Name = @"dim5_static_dimension", Storage = "_Dim5StaticDimension", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5StaticDimension
        {
            get
            {
                return this._Dim5StaticDimension;
            }
            set
            {
                if (this._Dim5StaticDimension != value)
                {
                    this.OnDim5StaticDimensionChanging(value);
                    this.SendPropertyChanging("Dim5StaticDimension");
                    this._Dim5StaticDimension = value;
                    this.SendPropertyChanged("Dim5StaticDimension");
                    this.OnDim5StaticDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5MinimumOffcut in the schema.
        /// </summary>
        [Column(Name = @"dim5_minimum_offcut", Storage = "_Dim5MinimumOffcut", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5MinimumOffcut
        {
            get
            {
                return this._Dim5MinimumOffcut;
            }
            set
            {
                if (this._Dim5MinimumOffcut != value)
                {
                    this.OnDim5MinimumOffcutChanging(value);
                    this.SendPropertyChanging("Dim5MinimumOffcut");
                    this._Dim5MinimumOffcut = value;
                    this.SendPropertyChanged("Dim5MinimumOffcut");
                    this.OnDim5MinimumOffcutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Name = @"notes", Storage = "_Note", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging("Note");
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue1 in the schema.
        /// </summary>
        [Column(Name = @"specification_value1", Storage = "_SpecificationValue1", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue1
        {
            get
            {
                return this._SpecificationValue1;
            }
            set
            {
                if (this._SpecificationValue1 != value)
                {
                    this.OnSpecificationValue1Changing(value);
                    this.SendPropertyChanging("SpecificationValue1");
                    this._SpecificationValue1 = value;
                    this.SendPropertyChanged("SpecificationValue1");
                    this.OnSpecificationValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue2 in the schema.
        /// </summary>
        [Column(Name = @"specification_value2", Storage = "_SpecificationValue2", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue2
        {
            get
            {
                return this._SpecificationValue2;
            }
            set
            {
                if (this._SpecificationValue2 != value)
                {
                    this.OnSpecificationValue2Changing(value);
                    this.SendPropertyChanging("SpecificationValue2");
                    this._SpecificationValue2 = value;
                    this.SendPropertyChanged("SpecificationValue2");
                    this.OnSpecificationValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue3 in the schema.
        /// </summary>
        [Column(Name = @"specification_value3", Storage = "_SpecificationValue3", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue3
        {
            get
            {
                return this._SpecificationValue3;
            }
            set
            {
                if (this._SpecificationValue3 != value)
                {
                    this.OnSpecificationValue3Changing(value);
                    this.SendPropertyChanging("SpecificationValue3");
                    this._SpecificationValue3 = value;
                    this.SendPropertyChanged("SpecificationValue3");
                    this.OnSpecificationValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue4 in the schema.
        /// </summary>
        [Column(Name = @"specification_value4", Storage = "_SpecificationValue4", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue4
        {
            get
            {
                return this._SpecificationValue4;
            }
            set
            {
                if (this._SpecificationValue4 != value)
                {
                    this.OnSpecificationValue4Changing(value);
                    this.SendPropertyChanging("SpecificationValue4");
                    this._SpecificationValue4 = value;
                    this.SendPropertyChanged("SpecificationValue4");
                    this.OnSpecificationValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue5 in the schema.
        /// </summary>
        [Column(Name = @"specification_value5", Storage = "_SpecificationValue5", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue5
        {
            get
            {
                return this._SpecificationValue5;
            }
            set
            {
                if (this._SpecificationValue5 != value)
                {
                    this.OnSpecificationValue5Changing(value);
                    this.SendPropertyChanging("SpecificationValue5");
                    this._SpecificationValue5 = value;
                    this.SendPropertyChanged("SpecificationValue5");
                    this.OnSpecificationValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesCostingTypeId in the schema.
        /// </summary>
        [Column(Name = @"sales_costing_type_id", Storage = "_SalesCostingTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesCostingTypeId
        {
            get
            {
                return this._SalesCostingTypeId;
            }
            set
            {
                if (this._SalesCostingTypeId != value)
                {
                    this.OnSalesCostingTypeIdChanging(value);
                    this.SendPropertyChanging("SalesCostingTypeId");
                    this._SalesCostingTypeId = value;
                    this.SendPropertyChanged("SalesCostingTypeId");
                    this.OnSalesCostingTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnquiryCostShownId in the schema.
        /// </summary>
        [Column(Name = @"enquiry_cost_shown_id", Storage = "_EnquiryCostShownId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EnquiryCostShownId
        {
            get
            {
                return this._EnquiryCostShownId;
            }
            set
            {
                if (this._EnquiryCostShownId != value)
                {
                    this.OnEnquiryCostShownIdChanging(value);
                    this.SendPropertyChanging("EnquiryCostShownId");
                    this._EnquiryCostShownId = value;
                    this.SendPropertyChanged("EnquiryCostShownId");
                    this.OnEnquiryCostShownIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceProductId in the schema.
        /// </summary>
        [Column(Name = @"source_product_id", Storage = "_SourceProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SourceProductId
        {
            get
            {
                return this._SourceProductId;
            }
            set
            {
                if (this._SourceProductId != value)
                {
                    if (this._Product_SourceProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSourceProductIdChanging(value);
                    this.SendPropertyChanging("SourceProductId");
                    this._SourceProductId = value;
                    this.SendPropertyChanged("SourceProductId");
                    this.OnSourceProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardCost in the schema.
        /// </summary>
        [Column(Name = @"standard_cost", Storage = "_StandardCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StandardCost
        {
            get
            {
                return this._StandardCost;
            }
            set
            {
                if (this._StandardCost != value)
                {
                    this.OnStandardCostChanging(value);
                    this.SendPropertyChanging("StandardCost");
                    this._StandardCost = value;
                    this.SendPropertyChanged("StandardCost");
                    this.OnStandardCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinimumGradeId in the schema.
        /// </summary>
        [Column(Name = @"minimum_grade_id", Storage = "_MinimumGradeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MinimumGradeId
        {
            get
            {
                return this._MinimumGradeId;
            }
            set
            {
                if (this._MinimumGradeId != value)
                {
                    if (this._StockGrade_MinimumGradeId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMinimumGradeIdChanging(value);
                    this.SendPropertyChanging("MinimumGradeId");
                    this._MinimumGradeId = value;
                    this.SendPropertyChanged("MinimumGradeId");
                    this.OnMinimumGradeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DescriptionFormula in the schema.
        /// </summary>
        [Column(Name = @"description_formula", Storage = "_DescriptionFormula", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DescriptionFormula
        {
            get
            {
                return this._DescriptionFormula;
            }
            set
            {
                if (this._DescriptionFormula != value)
                {
                    this.OnDescriptionFormulaChanging(value);
                    this.SendPropertyChanging("DescriptionFormula");
                    this._DescriptionFormula = value;
                    this.SendPropertyChanged("DescriptionFormula");
                    this.OnDescriptionFormulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinimumMargin in the schema.
        /// </summary>
        [Column(Name = @"minimum_margin", Storage = "_MinimumMargin", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinimumMargin
        {
            get
            {
                return this._MinimumMargin;
            }
            set
            {
                if (this._MinimumMargin != value)
                {
                    this.OnMinimumMarginChanging(value);
                    this.SendPropertyChanging("MinimumMargin");
                    this._MinimumMargin = value;
                    this.SendPropertyChanged("MinimumMargin");
                    this.OnMinimumMarginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesNote in the schema.
        /// </summary>
        [Column(Name = @"sales_notes", Storage = "_SalesNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string SalesNote
        {
            get
            {
                return this._SalesNote;
            }
            set
            {
                if (this._SalesNote != value)
                {
                    this.OnSalesNoteChanging(value);
                    this.SendPropertyChanging("SalesNote");
                    this._SalesNote = value;
                    this.SendPropertyChanged("SalesNote");
                    this.OnSalesNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNote in the schema.
        /// </summary>
        [Column(Name = @"purchase_notes", Storage = "_PurchaseNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNote
        {
            get
            {
                return this._PurchaseNote;
            }
            set
            {
                if (this._PurchaseNote != value)
                {
                    this.OnPurchaseNoteChanging(value);
                    this.SendPropertyChanging("PurchaseNote");
                    this._PurchaseNote = value;
                    this.SendPropertyChanged("PurchaseNote");
                    this.OnPurchaseNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue6 in the schema.
        /// </summary>
        [Column(Name = @"specification_value6", Storage = "_SpecificationValue6", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue6
        {
            get
            {
                return this._SpecificationValue6;
            }
            set
            {
                if (this._SpecificationValue6 != value)
                {
                    this.OnSpecificationValue6Changing(value);
                    this.SendPropertyChanging("SpecificationValue6");
                    this._SpecificationValue6 = value;
                    this.SendPropertyChanged("SpecificationValue6");
                    this.OnSpecificationValue6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue7 in the schema.
        /// </summary>
        [Column(Name = @"specification_value7", Storage = "_SpecificationValue7", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue7
        {
            get
            {
                return this._SpecificationValue7;
            }
            set
            {
                if (this._SpecificationValue7 != value)
                {
                    this.OnSpecificationValue7Changing(value);
                    this.SendPropertyChanging("SpecificationValue7");
                    this._SpecificationValue7 = value;
                    this.SendPropertyChanged("SpecificationValue7");
                    this.OnSpecificationValue7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue8 in the schema.
        /// </summary>
        [Column(Name = @"specification_value8", Storage = "_SpecificationValue8", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue8
        {
            get
            {
                return this._SpecificationValue8;
            }
            set
            {
                if (this._SpecificationValue8 != value)
                {
                    this.OnSpecificationValue8Changing(value);
                    this.SendPropertyChanging("SpecificationValue8");
                    this._SpecificationValue8 = value;
                    this.SendPropertyChanged("SpecificationValue8");
                    this.OnSpecificationValue8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue9 in the schema.
        /// </summary>
        [Column(Name = @"specification_value9", Storage = "_SpecificationValue9", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue9
        {
            get
            {
                return this._SpecificationValue9;
            }
            set
            {
                if (this._SpecificationValue9 != value)
                {
                    this.OnSpecificationValue9Changing(value);
                    this.SendPropertyChanging("SpecificationValue9");
                    this._SpecificationValue9 = value;
                    this.SendPropertyChanged("SpecificationValue9");
                    this.OnSpecificationValue9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue10 in the schema.
        /// </summary>
        [Column(Name = @"specification_value10", Storage = "_SpecificationValue10", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue10
        {
            get
            {
                return this._SpecificationValue10;
            }
            set
            {
                if (this._SpecificationValue10 != value)
                {
                    this.OnSpecificationValue10Changing(value);
                    this.SendPropertyChanging("SpecificationValue10");
                    this._SpecificationValue10 = value;
                    this.SendPropertyChanged("SpecificationValue10");
                    this.OnSpecificationValue10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"purchase_group_id", Storage = "_PurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseGroupId
        {
            get
            {
                return this._PurchaseGroupId;
            }
            set
            {
                if (this._PurchaseGroupId != value)
                {
                    this.OnPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("PurchaseGroupId");
                    this._PurchaseGroupId = value;
                    this.SendPropertyChanged("PurchaseGroupId");
                    this.OnPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1ProductionOverride in the schema.
        /// </summary>
        [Column(Name = @"dim1_production_override", Storage = "_Dim1ProductionOverride", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim1ProductionOverride
        {
            get
            {
                return this._Dim1ProductionOverride;
            }
            set
            {
                if (this._Dim1ProductionOverride != value)
                {
                    this.OnDim1ProductionOverrideChanging(value);
                    this.SendPropertyChanging("Dim1ProductionOverride");
                    this._Dim1ProductionOverride = value;
                    this.SendPropertyChanged("Dim1ProductionOverride");
                    this.OnDim1ProductionOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2ProductionOverride in the schema.
        /// </summary>
        [Column(Name = @"dim2_production_override", Storage = "_Dim2ProductionOverride", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim2ProductionOverride
        {
            get
            {
                return this._Dim2ProductionOverride;
            }
            set
            {
                if (this._Dim2ProductionOverride != value)
                {
                    this.OnDim2ProductionOverrideChanging(value);
                    this.SendPropertyChanging("Dim2ProductionOverride");
                    this._Dim2ProductionOverride = value;
                    this.SendPropertyChanged("Dim2ProductionOverride");
                    this.OnDim2ProductionOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3ProductionOverride in the schema.
        /// </summary>
        [Column(Name = @"dim3_production_override", Storage = "_Dim3ProductionOverride", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim3ProductionOverride
        {
            get
            {
                return this._Dim3ProductionOverride;
            }
            set
            {
                if (this._Dim3ProductionOverride != value)
                {
                    this.OnDim3ProductionOverrideChanging(value);
                    this.SendPropertyChanging("Dim3ProductionOverride");
                    this._Dim3ProductionOverride = value;
                    this.SendPropertyChanged("Dim3ProductionOverride");
                    this.OnDim3ProductionOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4ProductionOverride in the schema.
        /// </summary>
        [Column(Name = @"dim4_production_override", Storage = "_Dim4ProductionOverride", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim4ProductionOverride
        {
            get
            {
                return this._Dim4ProductionOverride;
            }
            set
            {
                if (this._Dim4ProductionOverride != value)
                {
                    this.OnDim4ProductionOverrideChanging(value);
                    this.SendPropertyChanging("Dim4ProductionOverride");
                    this._Dim4ProductionOverride = value;
                    this.SendPropertyChanged("Dim4ProductionOverride");
                    this.OnDim4ProductionOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5ProductionOverride in the schema.
        /// </summary>
        [Column(Name = @"dim5_production_override", Storage = "_Dim5ProductionOverride", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim5ProductionOverride
        {
            get
            {
                return this._Dim5ProductionOverride;
            }
            set
            {
                if (this._Dim5ProductionOverride != value)
                {
                    this.OnDim5ProductionOverrideChanging(value);
                    this.SendPropertyChanging("Dim5ProductionOverride");
                    this._Dim5ProductionOverride = value;
                    this.SendPropertyChanged("Dim5ProductionOverride");
                    this.OnDim5ProductionOverrideChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequireCertification in the schema.
        /// </summary>
        [Column(Name = @"require_certification", Storage = "_RequireCertification", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool RequireCertification
        {
            get
            {
                return this._RequireCertification;
            }
            set
            {
                if (this._RequireCertification != value)
                {
                    this.OnRequireCertificationChanging(value);
                    this.SendPropertyChanging("RequireCertification");
                    this._RequireCertification = value;
                    this.SendPropertyChanged("RequireCertification");
                    this.OnRequireCertificationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateProductId in the schema.
        /// </summary>
        [Column(Name = @"alternate_product_id", Storage = "_AlternateProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AlternateProductId
        {
            get
            {
                return this._AlternateProductId;
            }
            set
            {
                if (this._AlternateProductId != value)
                {
                    if (this._Product_AlternateProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAlternateProductIdChanging(value);
                    this.SendPropertyChanging("AlternateProductId");
                    this._AlternateProductId = value;
                    this.SendPropertyChanged("AlternateProductId");
                    this.OnAlternateProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification1Id in the schema.
        /// </summary>
        [Column(Name = @"specification1_id", Storage = "_Specification1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification1Id
        {
            get
            {
                return this._Specification1Id;
            }
            set
            {
                if (this._Specification1Id != value)
                {
                    this.OnSpecification1IdChanging(value);
                    this.SendPropertyChanging("Specification1Id");
                    this._Specification1Id = value;
                    this.SendPropertyChanged("Specification1Id");
                    this.OnSpecification1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification2Id in the schema.
        /// </summary>
        [Column(Name = @"specification2_id", Storage = "_Specification2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification2Id
        {
            get
            {
                return this._Specification2Id;
            }
            set
            {
                if (this._Specification2Id != value)
                {
                    this.OnSpecification2IdChanging(value);
                    this.SendPropertyChanging("Specification2Id");
                    this._Specification2Id = value;
                    this.SendPropertyChanged("Specification2Id");
                    this.OnSpecification2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification3Id in the schema.
        /// </summary>
        [Column(Name = @"specification3_id", Storage = "_Specification3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification3Id
        {
            get
            {
                return this._Specification3Id;
            }
            set
            {
                if (this._Specification3Id != value)
                {
                    this.OnSpecification3IdChanging(value);
                    this.SendPropertyChanging("Specification3Id");
                    this._Specification3Id = value;
                    this.SendPropertyChanged("Specification3Id");
                    this.OnSpecification3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification4Id in the schema.
        /// </summary>
        [Column(Name = @"specification4_id", Storage = "_Specification4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification4Id
        {
            get
            {
                return this._Specification4Id;
            }
            set
            {
                if (this._Specification4Id != value)
                {
                    this.OnSpecification4IdChanging(value);
                    this.SendPropertyChanging("Specification4Id");
                    this._Specification4Id = value;
                    this.SendPropertyChanged("Specification4Id");
                    this.OnSpecification4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification5Id in the schema.
        /// </summary>
        [Column(Name = @"specification5_id", Storage = "_Specification5Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification5Id
        {
            get
            {
                return this._Specification5Id;
            }
            set
            {
                if (this._Specification5Id != value)
                {
                    this.OnSpecification5IdChanging(value);
                    this.SendPropertyChanging("Specification5Id");
                    this._Specification5Id = value;
                    this.SendPropertyChanged("Specification5Id");
                    this.OnSpecification5IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification6Id in the schema.
        /// </summary>
        [Column(Name = @"specification6_id", Storage = "_Specification6Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification6Id
        {
            get
            {
                return this._Specification6Id;
            }
            set
            {
                if (this._Specification6Id != value)
                {
                    this.OnSpecification6IdChanging(value);
                    this.SendPropertyChanging("Specification6Id");
                    this._Specification6Id = value;
                    this.SendPropertyChanged("Specification6Id");
                    this.OnSpecification6IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification7Id in the schema.
        /// </summary>
        [Column(Name = @"specification7_id", Storage = "_Specification7Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification7Id
        {
            get
            {
                return this._Specification7Id;
            }
            set
            {
                if (this._Specification7Id != value)
                {
                    this.OnSpecification7IdChanging(value);
                    this.SendPropertyChanging("Specification7Id");
                    this._Specification7Id = value;
                    this.SendPropertyChanged("Specification7Id");
                    this.OnSpecification7IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification8Id in the schema.
        /// </summary>
        [Column(Name = @"specification8_id", Storage = "_Specification8Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification8Id
        {
            get
            {
                return this._Specification8Id;
            }
            set
            {
                if (this._Specification8Id != value)
                {
                    this.OnSpecification8IdChanging(value);
                    this.SendPropertyChanging("Specification8Id");
                    this._Specification8Id = value;
                    this.SendPropertyChanged("Specification8Id");
                    this.OnSpecification8IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification9Id in the schema.
        /// </summary>
        [Column(Name = @"specification9_id", Storage = "_Specification9Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification9Id
        {
            get
            {
                return this._Specification9Id;
            }
            set
            {
                if (this._Specification9Id != value)
                {
                    this.OnSpecification9IdChanging(value);
                    this.SendPropertyChanging("Specification9Id");
                    this._Specification9Id = value;
                    this.SendPropertyChanged("Specification9Id");
                    this.OnSpecification9IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification10Id in the schema.
        /// </summary>
        [Column(Name = @"specification10_id", Storage = "_Specification10Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification10Id
        {
            get
            {
                return this._Specification10Id;
            }
            set
            {
                if (this._Specification10Id != value)
                {
                    this.OnSpecification10IdChanging(value);
                    this.SendPropertyChanging("Specification10Id");
                    this._Specification10Id = value;
                    this.SendPropertyChanged("Specification10Id");
                    this.OnSpecification10IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim1_type_id", Storage = "_Dim1TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1TypeId
        {
            get
            {
                return this._Dim1TypeId;
            }
            set
            {
                if (this._Dim1TypeId != value)
                {
                    this.OnDim1TypeIdChanging(value);
                    this.SendPropertyChanging("Dim1TypeId");
                    this._Dim1TypeId = value;
                    this.SendPropertyChanged("Dim1TypeId");
                    this.OnDim1TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim2_type_id", Storage = "_Dim2TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2TypeId
        {
            get
            {
                return this._Dim2TypeId;
            }
            set
            {
                if (this._Dim2TypeId != value)
                {
                    this.OnDim2TypeIdChanging(value);
                    this.SendPropertyChanging("Dim2TypeId");
                    this._Dim2TypeId = value;
                    this.SendPropertyChanged("Dim2TypeId");
                    this.OnDim2TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim3_type_id", Storage = "_Dim3TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3TypeId
        {
            get
            {
                return this._Dim3TypeId;
            }
            set
            {
                if (this._Dim3TypeId != value)
                {
                    this.OnDim3TypeIdChanging(value);
                    this.SendPropertyChanging("Dim3TypeId");
                    this._Dim3TypeId = value;
                    this.SendPropertyChanged("Dim3TypeId");
                    this.OnDim3TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim4_type_id", Storage = "_Dim4TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4TypeId
        {
            get
            {
                return this._Dim4TypeId;
            }
            set
            {
                if (this._Dim4TypeId != value)
                {
                    this.OnDim4TypeIdChanging(value);
                    this.SendPropertyChanging("Dim4TypeId");
                    this._Dim4TypeId = value;
                    this.SendPropertyChanged("Dim4TypeId");
                    this.OnDim4TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim5_type_id", Storage = "_Dim5TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5TypeId
        {
            get
            {
                return this._Dim5TypeId;
            }
            set
            {
                if (this._Dim5TypeId != value)
                {
                    this.OnDim5TypeIdChanging(value);
                    this.SendPropertyChanging("Dim5TypeId");
                    this._Dim5TypeId = value;
                    this.SendPropertyChanged("Dim5TypeId");
                    this.OnDim5TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultStockStatusId in the schema.
        /// </summary>
        [Column(Name = @"default_stock_status_id", Storage = "_DefaultStockStatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultStockStatusId
        {
            get
            {
                return this._DefaultStockStatusId;
            }
            set
            {
                if (this._DefaultStockStatusId != value)
                {
                    this.OnDefaultStockStatusIdChanging(value);
                    this.SendPropertyChanging("DefaultStockStatusId");
                    this._DefaultStockStatusId = value;
                    this.SendPropertyChanged("DefaultStockStatusId");
                    this.OnDefaultStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestingNote in the schema.
        /// </summary>
        [Column(Name = @"testing_notes", Storage = "_TestingNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string TestingNote
        {
            get
            {
                return this._TestingNote;
            }
            set
            {
                if (this._TestingNote != value)
                {
                    this.OnTestingNoteChanging(value);
                    this.SendPropertyChanging("TestingNote");
                    this._TestingNote = value;
                    this.SendPropertyChanged("TestingNote");
                    this.OnTestingNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuttingGroupCostId in the schema.
        /// </summary>
        [Column(Name = @"cutting_group_cost_id", Storage = "_CuttingGroupCostId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuttingGroupCostId
        {
            get
            {
                return this._CuttingGroupCostId;
            }
            set
            {
                if (this._CuttingGroupCostId != value)
                {
                    this.OnCuttingGroupCostIdChanging(value);
                    this.SendPropertyChanging("CuttingGroupCostId");
                    this._CuttingGroupCostId = value;
                    this.SendPropertyChanged("CuttingGroupCostId");
                    this.OnCuttingGroupCostIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GuideCost in the schema.
        /// </summary>
        [Column(Name = @"guide_cost", Storage = "_GuideCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GuideCost
        {
            get
            {
                return this._GuideCost;
            }
            set
            {
                if (this._GuideCost != value)
                {
                    this.OnGuideCostChanging(value);
                    this.SendPropertyChanging("GuideCost");
                    this._GuideCost = value;
                    this.SendPropertyChanged("GuideCost");
                    this.OnGuideCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GuidePrice in the schema.
        /// </summary>
        [Column(Name = @"guide_price", Storage = "_GuidePrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GuidePrice
        {
            get
            {
                return this._GuidePrice;
            }
            set
            {
                if (this._GuidePrice != value)
                {
                    this.OnGuidePriceChanging(value);
                    this.SendPropertyChanging("GuidePrice");
                    this._GuidePrice = value;
                    this.SendPropertyChanged("GuidePrice");
                    this.OnGuidePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FabricationPrice in the schema.
        /// </summary>
        [Column(Name = @"fabrication_price", Storage = "_FabricationPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> FabricationPrice
        {
            get
            {
                return this._FabricationPrice;
            }
            set
            {
                if (this._FabricationPrice != value)
                {
                    this.OnFabricationPriceChanging(value);
                    this.SendPropertyChanging("FabricationPrice");
                    this._FabricationPrice = value;
                    this.SendPropertyChanged("FabricationPrice");
                    this.OnFabricationPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScrapProductId in the schema.
        /// </summary>
        [Column(Name = @"scrap_product_id", Storage = "_ScrapProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ScrapProductId
        {
            get
            {
                return this._ScrapProductId;
            }
            set
            {
                if (this._ScrapProductId != value)
                {
                    if (this._Product_ScrapProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnScrapProductIdChanging(value);
                    this.SendPropertyChanging("ScrapProductId");
                    this._ScrapProductId = value;
                    this.SendPropertyChanged("ScrapProductId");
                    this.OnScrapProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_negative_tolerance", Storage = "_Dim1NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1NegativeTolerance
        {
            get
            {
                return this._Dim1NegativeTolerance;
            }
            set
            {
                if (this._Dim1NegativeTolerance != value)
                {
                    this.OnDim1NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim1NegativeTolerance");
                    this._Dim1NegativeTolerance = value;
                    this.SendPropertyChanged("Dim1NegativeTolerance");
                    this.OnDim1NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_positive_tolerance", Storage = "_Dim1PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1PositiveTolerance
        {
            get
            {
                return this._Dim1PositiveTolerance;
            }
            set
            {
                if (this._Dim1PositiveTolerance != value)
                {
                    this.OnDim1PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim1PositiveTolerance");
                    this._Dim1PositiveTolerance = value;
                    this.SendPropertyChanged("Dim1PositiveTolerance");
                    this.OnDim1PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_negative_tolerance", Storage = "_Dim2NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2NegativeTolerance
        {
            get
            {
                return this._Dim2NegativeTolerance;
            }
            set
            {
                if (this._Dim2NegativeTolerance != value)
                {
                    this.OnDim2NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim2NegativeTolerance");
                    this._Dim2NegativeTolerance = value;
                    this.SendPropertyChanged("Dim2NegativeTolerance");
                    this.OnDim2NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_positive_tolerance", Storage = "_Dim2PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2PositiveTolerance
        {
            get
            {
                return this._Dim2PositiveTolerance;
            }
            set
            {
                if (this._Dim2PositiveTolerance != value)
                {
                    this.OnDim2PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim2PositiveTolerance");
                    this._Dim2PositiveTolerance = value;
                    this.SendPropertyChanged("Dim2PositiveTolerance");
                    this.OnDim2PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_negative_tolerance", Storage = "_Dim3NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3NegativeTolerance
        {
            get
            {
                return this._Dim3NegativeTolerance;
            }
            set
            {
                if (this._Dim3NegativeTolerance != value)
                {
                    this.OnDim3NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim3NegativeTolerance");
                    this._Dim3NegativeTolerance = value;
                    this.SendPropertyChanged("Dim3NegativeTolerance");
                    this.OnDim3NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_positive_tolerance", Storage = "_Dim3PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3PositiveTolerance
        {
            get
            {
                return this._Dim3PositiveTolerance;
            }
            set
            {
                if (this._Dim3PositiveTolerance != value)
                {
                    this.OnDim3PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim3PositiveTolerance");
                    this._Dim3PositiveTolerance = value;
                    this.SendPropertyChanged("Dim3PositiveTolerance");
                    this.OnDim3PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_negative_tolerance", Storage = "_Dim4NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4NegativeTolerance
        {
            get
            {
                return this._Dim4NegativeTolerance;
            }
            set
            {
                if (this._Dim4NegativeTolerance != value)
                {
                    this.OnDim4NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim4NegativeTolerance");
                    this._Dim4NegativeTolerance = value;
                    this.SendPropertyChanged("Dim4NegativeTolerance");
                    this.OnDim4NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_positive_tolerance", Storage = "_Dim4PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4PositiveTolerance
        {
            get
            {
                return this._Dim4PositiveTolerance;
            }
            set
            {
                if (this._Dim4PositiveTolerance != value)
                {
                    this.OnDim4PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim4PositiveTolerance");
                    this._Dim4PositiveTolerance = value;
                    this.SendPropertyChanged("Dim4PositiveTolerance");
                    this.OnDim4PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_negative_tolerance", Storage = "_Dim5NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5NegativeTolerance
        {
            get
            {
                return this._Dim5NegativeTolerance;
            }
            set
            {
                if (this._Dim5NegativeTolerance != value)
                {
                    this.OnDim5NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim5NegativeTolerance");
                    this._Dim5NegativeTolerance = value;
                    this.SendPropertyChanged("Dim5NegativeTolerance");
                    this.OnDim5NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_positive_tolerance", Storage = "_Dim5PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5PositiveTolerance
        {
            get
            {
                return this._Dim5PositiveTolerance;
            }
            set
            {
                if (this._Dim5PositiveTolerance != value)
                {
                    this.OnDim5PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim5PositiveTolerance");
                    this._Dim5PositiveTolerance = value;
                    this.SendPropertyChanged("Dim5PositiveTolerance");
                    this.OnDim5PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NonTraceableUsesLocation in the schema.
        /// </summary>
        [Column(Name = @"non_traceable_uses_location", Storage = "_NonTraceableUsesLocation", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> NonTraceableUsesLocation
        {
            get
            {
                return this._NonTraceableUsesLocation;
            }
            set
            {
                if (this._NonTraceableUsesLocation != value)
                {
                    this.OnNonTraceableUsesLocationChanging(value);
                    this.SendPropertyChanging("NonTraceableUsesLocation");
                    this._NonTraceableUsesLocation = value;
                    this.SendPropertyChanged("NonTraceableUsesLocation");
                    this.OnNonTraceableUsesLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim1_kerf", Storage = "_Dim1Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1Kerf
        {
            get
            {
                return this._Dim1Kerf;
            }
            set
            {
                if (this._Dim1Kerf != value)
                {
                    this.OnDim1KerfChanging(value);
                    this.SendPropertyChanging("Dim1Kerf");
                    this._Dim1Kerf = value;
                    this.SendPropertyChanged("Dim1Kerf");
                    this.OnDim1KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim2_kerf", Storage = "_Dim2Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2Kerf
        {
            get
            {
                return this._Dim2Kerf;
            }
            set
            {
                if (this._Dim2Kerf != value)
                {
                    this.OnDim2KerfChanging(value);
                    this.SendPropertyChanging("Dim2Kerf");
                    this._Dim2Kerf = value;
                    this.SendPropertyChanged("Dim2Kerf");
                    this.OnDim2KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim3_kerf", Storage = "_Dim3Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3Kerf
        {
            get
            {
                return this._Dim3Kerf;
            }
            set
            {
                if (this._Dim3Kerf != value)
                {
                    this.OnDim3KerfChanging(value);
                    this.SendPropertyChanging("Dim3Kerf");
                    this._Dim3Kerf = value;
                    this.SendPropertyChanged("Dim3Kerf");
                    this.OnDim3KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim4_kerf", Storage = "_Dim4Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4Kerf
        {
            get
            {
                return this._Dim4Kerf;
            }
            set
            {
                if (this._Dim4Kerf != value)
                {
                    this.OnDim4KerfChanging(value);
                    this.SendPropertyChanging("Dim4Kerf");
                    this._Dim4Kerf = value;
                    this.SendPropertyChanged("Dim4Kerf");
                    this.OnDim4KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim5_kerf", Storage = "_Dim5Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5Kerf
        {
            get
            {
                return this._Dim5Kerf;
            }
            set
            {
                if (this._Dim5Kerf != value)
                {
                    this.OnDim5KerfChanging(value);
                    this.SendPropertyChanging("Dim5Kerf");
                    this._Dim5Kerf = value;
                    this.SendPropertyChanged("Dim5Kerf");
                    this.OnDim5KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultConsumedDimInProduction1 in the schema.
        /// </summary>
        [Column(Name = @"default_consumed_dim_in_production1", Storage = "_DefaultConsumedDimInProduction1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DefaultConsumedDimInProduction1
        {
            get
            {
                return this._DefaultConsumedDimInProduction1;
            }
            set
            {
                if (this._DefaultConsumedDimInProduction1 != value)
                {
                    this.OnDefaultConsumedDimInProduction1Changing(value);
                    this.SendPropertyChanging("DefaultConsumedDimInProduction1");
                    this._DefaultConsumedDimInProduction1 = value;
                    this.SendPropertyChanged("DefaultConsumedDimInProduction1");
                    this.OnDefaultConsumedDimInProduction1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultConsumedDimInProduction2 in the schema.
        /// </summary>
        [Column(Name = @"default_consumed_dim_in_production2", Storage = "_DefaultConsumedDimInProduction2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DefaultConsumedDimInProduction2
        {
            get
            {
                return this._DefaultConsumedDimInProduction2;
            }
            set
            {
                if (this._DefaultConsumedDimInProduction2 != value)
                {
                    this.OnDefaultConsumedDimInProduction2Changing(value);
                    this.SendPropertyChanging("DefaultConsumedDimInProduction2");
                    this._DefaultConsumedDimInProduction2 = value;
                    this.SendPropertyChanged("DefaultConsumedDimInProduction2");
                    this.OnDefaultConsumedDimInProduction2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultConsumedDimInProduction3 in the schema.
        /// </summary>
        [Column(Name = @"default_consumed_dim_in_production3", Storage = "_DefaultConsumedDimInProduction3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DefaultConsumedDimInProduction3
        {
            get
            {
                return this._DefaultConsumedDimInProduction3;
            }
            set
            {
                if (this._DefaultConsumedDimInProduction3 != value)
                {
                    this.OnDefaultConsumedDimInProduction3Changing(value);
                    this.SendPropertyChanging("DefaultConsumedDimInProduction3");
                    this._DefaultConsumedDimInProduction3 = value;
                    this.SendPropertyChanged("DefaultConsumedDimInProduction3");
                    this.OnDefaultConsumedDimInProduction3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultConsumedDimInProduction4 in the schema.
        /// </summary>
        [Column(Name = @"default_consumed_dim_in_production4", Storage = "_DefaultConsumedDimInProduction4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DefaultConsumedDimInProduction4
        {
            get
            {
                return this._DefaultConsumedDimInProduction4;
            }
            set
            {
                if (this._DefaultConsumedDimInProduction4 != value)
                {
                    this.OnDefaultConsumedDimInProduction4Changing(value);
                    this.SendPropertyChanging("DefaultConsumedDimInProduction4");
                    this._DefaultConsumedDimInProduction4 = value;
                    this.SendPropertyChanged("DefaultConsumedDimInProduction4");
                    this.OnDefaultConsumedDimInProduction4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultConsumedDimInProduction5 in the schema.
        /// </summary>
        [Column(Name = @"default_consumed_dim_in_production5", Storage = "_DefaultConsumedDimInProduction5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DefaultConsumedDimInProduction5
        {
            get
            {
                return this._DefaultConsumedDimInProduction5;
            }
            set
            {
                if (this._DefaultConsumedDimInProduction5 != value)
                {
                    this.OnDefaultConsumedDimInProduction5Changing(value);
                    this.SendPropertyChanging("DefaultConsumedDimInProduction5");
                    this._DefaultConsumedDimInProduction5 = value;
                    this.SendPropertyChanged("DefaultConsumedDimInProduction5");
                    this.OnDefaultConsumedDimInProduction5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_StockItem", Storage="_StockItem", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<StockItem> StockItem
        {
            get
            {
                return this._StockItem;
            }
            set
            {
                this._StockItem.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StockGrade_GradeId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_Product", Storage="_StockGrade_GradeId", ThisKey="GradeId", OtherKey="Id", IsForeignKey=true)]
        public StockGrade StockGrade_GradeId
        {
            get
            {
                return this._StockGrade_GradeId.Entity;
            }
            set
            {
                StockGrade previousValue = this._StockGrade_GradeId.Entity;
                if ((previousValue != value) || (this._StockGrade_GradeId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockGrade_GradeId");
                    if (previousValue != null)
                    {
                        this._StockGrade_GradeId.Entity = null;
                        previousValue.Product_GradeId.Remove(this);
                    }
                    this._StockGrade_GradeId.Entity = value;
                    if (value != null)
                    {
                        this._GradeId = value.Id;
                        value.Product_GradeId.Add(this);
                    }
                    else
                    {
                        this._GradeId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockGrade_GradeId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockGrade_MinimumGradeId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_Product1", Storage="_StockGrade_MinimumGradeId", ThisKey="MinimumGradeId", OtherKey="Id", IsForeignKey=true)]
        public StockGrade StockGrade_MinimumGradeId
        {
            get
            {
                return this._StockGrade_MinimumGradeId.Entity;
            }
            set
            {
                StockGrade previousValue = this._StockGrade_MinimumGradeId.Entity;
                if ((previousValue != value) || (this._StockGrade_MinimumGradeId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockGrade_MinimumGradeId");
                    if (previousValue != null)
                    {
                        this._StockGrade_MinimumGradeId.Entity = null;
                        previousValue.Product_MinimumGradeId.Remove(this);
                    }
                    this._StockGrade_MinimumGradeId.Entity = value;
                    if (value != null)
                    {
                        this._MinimumGradeId = value.Id;
                        value.Product_MinimumGradeId.Add(this);
                    }
                    else
                    {
                        this._MinimumGradeId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockGrade_MinimumGradeId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
        public ProductCategory ProductCategory
        {
            get
            {
                return this._ProductCategory.Entity;
            }
            set
            {
                ProductCategory previousValue = this._ProductCategory.Entity;
                if ((previousValue != value) || (this._ProductCategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductCategory");
                    if (previousValue != null)
                    {
                        this._ProductCategory.Entity = null;
                        previousValue.Product.Remove(this);
                    }
                    this._ProductCategory.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.Id;
                        value.Product.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductCategory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCast in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_StockCast", Storage="_StockCast", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<StockCast> StockCast
        {
            get
            {
                return this._StockCast;
            }
            set
            {
                this._StockCast.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis1Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_Product", Storage="_StockAnalysisCode_Analysis1Id", ThisKey="Analysis1Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis1Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis1Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis1Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis1Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis1Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis1Id.Entity = null;
                        previousValue.Product_Analysis1Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis1Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis1Id = value.Id;
                        value.Product_Analysis1Id.Add(this);
                    }
                    else
                    {
                        this._Analysis1Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis1Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis2Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_Product1", Storage="_StockAnalysisCode_Analysis2Id", ThisKey="Analysis2Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis2Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis2Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis2Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis2Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis2Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis2Id.Entity = null;
                        previousValue.Product_Analysis2Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis2Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis2Id = value.Id;
                        value.Product_Analysis2Id.Add(this);
                    }
                    else
                    {
                        this._Analysis2Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis2Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis3Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_Product2", Storage="_StockAnalysisCode_Analysis3Id", ThisKey="Analysis3Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis3Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis3Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis3Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis3Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis3Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis3Id.Entity = null;
                        previousValue.Product_Analysis3Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis3Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis3Id = value.Id;
                        value.Product_Analysis3Id.Add(this);
                    }
                    else
                    {
                        this._Analysis3Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis3Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis4Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_Product3", Storage="_StockAnalysisCode_Analysis4Id", ThisKey="Analysis4Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis4Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis4Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis4Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis4Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis4Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis4Id.Entity = null;
                        previousValue.Product_Analysis4Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis4Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis4Id = value.Id;
                        value.Product_Analysis4Id.Add(this);
                    }
                    else
                    {
                        this._Analysis4Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis4Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_AlternateProductId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product", Storage="_Product_AlternateProductId1", ThisKey="Id", OtherKey="AlternateProductId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product_AlternateProductId1
        {
            get
            {
                return this._Product_AlternateProductId1;
            }
            set
            {
                this._Product_AlternateProductId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product_AlternateProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product", Storage="_Product_AlternateProductId", ThisKey="AlternateProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_AlternateProductId
        {
            get
            {
                return this._Product_AlternateProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_AlternateProductId.Entity;
                if ((previousValue != value) || (this._Product_AlternateProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_AlternateProductId");
                    if (previousValue != null)
                    {
                        this._Product_AlternateProductId.Entity = null;
                        previousValue.Product_AlternateProductId1.Remove(this);
                    }
                    this._Product_AlternateProductId.Entity = value;
                    if (value != null)
                    {
                        this._AlternateProductId = value.Id;
                        value.Product_AlternateProductId1.Add(this);
                    }
                    else
                    {
                        this._AlternateProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_AlternateProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ScrapProductId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product1", Storage="_Product_ScrapProductId1", ThisKey="Id", OtherKey="ScrapProductId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product_ScrapProductId1
        {
            get
            {
                return this._Product_ScrapProductId1;
            }
            set
            {
                this._Product_ScrapProductId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ScrapProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product1", Storage="_Product_ScrapProductId", ThisKey="ScrapProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_ScrapProductId
        {
            get
            {
                return this._Product_ScrapProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_ScrapProductId.Entity;
                if ((previousValue != value) || (this._Product_ScrapProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_ScrapProductId");
                    if (previousValue != null)
                    {
                        this._Product_ScrapProductId.Entity = null;
                        previousValue.Product_ScrapProductId1.Remove(this);
                    }
                    this._Product_ScrapProductId.Entity = value;
                    if (value != null)
                    {
                        this._ScrapProductId = value.Id;
                        value.Product_ScrapProductId1.Add(this);
                    }
                    else
                    {
                        this._ScrapProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_ScrapProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_SourceProductId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product2", Storage="_Product_SourceProductId1", ThisKey="Id", OtherKey="SourceProductId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product_SourceProductId1
        {
            get
            {
                return this._Product_SourceProductId1;
            }
            set
            {
                this._Product_SourceProductId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product_SourceProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Product2", Storage="_Product_SourceProductId", ThisKey="SourceProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_SourceProductId
        {
            get
            {
                return this._Product_SourceProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_SourceProductId.Entity;
                if ((previousValue != value) || (this._Product_SourceProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_SourceProductId");
                    if (previousValue != null)
                    {
                        this._Product_SourceProductId.Entity = null;
                        previousValue.Product_SourceProductId1.Remove(this);
                    }
                    this._Product_SourceProductId.Entity = value;
                    if (value != null)
                    {
                        this._SourceProductId = value.Id;
                        value.Product_SourceProductId1.Add(this);
                    }
                    else
                    {
                        this._SourceProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_SourceProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductBalance in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_ProductBalance", Storage="_ProductBalance", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<ProductBalance> ProductBalance
        {
            get
            {
                return this._ProductBalance;
            }
            set
            {
                this._ProductBalance.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StockItem(StockItem entity)
        {
            this.SendPropertyChanging("StockItem");
            entity.Product = this;
        }
    
        private void detach_StockItem(StockItem entity)
        {
            this.SendPropertyChanging("StockItem");
            entity.Product = null;
        }

        private void attach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.Product = this;
        }
    
        private void detach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.Product = null;
        }

        private void attach_Product_AlternateProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_AlternateProductId1");
            entity.Product_AlternateProductId = this;
        }
    
        private void detach_Product_AlternateProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_AlternateProductId1");
            entity.Product_AlternateProductId = null;
        }

        private void attach_Product_ScrapProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_ScrapProductId1");
            entity.Product_ScrapProductId = this;
        }
    
        private void detach_Product_ScrapProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_ScrapProductId1");
            entity.Product_ScrapProductId = null;
        }

        private void attach_Product_SourceProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_SourceProductId1");
            entity.Product_SourceProductId = this;
        }
    
        private void detach_Product_SourceProductId1(Product entity)
        {
            this.SendPropertyChanging("Product_SourceProductId1");
            entity.Product_SourceProductId = null;
        }

        private void attach_ProductBalance(ProductBalance entity)
        {
            this.SendPropertyChanging("ProductBalance");
            entity.Product = this;
        }
    
        private void detach_ProductBalance(ProductBalance entity)
        {
            this.SendPropertyChanging("ProductBalance");
            entity.Product = null;
        }
    }

}
