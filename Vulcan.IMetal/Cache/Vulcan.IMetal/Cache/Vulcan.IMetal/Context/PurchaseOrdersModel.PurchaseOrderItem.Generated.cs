//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.PurchaseOrderItem in the schema.
    /// </summary>
    [Table(Name = @"public.purchase_order_items")]
    public partial class PurchaseOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _PurchaseHeaderId;

        private System.Nullable<int> _ItemNumber;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _DimensionsId;

        private string _ExternalDescription;

        private string _InternalDescription;

        private System.Nullable<int> _OrderedPiece;

        private System.Nullable<decimal> _OrderedQuantity;

        private System.Nullable<decimal> _OrderedWeight;

        private System.Nullable<int> _AllocatedPiece;

        private System.Nullable<decimal> _AllocatedQuantity;

        private System.Nullable<decimal> _AllocatedWeight;

        private System.Nullable<int> _DeliveredPiece;

        private System.Nullable<decimal> _DeliveredQuantity;

        private System.Nullable<decimal> _DeliveredWeight;

        private System.Nullable<int> _BalancePiece;

        private System.Nullable<decimal> _BalanceQuantity;

        private System.Nullable<decimal> _BalanceWeight;

        private System.Nullable<int> _WeightUnitsId;

        private System.Nullable<int> _BoughtForCustomerId;

        private System.Nullable<int> _PartSpecificationId;

        private System.Nullable<int> _StatusId;

        private System.Nullable<System.DateTime> _DueDate;

        private System.Nullable<System.DateTime> _OriginalDueDate;

        private string _ManualDate;

        private System.Nullable<int> _RollingWeek;

        private string _RollingReference;

        private System.Nullable<System.DateTime> _ReadyDate;

        private System.Nullable<System.DateTime> _DespatchDate;

        private System.Nullable<bool> _Visible;

        private System.Nullable<decimal> _VisibleCost;

        private System.Nullable<int> _VisibleUnitId;

        private System.Nullable<decimal> _TotalCost;

        private System.Nullable<decimal> _LocalCost;

        private System.Nullable<decimal> _OriginalQuantity;

        private System.Nullable<int> _OriginalQuantityUnitId;

        private System.Nullable<System.DateTime> _CompletedDate;

        private System.Nullable<int> _TransportPiece;

        private System.Nullable<decimal> _TransportQuantity;

        private System.Nullable<decimal> _TransportWeight;

        private string _SpecificationValue1;

        private string _SpecificationValue2;

        private string _SpecificationValue3;

        private string _SpecificationValue4;

        private string _SpecificationValue5;

        private System.Nullable<int> _PurchaseOrderTotalsId;

        private System.Nullable<bool> _ShowCost = true;

        private System.Nullable<int> _TransientPiece;

        private System.Nullable<decimal> _TransientQuantity;

        private System.Nullable<decimal> _TransientWeight;

        private string _SpecificationValue6;

        private string _SpecificationValue7;

        private string _SpecificationValue8;

        private string _SpecificationValue9;

        private string _SpecificationValue10;

        private System.Nullable<int> _PurchaseGroupId;

        private string _GoodsInwardsNote;

        private System.Nullable<int> _EntryPiece = 0;

        private System.Nullable<decimal> _EntryQuantity = 0m;

        private System.Nullable<decimal> _EntryWeight = 0m;

        private System.Nullable<int> _PartCompanyId;

        private string _PartNumber;

        private System.Nullable<int> _WorkingSpecificationId;

        private System.Nullable<System.DateTime> _LastReceiptDate;

        private string _EnquiryStatus;

        private System.Nullable<int> _BtbPurchaseHeaderId;

        private System.Nullable<int> _ProductLevelAllocationId;

        private System.Nullable<int> _TransferFromBranchId;

        private System.Nullable<int> _BtbSupplierId;

        private System.Nullable<int> _BtbBranchId;

        private string _RequestStatus;

        private string _RequestType;

        private string _QuoteReference;

        private System.Nullable<int> _ImportBatchNumber;

        private System.Nullable<int> _ImportNumber;

        private System.Nullable<int> _ImportItem;

        private System.Nullable<int> _ProductSubGroupId;

        private System.Nullable<int> _DeletionReasonId;

        private string _DeletionReasonDescription;
        #pragma warning restore 0649

        private EntitySet<InboundAllocation> _InboundAllocation;

        private EntityRef<Company> _Company_BoughtForCustomerId;

        private EntityRef<Company> _Company_BtbSupplierId;

        private EntityRef<PartNumberSpecification> _PartNumberSpecification;

        private EntitySet<PurchaseOrderHeader> _PurchaseOrderHeader_TransportPurchaseOrderItemId;

        private EntityRef<PurchaseOrderHeader> _PurchaseOrderHeader_BtbPurchaseHeaderId;

        private EntityRef<PurchaseOrderHeader> _PurchaseOrderHeader_PurchaseHeaderId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_OriginalQuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_VisibleUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_WeightUnitsId;

        private EntityRef<Product> _Product;

        private EntityRef<PurchaseStatusCode> _PurchaseStatusCode;

        private EntityRef<DimensionValue> _DimensionValue;

        private EntityRef<PurchaseOrderTotal> _PurchaseOrderTotal;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnPurchaseHeaderIdChanging(System.Nullable<int> value);
        partial void OnPurchaseHeaderIdChanged();
        partial void OnItemNumberChanging(System.Nullable<int> value);
        partial void OnItemNumberChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnDimensionsIdChanging(System.Nullable<int> value);
        partial void OnDimensionsIdChanged();
        partial void OnExternalDescriptionChanging(string value);
        partial void OnExternalDescriptionChanged();
        partial void OnInternalDescriptionChanging(string value);
        partial void OnInternalDescriptionChanged();
        partial void OnOrderedPieceChanging(System.Nullable<int> value);
        partial void OnOrderedPieceChanged();
        partial void OnOrderedQuantityChanging(System.Nullable<decimal> value);
        partial void OnOrderedQuantityChanged();
        partial void OnOrderedWeightChanging(System.Nullable<decimal> value);
        partial void OnOrderedWeightChanged();
        partial void OnAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnAllocatedPieceChanged();
        partial void OnAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnAllocatedQuantityChanged();
        partial void OnAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnAllocatedWeightChanged();
        partial void OnDeliveredPieceChanging(System.Nullable<int> value);
        partial void OnDeliveredPieceChanged();
        partial void OnDeliveredQuantityChanging(System.Nullable<decimal> value);
        partial void OnDeliveredQuantityChanged();
        partial void OnDeliveredWeightChanging(System.Nullable<decimal> value);
        partial void OnDeliveredWeightChanged();
        partial void OnBalancePieceChanging(System.Nullable<int> value);
        partial void OnBalancePieceChanged();
        partial void OnBalanceQuantityChanging(System.Nullable<decimal> value);
        partial void OnBalanceQuantityChanged();
        partial void OnBalanceWeightChanging(System.Nullable<decimal> value);
        partial void OnBalanceWeightChanged();
        partial void OnWeightUnitsIdChanging(System.Nullable<int> value);
        partial void OnWeightUnitsIdChanged();
        partial void OnBoughtForCustomerIdChanging(System.Nullable<int> value);
        partial void OnBoughtForCustomerIdChanged();
        partial void OnPartSpecificationIdChanging(System.Nullable<int> value);
        partial void OnPartSpecificationIdChanged();
        partial void OnStatusIdChanging(System.Nullable<int> value);
        partial void OnStatusIdChanged();
        partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDueDateChanged();
        partial void OnOriginalDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOriginalDueDateChanged();
        partial void OnManualDateChanging(string value);
        partial void OnManualDateChanged();
        partial void OnRollingWeekChanging(System.Nullable<int> value);
        partial void OnRollingWeekChanged();
        partial void OnRollingReferenceChanging(string value);
        partial void OnRollingReferenceChanged();
        partial void OnReadyDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReadyDateChanged();
        partial void OnDespatchDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDespatchDateChanged();
        partial void OnVisibleChanging(System.Nullable<bool> value);
        partial void OnVisibleChanged();
        partial void OnVisibleCostChanging(System.Nullable<decimal> value);
        partial void OnVisibleCostChanged();
        partial void OnVisibleUnitIdChanging(System.Nullable<int> value);
        partial void OnVisibleUnitIdChanged();
        partial void OnTotalCostChanging(System.Nullable<decimal> value);
        partial void OnTotalCostChanged();
        partial void OnLocalCostChanging(System.Nullable<decimal> value);
        partial void OnLocalCostChanged();
        partial void OnOriginalQuantityChanging(System.Nullable<decimal> value);
        partial void OnOriginalQuantityChanged();
        partial void OnOriginalQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnOriginalQuantityUnitIdChanged();
        partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCompletedDateChanged();
        partial void OnTransportPieceChanging(System.Nullable<int> value);
        partial void OnTransportPieceChanged();
        partial void OnTransportQuantityChanging(System.Nullable<decimal> value);
        partial void OnTransportQuantityChanged();
        partial void OnTransportWeightChanging(System.Nullable<decimal> value);
        partial void OnTransportWeightChanged();
        partial void OnSpecificationValue1Changing(string value);
        partial void OnSpecificationValue1Changed();
        partial void OnSpecificationValue2Changing(string value);
        partial void OnSpecificationValue2Changed();
        partial void OnSpecificationValue3Changing(string value);
        partial void OnSpecificationValue3Changed();
        partial void OnSpecificationValue4Changing(string value);
        partial void OnSpecificationValue4Changed();
        partial void OnSpecificationValue5Changing(string value);
        partial void OnSpecificationValue5Changed();
        partial void OnPurchaseOrderTotalsIdChanging(System.Nullable<int> value);
        partial void OnPurchaseOrderTotalsIdChanged();
        partial void OnShowCostChanging(System.Nullable<bool> value);
        partial void OnShowCostChanged();
        partial void OnTransientPieceChanging(System.Nullable<int> value);
        partial void OnTransientPieceChanged();
        partial void OnTransientQuantityChanging(System.Nullable<decimal> value);
        partial void OnTransientQuantityChanged();
        partial void OnTransientWeightChanging(System.Nullable<decimal> value);
        partial void OnTransientWeightChanged();
        partial void OnSpecificationValue6Changing(string value);
        partial void OnSpecificationValue6Changed();
        partial void OnSpecificationValue7Changing(string value);
        partial void OnSpecificationValue7Changed();
        partial void OnSpecificationValue8Changing(string value);
        partial void OnSpecificationValue8Changed();
        partial void OnSpecificationValue9Changing(string value);
        partial void OnSpecificationValue9Changed();
        partial void OnSpecificationValue10Changing(string value);
        partial void OnSpecificationValue10Changed();
        partial void OnPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnPurchaseGroupIdChanged();
        partial void OnGoodsInwardsNoteChanging(string value);
        partial void OnGoodsInwardsNoteChanged();
        partial void OnEntryPieceChanging(System.Nullable<int> value);
        partial void OnEntryPieceChanged();
        partial void OnEntryQuantityChanging(System.Nullable<decimal> value);
        partial void OnEntryQuantityChanged();
        partial void OnEntryWeightChanging(System.Nullable<decimal> value);
        partial void OnEntryWeightChanged();
        partial void OnPartCompanyIdChanging(System.Nullable<int> value);
        partial void OnPartCompanyIdChanged();
        partial void OnPartNumberChanging(string value);
        partial void OnPartNumberChanged();
        partial void OnWorkingSpecificationIdChanging(System.Nullable<int> value);
        partial void OnWorkingSpecificationIdChanged();
        partial void OnLastReceiptDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastReceiptDateChanged();
        partial void OnEnquiryStatusChanging(string value);
        partial void OnEnquiryStatusChanged();
        partial void OnBtbPurchaseHeaderIdChanging(System.Nullable<int> value);
        partial void OnBtbPurchaseHeaderIdChanged();
        partial void OnProductLevelAllocationIdChanging(System.Nullable<int> value);
        partial void OnProductLevelAllocationIdChanged();
        partial void OnTransferFromBranchIdChanging(System.Nullable<int> value);
        partial void OnTransferFromBranchIdChanged();
        partial void OnBtbSupplierIdChanging(System.Nullable<int> value);
        partial void OnBtbSupplierIdChanged();
        partial void OnBtbBranchIdChanging(System.Nullable<int> value);
        partial void OnBtbBranchIdChanged();
        partial void OnRequestStatusChanging(string value);
        partial void OnRequestStatusChanged();
        partial void OnRequestTypeChanging(string value);
        partial void OnRequestTypeChanged();
        partial void OnQuoteReferenceChanging(string value);
        partial void OnQuoteReferenceChanged();
        partial void OnImportBatchNumberChanging(System.Nullable<int> value);
        partial void OnImportBatchNumberChanged();
        partial void OnImportNumberChanging(System.Nullable<int> value);
        partial void OnImportNumberChanged();
        partial void OnImportItemChanging(System.Nullable<int> value);
        partial void OnImportItemChanged();
        partial void OnProductSubGroupIdChanging(System.Nullable<int> value);
        partial void OnProductSubGroupIdChanged();
        partial void OnDeletionReasonIdChanging(System.Nullable<int> value);
        partial void OnDeletionReasonIdChanged();
        partial void OnDeletionReasonDescriptionChanging(string value);
        partial void OnDeletionReasonDescriptionChanged();
        #endregion

        public PurchaseOrderItem()
        {
            this._InboundAllocation = new EntitySet<InboundAllocation>(new Action<InboundAllocation>(this.attach_InboundAllocation), new Action<InboundAllocation>(this.detach_InboundAllocation));
            this._Company_BoughtForCustomerId  = default(EntityRef<Company>);
            this._Company_BtbSupplierId  = default(EntityRef<Company>);
            this._PartNumberSpecification  = default(EntityRef<PartNumberSpecification>);
            this._PurchaseOrderHeader_TransportPurchaseOrderItemId = new EntitySet<PurchaseOrderHeader>(new Action<PurchaseOrderHeader>(this.attach_PurchaseOrderHeader_TransportPurchaseOrderItemId), new Action<PurchaseOrderHeader>(this.detach_PurchaseOrderHeader_TransportPurchaseOrderItemId));
            this._PurchaseOrderHeader_BtbPurchaseHeaderId  = default(EntityRef<PurchaseOrderHeader>);
            this._PurchaseOrderHeader_PurchaseHeaderId  = default(EntityRef<PurchaseOrderHeader>);
            this._UnitsOfMeasure_OriginalQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_VisibleUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_WeightUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._Product  = default(EntityRef<Product>);
            this._PurchaseStatusCode  = default(EntityRef<PurchaseStatusCode>);
            this._DimensionValue  = default(EntityRef<DimensionValue>);
            this._PurchaseOrderTotal  = default(EntityRef<PurchaseOrderTotal>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseHeaderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_header_id", Storage = "_PurchaseHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseHeaderId
        {
            get
            {
                return this._PurchaseHeaderId;
            }
            set
            {
                if (this._PurchaseHeaderId != value)
                {
                    if (this._PurchaseOrderHeader_PurchaseHeaderId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseHeaderIdChanging(value);
                    this.SendPropertyChanging("PurchaseHeaderId");
                    this._PurchaseHeaderId = value;
                    this.SendPropertyChanged("PurchaseHeaderId");
                    this.OnPurchaseHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemNumber in the schema.
        /// </summary>
        [Column(Name = @"item_number", Storage = "_ItemNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ItemNumber
        {
            get
            {
                return this._ItemNumber;
            }
            set
            {
                if (this._ItemNumber != value)
                {
                    this.OnItemNumberChanging(value);
                    this.SendPropertyChanging("ItemNumber");
                    this._ItemNumber = value;
                    this.SendPropertyChanged("ItemNumber");
                    this.OnItemNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionsId in the schema.
        /// </summary>
        [Column(Name = @"dimensions_id", Storage = "_DimensionsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DimensionsId
        {
            get
            {
                return this._DimensionsId;
            }
            set
            {
                if (this._DimensionsId != value)
                {
                    if (this._DimensionValue.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDimensionsIdChanging(value);
                    this.SendPropertyChanging("DimensionsId");
                    this._DimensionsId = value;
                    this.SendPropertyChanged("DimensionsId");
                    this.OnDimensionsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalDescription in the schema.
        /// </summary>
        [Column(Name = @"external_description", Storage = "_ExternalDescription", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ExternalDescription
        {
            get
            {
                return this._ExternalDescription;
            }
            set
            {
                if (this._ExternalDescription != value)
                {
                    this.OnExternalDescriptionChanging(value);
                    this.SendPropertyChanging("ExternalDescription");
                    this._ExternalDescription = value;
                    this.SendPropertyChanged("ExternalDescription");
                    this.OnExternalDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalDescription in the schema.
        /// </summary>
        [Column(Name = @"internal_description", Storage = "_InternalDescription", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InternalDescription
        {
            get
            {
                return this._InternalDescription;
            }
            set
            {
                if (this._InternalDescription != value)
                {
                    this.OnInternalDescriptionChanging(value);
                    this.SendPropertyChanging("InternalDescription");
                    this._InternalDescription = value;
                    this.SendPropertyChanged("InternalDescription");
                    this.OnInternalDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderedPiece in the schema.
        /// </summary>
        [Column(Name = @"ordered_pieces", Storage = "_OrderedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OrderedPiece
        {
            get
            {
                return this._OrderedPiece;
            }
            set
            {
                if (this._OrderedPiece != value)
                {
                    this.OnOrderedPieceChanging(value);
                    this.SendPropertyChanging("OrderedPiece");
                    this._OrderedPiece = value;
                    this.SendPropertyChanged("OrderedPiece");
                    this.OnOrderedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderedQuantity in the schema.
        /// </summary>
        [Column(Name = @"ordered_quantity", Storage = "_OrderedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OrderedQuantity
        {
            get
            {
                return this._OrderedQuantity;
            }
            set
            {
                if (this._OrderedQuantity != value)
                {
                    this.OnOrderedQuantityChanging(value);
                    this.SendPropertyChanging("OrderedQuantity");
                    this._OrderedQuantity = value;
                    this.SendPropertyChanged("OrderedQuantity");
                    this.OnOrderedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderedWeight in the schema.
        /// </summary>
        [Column(Name = @"ordered_weight", Storage = "_OrderedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OrderedWeight
        {
            get
            {
                return this._OrderedWeight;
            }
            set
            {
                if (this._OrderedWeight != value)
                {
                    this.OnOrderedWeightChanging(value);
                    this.SendPropertyChanging("OrderedWeight");
                    this._OrderedWeight = value;
                    this.SendPropertyChanged("OrderedWeight");
                    this.OnOrderedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"allocated_pieces", Storage = "_AllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AllocatedPiece
        {
            get
            {
                return this._AllocatedPiece;
            }
            set
            {
                if (this._AllocatedPiece != value)
                {
                    this.OnAllocatedPieceChanging(value);
                    this.SendPropertyChanging("AllocatedPiece");
                    this._AllocatedPiece = value;
                    this.SendPropertyChanged("AllocatedPiece");
                    this.OnAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"allocated_quantity", Storage = "_AllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedQuantity
        {
            get
            {
                return this._AllocatedQuantity;
            }
            set
            {
                if (this._AllocatedQuantity != value)
                {
                    this.OnAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("AllocatedQuantity");
                    this._AllocatedQuantity = value;
                    this.SendPropertyChanged("AllocatedQuantity");
                    this.OnAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"allocated_weight", Storage = "_AllocatedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedWeight
        {
            get
            {
                return this._AllocatedWeight;
            }
            set
            {
                if (this._AllocatedWeight != value)
                {
                    this.OnAllocatedWeightChanging(value);
                    this.SendPropertyChanging("AllocatedWeight");
                    this._AllocatedWeight = value;
                    this.SendPropertyChanged("AllocatedWeight");
                    this.OnAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredPiece in the schema.
        /// </summary>
        [Column(Name = @"delivered_pieces", Storage = "_DeliveredPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveredPiece
        {
            get
            {
                return this._DeliveredPiece;
            }
            set
            {
                if (this._DeliveredPiece != value)
                {
                    this.OnDeliveredPieceChanging(value);
                    this.SendPropertyChanging("DeliveredPiece");
                    this._DeliveredPiece = value;
                    this.SendPropertyChanged("DeliveredPiece");
                    this.OnDeliveredPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredQuantity in the schema.
        /// </summary>
        [Column(Name = @"delivered_quantity", Storage = "_DeliveredQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DeliveredQuantity
        {
            get
            {
                return this._DeliveredQuantity;
            }
            set
            {
                if (this._DeliveredQuantity != value)
                {
                    this.OnDeliveredQuantityChanging(value);
                    this.SendPropertyChanging("DeliveredQuantity");
                    this._DeliveredQuantity = value;
                    this.SendPropertyChanged("DeliveredQuantity");
                    this.OnDeliveredQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredWeight in the schema.
        /// </summary>
        [Column(Name = @"delivered_weight", Storage = "_DeliveredWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DeliveredWeight
        {
            get
            {
                return this._DeliveredWeight;
            }
            set
            {
                if (this._DeliveredWeight != value)
                {
                    this.OnDeliveredWeightChanging(value);
                    this.SendPropertyChanging("DeliveredWeight");
                    this._DeliveredWeight = value;
                    this.SendPropertyChanged("DeliveredWeight");
                    this.OnDeliveredWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalancePiece in the schema.
        /// </summary>
        [Column(Name = @"balance_pieces", Storage = "_BalancePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BalancePiece
        {
            get
            {
                return this._BalancePiece;
            }
            set
            {
                if (this._BalancePiece != value)
                {
                    this.OnBalancePieceChanging(value);
                    this.SendPropertyChanging("BalancePiece");
                    this._BalancePiece = value;
                    this.SendPropertyChanged("BalancePiece");
                    this.OnBalancePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceQuantity in the schema.
        /// </summary>
        [Column(Name = @"balance_quantity", Storage = "_BalanceQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BalanceQuantity
        {
            get
            {
                return this._BalanceQuantity;
            }
            set
            {
                if (this._BalanceQuantity != value)
                {
                    this.OnBalanceQuantityChanging(value);
                    this.SendPropertyChanging("BalanceQuantity");
                    this._BalanceQuantity = value;
                    this.SendPropertyChanged("BalanceQuantity");
                    this.OnBalanceQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceWeight in the schema.
        /// </summary>
        [Column(Name = @"balance_weight", Storage = "_BalanceWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BalanceWeight
        {
            get
            {
                return this._BalanceWeight;
            }
            set
            {
                if (this._BalanceWeight != value)
                {
                    this.OnBalanceWeightChanging(value);
                    this.SendPropertyChanging("BalanceWeight");
                    this._BalanceWeight = value;
                    this.SendPropertyChanged("BalanceWeight");
                    this.OnBalanceWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightUnitsId in the schema.
        /// </summary>
        [Column(Name = @"weight_units_id", Storage = "_WeightUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WeightUnitsId
        {
            get
            {
                return this._WeightUnitsId;
            }
            set
            {
                if (this._WeightUnitsId != value)
                {
                    if (this._UnitsOfMeasure_WeightUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWeightUnitsIdChanging(value);
                    this.SendPropertyChanging("WeightUnitsId");
                    this._WeightUnitsId = value;
                    this.SendPropertyChanged("WeightUnitsId");
                    this.OnWeightUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BoughtForCustomerId in the schema.
        /// </summary>
        [Column(Name = @"bought_for_customer_id", Storage = "_BoughtForCustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BoughtForCustomerId
        {
            get
            {
                return this._BoughtForCustomerId;
            }
            set
            {
                if (this._BoughtForCustomerId != value)
                {
                    if (this._Company_BoughtForCustomerId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBoughtForCustomerIdChanging(value);
                    this.SendPropertyChanging("BoughtForCustomerId");
                    this._BoughtForCustomerId = value;
                    this.SendPropertyChanged("BoughtForCustomerId");
                    this.OnBoughtForCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartSpecificationId in the schema.
        /// </summary>
        [Column(Name = @"part_specification_id", Storage = "_PartSpecificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartSpecificationId
        {
            get
            {
                return this._PartSpecificationId;
            }
            set
            {
                if (this._PartSpecificationId != value)
                {
                    if (this._PartNumberSpecification.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartSpecificationIdChanging(value);
                    this.SendPropertyChanging("PartSpecificationId");
                    this._PartSpecificationId = value;
                    this.SendPropertyChanged("PartSpecificationId");
                    this.OnPartSpecificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._PurchaseStatusCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DueDate in the schema.
        /// </summary>
        [Column(Name = @"due_date", Storage = "_DueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DueDate
        {
            get
            {
                return this._DueDate;
            }
            set
            {
                if (this._DueDate != value)
                {
                    this.OnDueDateChanging(value);
                    this.SendPropertyChanging("DueDate");
                    this._DueDate = value;
                    this.SendPropertyChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalDueDate in the schema.
        /// </summary>
        [Column(Name = @"original_due_date", Storage = "_OriginalDueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> OriginalDueDate
        {
            get
            {
                return this._OriginalDueDate;
            }
            set
            {
                if (this._OriginalDueDate != value)
                {
                    this.OnOriginalDueDateChanging(value);
                    this.SendPropertyChanging("OriginalDueDate");
                    this._OriginalDueDate = value;
                    this.SendPropertyChanged("OriginalDueDate");
                    this.OnOriginalDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManualDate in the schema.
        /// </summary>
        [Column(Name = @"manual_date", Storage = "_ManualDate", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string ManualDate
        {
            get
            {
                return this._ManualDate;
            }
            set
            {
                if (this._ManualDate != value)
                {
                    this.OnManualDateChanging(value);
                    this.SendPropertyChanging("ManualDate");
                    this._ManualDate = value;
                    this.SendPropertyChanged("ManualDate");
                    this.OnManualDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RollingWeek in the schema.
        /// </summary>
        [Column(Name = @"rolling_week", Storage = "_RollingWeek", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RollingWeek
        {
            get
            {
                return this._RollingWeek;
            }
            set
            {
                if (this._RollingWeek != value)
                {
                    this.OnRollingWeekChanging(value);
                    this.SendPropertyChanging("RollingWeek");
                    this._RollingWeek = value;
                    this.SendPropertyChanged("RollingWeek");
                    this.OnRollingWeekChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RollingReference in the schema.
        /// </summary>
        [Column(Name = @"rolling_reference", Storage = "_RollingReference", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string RollingReference
        {
            get
            {
                return this._RollingReference;
            }
            set
            {
                if (this._RollingReference != value)
                {
                    this.OnRollingReferenceChanging(value);
                    this.SendPropertyChanging("RollingReference");
                    this._RollingReference = value;
                    this.SendPropertyChanged("RollingReference");
                    this.OnRollingReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReadyDate in the schema.
        /// </summary>
        [Column(Name = @"ready_date", Storage = "_ReadyDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ReadyDate
        {
            get
            {
                return this._ReadyDate;
            }
            set
            {
                if (this._ReadyDate != value)
                {
                    this.OnReadyDateChanging(value);
                    this.SendPropertyChanging("ReadyDate");
                    this._ReadyDate = value;
                    this.SendPropertyChanged("ReadyDate");
                    this.OnReadyDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchDate in the schema.
        /// </summary>
        [Column(Name = @"despatch_date", Storage = "_DespatchDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DespatchDate
        {
            get
            {
                return this._DespatchDate;
            }
            set
            {
                if (this._DespatchDate != value)
                {
                    this.OnDespatchDateChanging(value);
                    this.SendPropertyChanging("DespatchDate");
                    this._DespatchDate = value;
                    this.SendPropertyChanged("DespatchDate");
                    this.OnDespatchDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Visible in the schema.
        /// </summary>
        [Column(Name = @"visible", Storage = "_Visible", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging("Visible");
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VisibleCost in the schema.
        /// </summary>
        [Column(Name = @"visible_cost", Storage = "_VisibleCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> VisibleCost
        {
            get
            {
                return this._VisibleCost;
            }
            set
            {
                if (this._VisibleCost != value)
                {
                    this.OnVisibleCostChanging(value);
                    this.SendPropertyChanging("VisibleCost");
                    this._VisibleCost = value;
                    this.SendPropertyChanged("VisibleCost");
                    this.OnVisibleCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VisibleUnitId in the schema.
        /// </summary>
        [Column(Name = @"visible_unit_id", Storage = "_VisibleUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VisibleUnitId
        {
            get
            {
                return this._VisibleUnitId;
            }
            set
            {
                if (this._VisibleUnitId != value)
                {
                    if (this._UnitsOfMeasure_VisibleUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnVisibleUnitIdChanging(value);
                    this.SendPropertyChanging("VisibleUnitId");
                    this._VisibleUnitId = value;
                    this.SendPropertyChanged("VisibleUnitId");
                    this.OnVisibleUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCost in the schema.
        /// </summary>
        [Column(Name = @"total_cost", Storage = "_TotalCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if (this._TotalCost != value)
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging("TotalCost");
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalCost in the schema.
        /// </summary>
        [Column(Name = @"local_cost", Storage = "_LocalCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> LocalCost
        {
            get
            {
                return this._LocalCost;
            }
            set
            {
                if (this._LocalCost != value)
                {
                    this.OnLocalCostChanging(value);
                    this.SendPropertyChanging("LocalCost");
                    this._LocalCost = value;
                    this.SendPropertyChanged("LocalCost");
                    this.OnLocalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalQuantity in the schema.
        /// </summary>
        [Column(Name = @"original_quantity", Storage = "_OriginalQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalQuantity
        {
            get
            {
                return this._OriginalQuantity;
            }
            set
            {
                if (this._OriginalQuantity != value)
                {
                    this.OnOriginalQuantityChanging(value);
                    this.SendPropertyChanging("OriginalQuantity");
                    this._OriginalQuantity = value;
                    this.SendPropertyChanged("OriginalQuantity");
                    this.OnOriginalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"original_quantity_unit_id", Storage = "_OriginalQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OriginalQuantityUnitId
        {
            get
            {
                return this._OriginalQuantityUnitId;
            }
            set
            {
                if (this._OriginalQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_OriginalQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOriginalQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("OriginalQuantityUnitId");
                    this._OriginalQuantityUnitId = value;
                    this.SendPropertyChanged("OriginalQuantityUnitId");
                    this.OnOriginalQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompletedDate in the schema.
        /// </summary>
        [Column(Name = @"completed_date", Storage = "_CompletedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CompletedDate
        {
            get
            {
                return this._CompletedDate;
            }
            set
            {
                if (this._CompletedDate != value)
                {
                    this.OnCompletedDateChanging(value);
                    this.SendPropertyChanging("CompletedDate");
                    this._CompletedDate = value;
                    this.SendPropertyChanged("CompletedDate");
                    this.OnCompletedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPiece in the schema.
        /// </summary>
        [Column(Name = @"transport_pieces", Storage = "_TransportPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPiece
        {
            get
            {
                return this._TransportPiece;
            }
            set
            {
                if (this._TransportPiece != value)
                {
                    this.OnTransportPieceChanging(value);
                    this.SendPropertyChanging("TransportPiece");
                    this._TransportPiece = value;
                    this.SendPropertyChanged("TransportPiece");
                    this.OnTransportPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportQuantity in the schema.
        /// </summary>
        [Column(Name = @"transport_quantity", Storage = "_TransportQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportQuantity
        {
            get
            {
                return this._TransportQuantity;
            }
            set
            {
                if (this._TransportQuantity != value)
                {
                    this.OnTransportQuantityChanging(value);
                    this.SendPropertyChanging("TransportQuantity");
                    this._TransportQuantity = value;
                    this.SendPropertyChanged("TransportQuantity");
                    this.OnTransportQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportWeight in the schema.
        /// </summary>
        [Column(Name = @"transport_weight", Storage = "_TransportWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportWeight
        {
            get
            {
                return this._TransportWeight;
            }
            set
            {
                if (this._TransportWeight != value)
                {
                    this.OnTransportWeightChanging(value);
                    this.SendPropertyChanging("TransportWeight");
                    this._TransportWeight = value;
                    this.SendPropertyChanged("TransportWeight");
                    this.OnTransportWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue1 in the schema.
        /// </summary>
        [Column(Name = @"specification_value1", Storage = "_SpecificationValue1", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue1
        {
            get
            {
                return this._SpecificationValue1;
            }
            set
            {
                if (this._SpecificationValue1 != value)
                {
                    this.OnSpecificationValue1Changing(value);
                    this.SendPropertyChanging("SpecificationValue1");
                    this._SpecificationValue1 = value;
                    this.SendPropertyChanged("SpecificationValue1");
                    this.OnSpecificationValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue2 in the schema.
        /// </summary>
        [Column(Name = @"specification_value2", Storage = "_SpecificationValue2", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue2
        {
            get
            {
                return this._SpecificationValue2;
            }
            set
            {
                if (this._SpecificationValue2 != value)
                {
                    this.OnSpecificationValue2Changing(value);
                    this.SendPropertyChanging("SpecificationValue2");
                    this._SpecificationValue2 = value;
                    this.SendPropertyChanged("SpecificationValue2");
                    this.OnSpecificationValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue3 in the schema.
        /// </summary>
        [Column(Name = @"specification_value3", Storage = "_SpecificationValue3", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue3
        {
            get
            {
                return this._SpecificationValue3;
            }
            set
            {
                if (this._SpecificationValue3 != value)
                {
                    this.OnSpecificationValue3Changing(value);
                    this.SendPropertyChanging("SpecificationValue3");
                    this._SpecificationValue3 = value;
                    this.SendPropertyChanged("SpecificationValue3");
                    this.OnSpecificationValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue4 in the schema.
        /// </summary>
        [Column(Name = @"specification_value4", Storage = "_SpecificationValue4", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue4
        {
            get
            {
                return this._SpecificationValue4;
            }
            set
            {
                if (this._SpecificationValue4 != value)
                {
                    this.OnSpecificationValue4Changing(value);
                    this.SendPropertyChanging("SpecificationValue4");
                    this._SpecificationValue4 = value;
                    this.SendPropertyChanged("SpecificationValue4");
                    this.OnSpecificationValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue5 in the schema.
        /// </summary>
        [Column(Name = @"specification_value5", Storage = "_SpecificationValue5", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue5
        {
            get
            {
                return this._SpecificationValue5;
            }
            set
            {
                if (this._SpecificationValue5 != value)
                {
                    this.OnSpecificationValue5Changing(value);
                    this.SendPropertyChanging("SpecificationValue5");
                    this._SpecificationValue5 = value;
                    this.SendPropertyChanged("SpecificationValue5");
                    this.OnSpecificationValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderTotalsId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_totals_id", Storage = "_PurchaseOrderTotalsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseOrderTotalsId
        {
            get
            {
                return this._PurchaseOrderTotalsId;
            }
            set
            {
                if (this._PurchaseOrderTotalsId != value)
                {
                    if (this._PurchaseOrderTotal.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderTotalsIdChanging(value);
                    this.SendPropertyChanging("PurchaseOrderTotalsId");
                    this._PurchaseOrderTotalsId = value;
                    this.SendPropertyChanged("PurchaseOrderTotalsId");
                    this.OnPurchaseOrderTotalsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCost in the schema.
        /// </summary>
        [Column(Name = @"show_costs", Storage = "_ShowCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCost
        {
            get
            {
                return this._ShowCost;
            }
            set
            {
                if (this._ShowCost != value)
                {
                    this.OnShowCostChanging(value);
                    this.SendPropertyChanging("ShowCost");
                    this._ShowCost = value;
                    this.SendPropertyChanged("ShowCost");
                    this.OnShowCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientPiece in the schema.
        /// </summary>
        [Column(Name = @"transient_pieces", Storage = "_TransientPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransientPiece
        {
            get
            {
                return this._TransientPiece;
            }
            set
            {
                if (this._TransientPiece != value)
                {
                    this.OnTransientPieceChanging(value);
                    this.SendPropertyChanging("TransientPiece");
                    this._TransientPiece = value;
                    this.SendPropertyChanged("TransientPiece");
                    this.OnTransientPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientQuantity in the schema.
        /// </summary>
        [Column(Name = @"transient_quantity", Storage = "_TransientQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientQuantity
        {
            get
            {
                return this._TransientQuantity;
            }
            set
            {
                if (this._TransientQuantity != value)
                {
                    this.OnTransientQuantityChanging(value);
                    this.SendPropertyChanging("TransientQuantity");
                    this._TransientQuantity = value;
                    this.SendPropertyChanged("TransientQuantity");
                    this.OnTransientQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientWeight in the schema.
        /// </summary>
        [Column(Name = @"transient_weight", Storage = "_TransientWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientWeight
        {
            get
            {
                return this._TransientWeight;
            }
            set
            {
                if (this._TransientWeight != value)
                {
                    this.OnTransientWeightChanging(value);
                    this.SendPropertyChanging("TransientWeight");
                    this._TransientWeight = value;
                    this.SendPropertyChanged("TransientWeight");
                    this.OnTransientWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue6 in the schema.
        /// </summary>
        [Column(Name = @"specification_value6", Storage = "_SpecificationValue6", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue6
        {
            get
            {
                return this._SpecificationValue6;
            }
            set
            {
                if (this._SpecificationValue6 != value)
                {
                    this.OnSpecificationValue6Changing(value);
                    this.SendPropertyChanging("SpecificationValue6");
                    this._SpecificationValue6 = value;
                    this.SendPropertyChanged("SpecificationValue6");
                    this.OnSpecificationValue6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue7 in the schema.
        /// </summary>
        [Column(Name = @"specification_value7", Storage = "_SpecificationValue7", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue7
        {
            get
            {
                return this._SpecificationValue7;
            }
            set
            {
                if (this._SpecificationValue7 != value)
                {
                    this.OnSpecificationValue7Changing(value);
                    this.SendPropertyChanging("SpecificationValue7");
                    this._SpecificationValue7 = value;
                    this.SendPropertyChanged("SpecificationValue7");
                    this.OnSpecificationValue7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue8 in the schema.
        /// </summary>
        [Column(Name = @"specification_value8", Storage = "_SpecificationValue8", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue8
        {
            get
            {
                return this._SpecificationValue8;
            }
            set
            {
                if (this._SpecificationValue8 != value)
                {
                    this.OnSpecificationValue8Changing(value);
                    this.SendPropertyChanging("SpecificationValue8");
                    this._SpecificationValue8 = value;
                    this.SendPropertyChanged("SpecificationValue8");
                    this.OnSpecificationValue8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue9 in the schema.
        /// </summary>
        [Column(Name = @"specification_value9", Storage = "_SpecificationValue9", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue9
        {
            get
            {
                return this._SpecificationValue9;
            }
            set
            {
                if (this._SpecificationValue9 != value)
                {
                    this.OnSpecificationValue9Changing(value);
                    this.SendPropertyChanging("SpecificationValue9");
                    this._SpecificationValue9 = value;
                    this.SendPropertyChanged("SpecificationValue9");
                    this.OnSpecificationValue9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue10 in the schema.
        /// </summary>
        [Column(Name = @"specification_value10", Storage = "_SpecificationValue10", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue10
        {
            get
            {
                return this._SpecificationValue10;
            }
            set
            {
                if (this._SpecificationValue10 != value)
                {
                    this.OnSpecificationValue10Changing(value);
                    this.SendPropertyChanging("SpecificationValue10");
                    this._SpecificationValue10 = value;
                    this.SendPropertyChanged("SpecificationValue10");
                    this.OnSpecificationValue10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"purchase_group_id", Storage = "_PurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseGroupId
        {
            get
            {
                return this._PurchaseGroupId;
            }
            set
            {
                if (this._PurchaseGroupId != value)
                {
                    this.OnPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("PurchaseGroupId");
                    this._PurchaseGroupId = value;
                    this.SendPropertyChanged("PurchaseGroupId");
                    this.OnPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsInwardsNote in the schema.
        /// </summary>
        [Column(Name = @"goods_inwards_notes", Storage = "_GoodsInwardsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GoodsInwardsNote
        {
            get
            {
                return this._GoodsInwardsNote;
            }
            set
            {
                if (this._GoodsInwardsNote != value)
                {
                    this.OnGoodsInwardsNoteChanging(value);
                    this.SendPropertyChanging("GoodsInwardsNote");
                    this._GoodsInwardsNote = value;
                    this.SendPropertyChanged("GoodsInwardsNote");
                    this.OnGoodsInwardsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EntryPiece in the schema.
        /// </summary>
        [Column(Name = @"entry_pieces", Storage = "_EntryPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EntryPiece
        {
            get
            {
                return this._EntryPiece;
            }
            set
            {
                if (this._EntryPiece != value)
                {
                    this.OnEntryPieceChanging(value);
                    this.SendPropertyChanging("EntryPiece");
                    this._EntryPiece = value;
                    this.SendPropertyChanged("EntryPiece");
                    this.OnEntryPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EntryQuantity in the schema.
        /// </summary>
        [Column(Name = @"entry_quantity", Storage = "_EntryQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> EntryQuantity
        {
            get
            {
                return this._EntryQuantity;
            }
            set
            {
                if (this._EntryQuantity != value)
                {
                    this.OnEntryQuantityChanging(value);
                    this.SendPropertyChanging("EntryQuantity");
                    this._EntryQuantity = value;
                    this.SendPropertyChanged("EntryQuantity");
                    this.OnEntryQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EntryWeight in the schema.
        /// </summary>
        [Column(Name = @"entry_weight", Storage = "_EntryWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> EntryWeight
        {
            get
            {
                return this._EntryWeight;
            }
            set
            {
                if (this._EntryWeight != value)
                {
                    this.OnEntryWeightChanging(value);
                    this.SendPropertyChanging("EntryWeight");
                    this._EntryWeight = value;
                    this.SendPropertyChanged("EntryWeight");
                    this.OnEntryWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartCompanyId in the schema.
        /// </summary>
        [Column(Name = @"part_company_id", Storage = "_PartCompanyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartCompanyId
        {
            get
            {
                return this._PartCompanyId;
            }
            set
            {
                if (this._PartCompanyId != value)
                {
                    this.OnPartCompanyIdChanging(value);
                    this.SendPropertyChanging("PartCompanyId");
                    this._PartCompanyId = value;
                    this.SendPropertyChanged("PartCompanyId");
                    this.OnPartCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartNumber in the schema.
        /// </summary>
        [Column(Name = @"part_number", Storage = "_PartNumber", DbType = "VARCHAR(35)", UpdateCheck = UpdateCheck.Never)]
        public string PartNumber
        {
            get
            {
                return this._PartNumber;
            }
            set
            {
                if (this._PartNumber != value)
                {
                    this.OnPartNumberChanging(value);
                    this.SendPropertyChanging("PartNumber");
                    this._PartNumber = value;
                    this.SendPropertyChanged("PartNumber");
                    this.OnPartNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingSpecificationId in the schema.
        /// </summary>
        [Column(Name = @"working_specification_id", Storage = "_WorkingSpecificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WorkingSpecificationId
        {
            get
            {
                return this._WorkingSpecificationId;
            }
            set
            {
                if (this._WorkingSpecificationId != value)
                {
                    this.OnWorkingSpecificationIdChanging(value);
                    this.SendPropertyChanging("WorkingSpecificationId");
                    this._WorkingSpecificationId = value;
                    this.SendPropertyChanged("WorkingSpecificationId");
                    this.OnWorkingSpecificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastReceiptDate in the schema.
        /// </summary>
        [Column(Name = @"last_receipt_date", Storage = "_LastReceiptDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastReceiptDate
        {
            get
            {
                return this._LastReceiptDate;
            }
            set
            {
                if (this._LastReceiptDate != value)
                {
                    this.OnLastReceiptDateChanging(value);
                    this.SendPropertyChanging("LastReceiptDate");
                    this._LastReceiptDate = value;
                    this.SendPropertyChanged("LastReceiptDate");
                    this.OnLastReceiptDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnquiryStatus in the schema.
        /// </summary>
        [Column(Name = @"enquiry_status", Storage = "_EnquiryStatus", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string EnquiryStatus
        {
            get
            {
                return this._EnquiryStatus;
            }
            set
            {
                if (this._EnquiryStatus != value)
                {
                    this.OnEnquiryStatusChanging(value);
                    this.SendPropertyChanging("EnquiryStatus");
                    this._EnquiryStatus = value;
                    this.SendPropertyChanged("EnquiryStatus");
                    this.OnEnquiryStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BtbPurchaseHeaderId in the schema.
        /// </summary>
        [Column(Name = @"btb_purchase_header_id", Storage = "_BtbPurchaseHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BtbPurchaseHeaderId
        {
            get
            {
                return this._BtbPurchaseHeaderId;
            }
            set
            {
                if (this._BtbPurchaseHeaderId != value)
                {
                    if (this._PurchaseOrderHeader_BtbPurchaseHeaderId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBtbPurchaseHeaderIdChanging(value);
                    this.SendPropertyChanging("BtbPurchaseHeaderId");
                    this._BtbPurchaseHeaderId = value;
                    this.SendPropertyChanged("BtbPurchaseHeaderId");
                    this.OnBtbPurchaseHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductLevelAllocationId in the schema.
        /// </summary>
        [Column(Name = @"product_level_allocation_id", Storage = "_ProductLevelAllocationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductLevelAllocationId
        {
            get
            {
                return this._ProductLevelAllocationId;
            }
            set
            {
                if (this._ProductLevelAllocationId != value)
                {
                    this.OnProductLevelAllocationIdChanging(value);
                    this.SendPropertyChanging("ProductLevelAllocationId");
                    this._ProductLevelAllocationId = value;
                    this.SendPropertyChanged("ProductLevelAllocationId");
                    this.OnProductLevelAllocationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferFromBranchId in the schema.
        /// </summary>
        [Column(Name = @"transfer_from_branch_id", Storage = "_TransferFromBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransferFromBranchId
        {
            get
            {
                return this._TransferFromBranchId;
            }
            set
            {
                if (this._TransferFromBranchId != value)
                {
                    this.OnTransferFromBranchIdChanging(value);
                    this.SendPropertyChanging("TransferFromBranchId");
                    this._TransferFromBranchId = value;
                    this.SendPropertyChanged("TransferFromBranchId");
                    this.OnTransferFromBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BtbSupplierId in the schema.
        /// </summary>
        [Column(Name = @"btb_supplier_id", Storage = "_BtbSupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BtbSupplierId
        {
            get
            {
                return this._BtbSupplierId;
            }
            set
            {
                if (this._BtbSupplierId != value)
                {
                    if (this._Company_BtbSupplierId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBtbSupplierIdChanging(value);
                    this.SendPropertyChanging("BtbSupplierId");
                    this._BtbSupplierId = value;
                    this.SendPropertyChanged("BtbSupplierId");
                    this.OnBtbSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BtbBranchId in the schema.
        /// </summary>
        [Column(Name = @"btb_branch_id", Storage = "_BtbBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BtbBranchId
        {
            get
            {
                return this._BtbBranchId;
            }
            set
            {
                if (this._BtbBranchId != value)
                {
                    this.OnBtbBranchIdChanging(value);
                    this.SendPropertyChanging("BtbBranchId");
                    this._BtbBranchId = value;
                    this.SendPropertyChanged("BtbBranchId");
                    this.OnBtbBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestStatus in the schema.
        /// </summary>
        [Column(Name = @"request_status", Storage = "_RequestStatus", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string RequestStatus
        {
            get
            {
                return this._RequestStatus;
            }
            set
            {
                if (this._RequestStatus != value)
                {
                    this.OnRequestStatusChanging(value);
                    this.SendPropertyChanging("RequestStatus");
                    this._RequestStatus = value;
                    this.SendPropertyChanged("RequestStatus");
                    this.OnRequestStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestType in the schema.
        /// </summary>
        [Column(Name = @"request_type", Storage = "_RequestType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string RequestType
        {
            get
            {
                return this._RequestType;
            }
            set
            {
                if (this._RequestType != value)
                {
                    this.OnRequestTypeChanging(value);
                    this.SendPropertyChanging("RequestType");
                    this._RequestType = value;
                    this.SendPropertyChanged("RequestType");
                    this.OnRequestTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuoteReference in the schema.
        /// </summary>
        [Column(Name = @"quote_reference", Storage = "_QuoteReference", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string QuoteReference
        {
            get
            {
                return this._QuoteReference;
            }
            set
            {
                if (this._QuoteReference != value)
                {
                    this.OnQuoteReferenceChanging(value);
                    this.SendPropertyChanging("QuoteReference");
                    this._QuoteReference = value;
                    this.SendPropertyChanged("QuoteReference");
                    this.OnQuoteReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportBatchNumber in the schema.
        /// </summary>
        [Column(Name = @"import_batch_number", Storage = "_ImportBatchNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportBatchNumber
        {
            get
            {
                return this._ImportBatchNumber;
            }
            set
            {
                if (this._ImportBatchNumber != value)
                {
                    this.OnImportBatchNumberChanging(value);
                    this.SendPropertyChanging("ImportBatchNumber");
                    this._ImportBatchNumber = value;
                    this.SendPropertyChanged("ImportBatchNumber");
                    this.OnImportBatchNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportNumber in the schema.
        /// </summary>
        [Column(Name = @"import_number", Storage = "_ImportNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportNumber
        {
            get
            {
                return this._ImportNumber;
            }
            set
            {
                if (this._ImportNumber != value)
                {
                    this.OnImportNumberChanging(value);
                    this.SendPropertyChanging("ImportNumber");
                    this._ImportNumber = value;
                    this.SendPropertyChanged("ImportNumber");
                    this.OnImportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportItem in the schema.
        /// </summary>
        [Column(Name = @"import_item", Storage = "_ImportItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportItem
        {
            get
            {
                return this._ImportItem;
            }
            set
            {
                if (this._ImportItem != value)
                {
                    this.OnImportItemChanging(value);
                    this.SendPropertyChanging("ImportItem");
                    this._ImportItem = value;
                    this.SendPropertyChanged("ImportItem");
                    this.OnImportItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroupId in the schema.
        /// </summary>
        [Column(Name = @"product_sub_group_id", Storage = "_ProductSubGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductSubGroupId
        {
            get
            {
                return this._ProductSubGroupId;
            }
            set
            {
                if (this._ProductSubGroupId != value)
                {
                    this.OnProductSubGroupIdChanging(value);
                    this.SendPropertyChanging("ProductSubGroupId");
                    this._ProductSubGroupId = value;
                    this.SendPropertyChanged("ProductSubGroupId");
                    this.OnProductSubGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeletionReasonId in the schema.
        /// </summary>
        [Column(Name = @"deletion_reason_id", Storage = "_DeletionReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeletionReasonId
        {
            get
            {
                return this._DeletionReasonId;
            }
            set
            {
                if (this._DeletionReasonId != value)
                {
                    this.OnDeletionReasonIdChanging(value);
                    this.SendPropertyChanging("DeletionReasonId");
                    this._DeletionReasonId = value;
                    this.SendPropertyChanged("DeletionReasonId");
                    this.OnDeletionReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeletionReasonDescription in the schema.
        /// </summary>
        [Column(Name = @"deletion_reason_description", Storage = "_DeletionReasonDescription", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string DeletionReasonDescription
        {
            get
            {
                return this._DeletionReasonDescription;
            }
            set
            {
                if (this._DeletionReasonDescription != value)
                {
                    this.OnDeletionReasonDescriptionChanging(value);
                    this.SendPropertyChanging("DeletionReasonDescription");
                    this._DeletionReasonDescription = value;
                    this.SendPropertyChanged("DeletionReasonDescription");
                    this.OnDeletionReasonDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InboundAllocation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderItem_InboundAllocation", Storage="_InboundAllocation", ThisKey="Id", OtherKey="PurchaseItemId", DeleteRule="NO ACTION")]
        public EntitySet<InboundAllocation> InboundAllocation
        {
            get
            {
                return this._InboundAllocation;
            }
            set
            {
                this._InboundAllocation.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_BoughtForCustomerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_PurchaseOrderItem", Storage="_Company_BoughtForCustomerId", ThisKey="BoughtForCustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_BoughtForCustomerId
        {
            get
            {
                return this._Company_BoughtForCustomerId.Entity;
            }
            set
            {
                Company previousValue = this._Company_BoughtForCustomerId.Entity;
                if ((previousValue != value) || (this._Company_BoughtForCustomerId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_BoughtForCustomerId");
                    if (previousValue != null)
                    {
                        this._Company_BoughtForCustomerId.Entity = null;
                        previousValue.PurchaseOrderItem_BoughtForCustomerId.Remove(this);
                    }
                    this._Company_BoughtForCustomerId.Entity = value;
                    if (value != null)
                    {
                        this._BoughtForCustomerId = value.Id;
                        value.PurchaseOrderItem_BoughtForCustomerId.Add(this);
                    }
                    else
                    {
                        this._BoughtForCustomerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_BoughtForCustomerId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_BtbSupplierId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_PurchaseOrderItem1", Storage="_Company_BtbSupplierId", ThisKey="BtbSupplierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_BtbSupplierId
        {
            get
            {
                return this._Company_BtbSupplierId.Entity;
            }
            set
            {
                Company previousValue = this._Company_BtbSupplierId.Entity;
                if ((previousValue != value) || (this._Company_BtbSupplierId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_BtbSupplierId");
                    if (previousValue != null)
                    {
                        this._Company_BtbSupplierId.Entity = null;
                        previousValue.PurchaseOrderItem_BtbSupplierId.Remove(this);
                    }
                    this._Company_BtbSupplierId.Entity = value;
                    if (value != null)
                    {
                        this._BtbSupplierId = value.Id;
                        value.PurchaseOrderItem_BtbSupplierId.Add(this);
                    }
                    else
                    {
                        this._BtbSupplierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_BtbSupplierId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartNumberSpecification in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PartNumberSpecification_PurchaseOrderItem", Storage="_PartNumberSpecification", ThisKey="PartSpecificationId", OtherKey="Id", IsForeignKey=true)]
        public PartNumberSpecification PartNumberSpecification
        {
            get
            {
                return this._PartNumberSpecification.Entity;
            }
            set
            {
                PartNumberSpecification previousValue = this._PartNumberSpecification.Entity;
                if ((previousValue != value) || (this._PartNumberSpecification.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PartNumberSpecification");
                    if (previousValue != null)
                    {
                        this._PartNumberSpecification.Entity = null;
                        previousValue.PurchaseOrderItem.Remove(this);
                    }
                    this._PartNumberSpecification.Entity = value;
                    if (value != null)
                    {
                        this._PartSpecificationId = value.Id;
                        value.PurchaseOrderItem.Add(this);
                    }
                    else
                    {
                        this._PartSpecificationId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PartNumberSpecification");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderHeader_TransportPurchaseOrderItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderItem_PurchaseOrderHeader", Storage="_PurchaseOrderHeader_TransportPurchaseOrderItemId", ThisKey="Id", OtherKey="TransportPurchaseOrderItemId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseOrderHeader> PurchaseOrderHeader_TransportPurchaseOrderItemId
        {
            get
            {
                return this._PurchaseOrderHeader_TransportPurchaseOrderItemId;
            }
            set
            {
                this._PurchaseOrderHeader_TransportPurchaseOrderItemId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderHeader_BtbPurchaseHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderItem", Storage="_PurchaseOrderHeader_BtbPurchaseHeaderId", ThisKey="BtbPurchaseHeaderId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderHeader PurchaseOrderHeader_BtbPurchaseHeaderId
        {
            get
            {
                return this._PurchaseOrderHeader_BtbPurchaseHeaderId.Entity;
            }
            set
            {
                PurchaseOrderHeader previousValue = this._PurchaseOrderHeader_BtbPurchaseHeaderId.Entity;
                if ((previousValue != value) || (this._PurchaseOrderHeader_BtbPurchaseHeaderId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderHeader_BtbPurchaseHeaderId");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderHeader_BtbPurchaseHeaderId.Entity = null;
                        previousValue.PurchaseOrderItem_BtbPurchaseHeaderId.Remove(this);
                    }
                    this._PurchaseOrderHeader_BtbPurchaseHeaderId.Entity = value;
                    if (value != null)
                    {
                        this._BtbPurchaseHeaderId = value.Id;
                        value.PurchaseOrderItem_BtbPurchaseHeaderId.Add(this);
                    }
                    else
                    {
                        this._BtbPurchaseHeaderId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderHeader_BtbPurchaseHeaderId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderHeader_PurchaseHeaderId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderHeader_PurchaseOrderItem1", Storage="_PurchaseOrderHeader_PurchaseHeaderId", ThisKey="PurchaseHeaderId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderHeader PurchaseOrderHeader_PurchaseHeaderId
        {
            get
            {
                return this._PurchaseOrderHeader_PurchaseHeaderId.Entity;
            }
            set
            {
                PurchaseOrderHeader previousValue = this._PurchaseOrderHeader_PurchaseHeaderId.Entity;
                if ((previousValue != value) || (this._PurchaseOrderHeader_PurchaseHeaderId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderHeader_PurchaseHeaderId");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderHeader_PurchaseHeaderId.Entity = null;
                        previousValue.PurchaseOrderItem_PurchaseHeaderId.Remove(this);
                    }
                    this._PurchaseOrderHeader_PurchaseHeaderId.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseHeaderId = value.Id;
                        value.PurchaseOrderItem_PurchaseHeaderId.Add(this);
                    }
                    else
                    {
                        this._PurchaseHeaderId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderHeader_PurchaseHeaderId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_OriginalQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_PurchaseOrderItem", Storage="_UnitsOfMeasure_OriginalQuantityUnitId", ThisKey="OriginalQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_OriginalQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_OriginalQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_OriginalQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_OriginalQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_OriginalQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_OriginalQuantityUnitId.Entity = null;
                        previousValue.PurchaseOrderItem_OriginalQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_OriginalQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._OriginalQuantityUnitId = value.Id;
                        value.PurchaseOrderItem_OriginalQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._OriginalQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_OriginalQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_VisibleUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_PurchaseOrderItem1", Storage="_UnitsOfMeasure_VisibleUnitId", ThisKey="VisibleUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_VisibleUnitId
        {
            get
            {
                return this._UnitsOfMeasure_VisibleUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_VisibleUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_VisibleUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_VisibleUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_VisibleUnitId.Entity = null;
                        previousValue.PurchaseOrderItem_VisibleUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_VisibleUnitId.Entity = value;
                    if (value != null)
                    {
                        this._VisibleUnitId = value.Id;
                        value.PurchaseOrderItem_VisibleUnitId.Add(this);
                    }
                    else
                    {
                        this._VisibleUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_VisibleUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_WeightUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_PurchaseOrderItem2", Storage="_UnitsOfMeasure_WeightUnitsId", ThisKey="WeightUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_WeightUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_WeightUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_WeightUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_WeightUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_WeightUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_WeightUnitsId.Entity = null;
                        previousValue.PurchaseOrderItem_WeightUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_WeightUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._WeightUnitsId = value.Id;
                        value.PurchaseOrderItem_WeightUnitsId.Add(this);
                    }
                    else
                    {
                        this._WeightUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_WeightUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PurchaseOrderItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.PurchaseOrderItem.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.PurchaseOrderItem.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseStatusCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseStatusCode_PurchaseOrderItem", Storage="_PurchaseStatusCode", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseStatusCode PurchaseStatusCode
        {
            get
            {
                return this._PurchaseStatusCode.Entity;
            }
            set
            {
                PurchaseStatusCode previousValue = this._PurchaseStatusCode.Entity;
                if ((previousValue != value) || (this._PurchaseStatusCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseStatusCode");
                    if (previousValue != null)
                    {
                        this._PurchaseStatusCode.Entity = null;
                        previousValue.PurchaseOrderItem.Remove(this);
                    }
                    this._PurchaseStatusCode.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.Id;
                        value.PurchaseOrderItem.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseStatusCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionValue in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DimensionValue_PurchaseOrderItem", Storage="_DimensionValue", ThisKey="DimensionsId", OtherKey="Id", IsForeignKey=true)]
        public DimensionValue DimensionValue
        {
            get
            {
                return this._DimensionValue.Entity;
            }
            set
            {
                DimensionValue previousValue = this._DimensionValue.Entity;
                if ((previousValue != value) || (this._DimensionValue.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DimensionValue");
                    if (previousValue != null)
                    {
                        this._DimensionValue.Entity = null;
                        previousValue.PurchaseOrderItem.Remove(this);
                    }
                    this._DimensionValue.Entity = value;
                    if (value != null)
                    {
                        this._DimensionsId = value.Id;
                        value.PurchaseOrderItem.Add(this);
                    }
                    else
                    {
                        this._DimensionsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("DimensionValue");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderTotal in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderTotal_PurchaseOrderItem", Storage="_PurchaseOrderTotal", ThisKey="PurchaseOrderTotalsId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderTotal PurchaseOrderTotal
        {
            get
            {
                return this._PurchaseOrderTotal.Entity;
            }
            set
            {
                PurchaseOrderTotal previousValue = this._PurchaseOrderTotal.Entity;
                if ((previousValue != value) || (this._PurchaseOrderTotal.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderTotal");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderTotal.Entity = null;
                        previousValue.PurchaseOrderItem.Remove(this);
                    }
                    this._PurchaseOrderTotal.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseOrderTotalsId = value.Id;
                        value.PurchaseOrderItem.Add(this);
                    }
                    else
                    {
                        this._PurchaseOrderTotalsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderTotal");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_InboundAllocation(InboundAllocation entity)
        {
            this.SendPropertyChanging("InboundAllocation");
            entity.PurchaseOrderItem = this;
        }
    
        private void detach_InboundAllocation(InboundAllocation entity)
        {
            this.SendPropertyChanging("InboundAllocation");
            entity.PurchaseOrderItem = null;
        }

        private void attach_PurchaseOrderHeader_TransportPurchaseOrderItemId(PurchaseOrderHeader entity)
        {
            this.SendPropertyChanging("PurchaseOrderHeader_TransportPurchaseOrderItemId");
            entity.PurchaseOrderItem_TransportPurchaseOrderItemId = this;
        }
    
        private void detach_PurchaseOrderHeader_TransportPurchaseOrderItemId(PurchaseOrderHeader entity)
        {
            this.SendPropertyChanging("PurchaseOrderHeader_TransportPurchaseOrderItemId");
            entity.PurchaseOrderItem_TransportPurchaseOrderItemId = null;
        }
    }

}
