//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    [DatabaseAttribute(Name = "live_emetal")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class PurchaseOrdersContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(PurchaseOrdersContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertInboundAllocation(InboundAllocation instance);
        partial void UpdateInboundAllocation(InboundAllocation instance);
        partial void DeleteInboundAllocation(InboundAllocation instance);
        partial void InsertStockGrade(StockGrade instance);
        partial void UpdateStockGrade(StockGrade instance);
        partial void DeleteStockGrade(StockGrade instance);
        partial void InsertCompany(Company instance);
        partial void UpdateCompany(Company instance);
        partial void DeleteCompany(Company instance);
        partial void InsertProductControl(ProductControl instance);
        partial void UpdateProductControl(ProductControl instance);
        partial void DeleteProductControl(ProductControl instance);
        partial void InsertPartNumberSpecification(PartNumberSpecification instance);
        partial void UpdatePartNumberSpecification(PartNumberSpecification instance);
        partial void DeletePartNumberSpecification(PartNumberSpecification instance);
        partial void InsertPurchaseOrderHeader(PurchaseOrderHeader instance);
        partial void UpdatePurchaseOrderHeader(PurchaseOrderHeader instance);
        partial void DeletePurchaseOrderHeader(PurchaseOrderHeader instance);
        partial void InsertProductCategory(ProductCategory instance);
        partial void UpdateProductCategory(ProductCategory instance);
        partial void DeleteProductCategory(ProductCategory instance);
        partial void InsertStockDimensionType(StockDimensionType instance);
        partial void UpdateStockDimensionType(StockDimensionType instance);
        partial void DeleteStockDimensionType(StockDimensionType instance);
        partial void InsertUnitsOfMeasure(UnitsOfMeasure instance);
        partial void UpdateUnitsOfMeasure(UnitsOfMeasure instance);
        partial void DeleteUnitsOfMeasure(UnitsOfMeasure instance);
        partial void InsertStockCast(StockCast instance);
        partial void UpdateStockCast(StockCast instance);
        partial void DeleteStockCast(StockCast instance);
        partial void InsertWarehouse(Warehouse instance);
        partial void UpdateWarehouse(Warehouse instance);
        partial void DeleteWarehouse(Warehouse instance);
        partial void InsertPurchaseOrderItem(PurchaseOrderItem instance);
        partial void UpdatePurchaseOrderItem(PurchaseOrderItem instance);
        partial void DeletePurchaseOrderItem(PurchaseOrderItem instance);
        partial void InsertStockAnalysisCode(StockAnalysisCode instance);
        partial void UpdateStockAnalysisCode(StockAnalysisCode instance);
        partial void DeleteStockAnalysisCode(StockAnalysisCode instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertMill(Mill instance);
        partial void UpdateMill(Mill instance);
        partial void DeleteMill(Mill instance);
        partial void InsertPurchaseStatusCode(PurchaseStatusCode instance);
        partial void UpdatePurchaseStatusCode(PurchaseStatusCode instance);
        partial void DeletePurchaseStatusCode(PurchaseStatusCode instance);
        partial void InsertPurchaseCategoryCode(PurchaseCategoryCode instance);
        partial void UpdatePurchaseCategoryCode(PurchaseCategoryCode instance);
        partial void DeletePurchaseCategoryCode(PurchaseCategoryCode instance);
        partial void InsertDimensionValue(DimensionValue instance);
        partial void UpdateDimensionValue(DimensionValue instance);
        partial void DeleteDimensionValue(DimensionValue instance);
        partial void InsertPurchaseOrderTotal(PurchaseOrderTotal instance);
        partial void UpdatePurchaseOrderTotal(PurchaseOrderTotal instance);
        partial void DeletePurchaseOrderTotal(PurchaseOrderTotal instance);
        partial void InsertAddress(Address instance);
        partial void UpdateAddress(Address instance);
        partial void DeleteAddress(Address instance);
        partial void InsertCompanySubAddress(CompanySubAddress instance);
        partial void UpdateCompanySubAddress(CompanySubAddress instance);
        partial void DeleteCompanySubAddress(CompanySubAddress instance);
        partial void InsertCountryCode(CountryCode instance);
        partial void UpdateCountryCode(CountryCode instance);
        partial void DeleteCountryCode(CountryCode instance);
        partial void InsertBuyer(Buyer instance);
        partial void UpdateBuyer(Buyer instance);
        partial void DeleteBuyer(Buyer instance);

        #endregion

        public PurchaseOrdersContext() :
        base(GetConnectionString("LiveEmetalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public PurchaseOrdersContext(MappingSource mappingSource) :
        base(GetConnectionString("LiveEmetalDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public PurchaseOrdersContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PurchaseOrdersContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PurchaseOrdersContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PurchaseOrdersContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<InboundAllocation> InboundAllocation
        {
            get
            {
                return this.GetTable<InboundAllocation>();
            }
        }

        public Devart.Data.Linq.Table<StockGrade> StockGrade
        {
            get
            {
                return this.GetTable<StockGrade>();
            }
        }

        public Devart.Data.Linq.Table<Company> Company
        {
            get
            {
                return this.GetTable<Company>();
            }
        }

        public Devart.Data.Linq.Table<ProductControl> ProductControl
        {
            get
            {
                return this.GetTable<ProductControl>();
            }
        }

        public Devart.Data.Linq.Table<PartNumberSpecification> PartNumberSpecification
        {
            get
            {
                return this.GetTable<PartNumberSpecification>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderHeader> PurchaseOrderHeader
        {
            get
            {
                return this.GetTable<PurchaseOrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<ProductCategory> ProductCategory
        {
            get
            {
                return this.GetTable<ProductCategory>();
            }
        }

        public Devart.Data.Linq.Table<StockDimensionType> StockDimensionType
        {
            get
            {
                return this.GetTable<StockDimensionType>();
            }
        }

        public Devart.Data.Linq.Table<UnitsOfMeasure> UnitsOfMeasure
        {
            get
            {
                return this.GetTable<UnitsOfMeasure>();
            }
        }

        public Devart.Data.Linq.Table<StockCast> StockCast
        {
            get
            {
                return this.GetTable<StockCast>();
            }
        }

        public Devart.Data.Linq.Table<Warehouse> Warehouse
        {
            get
            {
                return this.GetTable<Warehouse>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderItem> PurchaseOrderItem
        {
            get
            {
                return this.GetTable<PurchaseOrderItem>();
            }
        }

        public Devart.Data.Linq.Table<StockAnalysisCode> StockAnalysisCode
        {
            get
            {
                return this.GetTable<StockAnalysisCode>();
            }
        }

        public Devart.Data.Linq.Table<Product> Product
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<Mill> Mill
        {
            get
            {
                return this.GetTable<Mill>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseStatusCode> PurchaseStatusCode
        {
            get
            {
                return this.GetTable<PurchaseStatusCode>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseCategoryCode> PurchaseCategoryCode
        {
            get
            {
                return this.GetTable<PurchaseCategoryCode>();
            }
        }

        public Devart.Data.Linq.Table<DimensionValue> DimensionValue
        {
            get
            {
                return this.GetTable<DimensionValue>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderTotal> PurchaseOrderTotal
        {
            get
            {
                return this.GetTable<PurchaseOrderTotal>();
            }
        }

        public Devart.Data.Linq.Table<Address> Address
        {
            get
            {
                return this.GetTable<Address>();
            }
        }

        public Devart.Data.Linq.Table<CompanySubAddress> CompanySubAddress
        {
            get
            {
                return this.GetTable<CompanySubAddress>();
            }
        }

        public Devart.Data.Linq.Table<CountryCode> CountryCode
        {
            get
            {
                return this.GetTable<CountryCode>();
            }
        }

        public Devart.Data.Linq.Table<Buyer> Buyer
        {
            get
            {
                return this.GetTable<Buyer>();
            }
        }
    }
}
