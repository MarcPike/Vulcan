//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.SalesCharge in the schema.
    /// </summary>
    [Table(Name = @"public.sales_charges")]
    public partial class SalesCharge : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _SalesChargeTypeId;

        private System.Nullable<int> _ItemId;

        private System.Nullable<int> _SalesGroupChargeId;

        private string _Description;

        private System.Nullable<decimal> _Charge;

        private System.Nullable<int> _ChargeUnitId;

        private System.Nullable<decimal> _ChargeQuantity;

        private System.Nullable<int> _ChargeQuantityUnitId;

        private System.Nullable<decimal> _Value;

        private System.Nullable<decimal> _ExchangeRate;

        private System.Nullable<bool> _ShowCustomer;

        private System.Nullable<bool> _SystemCharge;

        private string _CostGroupCode;

        private System.Nullable<decimal> _BaseCharge;

        private System.Nullable<decimal> _BaseValue;

        private string _ChargeFixStatus = @"V";

        private string _ChargeVisibility = @"S";

        private System.Nullable<int> _ChargeItem;

        private int _DiscountItem = 0;

        private bool _ConfirmAtInvoicing = false;

        private System.Nullable<bool> _CreatedFromPart = false;
        #pragma warning restore 0649

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_ChargeQuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_ChargeUnitId;

        private EntityRef<SalesChargeType> _SalesChargeType;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnSalesChargeTypeIdChanging(System.Nullable<int> value);
        partial void OnSalesChargeTypeIdChanged();
        partial void OnItemIdChanging(System.Nullable<int> value);
        partial void OnItemIdChanged();
        partial void OnSalesGroupChargeIdChanging(System.Nullable<int> value);
        partial void OnSalesGroupChargeIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnChargeChanging(System.Nullable<decimal> value);
        partial void OnChargeChanged();
        partial void OnChargeUnitIdChanging(System.Nullable<int> value);
        partial void OnChargeUnitIdChanged();
        partial void OnChargeQuantityChanging(System.Nullable<decimal> value);
        partial void OnChargeQuantityChanged();
        partial void OnChargeQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnChargeQuantityUnitIdChanged();
        partial void OnValueChanging(System.Nullable<decimal> value);
        partial void OnValueChanged();
        partial void OnExchangeRateChanging(System.Nullable<decimal> value);
        partial void OnExchangeRateChanged();
        partial void OnShowCustomerChanging(System.Nullable<bool> value);
        partial void OnShowCustomerChanged();
        partial void OnSystemChargeChanging(System.Nullable<bool> value);
        partial void OnSystemChargeChanged();
        partial void OnCostGroupCodeChanging(string value);
        partial void OnCostGroupCodeChanged();
        partial void OnBaseChargeChanging(System.Nullable<decimal> value);
        partial void OnBaseChargeChanged();
        partial void OnBaseValueChanging(System.Nullable<decimal> value);
        partial void OnBaseValueChanged();
        partial void OnChargeFixStatusChanging(string value);
        partial void OnChargeFixStatusChanged();
        partial void OnChargeVisibilityChanging(string value);
        partial void OnChargeVisibilityChanged();
        partial void OnChargeItemChanging(System.Nullable<int> value);
        partial void OnChargeItemChanged();
        partial void OnDiscountItemChanging(int value);
        partial void OnDiscountItemChanged();
        partial void OnConfirmAtInvoicingChanging(bool value);
        partial void OnConfirmAtInvoicingChanged();
        partial void OnCreatedFromPartChanging(System.Nullable<bool> value);
        partial void OnCreatedFromPartChanged();
        #endregion

        public SalesCharge()
        {
            this._UnitsOfMeasure_ChargeQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_ChargeUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._SalesChargeType  = default(EntityRef<SalesChargeType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesChargeTypeId in the schema.
        /// </summary>
        [Column(Name = @"sales_charge_type_id", Storage = "_SalesChargeTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesChargeTypeId
        {
            get
            {
                return this._SalesChargeTypeId;
            }
            set
            {
                if (this._SalesChargeTypeId != value)
                {
                    if (this._SalesChargeType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesChargeTypeIdChanging(value);
                    this.SendPropertyChanging("SalesChargeTypeId");
                    this._SalesChargeTypeId = value;
                    this.SendPropertyChanged("SalesChargeTypeId");
                    this.OnSalesChargeTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemId in the schema.
        /// </summary>
        [Column(Name = @"item_id", Storage = "_ItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if (this._ItemId != value)
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging("ItemId");
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupChargeId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_charge_id", Storage = "_SalesGroupChargeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesGroupChargeId
        {
            get
            {
                return this._SalesGroupChargeId;
            }
            set
            {
                if (this._SalesGroupChargeId != value)
                {
                    this.OnSalesGroupChargeIdChanging(value);
                    this.SendPropertyChanging("SalesGroupChargeId");
                    this._SalesGroupChargeId = value;
                    this.SendPropertyChanged("SalesGroupChargeId");
                    this.OnSalesGroupChargeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Charge in the schema.
        /// </summary>
        [Column(Name = @"charge", Storage = "_Charge", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Charge
        {
            get
            {
                return this._Charge;
            }
            set
            {
                if (this._Charge != value)
                {
                    this.OnChargeChanging(value);
                    this.SendPropertyChanging("Charge");
                    this._Charge = value;
                    this.SendPropertyChanged("Charge");
                    this.OnChargeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeUnitId in the schema.
        /// </summary>
        [Column(Name = @"charge_unit_id", Storage = "_ChargeUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ChargeUnitId
        {
            get
            {
                return this._ChargeUnitId;
            }
            set
            {
                if (this._ChargeUnitId != value)
                {
                    if (this._UnitsOfMeasure_ChargeUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnChargeUnitIdChanging(value);
                    this.SendPropertyChanging("ChargeUnitId");
                    this._ChargeUnitId = value;
                    this.SendPropertyChanged("ChargeUnitId");
                    this.OnChargeUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeQuantity in the schema.
        /// </summary>
        [Column(Name = @"charge_quantity", Storage = "_ChargeQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ChargeQuantity
        {
            get
            {
                return this._ChargeQuantity;
            }
            set
            {
                if (this._ChargeQuantity != value)
                {
                    this.OnChargeQuantityChanging(value);
                    this.SendPropertyChanging("ChargeQuantity");
                    this._ChargeQuantity = value;
                    this.SendPropertyChanged("ChargeQuantity");
                    this.OnChargeQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"charge_quantity_unit_id", Storage = "_ChargeQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ChargeQuantityUnitId
        {
            get
            {
                return this._ChargeQuantityUnitId;
            }
            set
            {
                if (this._ChargeQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_ChargeQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnChargeQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("ChargeQuantityUnitId");
                    this._ChargeQuantityUnitId = value;
                    this.SendPropertyChanged("ChargeQuantityUnitId");
                    this.OnChargeQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"""value""", Storage = "_Value", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate", Storage = "_ExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ExchangeRate
        {
            get
            {
                return this._ExchangeRate;
            }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this.OnExchangeRateChanging(value);
                    this.SendPropertyChanging("ExchangeRate");
                    this._ExchangeRate = value;
                    this.SendPropertyChanged("ExchangeRate");
                    this.OnExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCustomer in the schema.
        /// </summary>
        [Column(Name = @"show_customer", Storage = "_ShowCustomer", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCustomer
        {
            get
            {
                return this._ShowCustomer;
            }
            set
            {
                if (this._ShowCustomer != value)
                {
                    this.OnShowCustomerChanging(value);
                    this.SendPropertyChanging("ShowCustomer");
                    this._ShowCustomer = value;
                    this.SendPropertyChanged("ShowCustomer");
                    this.OnShowCustomerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SystemCharge in the schema.
        /// </summary>
        [Column(Name = @"system_charge", Storage = "_SystemCharge", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> SystemCharge
        {
            get
            {
                return this._SystemCharge;
            }
            set
            {
                if (this._SystemCharge != value)
                {
                    this.OnSystemChargeChanging(value);
                    this.SendPropertyChanging("SystemCharge");
                    this._SystemCharge = value;
                    this.SendPropertyChanged("SystemCharge");
                    this.OnSystemChargeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostGroupCode in the schema.
        /// </summary>
        [Column(Name = @"cost_group_code", Storage = "_CostGroupCode", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string CostGroupCode
        {
            get
            {
                return this._CostGroupCode;
            }
            set
            {
                if (this._CostGroupCode != value)
                {
                    this.OnCostGroupCodeChanging(value);
                    this.SendPropertyChanging("CostGroupCode");
                    this._CostGroupCode = value;
                    this.SendPropertyChanged("CostGroupCode");
                    this.OnCostGroupCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCharge in the schema.
        /// </summary>
        [Column(Name = @"base_charge", Storage = "_BaseCharge", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BaseCharge
        {
            get
            {
                return this._BaseCharge;
            }
            set
            {
                if (this._BaseCharge != value)
                {
                    this.OnBaseChargeChanging(value);
                    this.SendPropertyChanging("BaseCharge");
                    this._BaseCharge = value;
                    this.SendPropertyChanged("BaseCharge");
                    this.OnBaseChargeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseValue in the schema.
        /// </summary>
        [Column(Name = @"base_value", Storage = "_BaseValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BaseValue
        {
            get
            {
                return this._BaseValue;
            }
            set
            {
                if (this._BaseValue != value)
                {
                    this.OnBaseValueChanging(value);
                    this.SendPropertyChanging("BaseValue");
                    this._BaseValue = value;
                    this.SendPropertyChanged("BaseValue");
                    this.OnBaseValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeFixStatus in the schema.
        /// </summary>
        [Column(Name = @"charge_fix_status", Storage = "_ChargeFixStatus", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ChargeFixStatus
        {
            get
            {
                return this._ChargeFixStatus;
            }
            set
            {
                if (this._ChargeFixStatus != value)
                {
                    this.OnChargeFixStatusChanging(value);
                    this.SendPropertyChanging("ChargeFixStatus");
                    this._ChargeFixStatus = value;
                    this.SendPropertyChanged("ChargeFixStatus");
                    this.OnChargeFixStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeVisibility in the schema.
        /// </summary>
        [Column(Name = @"charge_visibility", Storage = "_ChargeVisibility", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ChargeVisibility
        {
            get
            {
                return this._ChargeVisibility;
            }
            set
            {
                if (this._ChargeVisibility != value)
                {
                    this.OnChargeVisibilityChanging(value);
                    this.SendPropertyChanging("ChargeVisibility");
                    this._ChargeVisibility = value;
                    this.SendPropertyChanged("ChargeVisibility");
                    this.OnChargeVisibilityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeItem in the schema.
        /// </summary>
        [Column(Name = @"charge_item", Storage = "_ChargeItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ChargeItem
        {
            get
            {
                return this._ChargeItem;
            }
            set
            {
                if (this._ChargeItem != value)
                {
                    this.OnChargeItemChanging(value);
                    this.SendPropertyChanging("ChargeItem");
                    this._ChargeItem = value;
                    this.SendPropertyChanged("ChargeItem");
                    this.OnChargeItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountItem in the schema.
        /// </summary>
        [Column(Name = @"discount_item", Storage = "_DiscountItem", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DiscountItem
        {
            get
            {
                return this._DiscountItem;
            }
            set
            {
                if (this._DiscountItem != value)
                {
                    this.OnDiscountItemChanging(value);
                    this.SendPropertyChanging("DiscountItem");
                    this._DiscountItem = value;
                    this.SendPropertyChanged("DiscountItem");
                    this.OnDiscountItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmAtInvoicing in the schema.
        /// </summary>
        [Column(Name = @"confirm_at_invoicing", Storage = "_ConfirmAtInvoicing", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool ConfirmAtInvoicing
        {
            get
            {
                return this._ConfirmAtInvoicing;
            }
            set
            {
                if (this._ConfirmAtInvoicing != value)
                {
                    this.OnConfirmAtInvoicingChanging(value);
                    this.SendPropertyChanging("ConfirmAtInvoicing");
                    this._ConfirmAtInvoicing = value;
                    this.SendPropertyChanged("ConfirmAtInvoicing");
                    this.OnConfirmAtInvoicingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedFromPart in the schema.
        /// </summary>
        [Column(Name = @"created_from_part", Storage = "_CreatedFromPart", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CreatedFromPart
        {
            get
            {
                return this._CreatedFromPart;
            }
            set
            {
                if (this._CreatedFromPart != value)
                {
                    this.OnCreatedFromPartChanging(value);
                    this.SendPropertyChanging("CreatedFromPart");
                    this._CreatedFromPart = value;
                    this.SendPropertyChanged("CreatedFromPart");
                    this.OnCreatedFromPartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_ChargeQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesCharge", Storage="_UnitsOfMeasure_ChargeQuantityUnitId", ThisKey="ChargeQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_ChargeQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_ChargeQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_ChargeQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_ChargeQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_ChargeQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_ChargeQuantityUnitId.Entity = null;
                        previousValue.SalesCharge_ChargeQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_ChargeQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._ChargeQuantityUnitId = value.Id;
                        value.SalesCharge_ChargeQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._ChargeQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_ChargeQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_ChargeUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesCharge1", Storage="_UnitsOfMeasure_ChargeUnitId", ThisKey="ChargeUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_ChargeUnitId
        {
            get
            {
                return this._UnitsOfMeasure_ChargeUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_ChargeUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_ChargeUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_ChargeUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_ChargeUnitId.Entity = null;
                        previousValue.SalesCharge_ChargeUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_ChargeUnitId.Entity = value;
                    if (value != null)
                    {
                        this._ChargeUnitId = value.Id;
                        value.SalesCharge_ChargeUnitId.Add(this);
                    }
                    else
                    {
                        this._ChargeUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_ChargeUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesChargeType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesChargeType_SalesCharge", Storage="_SalesChargeType", ThisKey="SalesChargeTypeId", OtherKey="Id", IsForeignKey=true)]
        public SalesChargeType SalesChargeType
        {
            get
            {
                return this._SalesChargeType.Entity;
            }
            set
            {
                SalesChargeType previousValue = this._SalesChargeType.Entity;
                if ((previousValue != value) || (this._SalesChargeType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesChargeType");
                    if (previousValue != null)
                    {
                        this._SalesChargeType.Entity = null;
                        previousValue.SalesCharge.Remove(this);
                    }
                    this._SalesChargeType.Entity = value;
                    if (value != null)
                    {
                        this._SalesChargeTypeId = value.Id;
                        value.SalesCharge.Add(this);
                    }
                    else
                    {
                        this._SalesChargeTypeId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesChargeType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
