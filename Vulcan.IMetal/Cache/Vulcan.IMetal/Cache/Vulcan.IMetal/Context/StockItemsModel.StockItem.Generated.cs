//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/22/2018 7:34:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.StockItems
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.StockItems.StockItem in the schema.
    /// </summary>
    [Table(Name = @"public.stock_items")]
    public partial class StockItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _BranchId;

        private string _Number;

        private System.Nullable<int> _WarehouseId;

        private string _TransientType;

        private System.Nullable<int> _TransientId;

        private string _OtherNumber;

        private string _SupplierReference;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _ProductSubGroupId;

        private System.Nullable<decimal> _Dim1;

        private System.Nullable<decimal> _Dim1NegativeTolerance;

        private System.Nullable<decimal> _Dim1PositiveTolerance;

        private System.Nullable<decimal> _Dim2;

        private System.Nullable<decimal> _Dim2NegativeTolerance;

        private System.Nullable<decimal> _Dim2PositiveTolerance;

        private System.Nullable<decimal> _Dim3;

        private System.Nullable<decimal> _Dim3NegativeTolerance;

        private System.Nullable<decimal> _Dim3PositiveTolerance;

        private System.Nullable<decimal> _Dim4;

        private System.Nullable<decimal> _Dim4NegativeTolerance;

        private System.Nullable<decimal> _Dim4PositiveTolerance;

        private System.Nullable<decimal> _Dim5;

        private System.Nullable<decimal> _Dim5NegativeTolerance;

        private System.Nullable<decimal> _Dim5PositiveTolerance;

        private System.Nullable<decimal> _Density;

        private System.Nullable<int> _StockCastId;

        private System.Nullable<int> _SupplierId;

        private System.Nullable<int> _PurchaseBranchId;

        private System.Nullable<int> _PurchaseOrder;

        private System.Nullable<int> _PurchaseOrderItem;

        private string _AdviceNoteReference;

        private string _TestCertReference;

        private System.Nullable<System.DateTime> _ReceivedDate;

        private System.Nullable<System.DateTime> _RejectedDate;

        private System.Nullable<int> _RejectReasonId;

        private string _RejectDescription;

        private System.Nullable<int> _CreationTransactionId;

        private System.Nullable<int> _PhysicalPiece;

        private System.Nullable<decimal> _PhysicalWeight;

        private System.Nullable<decimal> _PhysicalQuantity;

        private System.Nullable<int> _AllocatedPiece;

        private System.Nullable<decimal> _AllocatedWeight;

        private System.Nullable<decimal> _AllocatedQuantity;

        private System.Nullable<decimal> _AdvisedQuantity;

        private System.Nullable<decimal> _CalculatedQuantity;

        private System.Nullable<int> _PackingTypeId;

        private System.Nullable<int> _PiecesPerPack;

        private string _PackingReference;

        private System.Nullable<decimal> _PackingWeight;

        private System.Nullable<decimal> _MaterialCost;

        private System.Nullable<decimal> _TransportCost;

        private System.Nullable<decimal> _ProductionCost;

        private System.Nullable<decimal> _MiscellaneousCost;

        private System.Nullable<decimal> _SurchargeCost;

        private System.Nullable<decimal> _MaterialValue;

        private System.Nullable<decimal> _TransportValue;

        private System.Nullable<decimal> _ProductionValue;

        private System.Nullable<decimal> _MiscellaneousValue;

        private System.Nullable<decimal> _SurchargeValue;

        private System.Nullable<decimal> _OriginalMaterialCost;

        private System.Nullable<decimal> _OriginalTransportCost;

        private System.Nullable<decimal> _OriginalProductionCost;

        private System.Nullable<decimal> _OriginalMiscellaneousCost;

        private System.Nullable<decimal> _OriginalSurchargeCost;

        private System.Nullable<int> _StockStatusId;

        private System.Nullable<int> _CustomerId;

        private System.Nullable<int> _PartSpecificationId;

        private System.Nullable<int> _ProductionItem;

        private string _Location;

        private string _Note;

        private System.Nullable<int> _IdentifyingMarkId;

        private string _SpecificationValue1;

        private string _SpecificationValue2;

        private string _SpecificationValue3;

        private string _SpecificationValue4;

        private string _SpecificationValue5;

        private System.Nullable<int> _ParentId;

        private System.Nullable<int> _OriginalParentId;

        private System.Nullable<int> _CreationTransactionItemId;

        private System.Nullable<int> _ReservedPiece;

        private System.Nullable<decimal> _ReservedWeight;

        private System.Nullable<decimal> _ReservedQuantity;

        private System.Nullable<System.DateTime> _HoldDate;

        private System.Nullable<int> _HoldReasonId;

        private string _HoldDescription;

        private System.Nullable<int> _HoldUserId;

        private System.Nullable<int> _PurchaseItemId;

        private string _SpecificationValue6;

        private string _SpecificationValue7;

        private string _SpecificationValue8;

        private string _SpecificationValue9;

        private string _SpecificationValue10;

        private System.Nullable<int> _Specification1Id;

        private System.Nullable<int> _Specification2Id;

        private System.Nullable<int> _Specification3Id;

        private System.Nullable<int> _Specification4Id;

        private System.Nullable<int> _Specification5Id;

        private System.Nullable<int> _Specification6Id;

        private System.Nullable<int> _Specification7Id;

        private System.Nullable<int> _Specification8Id;

        private System.Nullable<int> _Specification9Id;

        private System.Nullable<int> _Specification10Id;

        private System.Nullable<int> _Dim1TypeId;

        private System.Nullable<int> _Dim2TypeId;

        private System.Nullable<int> _Dim3TypeId;

        private System.Nullable<int> _Dim4TypeId;

        private System.Nullable<int> _Dim5TypeId;

        private System.Nullable<bool> _CustomersOwn = false;

        private System.Nullable<System.DateTime> _LastCheckedDate;

        private System.Nullable<System.DateTime> _FixDate;

        private System.Nullable<bool> _NonTraceable = false;

        private string _CertificateOfConformityReference;

        private string _TestNumber;

        private string _TreatmentNumber;

        private System.Nullable<decimal> _DutyPercentage;
        #pragma warning restore 0649

        private EntitySet<StockItem> _StockItem_OriginalParentId1;

        private EntityRef<StockItem> _StockItem_OriginalParentId;

        private EntitySet<StockItem> _StockItem_ParentId1;

        private EntityRef<StockItem> _StockItem_ParentId;

        private EntityRef<Product> _Product;

        private EntityRef<StockCast> _StockCast;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<StockHoldReason> _StockHoldReason;

        private EntityRef<Personnel> _Personnel;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnWarehouseIdChanging(System.Nullable<int> value);
        partial void OnWarehouseIdChanged();
        partial void OnTransientTypeChanging(string value);
        partial void OnTransientTypeChanged();
        partial void OnTransientIdChanging(System.Nullable<int> value);
        partial void OnTransientIdChanged();
        partial void OnOtherNumberChanging(string value);
        partial void OnOtherNumberChanged();
        partial void OnSupplierReferenceChanging(string value);
        partial void OnSupplierReferenceChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnProductSubGroupIdChanging(System.Nullable<int> value);
        partial void OnProductSubGroupIdChanged();
        partial void OnDim1Changing(System.Nullable<decimal> value);
        partial void OnDim1Changed();
        partial void OnDim1NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1NegativeToleranceChanged();
        partial void OnDim1PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1PositiveToleranceChanged();
        partial void OnDim2Changing(System.Nullable<decimal> value);
        partial void OnDim2Changed();
        partial void OnDim2NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2NegativeToleranceChanged();
        partial void OnDim2PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2PositiveToleranceChanged();
        partial void OnDim3Changing(System.Nullable<decimal> value);
        partial void OnDim3Changed();
        partial void OnDim3NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3NegativeToleranceChanged();
        partial void OnDim3PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3PositiveToleranceChanged();
        partial void OnDim4Changing(System.Nullable<decimal> value);
        partial void OnDim4Changed();
        partial void OnDim4NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4NegativeToleranceChanged();
        partial void OnDim4PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4PositiveToleranceChanged();
        partial void OnDim5Changing(System.Nullable<decimal> value);
        partial void OnDim5Changed();
        partial void OnDim5NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5NegativeToleranceChanged();
        partial void OnDim5PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5PositiveToleranceChanged();
        partial void OnDensityChanging(System.Nullable<decimal> value);
        partial void OnDensityChanged();
        partial void OnStockCastIdChanging(System.Nullable<int> value);
        partial void OnStockCastIdChanged();
        partial void OnSupplierIdChanging(System.Nullable<int> value);
        partial void OnSupplierIdChanged();
        partial void OnPurchaseBranchIdChanging(System.Nullable<int> value);
        partial void OnPurchaseBranchIdChanged();
        partial void OnPurchaseOrderChanging(System.Nullable<int> value);
        partial void OnPurchaseOrderChanged();
        partial void OnPurchaseOrderItemChanging(System.Nullable<int> value);
        partial void OnPurchaseOrderItemChanged();
        partial void OnAdviceNoteReferenceChanging(string value);
        partial void OnAdviceNoteReferenceChanged();
        partial void OnTestCertReferenceChanging(string value);
        partial void OnTestCertReferenceChanged();
        partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReceivedDateChanged();
        partial void OnRejectedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnRejectedDateChanged();
        partial void OnRejectReasonIdChanging(System.Nullable<int> value);
        partial void OnRejectReasonIdChanged();
        partial void OnRejectDescriptionChanging(string value);
        partial void OnRejectDescriptionChanged();
        partial void OnCreationTransactionIdChanging(System.Nullable<int> value);
        partial void OnCreationTransactionIdChanged();
        partial void OnPhysicalPieceChanging(System.Nullable<int> value);
        partial void OnPhysicalPieceChanged();
        partial void OnPhysicalWeightChanging(System.Nullable<decimal> value);
        partial void OnPhysicalWeightChanged();
        partial void OnPhysicalQuantityChanging(System.Nullable<decimal> value);
        partial void OnPhysicalQuantityChanged();
        partial void OnAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnAllocatedPieceChanged();
        partial void OnAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnAllocatedWeightChanged();
        partial void OnAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnAllocatedQuantityChanged();
        partial void OnAdvisedQuantityChanging(System.Nullable<decimal> value);
        partial void OnAdvisedQuantityChanged();
        partial void OnCalculatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnCalculatedQuantityChanged();
        partial void OnPackingTypeIdChanging(System.Nullable<int> value);
        partial void OnPackingTypeIdChanged();
        partial void OnPiecesPerPackChanging(System.Nullable<int> value);
        partial void OnPiecesPerPackChanged();
        partial void OnPackingReferenceChanging(string value);
        partial void OnPackingReferenceChanged();
        partial void OnPackingWeightChanging(System.Nullable<decimal> value);
        partial void OnPackingWeightChanged();
        partial void OnMaterialCostChanging(System.Nullable<decimal> value);
        partial void OnMaterialCostChanged();
        partial void OnTransportCostChanging(System.Nullable<decimal> value);
        partial void OnTransportCostChanged();
        partial void OnProductionCostChanging(System.Nullable<decimal> value);
        partial void OnProductionCostChanged();
        partial void OnMiscellaneousCostChanging(System.Nullable<decimal> value);
        partial void OnMiscellaneousCostChanged();
        partial void OnSurchargeCostChanging(System.Nullable<decimal> value);
        partial void OnSurchargeCostChanged();
        partial void OnMaterialValueChanging(System.Nullable<decimal> value);
        partial void OnMaterialValueChanged();
        partial void OnTransportValueChanging(System.Nullable<decimal> value);
        partial void OnTransportValueChanged();
        partial void OnProductionValueChanging(System.Nullable<decimal> value);
        partial void OnProductionValueChanged();
        partial void OnMiscellaneousValueChanging(System.Nullable<decimal> value);
        partial void OnMiscellaneousValueChanged();
        partial void OnSurchargeValueChanging(System.Nullable<decimal> value);
        partial void OnSurchargeValueChanged();
        partial void OnOriginalMaterialCostChanging(System.Nullable<decimal> value);
        partial void OnOriginalMaterialCostChanged();
        partial void OnOriginalTransportCostChanging(System.Nullable<decimal> value);
        partial void OnOriginalTransportCostChanged();
        partial void OnOriginalProductionCostChanging(System.Nullable<decimal> value);
        partial void OnOriginalProductionCostChanged();
        partial void OnOriginalMiscellaneousCostChanging(System.Nullable<decimal> value);
        partial void OnOriginalMiscellaneousCostChanged();
        partial void OnOriginalSurchargeCostChanging(System.Nullable<decimal> value);
        partial void OnOriginalSurchargeCostChanged();
        partial void OnStockStatusIdChanging(System.Nullable<int> value);
        partial void OnStockStatusIdChanged();
        partial void OnCustomerIdChanging(System.Nullable<int> value);
        partial void OnCustomerIdChanged();
        partial void OnPartSpecificationIdChanging(System.Nullable<int> value);
        partial void OnPartSpecificationIdChanged();
        partial void OnProductionItemChanging(System.Nullable<int> value);
        partial void OnProductionItemChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnIdentifyingMarkIdChanging(System.Nullable<int> value);
        partial void OnIdentifyingMarkIdChanged();
        partial void OnSpecificationValue1Changing(string value);
        partial void OnSpecificationValue1Changed();
        partial void OnSpecificationValue2Changing(string value);
        partial void OnSpecificationValue2Changed();
        partial void OnSpecificationValue3Changing(string value);
        partial void OnSpecificationValue3Changed();
        partial void OnSpecificationValue4Changing(string value);
        partial void OnSpecificationValue4Changed();
        partial void OnSpecificationValue5Changing(string value);
        partial void OnSpecificationValue5Changed();
        partial void OnParentIdChanging(System.Nullable<int> value);
        partial void OnParentIdChanged();
        partial void OnOriginalParentIdChanging(System.Nullable<int> value);
        partial void OnOriginalParentIdChanged();
        partial void OnCreationTransactionItemIdChanging(System.Nullable<int> value);
        partial void OnCreationTransactionItemIdChanged();
        partial void OnReservedPieceChanging(System.Nullable<int> value);
        partial void OnReservedPieceChanged();
        partial void OnReservedWeightChanging(System.Nullable<decimal> value);
        partial void OnReservedWeightChanged();
        partial void OnReservedQuantityChanging(System.Nullable<decimal> value);
        partial void OnReservedQuantityChanged();
        partial void OnHoldDateChanging(System.Nullable<System.DateTime> value);
        partial void OnHoldDateChanged();
        partial void OnHoldReasonIdChanging(System.Nullable<int> value);
        partial void OnHoldReasonIdChanged();
        partial void OnHoldDescriptionChanging(string value);
        partial void OnHoldDescriptionChanged();
        partial void OnHoldUserIdChanging(System.Nullable<int> value);
        partial void OnHoldUserIdChanged();
        partial void OnPurchaseItemIdChanging(System.Nullable<int> value);
        partial void OnPurchaseItemIdChanged();
        partial void OnSpecificationValue6Changing(string value);
        partial void OnSpecificationValue6Changed();
        partial void OnSpecificationValue7Changing(string value);
        partial void OnSpecificationValue7Changed();
        partial void OnSpecificationValue8Changing(string value);
        partial void OnSpecificationValue8Changed();
        partial void OnSpecificationValue9Changing(string value);
        partial void OnSpecificationValue9Changed();
        partial void OnSpecificationValue10Changing(string value);
        partial void OnSpecificationValue10Changed();
        partial void OnSpecification1IdChanging(System.Nullable<int> value);
        partial void OnSpecification1IdChanged();
        partial void OnSpecification2IdChanging(System.Nullable<int> value);
        partial void OnSpecification2IdChanged();
        partial void OnSpecification3IdChanging(System.Nullable<int> value);
        partial void OnSpecification3IdChanged();
        partial void OnSpecification4IdChanging(System.Nullable<int> value);
        partial void OnSpecification4IdChanged();
        partial void OnSpecification5IdChanging(System.Nullable<int> value);
        partial void OnSpecification5IdChanged();
        partial void OnSpecification6IdChanging(System.Nullable<int> value);
        partial void OnSpecification6IdChanged();
        partial void OnSpecification7IdChanging(System.Nullable<int> value);
        partial void OnSpecification7IdChanged();
        partial void OnSpecification8IdChanging(System.Nullable<int> value);
        partial void OnSpecification8IdChanged();
        partial void OnSpecification9IdChanging(System.Nullable<int> value);
        partial void OnSpecification9IdChanged();
        partial void OnSpecification10IdChanging(System.Nullable<int> value);
        partial void OnSpecification10IdChanged();
        partial void OnDim1TypeIdChanging(System.Nullable<int> value);
        partial void OnDim1TypeIdChanged();
        partial void OnDim2TypeIdChanging(System.Nullable<int> value);
        partial void OnDim2TypeIdChanged();
        partial void OnDim3TypeIdChanging(System.Nullable<int> value);
        partial void OnDim3TypeIdChanged();
        partial void OnDim4TypeIdChanging(System.Nullable<int> value);
        partial void OnDim4TypeIdChanged();
        partial void OnDim5TypeIdChanging(System.Nullable<int> value);
        partial void OnDim5TypeIdChanged();
        partial void OnCustomersOwnChanging(System.Nullable<bool> value);
        partial void OnCustomersOwnChanged();
        partial void OnLastCheckedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastCheckedDateChanged();
        partial void OnFixDateChanging(System.Nullable<System.DateTime> value);
        partial void OnFixDateChanged();
        partial void OnNonTraceableChanging(System.Nullable<bool> value);
        partial void OnNonTraceableChanged();
        partial void OnCertificateOfConformityReferenceChanging(string value);
        partial void OnCertificateOfConformityReferenceChanged();
        partial void OnTestNumberChanging(string value);
        partial void OnTestNumberChanged();
        partial void OnTreatmentNumberChanging(string value);
        partial void OnTreatmentNumberChanged();
        partial void OnDutyPercentageChanging(System.Nullable<decimal> value);
        partial void OnDutyPercentageChanged();
        #endregion

        public StockItem()
        {
            this._StockItem_OriginalParentId1 = new EntitySet<StockItem>(new Action<StockItem>(this.attach_StockItem_OriginalParentId1), new Action<StockItem>(this.detach_StockItem_OriginalParentId1));
            this._StockItem_OriginalParentId  = default(EntityRef<StockItem>);
            this._StockItem_ParentId1 = new EntitySet<StockItem>(new Action<StockItem>(this.attach_StockItem_ParentId1), new Action<StockItem>(this.detach_StockItem_ParentId1));
            this._StockItem_ParentId  = default(EntityRef<StockItem>);
            this._Product  = default(EntityRef<Product>);
            this._StockCast  = default(EntityRef<StockCast>);
            this._Warehouse  = default(EntityRef<Warehouse>);
            this._StockHoldReason  = default(EntityRef<StockHoldReason>);
            this._Personnel  = default(EntityRef<Personnel>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Name = @"""number""", Storage = "_Number", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging("Number");
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WarehouseId in the schema.
        /// </summary>
        [Column(Name = @"warehouse_id", Storage = "_WarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging("WarehouseId");
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientType in the schema.
        /// </summary>
        [Column(Name = @"transient_type", Storage = "_TransientType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TransientType
        {
            get
            {
                return this._TransientType;
            }
            set
            {
                if (this._TransientType != value)
                {
                    this.OnTransientTypeChanging(value);
                    this.SendPropertyChanging("TransientType");
                    this._TransientType = value;
                    this.SendPropertyChanged("TransientType");
                    this.OnTransientTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientId in the schema.
        /// </summary>
        [Column(Name = @"transient_id", Storage = "_TransientId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransientId
        {
            get
            {
                return this._TransientId;
            }
            set
            {
                if (this._TransientId != value)
                {
                    this.OnTransientIdChanging(value);
                    this.SendPropertyChanging("TransientId");
                    this._TransientId = value;
                    this.SendPropertyChanged("TransientId");
                    this.OnTransientIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherNumber in the schema.
        /// </summary>
        [Column(Name = @"other_number", Storage = "_OtherNumber", DbType = "VARCHAR(25)", UpdateCheck = UpdateCheck.Never)]
        public string OtherNumber
        {
            get
            {
                return this._OtherNumber;
            }
            set
            {
                if (this._OtherNumber != value)
                {
                    this.OnOtherNumberChanging(value);
                    this.SendPropertyChanging("OtherNumber");
                    this._OtherNumber = value;
                    this.SendPropertyChanged("OtherNumber");
                    this.OnOtherNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierReference in the schema.
        /// </summary>
        [Column(Name = @"supplier_reference", Storage = "_SupplierReference", DbType = "VARCHAR(25)", UpdateCheck = UpdateCheck.Never)]
        public string SupplierReference
        {
            get
            {
                return this._SupplierReference;
            }
            set
            {
                if (this._SupplierReference != value)
                {
                    this.OnSupplierReferenceChanging(value);
                    this.SendPropertyChanging("SupplierReference");
                    this._SupplierReference = value;
                    this.SendPropertyChanged("SupplierReference");
                    this.OnSupplierReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroupId in the schema.
        /// </summary>
        [Column(Name = @"product_sub_group_id", Storage = "_ProductSubGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductSubGroupId
        {
            get
            {
                return this._ProductSubGroupId;
            }
            set
            {
                if (this._ProductSubGroupId != value)
                {
                    this.OnProductSubGroupIdChanging(value);
                    this.SendPropertyChanging("ProductSubGroupId");
                    this._ProductSubGroupId = value;
                    this.SendPropertyChanged("ProductSubGroupId");
                    this.OnProductSubGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1 in the schema.
        /// </summary>
        [Column(Name = @"dim1", Storage = "_Dim1", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1
        {
            get
            {
                return this._Dim1;
            }
            set
            {
                if (this._Dim1 != value)
                {
                    this.OnDim1Changing(value);
                    this.SendPropertyChanging("Dim1");
                    this._Dim1 = value;
                    this.SendPropertyChanged("Dim1");
                    this.OnDim1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_negative_tolerance", Storage = "_Dim1NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1NegativeTolerance
        {
            get
            {
                return this._Dim1NegativeTolerance;
            }
            set
            {
                if (this._Dim1NegativeTolerance != value)
                {
                    this.OnDim1NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim1NegativeTolerance");
                    this._Dim1NegativeTolerance = value;
                    this.SendPropertyChanged("Dim1NegativeTolerance");
                    this.OnDim1NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_positive_tolerance", Storage = "_Dim1PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1PositiveTolerance
        {
            get
            {
                return this._Dim1PositiveTolerance;
            }
            set
            {
                if (this._Dim1PositiveTolerance != value)
                {
                    this.OnDim1PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim1PositiveTolerance");
                    this._Dim1PositiveTolerance = value;
                    this.SendPropertyChanged("Dim1PositiveTolerance");
                    this.OnDim1PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2 in the schema.
        /// </summary>
        [Column(Name = @"dim2", Storage = "_Dim2", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2
        {
            get
            {
                return this._Dim2;
            }
            set
            {
                if (this._Dim2 != value)
                {
                    this.OnDim2Changing(value);
                    this.SendPropertyChanging("Dim2");
                    this._Dim2 = value;
                    this.SendPropertyChanged("Dim2");
                    this.OnDim2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_negative_tolerance", Storage = "_Dim2NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2NegativeTolerance
        {
            get
            {
                return this._Dim2NegativeTolerance;
            }
            set
            {
                if (this._Dim2NegativeTolerance != value)
                {
                    this.OnDim2NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim2NegativeTolerance");
                    this._Dim2NegativeTolerance = value;
                    this.SendPropertyChanged("Dim2NegativeTolerance");
                    this.OnDim2NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_positive_tolerance", Storage = "_Dim2PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2PositiveTolerance
        {
            get
            {
                return this._Dim2PositiveTolerance;
            }
            set
            {
                if (this._Dim2PositiveTolerance != value)
                {
                    this.OnDim2PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim2PositiveTolerance");
                    this._Dim2PositiveTolerance = value;
                    this.SendPropertyChanged("Dim2PositiveTolerance");
                    this.OnDim2PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3 in the schema.
        /// </summary>
        [Column(Name = @"dim3", Storage = "_Dim3", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3
        {
            get
            {
                return this._Dim3;
            }
            set
            {
                if (this._Dim3 != value)
                {
                    this.OnDim3Changing(value);
                    this.SendPropertyChanging("Dim3");
                    this._Dim3 = value;
                    this.SendPropertyChanged("Dim3");
                    this.OnDim3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_negative_tolerance", Storage = "_Dim3NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3NegativeTolerance
        {
            get
            {
                return this._Dim3NegativeTolerance;
            }
            set
            {
                if (this._Dim3NegativeTolerance != value)
                {
                    this.OnDim3NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim3NegativeTolerance");
                    this._Dim3NegativeTolerance = value;
                    this.SendPropertyChanged("Dim3NegativeTolerance");
                    this.OnDim3NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_positive_tolerance", Storage = "_Dim3PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3PositiveTolerance
        {
            get
            {
                return this._Dim3PositiveTolerance;
            }
            set
            {
                if (this._Dim3PositiveTolerance != value)
                {
                    this.OnDim3PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim3PositiveTolerance");
                    this._Dim3PositiveTolerance = value;
                    this.SendPropertyChanged("Dim3PositiveTolerance");
                    this.OnDim3PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4 in the schema.
        /// </summary>
        [Column(Name = @"dim4", Storage = "_Dim4", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4
        {
            get
            {
                return this._Dim4;
            }
            set
            {
                if (this._Dim4 != value)
                {
                    this.OnDim4Changing(value);
                    this.SendPropertyChanging("Dim4");
                    this._Dim4 = value;
                    this.SendPropertyChanged("Dim4");
                    this.OnDim4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_negative_tolerance", Storage = "_Dim4NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4NegativeTolerance
        {
            get
            {
                return this._Dim4NegativeTolerance;
            }
            set
            {
                if (this._Dim4NegativeTolerance != value)
                {
                    this.OnDim4NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim4NegativeTolerance");
                    this._Dim4NegativeTolerance = value;
                    this.SendPropertyChanged("Dim4NegativeTolerance");
                    this.OnDim4NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_positive_tolerance", Storage = "_Dim4PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4PositiveTolerance
        {
            get
            {
                return this._Dim4PositiveTolerance;
            }
            set
            {
                if (this._Dim4PositiveTolerance != value)
                {
                    this.OnDim4PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim4PositiveTolerance");
                    this._Dim4PositiveTolerance = value;
                    this.SendPropertyChanged("Dim4PositiveTolerance");
                    this.OnDim4PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5 in the schema.
        /// </summary>
        [Column(Name = @"dim5", Storage = "_Dim5", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5
        {
            get
            {
                return this._Dim5;
            }
            set
            {
                if (this._Dim5 != value)
                {
                    this.OnDim5Changing(value);
                    this.SendPropertyChanging("Dim5");
                    this._Dim5 = value;
                    this.SendPropertyChanged("Dim5");
                    this.OnDim5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_negative_tolerance", Storage = "_Dim5NegativeTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5NegativeTolerance
        {
            get
            {
                return this._Dim5NegativeTolerance;
            }
            set
            {
                if (this._Dim5NegativeTolerance != value)
                {
                    this.OnDim5NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim5NegativeTolerance");
                    this._Dim5NegativeTolerance = value;
                    this.SendPropertyChanged("Dim5NegativeTolerance");
                    this.OnDim5NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_positive_tolerance", Storage = "_Dim5PositiveTolerance", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5PositiveTolerance
        {
            get
            {
                return this._Dim5PositiveTolerance;
            }
            set
            {
                if (this._Dim5PositiveTolerance != value)
                {
                    this.OnDim5PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim5PositiveTolerance");
                    this._Dim5PositiveTolerance = value;
                    this.SendPropertyChanged("Dim5PositiveTolerance");
                    this.OnDim5PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Density in the schema.
        /// </summary>
        [Column(Name = @"density", Storage = "_Density", DbType = "NUMERIC(16,6)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Density
        {
            get
            {
                return this._Density;
            }
            set
            {
                if (this._Density != value)
                {
                    this.OnDensityChanging(value);
                    this.SendPropertyChanging("Density");
                    this._Density = value;
                    this.SendPropertyChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCastId in the schema.
        /// </summary>
        [Column(Name = @"stock_cast_id", Storage = "_StockCastId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockCastId
        {
            get
            {
                return this._StockCastId;
            }
            set
            {
                if (this._StockCastId != value)
                {
                    if (this._StockCast.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockCastIdChanging(value);
                    this.SendPropertyChanging("StockCastId");
                    this._StockCastId = value;
                    this.SendPropertyChanged("StockCastId");
                    this.OnStockCastIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"supplier_id", Storage = "_SupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging("SupplierId");
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseBranchId in the schema.
        /// </summary>
        [Column(Name = @"purchase_branch_id", Storage = "_PurchaseBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseBranchId
        {
            get
            {
                return this._PurchaseBranchId;
            }
            set
            {
                if (this._PurchaseBranchId != value)
                {
                    this.OnPurchaseBranchIdChanging(value);
                    this.SendPropertyChanging("PurchaseBranchId");
                    this._PurchaseBranchId = value;
                    this.SendPropertyChanged("PurchaseBranchId");
                    this.OnPurchaseBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrder in the schema.
        /// </summary>
        [Column(Name = @"purchase_order", Storage = "_PurchaseOrder", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseOrder
        {
            get
            {
                return this._PurchaseOrder;
            }
            set
            {
                if (this._PurchaseOrder != value)
                {
                    this.OnPurchaseOrderChanging(value);
                    this.SendPropertyChanging("PurchaseOrder");
                    this._PurchaseOrder = value;
                    this.SendPropertyChanged("PurchaseOrder");
                    this.OnPurchaseOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item", Storage = "_PurchaseOrderItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseOrderItem
        {
            get
            {
                return this._PurchaseOrderItem;
            }
            set
            {
                if (this._PurchaseOrderItem != value)
                {
                    this.OnPurchaseOrderItemChanging(value);
                    this.SendPropertyChanging("PurchaseOrderItem");
                    this._PurchaseOrderItem = value;
                    this.SendPropertyChanged("PurchaseOrderItem");
                    this.OnPurchaseOrderItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdviceNoteReference in the schema.
        /// </summary>
        [Column(Name = @"advice_note_reference", Storage = "_AdviceNoteReference", DbType = "VARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string AdviceNoteReference
        {
            get
            {
                return this._AdviceNoteReference;
            }
            set
            {
                if (this._AdviceNoteReference != value)
                {
                    this.OnAdviceNoteReferenceChanging(value);
                    this.SendPropertyChanging("AdviceNoteReference");
                    this._AdviceNoteReference = value;
                    this.SendPropertyChanged("AdviceNoteReference");
                    this.OnAdviceNoteReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertReference in the schema.
        /// </summary>
        [Column(Name = @"test_cert_reference", Storage = "_TestCertReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string TestCertReference
        {
            get
            {
                return this._TestCertReference;
            }
            set
            {
                if (this._TestCertReference != value)
                {
                    this.OnTestCertReferenceChanging(value);
                    this.SendPropertyChanging("TestCertReference");
                    this._TestCertReference = value;
                    this.SendPropertyChanged("TestCertReference");
                    this.OnTestCertReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceivedDate in the schema.
        /// </summary>
        [Column(Name = @"received_date", Storage = "_ReceivedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ReceivedDate
        {
            get
            {
                return this._ReceivedDate;
            }
            set
            {
                if (this._ReceivedDate != value)
                {
                    this.OnReceivedDateChanging(value);
                    this.SendPropertyChanging("ReceivedDate");
                    this._ReceivedDate = value;
                    this.SendPropertyChanged("ReceivedDate");
                    this.OnReceivedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RejectedDate in the schema.
        /// </summary>
        [Column(Name = @"rejected_date", Storage = "_RejectedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> RejectedDate
        {
            get
            {
                return this._RejectedDate;
            }
            set
            {
                if (this._RejectedDate != value)
                {
                    this.OnRejectedDateChanging(value);
                    this.SendPropertyChanging("RejectedDate");
                    this._RejectedDate = value;
                    this.SendPropertyChanged("RejectedDate");
                    this.OnRejectedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RejectReasonId in the schema.
        /// </summary>
        [Column(Name = @"reject_reason_id", Storage = "_RejectReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RejectReasonId
        {
            get
            {
                return this._RejectReasonId;
            }
            set
            {
                if (this._RejectReasonId != value)
                {
                    this.OnRejectReasonIdChanging(value);
                    this.SendPropertyChanging("RejectReasonId");
                    this._RejectReasonId = value;
                    this.SendPropertyChanged("RejectReasonId");
                    this.OnRejectReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RejectDescription in the schema.
        /// </summary>
        [Column(Name = @"reject_description", Storage = "_RejectDescription", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string RejectDescription
        {
            get
            {
                return this._RejectDescription;
            }
            set
            {
                if (this._RejectDescription != value)
                {
                    this.OnRejectDescriptionChanging(value);
                    this.SendPropertyChanging("RejectDescription");
                    this._RejectDescription = value;
                    this.SendPropertyChanged("RejectDescription");
                    this.OnRejectDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationTransactionId in the schema.
        /// </summary>
        [Column(Name = @"creation_transaction_id", Storage = "_CreationTransactionId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreationTransactionId
        {
            get
            {
                return this._CreationTransactionId;
            }
            set
            {
                if (this._CreationTransactionId != value)
                {
                    this.OnCreationTransactionIdChanging(value);
                    this.SendPropertyChanging("CreationTransactionId");
                    this._CreationTransactionId = value;
                    this.SendPropertyChanged("CreationTransactionId");
                    this.OnCreationTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalPiece in the schema.
        /// </summary>
        [Column(Name = @"physical_pieces", Storage = "_PhysicalPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PhysicalPiece
        {
            get
            {
                return this._PhysicalPiece;
            }
            set
            {
                if (this._PhysicalPiece != value)
                {
                    this.OnPhysicalPieceChanging(value);
                    this.SendPropertyChanging("PhysicalPiece");
                    this._PhysicalPiece = value;
                    this.SendPropertyChanged("PhysicalPiece");
                    this.OnPhysicalPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalWeight in the schema.
        /// </summary>
        [Column(Name = @"physical_weight", Storage = "_PhysicalWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PhysicalWeight
        {
            get
            {
                return this._PhysicalWeight;
            }
            set
            {
                if (this._PhysicalWeight != value)
                {
                    this.OnPhysicalWeightChanging(value);
                    this.SendPropertyChanging("PhysicalWeight");
                    this._PhysicalWeight = value;
                    this.SendPropertyChanged("PhysicalWeight");
                    this.OnPhysicalWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalQuantity in the schema.
        /// </summary>
        [Column(Name = @"physical_quantity", Storage = "_PhysicalQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PhysicalQuantity
        {
            get
            {
                return this._PhysicalQuantity;
            }
            set
            {
                if (this._PhysicalQuantity != value)
                {
                    this.OnPhysicalQuantityChanging(value);
                    this.SendPropertyChanging("PhysicalQuantity");
                    this._PhysicalQuantity = value;
                    this.SendPropertyChanged("PhysicalQuantity");
                    this.OnPhysicalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"allocated_pieces", Storage = "_AllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AllocatedPiece
        {
            get
            {
                return this._AllocatedPiece;
            }
            set
            {
                if (this._AllocatedPiece != value)
                {
                    this.OnAllocatedPieceChanging(value);
                    this.SendPropertyChanging("AllocatedPiece");
                    this._AllocatedPiece = value;
                    this.SendPropertyChanged("AllocatedPiece");
                    this.OnAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"allocated_weight", Storage = "_AllocatedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedWeight
        {
            get
            {
                return this._AllocatedWeight;
            }
            set
            {
                if (this._AllocatedWeight != value)
                {
                    this.OnAllocatedWeightChanging(value);
                    this.SendPropertyChanging("AllocatedWeight");
                    this._AllocatedWeight = value;
                    this.SendPropertyChanged("AllocatedWeight");
                    this.OnAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"allocated_quantity", Storage = "_AllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedQuantity
        {
            get
            {
                return this._AllocatedQuantity;
            }
            set
            {
                if (this._AllocatedQuantity != value)
                {
                    this.OnAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("AllocatedQuantity");
                    this._AllocatedQuantity = value;
                    this.SendPropertyChanged("AllocatedQuantity");
                    this.OnAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdvisedQuantity in the schema.
        /// </summary>
        [Column(Name = @"advised_quantity", Storage = "_AdvisedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AdvisedQuantity
        {
            get
            {
                return this._AdvisedQuantity;
            }
            set
            {
                if (this._AdvisedQuantity != value)
                {
                    this.OnAdvisedQuantityChanging(value);
                    this.SendPropertyChanging("AdvisedQuantity");
                    this._AdvisedQuantity = value;
                    this.SendPropertyChanged("AdvisedQuantity");
                    this.OnAdvisedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CalculatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"calculated_quantity", Storage = "_CalculatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CalculatedQuantity
        {
            get
            {
                return this._CalculatedQuantity;
            }
            set
            {
                if (this._CalculatedQuantity != value)
                {
                    this.OnCalculatedQuantityChanging(value);
                    this.SendPropertyChanging("CalculatedQuantity");
                    this._CalculatedQuantity = value;
                    this.SendPropertyChanged("CalculatedQuantity");
                    this.OnCalculatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackingTypeId in the schema.
        /// </summary>
        [Column(Name = @"packing_type_id", Storage = "_PackingTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PackingTypeId
        {
            get
            {
                return this._PackingTypeId;
            }
            set
            {
                if (this._PackingTypeId != value)
                {
                    this.OnPackingTypeIdChanging(value);
                    this.SendPropertyChanging("PackingTypeId");
                    this._PackingTypeId = value;
                    this.SendPropertyChanged("PackingTypeId");
                    this.OnPackingTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PiecesPerPack in the schema.
        /// </summary>
        [Column(Name = @"pieces_per_pack", Storage = "_PiecesPerPack", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PiecesPerPack
        {
            get
            {
                return this._PiecesPerPack;
            }
            set
            {
                if (this._PiecesPerPack != value)
                {
                    this.OnPiecesPerPackChanging(value);
                    this.SendPropertyChanging("PiecesPerPack");
                    this._PiecesPerPack = value;
                    this.SendPropertyChanged("PiecesPerPack");
                    this.OnPiecesPerPackChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackingReference in the schema.
        /// </summary>
        [Column(Name = @"packing_reference", Storage = "_PackingReference", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string PackingReference
        {
            get
            {
                return this._PackingReference;
            }
            set
            {
                if (this._PackingReference != value)
                {
                    this.OnPackingReferenceChanging(value);
                    this.SendPropertyChanging("PackingReference");
                    this._PackingReference = value;
                    this.SendPropertyChanged("PackingReference");
                    this.OnPackingReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackingWeight in the schema.
        /// </summary>
        [Column(Name = @"packing_weight", Storage = "_PackingWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackingWeight
        {
            get
            {
                return this._PackingWeight;
            }
            set
            {
                if (this._PackingWeight != value)
                {
                    this.OnPackingWeightChanging(value);
                    this.SendPropertyChanging("PackingWeight");
                    this._PackingWeight = value;
                    this.SendPropertyChanged("PackingWeight");
                    this.OnPackingWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaterialCost in the schema.
        /// </summary>
        [Column(Name = @"material_cost", Storage = "_MaterialCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MaterialCost
        {
            get
            {
                return this._MaterialCost;
            }
            set
            {
                if (this._MaterialCost != value)
                {
                    this.OnMaterialCostChanging(value);
                    this.SendPropertyChanging("MaterialCost");
                    this._MaterialCost = value;
                    this.SendPropertyChanged("MaterialCost");
                    this.OnMaterialCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportCost in the schema.
        /// </summary>
        [Column(Name = @"transport_cost", Storage = "_TransportCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportCost
        {
            get
            {
                return this._TransportCost;
            }
            set
            {
                if (this._TransportCost != value)
                {
                    this.OnTransportCostChanging(value);
                    this.SendPropertyChanging("TransportCost");
                    this._TransportCost = value;
                    this.SendPropertyChanged("TransportCost");
                    this.OnTransportCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionCost in the schema.
        /// </summary>
        [Column(Name = @"production_cost", Storage = "_ProductionCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionCost
        {
            get
            {
                return this._ProductionCost;
            }
            set
            {
                if (this._ProductionCost != value)
                {
                    this.OnProductionCostChanging(value);
                    this.SendPropertyChanging("ProductionCost");
                    this._ProductionCost = value;
                    this.SendPropertyChanged("ProductionCost");
                    this.OnProductionCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MiscellaneousCost in the schema.
        /// </summary>
        [Column(Name = @"miscellaneous_cost", Storage = "_MiscellaneousCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MiscellaneousCost
        {
            get
            {
                return this._MiscellaneousCost;
            }
            set
            {
                if (this._MiscellaneousCost != value)
                {
                    this.OnMiscellaneousCostChanging(value);
                    this.SendPropertyChanging("MiscellaneousCost");
                    this._MiscellaneousCost = value;
                    this.SendPropertyChanged("MiscellaneousCost");
                    this.OnMiscellaneousCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SurchargeCost in the schema.
        /// </summary>
        [Column(Name = @"surcharge_cost", Storage = "_SurchargeCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SurchargeCost
        {
            get
            {
                return this._SurchargeCost;
            }
            set
            {
                if (this._SurchargeCost != value)
                {
                    this.OnSurchargeCostChanging(value);
                    this.SendPropertyChanging("SurchargeCost");
                    this._SurchargeCost = value;
                    this.SendPropertyChanged("SurchargeCost");
                    this.OnSurchargeCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaterialValue in the schema.
        /// </summary>
        [Column(Name = @"material_value", Storage = "_MaterialValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MaterialValue
        {
            get
            {
                return this._MaterialValue;
            }
            set
            {
                if (this._MaterialValue != value)
                {
                    this.OnMaterialValueChanging(value);
                    this.SendPropertyChanging("MaterialValue");
                    this._MaterialValue = value;
                    this.SendPropertyChanged("MaterialValue");
                    this.OnMaterialValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportValue in the schema.
        /// </summary>
        [Column(Name = @"transport_value", Storage = "_TransportValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportValue
        {
            get
            {
                return this._TransportValue;
            }
            set
            {
                if (this._TransportValue != value)
                {
                    this.OnTransportValueChanging(value);
                    this.SendPropertyChanging("TransportValue");
                    this._TransportValue = value;
                    this.SendPropertyChanged("TransportValue");
                    this.OnTransportValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionValue in the schema.
        /// </summary>
        [Column(Name = @"production_value", Storage = "_ProductionValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionValue
        {
            get
            {
                return this._ProductionValue;
            }
            set
            {
                if (this._ProductionValue != value)
                {
                    this.OnProductionValueChanging(value);
                    this.SendPropertyChanging("ProductionValue");
                    this._ProductionValue = value;
                    this.SendPropertyChanged("ProductionValue");
                    this.OnProductionValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MiscellaneousValue in the schema.
        /// </summary>
        [Column(Name = @"miscellaneous_value", Storage = "_MiscellaneousValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MiscellaneousValue
        {
            get
            {
                return this._MiscellaneousValue;
            }
            set
            {
                if (this._MiscellaneousValue != value)
                {
                    this.OnMiscellaneousValueChanging(value);
                    this.SendPropertyChanging("MiscellaneousValue");
                    this._MiscellaneousValue = value;
                    this.SendPropertyChanged("MiscellaneousValue");
                    this.OnMiscellaneousValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SurchargeValue in the schema.
        /// </summary>
        [Column(Name = @"surcharge_value", Storage = "_SurchargeValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SurchargeValue
        {
            get
            {
                return this._SurchargeValue;
            }
            set
            {
                if (this._SurchargeValue != value)
                {
                    this.OnSurchargeValueChanging(value);
                    this.SendPropertyChanging("SurchargeValue");
                    this._SurchargeValue = value;
                    this.SendPropertyChanged("SurchargeValue");
                    this.OnSurchargeValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalMaterialCost in the schema.
        /// </summary>
        [Column(Name = @"original_material_cost", Storage = "_OriginalMaterialCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalMaterialCost
        {
            get
            {
                return this._OriginalMaterialCost;
            }
            set
            {
                if (this._OriginalMaterialCost != value)
                {
                    this.OnOriginalMaterialCostChanging(value);
                    this.SendPropertyChanging("OriginalMaterialCost");
                    this._OriginalMaterialCost = value;
                    this.SendPropertyChanged("OriginalMaterialCost");
                    this.OnOriginalMaterialCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalTransportCost in the schema.
        /// </summary>
        [Column(Name = @"original_transport_cost", Storage = "_OriginalTransportCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalTransportCost
        {
            get
            {
                return this._OriginalTransportCost;
            }
            set
            {
                if (this._OriginalTransportCost != value)
                {
                    this.OnOriginalTransportCostChanging(value);
                    this.SendPropertyChanging("OriginalTransportCost");
                    this._OriginalTransportCost = value;
                    this.SendPropertyChanged("OriginalTransportCost");
                    this.OnOriginalTransportCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalProductionCost in the schema.
        /// </summary>
        [Column(Name = @"original_production_cost", Storage = "_OriginalProductionCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalProductionCost
        {
            get
            {
                return this._OriginalProductionCost;
            }
            set
            {
                if (this._OriginalProductionCost != value)
                {
                    this.OnOriginalProductionCostChanging(value);
                    this.SendPropertyChanging("OriginalProductionCost");
                    this._OriginalProductionCost = value;
                    this.SendPropertyChanged("OriginalProductionCost");
                    this.OnOriginalProductionCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalMiscellaneousCost in the schema.
        /// </summary>
        [Column(Name = @"original_miscellaneous_cost", Storage = "_OriginalMiscellaneousCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalMiscellaneousCost
        {
            get
            {
                return this._OriginalMiscellaneousCost;
            }
            set
            {
                if (this._OriginalMiscellaneousCost != value)
                {
                    this.OnOriginalMiscellaneousCostChanging(value);
                    this.SendPropertyChanging("OriginalMiscellaneousCost");
                    this._OriginalMiscellaneousCost = value;
                    this.SendPropertyChanged("OriginalMiscellaneousCost");
                    this.OnOriginalMiscellaneousCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalSurchargeCost in the schema.
        /// </summary>
        [Column(Name = @"original_surcharge_cost", Storage = "_OriginalSurchargeCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalSurchargeCost
        {
            get
            {
                return this._OriginalSurchargeCost;
            }
            set
            {
                if (this._OriginalSurchargeCost != value)
                {
                    this.OnOriginalSurchargeCostChanging(value);
                    this.SendPropertyChanging("OriginalSurchargeCost");
                    this._OriginalSurchargeCost = value;
                    this.SendPropertyChanged("OriginalSurchargeCost");
                    this.OnOriginalSurchargeCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockStatusId in the schema.
        /// </summary>
        [Column(Name = @"stock_status_id", Storage = "_StockStatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockStatusId
        {
            get
            {
                return this._StockStatusId;
            }
            set
            {
                if (this._StockStatusId != value)
                {
                    this.OnStockStatusIdChanging(value);
                    this.SendPropertyChanging("StockStatusId");
                    this._StockStatusId = value;
                    this.SendPropertyChanged("StockStatusId");
                    this.OnStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging("CustomerId");
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartSpecificationId in the schema.
        /// </summary>
        [Column(Name = @"part_specification_id", Storage = "_PartSpecificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartSpecificationId
        {
            get
            {
                return this._PartSpecificationId;
            }
            set
            {
                if (this._PartSpecificationId != value)
                {
                    this.OnPartSpecificationIdChanging(value);
                    this.SendPropertyChanging("PartSpecificationId");
                    this._PartSpecificationId = value;
                    this.SendPropertyChanged("PartSpecificationId");
                    this.OnPartSpecificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionItem in the schema.
        /// </summary>
        [Column(Name = @"production_item", Storage = "_ProductionItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionItem
        {
            get
            {
                return this._ProductionItem;
            }
            set
            {
                if (this._ProductionItem != value)
                {
                    this.OnProductionItemChanging(value);
                    this.SendPropertyChanging("ProductionItem");
                    this._ProductionItem = value;
                    this.SendPropertyChanged("ProductionItem");
                    this.OnProductionItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Name = @"""location""", Storage = "_Location", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging("Location");
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Name = @"notes", Storage = "_Note", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging("Note");
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdentifyingMarkId in the schema.
        /// </summary>
        [Column(Name = @"identifying_mark_id", Storage = "_IdentifyingMarkId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdentifyingMarkId
        {
            get
            {
                return this._IdentifyingMarkId;
            }
            set
            {
                if (this._IdentifyingMarkId != value)
                {
                    this.OnIdentifyingMarkIdChanging(value);
                    this.SendPropertyChanging("IdentifyingMarkId");
                    this._IdentifyingMarkId = value;
                    this.SendPropertyChanged("IdentifyingMarkId");
                    this.OnIdentifyingMarkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue1 in the schema.
        /// </summary>
        [Column(Name = @"specification_value1", Storage = "_SpecificationValue1", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue1
        {
            get
            {
                return this._SpecificationValue1;
            }
            set
            {
                if (this._SpecificationValue1 != value)
                {
                    this.OnSpecificationValue1Changing(value);
                    this.SendPropertyChanging("SpecificationValue1");
                    this._SpecificationValue1 = value;
                    this.SendPropertyChanged("SpecificationValue1");
                    this.OnSpecificationValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue2 in the schema.
        /// </summary>
        [Column(Name = @"specification_value2", Storage = "_SpecificationValue2", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue2
        {
            get
            {
                return this._SpecificationValue2;
            }
            set
            {
                if (this._SpecificationValue2 != value)
                {
                    this.OnSpecificationValue2Changing(value);
                    this.SendPropertyChanging("SpecificationValue2");
                    this._SpecificationValue2 = value;
                    this.SendPropertyChanged("SpecificationValue2");
                    this.OnSpecificationValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue3 in the schema.
        /// </summary>
        [Column(Name = @"specification_value3", Storage = "_SpecificationValue3", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue3
        {
            get
            {
                return this._SpecificationValue3;
            }
            set
            {
                if (this._SpecificationValue3 != value)
                {
                    this.OnSpecificationValue3Changing(value);
                    this.SendPropertyChanging("SpecificationValue3");
                    this._SpecificationValue3 = value;
                    this.SendPropertyChanged("SpecificationValue3");
                    this.OnSpecificationValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue4 in the schema.
        /// </summary>
        [Column(Name = @"specification_value4", Storage = "_SpecificationValue4", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue4
        {
            get
            {
                return this._SpecificationValue4;
            }
            set
            {
                if (this._SpecificationValue4 != value)
                {
                    this.OnSpecificationValue4Changing(value);
                    this.SendPropertyChanging("SpecificationValue4");
                    this._SpecificationValue4 = value;
                    this.SendPropertyChanged("SpecificationValue4");
                    this.OnSpecificationValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue5 in the schema.
        /// </summary>
        [Column(Name = @"specification_value5", Storage = "_SpecificationValue5", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue5
        {
            get
            {
                return this._SpecificationValue5;
            }
            set
            {
                if (this._SpecificationValue5 != value)
                {
                    this.OnSpecificationValue5Changing(value);
                    this.SendPropertyChanging("SpecificationValue5");
                    this._SpecificationValue5 = value;
                    this.SendPropertyChanged("SpecificationValue5");
                    this.OnSpecificationValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Name = @"parent_id", Storage = "_ParentId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    if (this._StockItem_ParentId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging("ParentId");
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalParentId in the schema.
        /// </summary>
        [Column(Name = @"original_parent_id", Storage = "_OriginalParentId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OriginalParentId
        {
            get
            {
                return this._OriginalParentId;
            }
            set
            {
                if (this._OriginalParentId != value)
                {
                    if (this._StockItem_OriginalParentId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOriginalParentIdChanging(value);
                    this.SendPropertyChanging("OriginalParentId");
                    this._OriginalParentId = value;
                    this.SendPropertyChanged("OriginalParentId");
                    this.OnOriginalParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationTransactionItemId in the schema.
        /// </summary>
        [Column(Name = @"creation_transaction_item_id", Storage = "_CreationTransactionItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreationTransactionItemId
        {
            get
            {
                return this._CreationTransactionItemId;
            }
            set
            {
                if (this._CreationTransactionItemId != value)
                {
                    this.OnCreationTransactionItemIdChanging(value);
                    this.SendPropertyChanging("CreationTransactionItemId");
                    this._CreationTransactionItemId = value;
                    this.SendPropertyChanged("CreationTransactionItemId");
                    this.OnCreationTransactionItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedPiece in the schema.
        /// </summary>
        [Column(Name = @"reserved_pieces", Storage = "_ReservedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ReservedPiece
        {
            get
            {
                return this._ReservedPiece;
            }
            set
            {
                if (this._ReservedPiece != value)
                {
                    this.OnReservedPieceChanging(value);
                    this.SendPropertyChanging("ReservedPiece");
                    this._ReservedPiece = value;
                    this.SendPropertyChanged("ReservedPiece");
                    this.OnReservedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedWeight in the schema.
        /// </summary>
        [Column(Name = @"reserved_weight", Storage = "_ReservedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ReservedWeight
        {
            get
            {
                return this._ReservedWeight;
            }
            set
            {
                if (this._ReservedWeight != value)
                {
                    this.OnReservedWeightChanging(value);
                    this.SendPropertyChanging("ReservedWeight");
                    this._ReservedWeight = value;
                    this.SendPropertyChanged("ReservedWeight");
                    this.OnReservedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedQuantity in the schema.
        /// </summary>
        [Column(Name = @"reserved_quantity", Storage = "_ReservedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ReservedQuantity
        {
            get
            {
                return this._ReservedQuantity;
            }
            set
            {
                if (this._ReservedQuantity != value)
                {
                    this.OnReservedQuantityChanging(value);
                    this.SendPropertyChanging("ReservedQuantity");
                    this._ReservedQuantity = value;
                    this.SendPropertyChanged("ReservedQuantity");
                    this.OnReservedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoldDate in the schema.
        /// </summary>
        [Column(Name = @"hold_date", Storage = "_HoldDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> HoldDate
        {
            get
            {
                return this._HoldDate;
            }
            set
            {
                if (this._HoldDate != value)
                {
                    this.OnHoldDateChanging(value);
                    this.SendPropertyChanging("HoldDate");
                    this._HoldDate = value;
                    this.SendPropertyChanged("HoldDate");
                    this.OnHoldDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoldReasonId in the schema.
        /// </summary>
        [Column(Name = @"hold_reason_id", Storage = "_HoldReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> HoldReasonId
        {
            get
            {
                return this._HoldReasonId;
            }
            set
            {
                if (this._HoldReasonId != value)
                {
                    if (this._StockHoldReason.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnHoldReasonIdChanging(value);
                    this.SendPropertyChanging("HoldReasonId");
                    this._HoldReasonId = value;
                    this.SendPropertyChanged("HoldReasonId");
                    this.OnHoldReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoldDescription in the schema.
        /// </summary>
        [Column(Name = @"hold_description", Storage = "_HoldDescription", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string HoldDescription
        {
            get
            {
                return this._HoldDescription;
            }
            set
            {
                if (this._HoldDescription != value)
                {
                    this.OnHoldDescriptionChanging(value);
                    this.SendPropertyChanging("HoldDescription");
                    this._HoldDescription = value;
                    this.SendPropertyChanged("HoldDescription");
                    this.OnHoldDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoldUserId in the schema.
        /// </summary>
        [Column(Name = @"hold_user_id", Storage = "_HoldUserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> HoldUserId
        {
            get
            {
                return this._HoldUserId;
            }
            set
            {
                if (this._HoldUserId != value)
                {
                    if (this._Personnel.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnHoldUserIdChanging(value);
                    this.SendPropertyChanging("HoldUserId");
                    this._HoldUserId = value;
                    this.SendPropertyChanged("HoldUserId");
                    this.OnHoldUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemId in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_id", Storage = "_PurchaseItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseItemId
        {
            get
            {
                return this._PurchaseItemId;
            }
            set
            {
                if (this._PurchaseItemId != value)
                {
                    this.OnPurchaseItemIdChanging(value);
                    this.SendPropertyChanging("PurchaseItemId");
                    this._PurchaseItemId = value;
                    this.SendPropertyChanged("PurchaseItemId");
                    this.OnPurchaseItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue6 in the schema.
        /// </summary>
        [Column(Name = @"specification_value6", Storage = "_SpecificationValue6", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue6
        {
            get
            {
                return this._SpecificationValue6;
            }
            set
            {
                if (this._SpecificationValue6 != value)
                {
                    this.OnSpecificationValue6Changing(value);
                    this.SendPropertyChanging("SpecificationValue6");
                    this._SpecificationValue6 = value;
                    this.SendPropertyChanged("SpecificationValue6");
                    this.OnSpecificationValue6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue7 in the schema.
        /// </summary>
        [Column(Name = @"specification_value7", Storage = "_SpecificationValue7", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue7
        {
            get
            {
                return this._SpecificationValue7;
            }
            set
            {
                if (this._SpecificationValue7 != value)
                {
                    this.OnSpecificationValue7Changing(value);
                    this.SendPropertyChanging("SpecificationValue7");
                    this._SpecificationValue7 = value;
                    this.SendPropertyChanged("SpecificationValue7");
                    this.OnSpecificationValue7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue8 in the schema.
        /// </summary>
        [Column(Name = @"specification_value8", Storage = "_SpecificationValue8", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue8
        {
            get
            {
                return this._SpecificationValue8;
            }
            set
            {
                if (this._SpecificationValue8 != value)
                {
                    this.OnSpecificationValue8Changing(value);
                    this.SendPropertyChanging("SpecificationValue8");
                    this._SpecificationValue8 = value;
                    this.SendPropertyChanged("SpecificationValue8");
                    this.OnSpecificationValue8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue9 in the schema.
        /// </summary>
        [Column(Name = @"specification_value9", Storage = "_SpecificationValue9", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue9
        {
            get
            {
                return this._SpecificationValue9;
            }
            set
            {
                if (this._SpecificationValue9 != value)
                {
                    this.OnSpecificationValue9Changing(value);
                    this.SendPropertyChanging("SpecificationValue9");
                    this._SpecificationValue9 = value;
                    this.SendPropertyChanged("SpecificationValue9");
                    this.OnSpecificationValue9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue10 in the schema.
        /// </summary>
        [Column(Name = @"specification_value10", Storage = "_SpecificationValue10", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue10
        {
            get
            {
                return this._SpecificationValue10;
            }
            set
            {
                if (this._SpecificationValue10 != value)
                {
                    this.OnSpecificationValue10Changing(value);
                    this.SendPropertyChanging("SpecificationValue10");
                    this._SpecificationValue10 = value;
                    this.SendPropertyChanged("SpecificationValue10");
                    this.OnSpecificationValue10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification1Id in the schema.
        /// </summary>
        [Column(Name = @"specification1_id", Storage = "_Specification1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification1Id
        {
            get
            {
                return this._Specification1Id;
            }
            set
            {
                if (this._Specification1Id != value)
                {
                    this.OnSpecification1IdChanging(value);
                    this.SendPropertyChanging("Specification1Id");
                    this._Specification1Id = value;
                    this.SendPropertyChanged("Specification1Id");
                    this.OnSpecification1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification2Id in the schema.
        /// </summary>
        [Column(Name = @"specification2_id", Storage = "_Specification2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification2Id
        {
            get
            {
                return this._Specification2Id;
            }
            set
            {
                if (this._Specification2Id != value)
                {
                    this.OnSpecification2IdChanging(value);
                    this.SendPropertyChanging("Specification2Id");
                    this._Specification2Id = value;
                    this.SendPropertyChanged("Specification2Id");
                    this.OnSpecification2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification3Id in the schema.
        /// </summary>
        [Column(Name = @"specification3_id", Storage = "_Specification3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification3Id
        {
            get
            {
                return this._Specification3Id;
            }
            set
            {
                if (this._Specification3Id != value)
                {
                    this.OnSpecification3IdChanging(value);
                    this.SendPropertyChanging("Specification3Id");
                    this._Specification3Id = value;
                    this.SendPropertyChanged("Specification3Id");
                    this.OnSpecification3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification4Id in the schema.
        /// </summary>
        [Column(Name = @"specification4_id", Storage = "_Specification4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification4Id
        {
            get
            {
                return this._Specification4Id;
            }
            set
            {
                if (this._Specification4Id != value)
                {
                    this.OnSpecification4IdChanging(value);
                    this.SendPropertyChanging("Specification4Id");
                    this._Specification4Id = value;
                    this.SendPropertyChanged("Specification4Id");
                    this.OnSpecification4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification5Id in the schema.
        /// </summary>
        [Column(Name = @"specification5_id", Storage = "_Specification5Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification5Id
        {
            get
            {
                return this._Specification5Id;
            }
            set
            {
                if (this._Specification5Id != value)
                {
                    this.OnSpecification5IdChanging(value);
                    this.SendPropertyChanging("Specification5Id");
                    this._Specification5Id = value;
                    this.SendPropertyChanged("Specification5Id");
                    this.OnSpecification5IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification6Id in the schema.
        /// </summary>
        [Column(Name = @"specification6_id", Storage = "_Specification6Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification6Id
        {
            get
            {
                return this._Specification6Id;
            }
            set
            {
                if (this._Specification6Id != value)
                {
                    this.OnSpecification6IdChanging(value);
                    this.SendPropertyChanging("Specification6Id");
                    this._Specification6Id = value;
                    this.SendPropertyChanged("Specification6Id");
                    this.OnSpecification6IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification7Id in the schema.
        /// </summary>
        [Column(Name = @"specification7_id", Storage = "_Specification7Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification7Id
        {
            get
            {
                return this._Specification7Id;
            }
            set
            {
                if (this._Specification7Id != value)
                {
                    this.OnSpecification7IdChanging(value);
                    this.SendPropertyChanging("Specification7Id");
                    this._Specification7Id = value;
                    this.SendPropertyChanged("Specification7Id");
                    this.OnSpecification7IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification8Id in the schema.
        /// </summary>
        [Column(Name = @"specification8_id", Storage = "_Specification8Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification8Id
        {
            get
            {
                return this._Specification8Id;
            }
            set
            {
                if (this._Specification8Id != value)
                {
                    this.OnSpecification8IdChanging(value);
                    this.SendPropertyChanging("Specification8Id");
                    this._Specification8Id = value;
                    this.SendPropertyChanged("Specification8Id");
                    this.OnSpecification8IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification9Id in the schema.
        /// </summary>
        [Column(Name = @"specification9_id", Storage = "_Specification9Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification9Id
        {
            get
            {
                return this._Specification9Id;
            }
            set
            {
                if (this._Specification9Id != value)
                {
                    this.OnSpecification9IdChanging(value);
                    this.SendPropertyChanging("Specification9Id");
                    this._Specification9Id = value;
                    this.SendPropertyChanged("Specification9Id");
                    this.OnSpecification9IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification10Id in the schema.
        /// </summary>
        [Column(Name = @"specification10_id", Storage = "_Specification10Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification10Id
        {
            get
            {
                return this._Specification10Id;
            }
            set
            {
                if (this._Specification10Id != value)
                {
                    this.OnSpecification10IdChanging(value);
                    this.SendPropertyChanging("Specification10Id");
                    this._Specification10Id = value;
                    this.SendPropertyChanged("Specification10Id");
                    this.OnSpecification10IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim1_type_id", Storage = "_Dim1TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1TypeId
        {
            get
            {
                return this._Dim1TypeId;
            }
            set
            {
                if (this._Dim1TypeId != value)
                {
                    this.OnDim1TypeIdChanging(value);
                    this.SendPropertyChanging("Dim1TypeId");
                    this._Dim1TypeId = value;
                    this.SendPropertyChanged("Dim1TypeId");
                    this.OnDim1TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim2_type_id", Storage = "_Dim2TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2TypeId
        {
            get
            {
                return this._Dim2TypeId;
            }
            set
            {
                if (this._Dim2TypeId != value)
                {
                    this.OnDim2TypeIdChanging(value);
                    this.SendPropertyChanging("Dim2TypeId");
                    this._Dim2TypeId = value;
                    this.SendPropertyChanged("Dim2TypeId");
                    this.OnDim2TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim3_type_id", Storage = "_Dim3TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3TypeId
        {
            get
            {
                return this._Dim3TypeId;
            }
            set
            {
                if (this._Dim3TypeId != value)
                {
                    this.OnDim3TypeIdChanging(value);
                    this.SendPropertyChanging("Dim3TypeId");
                    this._Dim3TypeId = value;
                    this.SendPropertyChanged("Dim3TypeId");
                    this.OnDim3TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim4_type_id", Storage = "_Dim4TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4TypeId
        {
            get
            {
                return this._Dim4TypeId;
            }
            set
            {
                if (this._Dim4TypeId != value)
                {
                    this.OnDim4TypeIdChanging(value);
                    this.SendPropertyChanging("Dim4TypeId");
                    this._Dim4TypeId = value;
                    this.SendPropertyChanged("Dim4TypeId");
                    this.OnDim4TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim5_type_id", Storage = "_Dim5TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5TypeId
        {
            get
            {
                return this._Dim5TypeId;
            }
            set
            {
                if (this._Dim5TypeId != value)
                {
                    this.OnDim5TypeIdChanging(value);
                    this.SendPropertyChanging("Dim5TypeId");
                    this._Dim5TypeId = value;
                    this.SendPropertyChanged("Dim5TypeId");
                    this.OnDim5TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomersOwn in the schema.
        /// </summary>
        [Column(Name = @"customers_own", Storage = "_CustomersOwn", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CustomersOwn
        {
            get
            {
                return this._CustomersOwn;
            }
            set
            {
                if (this._CustomersOwn != value)
                {
                    this.OnCustomersOwnChanging(value);
                    this.SendPropertyChanging("CustomersOwn");
                    this._CustomersOwn = value;
                    this.SendPropertyChanged("CustomersOwn");
                    this.OnCustomersOwnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastCheckedDate in the schema.
        /// </summary>
        [Column(Name = @"last_checked_date", Storage = "_LastCheckedDate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastCheckedDate
        {
            get
            {
                return this._LastCheckedDate;
            }
            set
            {
                if (this._LastCheckedDate != value)
                {
                    this.OnLastCheckedDateChanging(value);
                    this.SendPropertyChanging("LastCheckedDate");
                    this._LastCheckedDate = value;
                    this.SendPropertyChanged("LastCheckedDate");
                    this.OnLastCheckedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixDate in the schema.
        /// </summary>
        [Column(Name = @"fix_date", Storage = "_FixDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> FixDate
        {
            get
            {
                return this._FixDate;
            }
            set
            {
                if (this._FixDate != value)
                {
                    this.OnFixDateChanging(value);
                    this.SendPropertyChanging("FixDate");
                    this._FixDate = value;
                    this.SendPropertyChanged("FixDate");
                    this.OnFixDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NonTraceable in the schema.
        /// </summary>
        [Column(Name = @"non_traceable", Storage = "_NonTraceable", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> NonTraceable
        {
            get
            {
                return this._NonTraceable;
            }
            set
            {
                if (this._NonTraceable != value)
                {
                    this.OnNonTraceableChanging(value);
                    this.SendPropertyChanging("NonTraceable");
                    this._NonTraceable = value;
                    this.SendPropertyChanged("NonTraceable");
                    this.OnNonTraceableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificateOfConformityReference in the schema.
        /// </summary>
        [Column(Name = @"certificate_of_conformity_reference", Storage = "_CertificateOfConformityReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CertificateOfConformityReference
        {
            get
            {
                return this._CertificateOfConformityReference;
            }
            set
            {
                if (this._CertificateOfConformityReference != value)
                {
                    this.OnCertificateOfConformityReferenceChanging(value);
                    this.SendPropertyChanging("CertificateOfConformityReference");
                    this._CertificateOfConformityReference = value;
                    this.SendPropertyChanged("CertificateOfConformityReference");
                    this.OnCertificateOfConformityReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestNumber in the schema.
        /// </summary>
        [Column(Name = @"test_number", Storage = "_TestNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string TestNumber
        {
            get
            {
                return this._TestNumber;
            }
            set
            {
                if (this._TestNumber != value)
                {
                    this.OnTestNumberChanging(value);
                    this.SendPropertyChanging("TestNumber");
                    this._TestNumber = value;
                    this.SendPropertyChanged("TestNumber");
                    this.OnTestNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TreatmentNumber in the schema.
        /// </summary>
        [Column(Name = @"treatment_number", Storage = "_TreatmentNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string TreatmentNumber
        {
            get
            {
                return this._TreatmentNumber;
            }
            set
            {
                if (this._TreatmentNumber != value)
                {
                    this.OnTreatmentNumberChanging(value);
                    this.SendPropertyChanging("TreatmentNumber");
                    this._TreatmentNumber = value;
                    this.SendPropertyChanged("TreatmentNumber");
                    this.OnTreatmentNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DutyPercentage in the schema.
        /// </summary>
        [Column(Name = @"duty_percentage", Storage = "_DutyPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DutyPercentage
        {
            get
            {
                return this._DutyPercentage;
            }
            set
            {
                if (this._DutyPercentage != value)
                {
                    this.OnDutyPercentageChanging(value);
                    this.SendPropertyChanging("DutyPercentage");
                    this._DutyPercentage = value;
                    this.SendPropertyChanged("DutyPercentage");
                    this.OnDutyPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem_OriginalParentId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockItem_StockItem", Storage="_StockItem_OriginalParentId1", ThisKey="Id", OtherKey="OriginalParentId", DeleteRule="NO ACTION")]
        public EntitySet<StockItem> StockItem_OriginalParentId1
        {
            get
            {
                return this._StockItem_OriginalParentId1;
            }
            set
            {
                this._StockItem_OriginalParentId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem_OriginalParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockItem_StockItem", Storage="_StockItem_OriginalParentId", ThisKey="OriginalParentId", OtherKey="Id", IsForeignKey=true)]
        public StockItem StockItem_OriginalParentId
        {
            get
            {
                return this._StockItem_OriginalParentId.Entity;
            }
            set
            {
                StockItem previousValue = this._StockItem_OriginalParentId.Entity;
                if ((previousValue != value) || (this._StockItem_OriginalParentId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockItem_OriginalParentId");
                    if (previousValue != null)
                    {
                        this._StockItem_OriginalParentId.Entity = null;
                        previousValue.StockItem_OriginalParentId1.Remove(this);
                    }
                    this._StockItem_OriginalParentId.Entity = value;
                    if (value != null)
                    {
                        this._OriginalParentId = value.Id;
                        value.StockItem_OriginalParentId1.Add(this);
                    }
                    else
                    {
                        this._OriginalParentId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockItem_OriginalParentId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem_ParentId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockItem_StockItem1", Storage="_StockItem_ParentId1", ThisKey="Id", OtherKey="ParentId", DeleteRule="NO ACTION")]
        public EntitySet<StockItem> StockItem_ParentId1
        {
            get
            {
                return this._StockItem_ParentId1;
            }
            set
            {
                this._StockItem_ParentId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockItem_StockItem1", Storage="_StockItem_ParentId", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
        public StockItem StockItem_ParentId
        {
            get
            {
                return this._StockItem_ParentId.Entity;
            }
            set
            {
                StockItem previousValue = this._StockItem_ParentId.Entity;
                if ((previousValue != value) || (this._StockItem_ParentId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockItem_ParentId");
                    if (previousValue != null)
                    {
                        this._StockItem_ParentId.Entity = null;
                        previousValue.StockItem_ParentId1.Remove(this);
                    }
                    this._StockItem_ParentId.Entity = value;
                    if (value != null)
                    {
                        this._ParentId = value.Id;
                        value.StockItem_ParentId1.Add(this);
                    }
                    else
                    {
                        this._ParentId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockItem_ParentId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_StockItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.StockItem.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.StockItem.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCast in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockCast_StockItem", Storage="_StockCast", ThisKey="StockCastId", OtherKey="Id", IsForeignKey=true)]
        public StockCast StockCast
        {
            get
            {
                return this._StockCast.Entity;
            }
            set
            {
                StockCast previousValue = this._StockCast.Entity;
                if ((previousValue != value) || (this._StockCast.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockCast");
                    if (previousValue != null)
                    {
                        this._StockCast.Entity = null;
                        previousValue.StockItem.Remove(this);
                    }
                    this._StockCast.Entity = value;
                    if (value != null)
                    {
                        this._StockCastId = value.Id;
                        value.StockItem.Add(this);
                    }
                    else
                    {
                        this._StockCastId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockCast");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Warehouse in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_StockItem", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Warehouse");
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.StockItem.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        this._WarehouseId = value.Id;
                        value.StockItem.Add(this);
                    }
                    else
                    {
                        this._WarehouseId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockHoldReason in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockHoldReason_StockItem", Storage="_StockHoldReason", ThisKey="HoldReasonId", OtherKey="Id", IsForeignKey=true)]
        public StockHoldReason StockHoldReason
        {
            get
            {
                return this._StockHoldReason.Entity;
            }
            set
            {
                StockHoldReason previousValue = this._StockHoldReason.Entity;
                if ((previousValue != value) || (this._StockHoldReason.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockHoldReason");
                    if (previousValue != null)
                    {
                        this._StockHoldReason.Entity = null;
                        previousValue.StockItem.Remove(this);
                    }
                    this._StockHoldReason.Entity = value;
                    if (value != null)
                    {
                        this._HoldReasonId = value.Id;
                        value.StockItem.Add(this);
                    }
                    else
                    {
                        this._HoldReasonId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockHoldReason");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personnel in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_StockItem", Storage="_Personnel", ThisKey="HoldUserId", OtherKey="Id", IsForeignKey=true)]
        public Personnel Personnel
        {
            get
            {
                return this._Personnel.Entity;
            }
            set
            {
                Personnel previousValue = this._Personnel.Entity;
                if ((previousValue != value) || (this._Personnel.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Personnel");
                    if (previousValue != null)
                    {
                        this._Personnel.Entity = null;
                        previousValue.StockItem.Remove(this);
                    }
                    this._Personnel.Entity = value;
                    if (value != null)
                    {
                        this._HoldUserId = value.Id;
                        value.StockItem.Add(this);
                    }
                    else
                    {
                        this._HoldUserId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Personnel");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StockItem_OriginalParentId1(StockItem entity)
        {
            this.SendPropertyChanging("StockItem_OriginalParentId1");
            entity.StockItem_OriginalParentId = this;
        }
    
        private void detach_StockItem_OriginalParentId1(StockItem entity)
        {
            this.SendPropertyChanging("StockItem_OriginalParentId1");
            entity.StockItem_OriginalParentId = null;
        }

        private void attach_StockItem_ParentId1(StockItem entity)
        {
            this.SendPropertyChanging("StockItem_ParentId1");
            entity.StockItem_ParentId = this;
        }
    
        private void detach_StockItem_ParentId1(StockItem entity)
        {
            this.SendPropertyChanging("StockItem_ParentId1");
            entity.StockItem_ParentId = null;
        }
    }

}
