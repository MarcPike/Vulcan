//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.ProductCategory in the schema.
    /// </summary>
    [Table(Name = @"public.product_categories")]
    public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Category;

        private string _Base;

        private string _Form;

        private System.Nullable<int> _ProductControlId;

        private System.Nullable<int> _SequenceNumber;

        private string _Description;

        private System.Nullable<decimal> _VolumeDensity;

        private System.Nullable<int> _StockTypeId;

        private System.Nullable<int> _Analysis1Id;

        private System.Nullable<int> _Analysis2Id;

        private System.Nullable<int> _VatType1Id;

        private System.Nullable<int> _VatType2Id;

        private System.Nullable<int> _VatType3Id;

        private System.Nullable<int> _VatType4Id;

        private System.Nullable<bool> _DynamicDensity;

        private System.Nullable<bool> _AverageCost;

        private System.Nullable<int> _QuantityEntryId;

        private System.Nullable<bool> _ManualGuideCost;

        private System.Nullable<int> _SalesNominalId;

        private System.Nullable<int> _SalesCostCentreId;

        private System.Nullable<int> _CostNominalId;

        private System.Nullable<int> _CostCostCentreId;

        private System.Nullable<int> _StockNominalId;

        private System.Nullable<int> _StockCostCentreId;

        private System.Nullable<int> _PriceUnitId;

        private System.Nullable<int> _BuyUnitId;

        private System.Nullable<int> _CostUnitId;

        private System.Nullable<int> _SalesQuantityUnitId;

        private System.Nullable<int> _BuyingQuantityUnitId;

        private System.Nullable<int> _PriceDecimal;

        private string _PiecesLabel;

        private string _PiecesPluralLabel;

        private System.Nullable<int> _DefaultStockStatusId;

        private System.Nullable<int> _SourceCategoryId;

        private System.Nullable<int> _Specification1Id;

        private System.Nullable<bool> _ValidateSpecification1 = false;

        private System.Nullable<int> _Specification2Id;

        private System.Nullable<bool> _ValidateSpecification2 = false;

        private System.Nullable<int> _Specification3Id;

        private System.Nullable<bool> _ValidateSpecification3 = false;

        private System.Nullable<int> _Specification4Id;

        private System.Nullable<bool> _ValidateSpecification4 = false;

        private System.Nullable<int> _Specification5Id;

        private System.Nullable<bool> _ValidateSpecification5 = false;

        private System.Nullable<bool> _Dim1GrainFlow;

        private System.Nullable<decimal> _Dim1PositiveTolerance;

        private System.Nullable<decimal> _Dim1NegativeTolerance;

        private System.Nullable<int> _Dim1Decimal;

        private System.Nullable<bool> _Dim1UseInDescription;

        private System.Nullable<bool> _Dim1UseDimName;

        private System.Nullable<bool> _Dim2GrainFlow;

        private System.Nullable<decimal> _Dim2PositiveTolerance;

        private System.Nullable<decimal> _Dim2NegativeTolerance;

        private System.Nullable<int> _Dim2Decimal;

        private System.Nullable<bool> _Dim2UseInDescription;

        private System.Nullable<bool> _Dim2UseDimName;

        private System.Nullable<bool> _Dim3GrainFlow;

        private System.Nullable<decimal> _Dim3PositiveTolerance;

        private System.Nullable<decimal> _Dim3NegativeTolerance;

        private System.Nullable<int> _Dim3Decimal;

        private System.Nullable<bool> _Dim3UseInDescription;

        private System.Nullable<bool> _Dim3UseDimName;

        private System.Nullable<bool> _Dim4GrainFlow;

        private System.Nullable<decimal> _Dim4PositiveTolerance;

        private System.Nullable<decimal> _Dim4NegativeTolerance;

        private System.Nullable<int> _Dim4Decimal;

        private System.Nullable<bool> _Dim4UseInDescription;

        private System.Nullable<bool> _Dim4UseDimName;

        private System.Nullable<bool> _Dim5GrainFlow;

        private System.Nullable<decimal> _Dim5PositiveTolerance;

        private System.Nullable<decimal> _Dim5NegativeTolerance;

        private System.Nullable<int> _Dim5Decimal;

        private System.Nullable<bool> _Dim5UseInDescription;

        private System.Nullable<bool> _Dim5UseDimName;

        private System.Nullable<int> _SalesCostingTypeId;

        private System.Nullable<int> _EnquiryCostShownId;

        private System.Nullable<int> _SpecificationTemplateId;

        private System.Nullable<int> _SalesGroupId;

        private string _ChargeBasis = @"A";

        private System.Nullable<decimal> _MinimumMargin;

        private System.Nullable<decimal> _DespatchAllocationVariance;

        private System.Nullable<bool> _CategoryLevelTax = true;

        private System.Nullable<bool> _PrintSpecification1 = false;

        private System.Nullable<bool> _PrintSpecification2 = false;

        private System.Nullable<bool> _PrintSpecification3 = false;

        private System.Nullable<bool> _PrintSpecification4 = false;

        private System.Nullable<bool> _PrintSpecification5 = false;

        private System.Nullable<int> _Specification6Id;

        private System.Nullable<bool> _ValidateSpecification6 = false;

        private System.Nullable<bool> _PrintSpecification6 = false;

        private System.Nullable<int> _Specification7Id;

        private System.Nullable<bool> _ValidateSpecification7 = false;

        private System.Nullable<bool> _PrintSpecification7 = false;

        private System.Nullable<int> _Specification8Id;

        private System.Nullable<bool> _ValidateSpecification8 = false;

        private System.Nullable<bool> _PrintSpecification8 = false;

        private System.Nullable<int> _Specification9Id;

        private System.Nullable<bool> _ValidateSpecification9 = false;

        private System.Nullable<bool> _PrintSpecification9 = false;

        private System.Nullable<int> _Specification10Id;

        private System.Nullable<bool> _ValidateSpecification10 = false;

        private System.Nullable<bool> _PrintSpecification10 = false;

        private System.Nullable<int> _PurchaseGroupId;

        private bool _Dim1Print = false;

        private bool _Dim2Print = false;

        private bool _Dim3Print = false;

        private bool _Dim4Print = false;

        private bool _Dim5Print = false;

        private bool _RequireCertification = false;

        private System.Nullable<bool> _MandatorySpecification1 = false;

        private System.Nullable<bool> _MandatorySpecification2 = false;

        private System.Nullable<bool> _MandatorySpecification3 = false;

        private System.Nullable<bool> _MandatorySpecification4 = false;

        private System.Nullable<bool> _MandatorySpecification5 = false;

        private System.Nullable<bool> _MandatorySpecification6 = false;

        private System.Nullable<bool> _MandatorySpecification7 = false;

        private System.Nullable<bool> _MandatorySpecification8 = false;

        private System.Nullable<bool> _MandatorySpecification9 = false;

        private System.Nullable<bool> _MandatorySpecification10 = false;

        private string _LedgerSegmentCode;

        private System.Nullable<int> _ProductionQuantityEntryId;

        private bool _SpecificationCheck = false;

        private bool _AutoAllocate = false;

        private System.Nullable<bool> _ProductionMixedCastsAllowed = true;

        private System.Nullable<bool> _FlagStockItemsWithNote = false;

        private System.Nullable<bool> _NonTraceable = false;

        private System.Nullable<int> _OrderQuantityEntryId;

        private System.Nullable<bool> _ValidateDynamicDensity = true;

        private System.Nullable<bool> _InvoiceWeightUpdatesItemBalance = false;

        private System.Nullable<decimal> _Dim1Kerf;

        private System.Nullable<decimal> _Dim2Kerf;

        private System.Nullable<decimal> _Dim3Kerf;

        private System.Nullable<decimal> _Dim4Kerf;

        private System.Nullable<decimal> _Dim5Kerf;
        #pragma warning restore 0649

        private EntityRef<ProductControl> _ProductControl;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis1Id;

        private EntityRef<StockAnalysisCode> _StockAnalysisCode_Analysis2Id;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_BuyUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_BuyingQuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_CostUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_PriceUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_SalesQuantityUnitId;

        private EntitySet<ProductCategory> _ProductCategory_SourceCategoryId1;

        private EntityRef<ProductCategory> _ProductCategory_SourceCategoryId;

        private EntitySet<StockCast> _StockCast;

        private EntitySet<Product> _Product;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnBaseChanging(string value);
        partial void OnBaseChanged();
        partial void OnFormChanging(string value);
        partial void OnFormChanged();
        partial void OnProductControlIdChanging(System.Nullable<int> value);
        partial void OnProductControlIdChanged();
        partial void OnSequenceNumberChanging(System.Nullable<int> value);
        partial void OnSequenceNumberChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnVolumeDensityChanging(System.Nullable<decimal> value);
        partial void OnVolumeDensityChanged();
        partial void OnStockTypeIdChanging(System.Nullable<int> value);
        partial void OnStockTypeIdChanged();
        partial void OnAnalysis1IdChanging(System.Nullable<int> value);
        partial void OnAnalysis1IdChanged();
        partial void OnAnalysis2IdChanging(System.Nullable<int> value);
        partial void OnAnalysis2IdChanged();
        partial void OnVatType1IdChanging(System.Nullable<int> value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(System.Nullable<int> value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(System.Nullable<int> value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(System.Nullable<int> value);
        partial void OnVatType4IdChanged();
        partial void OnDynamicDensityChanging(System.Nullable<bool> value);
        partial void OnDynamicDensityChanged();
        partial void OnAverageCostChanging(System.Nullable<bool> value);
        partial void OnAverageCostChanged();
        partial void OnQuantityEntryIdChanging(System.Nullable<int> value);
        partial void OnQuantityEntryIdChanged();
        partial void OnManualGuideCostChanging(System.Nullable<bool> value);
        partial void OnManualGuideCostChanged();
        partial void OnSalesNominalIdChanging(System.Nullable<int> value);
        partial void OnSalesNominalIdChanged();
        partial void OnSalesCostCentreIdChanging(System.Nullable<int> value);
        partial void OnSalesCostCentreIdChanged();
        partial void OnCostNominalIdChanging(System.Nullable<int> value);
        partial void OnCostNominalIdChanged();
        partial void OnCostCostCentreIdChanging(System.Nullable<int> value);
        partial void OnCostCostCentreIdChanged();
        partial void OnStockNominalIdChanging(System.Nullable<int> value);
        partial void OnStockNominalIdChanged();
        partial void OnStockCostCentreIdChanging(System.Nullable<int> value);
        partial void OnStockCostCentreIdChanged();
        partial void OnPriceUnitIdChanging(System.Nullable<int> value);
        partial void OnPriceUnitIdChanged();
        partial void OnBuyUnitIdChanging(System.Nullable<int> value);
        partial void OnBuyUnitIdChanged();
        partial void OnCostUnitIdChanging(System.Nullable<int> value);
        partial void OnCostUnitIdChanged();
        partial void OnSalesQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnSalesQuantityUnitIdChanged();
        partial void OnBuyingQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnBuyingQuantityUnitIdChanged();
        partial void OnPriceDecimalChanging(System.Nullable<int> value);
        partial void OnPriceDecimalChanged();
        partial void OnPiecesLabelChanging(string value);
        partial void OnPiecesLabelChanged();
        partial void OnPiecesPluralLabelChanging(string value);
        partial void OnPiecesPluralLabelChanged();
        partial void OnDefaultStockStatusIdChanging(System.Nullable<int> value);
        partial void OnDefaultStockStatusIdChanged();
        partial void OnSourceCategoryIdChanging(System.Nullable<int> value);
        partial void OnSourceCategoryIdChanged();
        partial void OnSpecification1IdChanging(System.Nullable<int> value);
        partial void OnSpecification1IdChanged();
        partial void OnValidateSpecification1Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification1Changed();
        partial void OnSpecification2IdChanging(System.Nullable<int> value);
        partial void OnSpecification2IdChanged();
        partial void OnValidateSpecification2Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification2Changed();
        partial void OnSpecification3IdChanging(System.Nullable<int> value);
        partial void OnSpecification3IdChanged();
        partial void OnValidateSpecification3Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification3Changed();
        partial void OnSpecification4IdChanging(System.Nullable<int> value);
        partial void OnSpecification4IdChanged();
        partial void OnValidateSpecification4Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification4Changed();
        partial void OnSpecification5IdChanging(System.Nullable<int> value);
        partial void OnSpecification5IdChanged();
        partial void OnValidateSpecification5Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification5Changed();
        partial void OnDim1GrainFlowChanging(System.Nullable<bool> value);
        partial void OnDim1GrainFlowChanged();
        partial void OnDim1PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1PositiveToleranceChanged();
        partial void OnDim1NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim1NegativeToleranceChanged();
        partial void OnDim1DecimalChanging(System.Nullable<int> value);
        partial void OnDim1DecimalChanged();
        partial void OnDim1UseInDescriptionChanging(System.Nullable<bool> value);
        partial void OnDim1UseInDescriptionChanged();
        partial void OnDim1UseDimNameChanging(System.Nullable<bool> value);
        partial void OnDim1UseDimNameChanged();
        partial void OnDim2GrainFlowChanging(System.Nullable<bool> value);
        partial void OnDim2GrainFlowChanged();
        partial void OnDim2PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2PositiveToleranceChanged();
        partial void OnDim2NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim2NegativeToleranceChanged();
        partial void OnDim2DecimalChanging(System.Nullable<int> value);
        partial void OnDim2DecimalChanged();
        partial void OnDim2UseInDescriptionChanging(System.Nullable<bool> value);
        partial void OnDim2UseInDescriptionChanged();
        partial void OnDim2UseDimNameChanging(System.Nullable<bool> value);
        partial void OnDim2UseDimNameChanged();
        partial void OnDim3GrainFlowChanging(System.Nullable<bool> value);
        partial void OnDim3GrainFlowChanged();
        partial void OnDim3PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3PositiveToleranceChanged();
        partial void OnDim3NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim3NegativeToleranceChanged();
        partial void OnDim3DecimalChanging(System.Nullable<int> value);
        partial void OnDim3DecimalChanged();
        partial void OnDim3UseInDescriptionChanging(System.Nullable<bool> value);
        partial void OnDim3UseInDescriptionChanged();
        partial void OnDim3UseDimNameChanging(System.Nullable<bool> value);
        partial void OnDim3UseDimNameChanged();
        partial void OnDim4GrainFlowChanging(System.Nullable<bool> value);
        partial void OnDim4GrainFlowChanged();
        partial void OnDim4PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4PositiveToleranceChanged();
        partial void OnDim4NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim4NegativeToleranceChanged();
        partial void OnDim4DecimalChanging(System.Nullable<int> value);
        partial void OnDim4DecimalChanged();
        partial void OnDim4UseInDescriptionChanging(System.Nullable<bool> value);
        partial void OnDim4UseInDescriptionChanged();
        partial void OnDim4UseDimNameChanging(System.Nullable<bool> value);
        partial void OnDim4UseDimNameChanged();
        partial void OnDim5GrainFlowChanging(System.Nullable<bool> value);
        partial void OnDim5GrainFlowChanged();
        partial void OnDim5PositiveToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5PositiveToleranceChanged();
        partial void OnDim5NegativeToleranceChanging(System.Nullable<decimal> value);
        partial void OnDim5NegativeToleranceChanged();
        partial void OnDim5DecimalChanging(System.Nullable<int> value);
        partial void OnDim5DecimalChanged();
        partial void OnDim5UseInDescriptionChanging(System.Nullable<bool> value);
        partial void OnDim5UseInDescriptionChanged();
        partial void OnDim5UseDimNameChanging(System.Nullable<bool> value);
        partial void OnDim5UseDimNameChanged();
        partial void OnSalesCostingTypeIdChanging(System.Nullable<int> value);
        partial void OnSalesCostingTypeIdChanged();
        partial void OnEnquiryCostShownIdChanging(System.Nullable<int> value);
        partial void OnEnquiryCostShownIdChanged();
        partial void OnSpecificationTemplateIdChanging(System.Nullable<int> value);
        partial void OnSpecificationTemplateIdChanged();
        partial void OnSalesGroupIdChanging(System.Nullable<int> value);
        partial void OnSalesGroupIdChanged();
        partial void OnChargeBasisChanging(string value);
        partial void OnChargeBasisChanged();
        partial void OnMinimumMarginChanging(System.Nullable<decimal> value);
        partial void OnMinimumMarginChanged();
        partial void OnDespatchAllocationVarianceChanging(System.Nullable<decimal> value);
        partial void OnDespatchAllocationVarianceChanged();
        partial void OnCategoryLevelTaxChanging(System.Nullable<bool> value);
        partial void OnCategoryLevelTaxChanged();
        partial void OnPrintSpecification1Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification1Changed();
        partial void OnPrintSpecification2Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification2Changed();
        partial void OnPrintSpecification3Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification3Changed();
        partial void OnPrintSpecification4Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification4Changed();
        partial void OnPrintSpecification5Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification5Changed();
        partial void OnSpecification6IdChanging(System.Nullable<int> value);
        partial void OnSpecification6IdChanged();
        partial void OnValidateSpecification6Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification6Changed();
        partial void OnPrintSpecification6Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification6Changed();
        partial void OnSpecification7IdChanging(System.Nullable<int> value);
        partial void OnSpecification7IdChanged();
        partial void OnValidateSpecification7Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification7Changed();
        partial void OnPrintSpecification7Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification7Changed();
        partial void OnSpecification8IdChanging(System.Nullable<int> value);
        partial void OnSpecification8IdChanged();
        partial void OnValidateSpecification8Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification8Changed();
        partial void OnPrintSpecification8Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification8Changed();
        partial void OnSpecification9IdChanging(System.Nullable<int> value);
        partial void OnSpecification9IdChanged();
        partial void OnValidateSpecification9Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification9Changed();
        partial void OnPrintSpecification9Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification9Changed();
        partial void OnSpecification10IdChanging(System.Nullable<int> value);
        partial void OnSpecification10IdChanged();
        partial void OnValidateSpecification10Changing(System.Nullable<bool> value);
        partial void OnValidateSpecification10Changed();
        partial void OnPrintSpecification10Changing(System.Nullable<bool> value);
        partial void OnPrintSpecification10Changed();
        partial void OnPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnPurchaseGroupIdChanged();
        partial void OnDim1PrintChanging(bool value);
        partial void OnDim1PrintChanged();
        partial void OnDim2PrintChanging(bool value);
        partial void OnDim2PrintChanged();
        partial void OnDim3PrintChanging(bool value);
        partial void OnDim3PrintChanged();
        partial void OnDim4PrintChanging(bool value);
        partial void OnDim4PrintChanged();
        partial void OnDim5PrintChanging(bool value);
        partial void OnDim5PrintChanged();
        partial void OnRequireCertificationChanging(bool value);
        partial void OnRequireCertificationChanged();
        partial void OnMandatorySpecification1Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification1Changed();
        partial void OnMandatorySpecification2Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification2Changed();
        partial void OnMandatorySpecification3Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification3Changed();
        partial void OnMandatorySpecification4Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification4Changed();
        partial void OnMandatorySpecification5Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification5Changed();
        partial void OnMandatorySpecification6Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification6Changed();
        partial void OnMandatorySpecification7Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification7Changed();
        partial void OnMandatorySpecification8Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification8Changed();
        partial void OnMandatorySpecification9Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification9Changed();
        partial void OnMandatorySpecification10Changing(System.Nullable<bool> value);
        partial void OnMandatorySpecification10Changed();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnProductionQuantityEntryIdChanging(System.Nullable<int> value);
        partial void OnProductionQuantityEntryIdChanged();
        partial void OnSpecificationCheckChanging(bool value);
        partial void OnSpecificationCheckChanged();
        partial void OnAutoAllocateChanging(bool value);
        partial void OnAutoAllocateChanged();
        partial void OnProductionMixedCastsAllowedChanging(System.Nullable<bool> value);
        partial void OnProductionMixedCastsAllowedChanged();
        partial void OnFlagStockItemsWithNoteChanging(System.Nullable<bool> value);
        partial void OnFlagStockItemsWithNoteChanged();
        partial void OnNonTraceableChanging(System.Nullable<bool> value);
        partial void OnNonTraceableChanged();
        partial void OnOrderQuantityEntryIdChanging(System.Nullable<int> value);
        partial void OnOrderQuantityEntryIdChanged();
        partial void OnValidateDynamicDensityChanging(System.Nullable<bool> value);
        partial void OnValidateDynamicDensityChanged();
        partial void OnInvoiceWeightUpdatesItemBalanceChanging(System.Nullable<bool> value);
        partial void OnInvoiceWeightUpdatesItemBalanceChanged();
        partial void OnDim1KerfChanging(System.Nullable<decimal> value);
        partial void OnDim1KerfChanged();
        partial void OnDim2KerfChanging(System.Nullable<decimal> value);
        partial void OnDim2KerfChanged();
        partial void OnDim3KerfChanging(System.Nullable<decimal> value);
        partial void OnDim3KerfChanged();
        partial void OnDim4KerfChanging(System.Nullable<decimal> value);
        partial void OnDim4KerfChanged();
        partial void OnDim5KerfChanging(System.Nullable<decimal> value);
        partial void OnDim5KerfChanged();
        #endregion

        public ProductCategory()
        {
            this._ProductControl  = default(EntityRef<ProductControl>);
            this._StockAnalysisCode_Analysis1Id  = default(EntityRef<StockAnalysisCode>);
            this._StockAnalysisCode_Analysis2Id  = default(EntityRef<StockAnalysisCode>);
            this._UnitsOfMeasure_BuyUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_BuyingQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_CostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_PriceUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_SalesQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._ProductCategory_SourceCategoryId1 = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategory_SourceCategoryId1), new Action<ProductCategory>(this.detach_ProductCategory_SourceCategoryId1));
            this._ProductCategory_SourceCategoryId  = default(EntityRef<ProductCategory>);
            this._StockCast = new EntitySet<StockCast>(new Action<StockCast>(this.attach_StockCast), new Action<StockCast>(this.detach_StockCast));
            this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Name = @"category", Storage = "_Category", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging("Category");
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Base in the schema.
        /// </summary>
        [Column(Name = @"base", Storage = "_Base", DbType = "VARCHAR(8)", UpdateCheck = UpdateCheck.Never)]
        public string Base
        {
            get
            {
                return this._Base;
            }
            set
            {
                if (this._Base != value)
                {
                    this.OnBaseChanging(value);
                    this.SendPropertyChanging("Base");
                    this._Base = value;
                    this.SendPropertyChanged("Base");
                    this.OnBaseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Form in the schema.
        /// </summary>
        [Column(Name = @"form", Storage = "_Form", DbType = "VARCHAR(8)", UpdateCheck = UpdateCheck.Never)]
        public string Form
        {
            get
            {
                return this._Form;
            }
            set
            {
                if (this._Form != value)
                {
                    this.OnFormChanging(value);
                    this.SendPropertyChanging("Form");
                    this._Form = value;
                    this.SendPropertyChanged("Form");
                    this.OnFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductControlId in the schema.
        /// </summary>
        [Column(Name = @"product_control_id", Storage = "_ProductControlId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductControlId
        {
            get
            {
                return this._ProductControlId;
            }
            set
            {
                if (this._ProductControlId != value)
                {
                    if (this._ProductControl.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductControlIdChanging(value);
                    this.SendPropertyChanging("ProductControlId");
                    this._ProductControlId = value;
                    this.SendPropertyChanged("ProductControlId");
                    this.OnProductControlIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SequenceNumber in the schema.
        /// </summary>
        [Column(Name = @"sequence_number", Storage = "_SequenceNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SequenceNumber
        {
            get
            {
                return this._SequenceNumber;
            }
            set
            {
                if (this._SequenceNumber != value)
                {
                    this.OnSequenceNumberChanging(value);
                    this.SendPropertyChanging("SequenceNumber");
                    this._SequenceNumber = value;
                    this.SendPropertyChanged("SequenceNumber");
                    this.OnSequenceNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VolumeDensity in the schema.
        /// </summary>
        [Column(Name = @"volume_density", Storage = "_VolumeDensity", DbType = "NUMERIC(16,6)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> VolumeDensity
        {
            get
            {
                return this._VolumeDensity;
            }
            set
            {
                if (this._VolumeDensity != value)
                {
                    this.OnVolumeDensityChanging(value);
                    this.SendPropertyChanging("VolumeDensity");
                    this._VolumeDensity = value;
                    this.SendPropertyChanged("VolumeDensity");
                    this.OnVolumeDensityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockTypeId in the schema.
        /// </summary>
        [Column(Name = @"stock_type_id", Storage = "_StockTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockTypeId
        {
            get
            {
                return this._StockTypeId;
            }
            set
            {
                if (this._StockTypeId != value)
                {
                    this.OnStockTypeIdChanging(value);
                    this.SendPropertyChanging("StockTypeId");
                    this._StockTypeId = value;
                    this.SendPropertyChanged("StockTypeId");
                    this.OnStockTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis1Id in the schema.
        /// </summary>
        [Column(Name = @"analysis1_id", Storage = "_Analysis1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis1Id
        {
            get
            {
                return this._Analysis1Id;
            }
            set
            {
                if (this._Analysis1Id != value)
                {
                    if (this._StockAnalysisCode_Analysis1Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis1IdChanging(value);
                    this.SendPropertyChanging("Analysis1Id");
                    this._Analysis1Id = value;
                    this.SendPropertyChanged("Analysis1Id");
                    this.OnAnalysis1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Analysis2Id in the schema.
        /// </summary>
        [Column(Name = @"analysis2_id", Storage = "_Analysis2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Analysis2Id
        {
            get
            {
                return this._Analysis2Id;
            }
            set
            {
                if (this._Analysis2Id != value)
                {
                    if (this._StockAnalysisCode_Analysis2Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysis2IdChanging(value);
                    this.SendPropertyChanging("Analysis2Id");
                    this._Analysis2Id = value;
                    this.SendPropertyChanged("Analysis2Id");
                    this.OnAnalysis2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DynamicDensity in the schema.
        /// </summary>
        [Column(Name = @"dynamic_density", Storage = "_DynamicDensity", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DynamicDensity
        {
            get
            {
                return this._DynamicDensity;
            }
            set
            {
                if (this._DynamicDensity != value)
                {
                    this.OnDynamicDensityChanging(value);
                    this.SendPropertyChanging("DynamicDensity");
                    this._DynamicDensity = value;
                    this.SendPropertyChanged("DynamicDensity");
                    this.OnDynamicDensityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AverageCost in the schema.
        /// </summary>
        [Column(Name = @"average_cost", Storage = "_AverageCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AverageCost
        {
            get
            {
                return this._AverageCost;
            }
            set
            {
                if (this._AverageCost != value)
                {
                    this.OnAverageCostChanging(value);
                    this.SendPropertyChanging("AverageCost");
                    this._AverageCost = value;
                    this.SendPropertyChanged("AverageCost");
                    this.OnAverageCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityEntryId in the schema.
        /// </summary>
        [Column(Name = @"quantity_entry_id", Storage = "_QuantityEntryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> QuantityEntryId
        {
            get
            {
                return this._QuantityEntryId;
            }
            set
            {
                if (this._QuantityEntryId != value)
                {
                    this.OnQuantityEntryIdChanging(value);
                    this.SendPropertyChanging("QuantityEntryId");
                    this._QuantityEntryId = value;
                    this.SendPropertyChanged("QuantityEntryId");
                    this.OnQuantityEntryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManualGuideCost in the schema.
        /// </summary>
        [Column(Name = @"manual_guide_cost", Storage = "_ManualGuideCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ManualGuideCost
        {
            get
            {
                return this._ManualGuideCost;
            }
            set
            {
                if (this._ManualGuideCost != value)
                {
                    this.OnManualGuideCostChanging(value);
                    this.SendPropertyChanging("ManualGuideCost");
                    this._ManualGuideCost = value;
                    this.SendPropertyChanged("ManualGuideCost");
                    this.OnManualGuideCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesNominalId in the schema.
        /// </summary>
        [Column(Name = @"sales_nominal_id", Storage = "_SalesNominalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesNominalId
        {
            get
            {
                return this._SalesNominalId;
            }
            set
            {
                if (this._SalesNominalId != value)
                {
                    this.OnSalesNominalIdChanging(value);
                    this.SendPropertyChanging("SalesNominalId");
                    this._SalesNominalId = value;
                    this.SendPropertyChanged("SalesNominalId");
                    this.OnSalesNominalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesCostCentreId in the schema.
        /// </summary>
        [Column(Name = @"sales_cost_centre_id", Storage = "_SalesCostCentreId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesCostCentreId
        {
            get
            {
                return this._SalesCostCentreId;
            }
            set
            {
                if (this._SalesCostCentreId != value)
                {
                    this.OnSalesCostCentreIdChanging(value);
                    this.SendPropertyChanging("SalesCostCentreId");
                    this._SalesCostCentreId = value;
                    this.SendPropertyChanged("SalesCostCentreId");
                    this.OnSalesCostCentreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostNominalId in the schema.
        /// </summary>
        [Column(Name = @"cost_nominal_id", Storage = "_CostNominalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostNominalId
        {
            get
            {
                return this._CostNominalId;
            }
            set
            {
                if (this._CostNominalId != value)
                {
                    this.OnCostNominalIdChanging(value);
                    this.SendPropertyChanging("CostNominalId");
                    this._CostNominalId = value;
                    this.SendPropertyChanged("CostNominalId");
                    this.OnCostNominalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostCostCentreId in the schema.
        /// </summary>
        [Column(Name = @"cost_cost_centre_id", Storage = "_CostCostCentreId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostCostCentreId
        {
            get
            {
                return this._CostCostCentreId;
            }
            set
            {
                if (this._CostCostCentreId != value)
                {
                    this.OnCostCostCentreIdChanging(value);
                    this.SendPropertyChanging("CostCostCentreId");
                    this._CostCostCentreId = value;
                    this.SendPropertyChanged("CostCostCentreId");
                    this.OnCostCostCentreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockNominalId in the schema.
        /// </summary>
        [Column(Name = @"stock_nominal_id", Storage = "_StockNominalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockNominalId
        {
            get
            {
                return this._StockNominalId;
            }
            set
            {
                if (this._StockNominalId != value)
                {
                    this.OnStockNominalIdChanging(value);
                    this.SendPropertyChanging("StockNominalId");
                    this._StockNominalId = value;
                    this.SendPropertyChanged("StockNominalId");
                    this.OnStockNominalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCostCentreId in the schema.
        /// </summary>
        [Column(Name = @"stock_cost_centre_id", Storage = "_StockCostCentreId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockCostCentreId
        {
            get
            {
                return this._StockCostCentreId;
            }
            set
            {
                if (this._StockCostCentreId != value)
                {
                    this.OnStockCostCentreIdChanging(value);
                    this.SendPropertyChanging("StockCostCentreId");
                    this._StockCostCentreId = value;
                    this.SendPropertyChanged("StockCostCentreId");
                    this.OnStockCostCentreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PriceUnitId in the schema.
        /// </summary>
        [Column(Name = @"price_unit_id", Storage = "_PriceUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PriceUnitId
        {
            get
            {
                return this._PriceUnitId;
            }
            set
            {
                if (this._PriceUnitId != value)
                {
                    if (this._UnitsOfMeasure_PriceUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPriceUnitIdChanging(value);
                    this.SendPropertyChanging("PriceUnitId");
                    this._PriceUnitId = value;
                    this.SendPropertyChanged("PriceUnitId");
                    this.OnPriceUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyUnitId in the schema.
        /// </summary>
        [Column(Name = @"buy_unit_id", Storage = "_BuyUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BuyUnitId
        {
            get
            {
                return this._BuyUnitId;
            }
            set
            {
                if (this._BuyUnitId != value)
                {
                    if (this._UnitsOfMeasure_BuyUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBuyUnitIdChanging(value);
                    this.SendPropertyChanging("BuyUnitId");
                    this._BuyUnitId = value;
                    this.SendPropertyChanged("BuyUnitId");
                    this.OnBuyUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostUnitId in the schema.
        /// </summary>
        [Column(Name = @"cost_unit_id", Storage = "_CostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostUnitId
        {
            get
            {
                return this._CostUnitId;
            }
            set
            {
                if (this._CostUnitId != value)
                {
                    if (this._UnitsOfMeasure_CostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostUnitIdChanging(value);
                    this.SendPropertyChanging("CostUnitId");
                    this._CostUnitId = value;
                    this.SendPropertyChanged("CostUnitId");
                    this.OnCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"sales_quantity_unit_id", Storage = "_SalesQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesQuantityUnitId
        {
            get
            {
                return this._SalesQuantityUnitId;
            }
            set
            {
                if (this._SalesQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_SalesQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("SalesQuantityUnitId");
                    this._SalesQuantityUnitId = value;
                    this.SendPropertyChanged("SalesQuantityUnitId");
                    this.OnSalesQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyingQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"buying_quantity_unit_id", Storage = "_BuyingQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BuyingQuantityUnitId
        {
            get
            {
                return this._BuyingQuantityUnitId;
            }
            set
            {
                if (this._BuyingQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_BuyingQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBuyingQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("BuyingQuantityUnitId");
                    this._BuyingQuantityUnitId = value;
                    this.SendPropertyChanged("BuyingQuantityUnitId");
                    this.OnBuyingQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PriceDecimal in the schema.
        /// </summary>
        [Column(Name = @"price_decimals", Storage = "_PriceDecimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PriceDecimal
        {
            get
            {
                return this._PriceDecimal;
            }
            set
            {
                if (this._PriceDecimal != value)
                {
                    this.OnPriceDecimalChanging(value);
                    this.SendPropertyChanging("PriceDecimal");
                    this._PriceDecimal = value;
                    this.SendPropertyChanged("PriceDecimal");
                    this.OnPriceDecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PiecesLabel in the schema.
        /// </summary>
        [Column(Name = @"pieces_label", Storage = "_PiecesLabel", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string PiecesLabel
        {
            get
            {
                return this._PiecesLabel;
            }
            set
            {
                if (this._PiecesLabel != value)
                {
                    this.OnPiecesLabelChanging(value);
                    this.SendPropertyChanging("PiecesLabel");
                    this._PiecesLabel = value;
                    this.SendPropertyChanged("PiecesLabel");
                    this.OnPiecesLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PiecesPluralLabel in the schema.
        /// </summary>
        [Column(Name = @"pieces_plural_label", Storage = "_PiecesPluralLabel", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string PiecesPluralLabel
        {
            get
            {
                return this._PiecesPluralLabel;
            }
            set
            {
                if (this._PiecesPluralLabel != value)
                {
                    this.OnPiecesPluralLabelChanging(value);
                    this.SendPropertyChanging("PiecesPluralLabel");
                    this._PiecesPluralLabel = value;
                    this.SendPropertyChanged("PiecesPluralLabel");
                    this.OnPiecesPluralLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultStockStatusId in the schema.
        /// </summary>
        [Column(Name = @"default_stock_status_id", Storage = "_DefaultStockStatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultStockStatusId
        {
            get
            {
                return this._DefaultStockStatusId;
            }
            set
            {
                if (this._DefaultStockStatusId != value)
                {
                    this.OnDefaultStockStatusIdChanging(value);
                    this.SendPropertyChanging("DefaultStockStatusId");
                    this._DefaultStockStatusId = value;
                    this.SendPropertyChanged("DefaultStockStatusId");
                    this.OnDefaultStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceCategoryId in the schema.
        /// </summary>
        [Column(Name = @"source_category_id", Storage = "_SourceCategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SourceCategoryId
        {
            get
            {
                return this._SourceCategoryId;
            }
            set
            {
                if (this._SourceCategoryId != value)
                {
                    if (this._ProductCategory_SourceCategoryId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSourceCategoryIdChanging(value);
                    this.SendPropertyChanging("SourceCategoryId");
                    this._SourceCategoryId = value;
                    this.SendPropertyChanged("SourceCategoryId");
                    this.OnSourceCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification1Id in the schema.
        /// </summary>
        [Column(Name = @"specification1_id", Storage = "_Specification1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification1Id
        {
            get
            {
                return this._Specification1Id;
            }
            set
            {
                if (this._Specification1Id != value)
                {
                    this.OnSpecification1IdChanging(value);
                    this.SendPropertyChanging("Specification1Id");
                    this._Specification1Id = value;
                    this.SendPropertyChanged("Specification1Id");
                    this.OnSpecification1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification1 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification1", Storage = "_ValidateSpecification1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification1
        {
            get
            {
                return this._ValidateSpecification1;
            }
            set
            {
                if (this._ValidateSpecification1 != value)
                {
                    this.OnValidateSpecification1Changing(value);
                    this.SendPropertyChanging("ValidateSpecification1");
                    this._ValidateSpecification1 = value;
                    this.SendPropertyChanged("ValidateSpecification1");
                    this.OnValidateSpecification1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification2Id in the schema.
        /// </summary>
        [Column(Name = @"specification2_id", Storage = "_Specification2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification2Id
        {
            get
            {
                return this._Specification2Id;
            }
            set
            {
                if (this._Specification2Id != value)
                {
                    this.OnSpecification2IdChanging(value);
                    this.SendPropertyChanging("Specification2Id");
                    this._Specification2Id = value;
                    this.SendPropertyChanged("Specification2Id");
                    this.OnSpecification2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification2 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification2", Storage = "_ValidateSpecification2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification2
        {
            get
            {
                return this._ValidateSpecification2;
            }
            set
            {
                if (this._ValidateSpecification2 != value)
                {
                    this.OnValidateSpecification2Changing(value);
                    this.SendPropertyChanging("ValidateSpecification2");
                    this._ValidateSpecification2 = value;
                    this.SendPropertyChanged("ValidateSpecification2");
                    this.OnValidateSpecification2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification3Id in the schema.
        /// </summary>
        [Column(Name = @"specification3_id", Storage = "_Specification3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification3Id
        {
            get
            {
                return this._Specification3Id;
            }
            set
            {
                if (this._Specification3Id != value)
                {
                    this.OnSpecification3IdChanging(value);
                    this.SendPropertyChanging("Specification3Id");
                    this._Specification3Id = value;
                    this.SendPropertyChanged("Specification3Id");
                    this.OnSpecification3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification3 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification3", Storage = "_ValidateSpecification3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification3
        {
            get
            {
                return this._ValidateSpecification3;
            }
            set
            {
                if (this._ValidateSpecification3 != value)
                {
                    this.OnValidateSpecification3Changing(value);
                    this.SendPropertyChanging("ValidateSpecification3");
                    this._ValidateSpecification3 = value;
                    this.SendPropertyChanged("ValidateSpecification3");
                    this.OnValidateSpecification3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification4Id in the schema.
        /// </summary>
        [Column(Name = @"specification4_id", Storage = "_Specification4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification4Id
        {
            get
            {
                return this._Specification4Id;
            }
            set
            {
                if (this._Specification4Id != value)
                {
                    this.OnSpecification4IdChanging(value);
                    this.SendPropertyChanging("Specification4Id");
                    this._Specification4Id = value;
                    this.SendPropertyChanged("Specification4Id");
                    this.OnSpecification4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification4 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification4", Storage = "_ValidateSpecification4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification4
        {
            get
            {
                return this._ValidateSpecification4;
            }
            set
            {
                if (this._ValidateSpecification4 != value)
                {
                    this.OnValidateSpecification4Changing(value);
                    this.SendPropertyChanging("ValidateSpecification4");
                    this._ValidateSpecification4 = value;
                    this.SendPropertyChanged("ValidateSpecification4");
                    this.OnValidateSpecification4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification5Id in the schema.
        /// </summary>
        [Column(Name = @"specification5_id", Storage = "_Specification5Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification5Id
        {
            get
            {
                return this._Specification5Id;
            }
            set
            {
                if (this._Specification5Id != value)
                {
                    this.OnSpecification5IdChanging(value);
                    this.SendPropertyChanging("Specification5Id");
                    this._Specification5Id = value;
                    this.SendPropertyChanged("Specification5Id");
                    this.OnSpecification5IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification5 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification5", Storage = "_ValidateSpecification5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification5
        {
            get
            {
                return this._ValidateSpecification5;
            }
            set
            {
                if (this._ValidateSpecification5 != value)
                {
                    this.OnValidateSpecification5Changing(value);
                    this.SendPropertyChanging("ValidateSpecification5");
                    this._ValidateSpecification5 = value;
                    this.SendPropertyChanged("ValidateSpecification5");
                    this.OnValidateSpecification5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1GrainFlow in the schema.
        /// </summary>
        [Column(Name = @"dim1_grain_flow", Storage = "_Dim1GrainFlow", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim1GrainFlow
        {
            get
            {
                return this._Dim1GrainFlow;
            }
            set
            {
                if (this._Dim1GrainFlow != value)
                {
                    this.OnDim1GrainFlowChanging(value);
                    this.SendPropertyChanging("Dim1GrainFlow");
                    this._Dim1GrainFlow = value;
                    this.SendPropertyChanged("Dim1GrainFlow");
                    this.OnDim1GrainFlowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_positive_tolerance", Storage = "_Dim1PositiveTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1PositiveTolerance
        {
            get
            {
                return this._Dim1PositiveTolerance;
            }
            set
            {
                if (this._Dim1PositiveTolerance != value)
                {
                    this.OnDim1PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim1PositiveTolerance");
                    this._Dim1PositiveTolerance = value;
                    this.SendPropertyChanged("Dim1PositiveTolerance");
                    this.OnDim1PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim1_negative_tolerance", Storage = "_Dim1NegativeTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1NegativeTolerance
        {
            get
            {
                return this._Dim1NegativeTolerance;
            }
            set
            {
                if (this._Dim1NegativeTolerance != value)
                {
                    this.OnDim1NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim1NegativeTolerance");
                    this._Dim1NegativeTolerance = value;
                    this.SendPropertyChanged("Dim1NegativeTolerance");
                    this.OnDim1NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1Decimal in the schema.
        /// </summary>
        [Column(Name = @"dim1_decimals", Storage = "_Dim1Decimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1Decimal
        {
            get
            {
                return this._Dim1Decimal;
            }
            set
            {
                if (this._Dim1Decimal != value)
                {
                    this.OnDim1DecimalChanging(value);
                    this.SendPropertyChanging("Dim1Decimal");
                    this._Dim1Decimal = value;
                    this.SendPropertyChanged("Dim1Decimal");
                    this.OnDim1DecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1UseInDescription in the schema.
        /// </summary>
        [Column(Name = @"dim1_use_in_description", Storage = "_Dim1UseInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim1UseInDescription
        {
            get
            {
                return this._Dim1UseInDescription;
            }
            set
            {
                if (this._Dim1UseInDescription != value)
                {
                    this.OnDim1UseInDescriptionChanging(value);
                    this.SendPropertyChanging("Dim1UseInDescription");
                    this._Dim1UseInDescription = value;
                    this.SendPropertyChanged("Dim1UseInDescription");
                    this.OnDim1UseInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1UseDimName in the schema.
        /// </summary>
        [Column(Name = @"dim1_use_dim_name", Storage = "_Dim1UseDimName", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim1UseDimName
        {
            get
            {
                return this._Dim1UseDimName;
            }
            set
            {
                if (this._Dim1UseDimName != value)
                {
                    this.OnDim1UseDimNameChanging(value);
                    this.SendPropertyChanging("Dim1UseDimName");
                    this._Dim1UseDimName = value;
                    this.SendPropertyChanged("Dim1UseDimName");
                    this.OnDim1UseDimNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2GrainFlow in the schema.
        /// </summary>
        [Column(Name = @"dim2_grain_flow", Storage = "_Dim2GrainFlow", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim2GrainFlow
        {
            get
            {
                return this._Dim2GrainFlow;
            }
            set
            {
                if (this._Dim2GrainFlow != value)
                {
                    this.OnDim2GrainFlowChanging(value);
                    this.SendPropertyChanging("Dim2GrainFlow");
                    this._Dim2GrainFlow = value;
                    this.SendPropertyChanged("Dim2GrainFlow");
                    this.OnDim2GrainFlowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_positive_tolerance", Storage = "_Dim2PositiveTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2PositiveTolerance
        {
            get
            {
                return this._Dim2PositiveTolerance;
            }
            set
            {
                if (this._Dim2PositiveTolerance != value)
                {
                    this.OnDim2PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim2PositiveTolerance");
                    this._Dim2PositiveTolerance = value;
                    this.SendPropertyChanged("Dim2PositiveTolerance");
                    this.OnDim2PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim2_negative_tolerance", Storage = "_Dim2NegativeTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2NegativeTolerance
        {
            get
            {
                return this._Dim2NegativeTolerance;
            }
            set
            {
                if (this._Dim2NegativeTolerance != value)
                {
                    this.OnDim2NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim2NegativeTolerance");
                    this._Dim2NegativeTolerance = value;
                    this.SendPropertyChanged("Dim2NegativeTolerance");
                    this.OnDim2NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2Decimal in the schema.
        /// </summary>
        [Column(Name = @"dim2_decimals", Storage = "_Dim2Decimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2Decimal
        {
            get
            {
                return this._Dim2Decimal;
            }
            set
            {
                if (this._Dim2Decimal != value)
                {
                    this.OnDim2DecimalChanging(value);
                    this.SendPropertyChanging("Dim2Decimal");
                    this._Dim2Decimal = value;
                    this.SendPropertyChanged("Dim2Decimal");
                    this.OnDim2DecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2UseInDescription in the schema.
        /// </summary>
        [Column(Name = @"dim2_use_in_description", Storage = "_Dim2UseInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim2UseInDescription
        {
            get
            {
                return this._Dim2UseInDescription;
            }
            set
            {
                if (this._Dim2UseInDescription != value)
                {
                    this.OnDim2UseInDescriptionChanging(value);
                    this.SendPropertyChanging("Dim2UseInDescription");
                    this._Dim2UseInDescription = value;
                    this.SendPropertyChanged("Dim2UseInDescription");
                    this.OnDim2UseInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2UseDimName in the schema.
        /// </summary>
        [Column(Name = @"dim2_use_dim_name", Storage = "_Dim2UseDimName", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim2UseDimName
        {
            get
            {
                return this._Dim2UseDimName;
            }
            set
            {
                if (this._Dim2UseDimName != value)
                {
                    this.OnDim2UseDimNameChanging(value);
                    this.SendPropertyChanging("Dim2UseDimName");
                    this._Dim2UseDimName = value;
                    this.SendPropertyChanged("Dim2UseDimName");
                    this.OnDim2UseDimNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3GrainFlow in the schema.
        /// </summary>
        [Column(Name = @"dim3_grain_flow", Storage = "_Dim3GrainFlow", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim3GrainFlow
        {
            get
            {
                return this._Dim3GrainFlow;
            }
            set
            {
                if (this._Dim3GrainFlow != value)
                {
                    this.OnDim3GrainFlowChanging(value);
                    this.SendPropertyChanging("Dim3GrainFlow");
                    this._Dim3GrainFlow = value;
                    this.SendPropertyChanged("Dim3GrainFlow");
                    this.OnDim3GrainFlowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_positive_tolerance", Storage = "_Dim3PositiveTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3PositiveTolerance
        {
            get
            {
                return this._Dim3PositiveTolerance;
            }
            set
            {
                if (this._Dim3PositiveTolerance != value)
                {
                    this.OnDim3PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim3PositiveTolerance");
                    this._Dim3PositiveTolerance = value;
                    this.SendPropertyChanged("Dim3PositiveTolerance");
                    this.OnDim3PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim3_negative_tolerance", Storage = "_Dim3NegativeTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3NegativeTolerance
        {
            get
            {
                return this._Dim3NegativeTolerance;
            }
            set
            {
                if (this._Dim3NegativeTolerance != value)
                {
                    this.OnDim3NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim3NegativeTolerance");
                    this._Dim3NegativeTolerance = value;
                    this.SendPropertyChanged("Dim3NegativeTolerance");
                    this.OnDim3NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3Decimal in the schema.
        /// </summary>
        [Column(Name = @"dim3_decimals", Storage = "_Dim3Decimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3Decimal
        {
            get
            {
                return this._Dim3Decimal;
            }
            set
            {
                if (this._Dim3Decimal != value)
                {
                    this.OnDim3DecimalChanging(value);
                    this.SendPropertyChanging("Dim3Decimal");
                    this._Dim3Decimal = value;
                    this.SendPropertyChanged("Dim3Decimal");
                    this.OnDim3DecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3UseInDescription in the schema.
        /// </summary>
        [Column(Name = @"dim3_use_in_description", Storage = "_Dim3UseInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim3UseInDescription
        {
            get
            {
                return this._Dim3UseInDescription;
            }
            set
            {
                if (this._Dim3UseInDescription != value)
                {
                    this.OnDim3UseInDescriptionChanging(value);
                    this.SendPropertyChanging("Dim3UseInDescription");
                    this._Dim3UseInDescription = value;
                    this.SendPropertyChanged("Dim3UseInDescription");
                    this.OnDim3UseInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3UseDimName in the schema.
        /// </summary>
        [Column(Name = @"dim3_use_dim_name", Storage = "_Dim3UseDimName", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim3UseDimName
        {
            get
            {
                return this._Dim3UseDimName;
            }
            set
            {
                if (this._Dim3UseDimName != value)
                {
                    this.OnDim3UseDimNameChanging(value);
                    this.SendPropertyChanging("Dim3UseDimName");
                    this._Dim3UseDimName = value;
                    this.SendPropertyChanged("Dim3UseDimName");
                    this.OnDim3UseDimNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4GrainFlow in the schema.
        /// </summary>
        [Column(Name = @"dim4_grain_flow", Storage = "_Dim4GrainFlow", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim4GrainFlow
        {
            get
            {
                return this._Dim4GrainFlow;
            }
            set
            {
                if (this._Dim4GrainFlow != value)
                {
                    this.OnDim4GrainFlowChanging(value);
                    this.SendPropertyChanging("Dim4GrainFlow");
                    this._Dim4GrainFlow = value;
                    this.SendPropertyChanged("Dim4GrainFlow");
                    this.OnDim4GrainFlowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_positive_tolerance", Storage = "_Dim4PositiveTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4PositiveTolerance
        {
            get
            {
                return this._Dim4PositiveTolerance;
            }
            set
            {
                if (this._Dim4PositiveTolerance != value)
                {
                    this.OnDim4PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim4PositiveTolerance");
                    this._Dim4PositiveTolerance = value;
                    this.SendPropertyChanged("Dim4PositiveTolerance");
                    this.OnDim4PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim4_negative_tolerance", Storage = "_Dim4NegativeTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4NegativeTolerance
        {
            get
            {
                return this._Dim4NegativeTolerance;
            }
            set
            {
                if (this._Dim4NegativeTolerance != value)
                {
                    this.OnDim4NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim4NegativeTolerance");
                    this._Dim4NegativeTolerance = value;
                    this.SendPropertyChanged("Dim4NegativeTolerance");
                    this.OnDim4NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4Decimal in the schema.
        /// </summary>
        [Column(Name = @"dim4_decimals", Storage = "_Dim4Decimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4Decimal
        {
            get
            {
                return this._Dim4Decimal;
            }
            set
            {
                if (this._Dim4Decimal != value)
                {
                    this.OnDim4DecimalChanging(value);
                    this.SendPropertyChanging("Dim4Decimal");
                    this._Dim4Decimal = value;
                    this.SendPropertyChanged("Dim4Decimal");
                    this.OnDim4DecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4UseInDescription in the schema.
        /// </summary>
        [Column(Name = @"dim4_use_in_description", Storage = "_Dim4UseInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim4UseInDescription
        {
            get
            {
                return this._Dim4UseInDescription;
            }
            set
            {
                if (this._Dim4UseInDescription != value)
                {
                    this.OnDim4UseInDescriptionChanging(value);
                    this.SendPropertyChanging("Dim4UseInDescription");
                    this._Dim4UseInDescription = value;
                    this.SendPropertyChanged("Dim4UseInDescription");
                    this.OnDim4UseInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4UseDimName in the schema.
        /// </summary>
        [Column(Name = @"dim4_use_dim_name", Storage = "_Dim4UseDimName", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim4UseDimName
        {
            get
            {
                return this._Dim4UseDimName;
            }
            set
            {
                if (this._Dim4UseDimName != value)
                {
                    this.OnDim4UseDimNameChanging(value);
                    this.SendPropertyChanging("Dim4UseDimName");
                    this._Dim4UseDimName = value;
                    this.SendPropertyChanged("Dim4UseDimName");
                    this.OnDim4UseDimNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5GrainFlow in the schema.
        /// </summary>
        [Column(Name = @"dim5_grain_flow", Storage = "_Dim5GrainFlow", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim5GrainFlow
        {
            get
            {
                return this._Dim5GrainFlow;
            }
            set
            {
                if (this._Dim5GrainFlow != value)
                {
                    this.OnDim5GrainFlowChanging(value);
                    this.SendPropertyChanging("Dim5GrainFlow");
                    this._Dim5GrainFlow = value;
                    this.SendPropertyChanged("Dim5GrainFlow");
                    this.OnDim5GrainFlowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5PositiveTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_positive_tolerance", Storage = "_Dim5PositiveTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5PositiveTolerance
        {
            get
            {
                return this._Dim5PositiveTolerance;
            }
            set
            {
                if (this._Dim5PositiveTolerance != value)
                {
                    this.OnDim5PositiveToleranceChanging(value);
                    this.SendPropertyChanging("Dim5PositiveTolerance");
                    this._Dim5PositiveTolerance = value;
                    this.SendPropertyChanged("Dim5PositiveTolerance");
                    this.OnDim5PositiveToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5NegativeTolerance in the schema.
        /// </summary>
        [Column(Name = @"dim5_negative_tolerance", Storage = "_Dim5NegativeTolerance", DbType = "NUMERIC(7,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5NegativeTolerance
        {
            get
            {
                return this._Dim5NegativeTolerance;
            }
            set
            {
                if (this._Dim5NegativeTolerance != value)
                {
                    this.OnDim5NegativeToleranceChanging(value);
                    this.SendPropertyChanging("Dim5NegativeTolerance");
                    this._Dim5NegativeTolerance = value;
                    this.SendPropertyChanged("Dim5NegativeTolerance");
                    this.OnDim5NegativeToleranceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5Decimal in the schema.
        /// </summary>
        [Column(Name = @"dim5_decimals", Storage = "_Dim5Decimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5Decimal
        {
            get
            {
                return this._Dim5Decimal;
            }
            set
            {
                if (this._Dim5Decimal != value)
                {
                    this.OnDim5DecimalChanging(value);
                    this.SendPropertyChanging("Dim5Decimal");
                    this._Dim5Decimal = value;
                    this.SendPropertyChanged("Dim5Decimal");
                    this.OnDim5DecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5UseInDescription in the schema.
        /// </summary>
        [Column(Name = @"dim5_use_in_description", Storage = "_Dim5UseInDescription", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim5UseInDescription
        {
            get
            {
                return this._Dim5UseInDescription;
            }
            set
            {
                if (this._Dim5UseInDescription != value)
                {
                    this.OnDim5UseInDescriptionChanging(value);
                    this.SendPropertyChanging("Dim5UseInDescription");
                    this._Dim5UseInDescription = value;
                    this.SendPropertyChanged("Dim5UseInDescription");
                    this.OnDim5UseInDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5UseDimName in the schema.
        /// </summary>
        [Column(Name = @"dim5_use_dim_name", Storage = "_Dim5UseDimName", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim5UseDimName
        {
            get
            {
                return this._Dim5UseDimName;
            }
            set
            {
                if (this._Dim5UseDimName != value)
                {
                    this.OnDim5UseDimNameChanging(value);
                    this.SendPropertyChanging("Dim5UseDimName");
                    this._Dim5UseDimName = value;
                    this.SendPropertyChanged("Dim5UseDimName");
                    this.OnDim5UseDimNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesCostingTypeId in the schema.
        /// </summary>
        [Column(Name = @"sales_costing_type_id", Storage = "_SalesCostingTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesCostingTypeId
        {
            get
            {
                return this._SalesCostingTypeId;
            }
            set
            {
                if (this._SalesCostingTypeId != value)
                {
                    this.OnSalesCostingTypeIdChanging(value);
                    this.SendPropertyChanging("SalesCostingTypeId");
                    this._SalesCostingTypeId = value;
                    this.SendPropertyChanged("SalesCostingTypeId");
                    this.OnSalesCostingTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnquiryCostShownId in the schema.
        /// </summary>
        [Column(Name = @"enquiry_cost_shown_id", Storage = "_EnquiryCostShownId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EnquiryCostShownId
        {
            get
            {
                return this._EnquiryCostShownId;
            }
            set
            {
                if (this._EnquiryCostShownId != value)
                {
                    this.OnEnquiryCostShownIdChanging(value);
                    this.SendPropertyChanging("EnquiryCostShownId");
                    this._EnquiryCostShownId = value;
                    this.SendPropertyChanged("EnquiryCostShownId");
                    this.OnEnquiryCostShownIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationTemplateId in the schema.
        /// </summary>
        [Column(Name = @"specification_template_id", Storage = "_SpecificationTemplateId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SpecificationTemplateId
        {
            get
            {
                return this._SpecificationTemplateId;
            }
            set
            {
                if (this._SpecificationTemplateId != value)
                {
                    this.OnSpecificationTemplateIdChanging(value);
                    this.SendPropertyChanging("SpecificationTemplateId");
                    this._SpecificationTemplateId = value;
                    this.SendPropertyChanged("SpecificationTemplateId");
                    this.OnSpecificationTemplateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChargeBasis in the schema.
        /// </summary>
        [Column(Name = @"charge_basis", Storage = "_ChargeBasis", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ChargeBasis
        {
            get
            {
                return this._ChargeBasis;
            }
            set
            {
                if (this._ChargeBasis != value)
                {
                    this.OnChargeBasisChanging(value);
                    this.SendPropertyChanging("ChargeBasis");
                    this._ChargeBasis = value;
                    this.SendPropertyChanged("ChargeBasis");
                    this.OnChargeBasisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinimumMargin in the schema.
        /// </summary>
        [Column(Name = @"minimum_margin", Storage = "_MinimumMargin", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinimumMargin
        {
            get
            {
                return this._MinimumMargin;
            }
            set
            {
                if (this._MinimumMargin != value)
                {
                    this.OnMinimumMarginChanging(value);
                    this.SendPropertyChanging("MinimumMargin");
                    this._MinimumMargin = value;
                    this.SendPropertyChanged("MinimumMargin");
                    this.OnMinimumMarginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchAllocationVariance in the schema.
        /// </summary>
        [Column(Name = @"despatch_allocation_variance", Storage = "_DespatchAllocationVariance", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DespatchAllocationVariance
        {
            get
            {
                return this._DespatchAllocationVariance;
            }
            set
            {
                if (this._DespatchAllocationVariance != value)
                {
                    this.OnDespatchAllocationVarianceChanging(value);
                    this.SendPropertyChanging("DespatchAllocationVariance");
                    this._DespatchAllocationVariance = value;
                    this.SendPropertyChanged("DespatchAllocationVariance");
                    this.OnDespatchAllocationVarianceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryLevelTax in the schema.
        /// </summary>
        [Column(Name = @"category_level_taxes", Storage = "_CategoryLevelTax", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CategoryLevelTax
        {
            get
            {
                return this._CategoryLevelTax;
            }
            set
            {
                if (this._CategoryLevelTax != value)
                {
                    this.OnCategoryLevelTaxChanging(value);
                    this.SendPropertyChanging("CategoryLevelTax");
                    this._CategoryLevelTax = value;
                    this.SendPropertyChanged("CategoryLevelTax");
                    this.OnCategoryLevelTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification1 in the schema.
        /// </summary>
        [Column(Name = @"print_specification1", Storage = "_PrintSpecification1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification1
        {
            get
            {
                return this._PrintSpecification1;
            }
            set
            {
                if (this._PrintSpecification1 != value)
                {
                    this.OnPrintSpecification1Changing(value);
                    this.SendPropertyChanging("PrintSpecification1");
                    this._PrintSpecification1 = value;
                    this.SendPropertyChanged("PrintSpecification1");
                    this.OnPrintSpecification1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification2 in the schema.
        /// </summary>
        [Column(Name = @"print_specification2", Storage = "_PrintSpecification2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification2
        {
            get
            {
                return this._PrintSpecification2;
            }
            set
            {
                if (this._PrintSpecification2 != value)
                {
                    this.OnPrintSpecification2Changing(value);
                    this.SendPropertyChanging("PrintSpecification2");
                    this._PrintSpecification2 = value;
                    this.SendPropertyChanged("PrintSpecification2");
                    this.OnPrintSpecification2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification3 in the schema.
        /// </summary>
        [Column(Name = @"print_specification3", Storage = "_PrintSpecification3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification3
        {
            get
            {
                return this._PrintSpecification3;
            }
            set
            {
                if (this._PrintSpecification3 != value)
                {
                    this.OnPrintSpecification3Changing(value);
                    this.SendPropertyChanging("PrintSpecification3");
                    this._PrintSpecification3 = value;
                    this.SendPropertyChanged("PrintSpecification3");
                    this.OnPrintSpecification3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification4 in the schema.
        /// </summary>
        [Column(Name = @"print_specification4", Storage = "_PrintSpecification4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification4
        {
            get
            {
                return this._PrintSpecification4;
            }
            set
            {
                if (this._PrintSpecification4 != value)
                {
                    this.OnPrintSpecification4Changing(value);
                    this.SendPropertyChanging("PrintSpecification4");
                    this._PrintSpecification4 = value;
                    this.SendPropertyChanged("PrintSpecification4");
                    this.OnPrintSpecification4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification5 in the schema.
        /// </summary>
        [Column(Name = @"print_specification5", Storage = "_PrintSpecification5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification5
        {
            get
            {
                return this._PrintSpecification5;
            }
            set
            {
                if (this._PrintSpecification5 != value)
                {
                    this.OnPrintSpecification5Changing(value);
                    this.SendPropertyChanging("PrintSpecification5");
                    this._PrintSpecification5 = value;
                    this.SendPropertyChanged("PrintSpecification5");
                    this.OnPrintSpecification5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification6Id in the schema.
        /// </summary>
        [Column(Name = @"specification6_id", Storage = "_Specification6Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification6Id
        {
            get
            {
                return this._Specification6Id;
            }
            set
            {
                if (this._Specification6Id != value)
                {
                    this.OnSpecification6IdChanging(value);
                    this.SendPropertyChanging("Specification6Id");
                    this._Specification6Id = value;
                    this.SendPropertyChanged("Specification6Id");
                    this.OnSpecification6IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification6 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification6", Storage = "_ValidateSpecification6", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification6
        {
            get
            {
                return this._ValidateSpecification6;
            }
            set
            {
                if (this._ValidateSpecification6 != value)
                {
                    this.OnValidateSpecification6Changing(value);
                    this.SendPropertyChanging("ValidateSpecification6");
                    this._ValidateSpecification6 = value;
                    this.SendPropertyChanged("ValidateSpecification6");
                    this.OnValidateSpecification6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification6 in the schema.
        /// </summary>
        [Column(Name = @"print_specification6", Storage = "_PrintSpecification6", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification6
        {
            get
            {
                return this._PrintSpecification6;
            }
            set
            {
                if (this._PrintSpecification6 != value)
                {
                    this.OnPrintSpecification6Changing(value);
                    this.SendPropertyChanging("PrintSpecification6");
                    this._PrintSpecification6 = value;
                    this.SendPropertyChanged("PrintSpecification6");
                    this.OnPrintSpecification6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification7Id in the schema.
        /// </summary>
        [Column(Name = @"specification7_id", Storage = "_Specification7Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification7Id
        {
            get
            {
                return this._Specification7Id;
            }
            set
            {
                if (this._Specification7Id != value)
                {
                    this.OnSpecification7IdChanging(value);
                    this.SendPropertyChanging("Specification7Id");
                    this._Specification7Id = value;
                    this.SendPropertyChanged("Specification7Id");
                    this.OnSpecification7IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification7 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification7", Storage = "_ValidateSpecification7", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification7
        {
            get
            {
                return this._ValidateSpecification7;
            }
            set
            {
                if (this._ValidateSpecification7 != value)
                {
                    this.OnValidateSpecification7Changing(value);
                    this.SendPropertyChanging("ValidateSpecification7");
                    this._ValidateSpecification7 = value;
                    this.SendPropertyChanged("ValidateSpecification7");
                    this.OnValidateSpecification7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification7 in the schema.
        /// </summary>
        [Column(Name = @"print_specification7", Storage = "_PrintSpecification7", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification7
        {
            get
            {
                return this._PrintSpecification7;
            }
            set
            {
                if (this._PrintSpecification7 != value)
                {
                    this.OnPrintSpecification7Changing(value);
                    this.SendPropertyChanging("PrintSpecification7");
                    this._PrintSpecification7 = value;
                    this.SendPropertyChanged("PrintSpecification7");
                    this.OnPrintSpecification7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification8Id in the schema.
        /// </summary>
        [Column(Name = @"specification8_id", Storage = "_Specification8Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification8Id
        {
            get
            {
                return this._Specification8Id;
            }
            set
            {
                if (this._Specification8Id != value)
                {
                    this.OnSpecification8IdChanging(value);
                    this.SendPropertyChanging("Specification8Id");
                    this._Specification8Id = value;
                    this.SendPropertyChanged("Specification8Id");
                    this.OnSpecification8IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification8 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification8", Storage = "_ValidateSpecification8", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification8
        {
            get
            {
                return this._ValidateSpecification8;
            }
            set
            {
                if (this._ValidateSpecification8 != value)
                {
                    this.OnValidateSpecification8Changing(value);
                    this.SendPropertyChanging("ValidateSpecification8");
                    this._ValidateSpecification8 = value;
                    this.SendPropertyChanged("ValidateSpecification8");
                    this.OnValidateSpecification8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification8 in the schema.
        /// </summary>
        [Column(Name = @"print_specification8", Storage = "_PrintSpecification8", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification8
        {
            get
            {
                return this._PrintSpecification8;
            }
            set
            {
                if (this._PrintSpecification8 != value)
                {
                    this.OnPrintSpecification8Changing(value);
                    this.SendPropertyChanging("PrintSpecification8");
                    this._PrintSpecification8 = value;
                    this.SendPropertyChanged("PrintSpecification8");
                    this.OnPrintSpecification8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification9Id in the schema.
        /// </summary>
        [Column(Name = @"specification9_id", Storage = "_Specification9Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification9Id
        {
            get
            {
                return this._Specification9Id;
            }
            set
            {
                if (this._Specification9Id != value)
                {
                    this.OnSpecification9IdChanging(value);
                    this.SendPropertyChanging("Specification9Id");
                    this._Specification9Id = value;
                    this.SendPropertyChanged("Specification9Id");
                    this.OnSpecification9IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification9 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification9", Storage = "_ValidateSpecification9", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification9
        {
            get
            {
                return this._ValidateSpecification9;
            }
            set
            {
                if (this._ValidateSpecification9 != value)
                {
                    this.OnValidateSpecification9Changing(value);
                    this.SendPropertyChanging("ValidateSpecification9");
                    this._ValidateSpecification9 = value;
                    this.SendPropertyChanged("ValidateSpecification9");
                    this.OnValidateSpecification9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification9 in the schema.
        /// </summary>
        [Column(Name = @"print_specification9", Storage = "_PrintSpecification9", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification9
        {
            get
            {
                return this._PrintSpecification9;
            }
            set
            {
                if (this._PrintSpecification9 != value)
                {
                    this.OnPrintSpecification9Changing(value);
                    this.SendPropertyChanging("PrintSpecification9");
                    this._PrintSpecification9 = value;
                    this.SendPropertyChanged("PrintSpecification9");
                    this.OnPrintSpecification9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification10Id in the schema.
        /// </summary>
        [Column(Name = @"specification10_id", Storage = "_Specification10Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification10Id
        {
            get
            {
                return this._Specification10Id;
            }
            set
            {
                if (this._Specification10Id != value)
                {
                    this.OnSpecification10IdChanging(value);
                    this.SendPropertyChanging("Specification10Id");
                    this._Specification10Id = value;
                    this.SendPropertyChanged("Specification10Id");
                    this.OnSpecification10IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateSpecification10 in the schema.
        /// </summary>
        [Column(Name = @"validate_specification10", Storage = "_ValidateSpecification10", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateSpecification10
        {
            get
            {
                return this._ValidateSpecification10;
            }
            set
            {
                if (this._ValidateSpecification10 != value)
                {
                    this.OnValidateSpecification10Changing(value);
                    this.SendPropertyChanging("ValidateSpecification10");
                    this._ValidateSpecification10 = value;
                    this.SendPropertyChanged("ValidateSpecification10");
                    this.OnValidateSpecification10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrintSpecification10 in the schema.
        /// </summary>
        [Column(Name = @"print_specification10", Storage = "_PrintSpecification10", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PrintSpecification10
        {
            get
            {
                return this._PrintSpecification10;
            }
            set
            {
                if (this._PrintSpecification10 != value)
                {
                    this.OnPrintSpecification10Changing(value);
                    this.SendPropertyChanging("PrintSpecification10");
                    this._PrintSpecification10 = value;
                    this.SendPropertyChanged("PrintSpecification10");
                    this.OnPrintSpecification10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"purchase_group_id", Storage = "_PurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseGroupId
        {
            get
            {
                return this._PurchaseGroupId;
            }
            set
            {
                if (this._PurchaseGroupId != value)
                {
                    this.OnPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("PurchaseGroupId");
                    this._PurchaseGroupId = value;
                    this.SendPropertyChanged("PurchaseGroupId");
                    this.OnPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1Print in the schema.
        /// </summary>
        [Column(Name = @"dim1_print", Storage = "_Dim1Print", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim1Print
        {
            get
            {
                return this._Dim1Print;
            }
            set
            {
                if (this._Dim1Print != value)
                {
                    this.OnDim1PrintChanging(value);
                    this.SendPropertyChanging("Dim1Print");
                    this._Dim1Print = value;
                    this.SendPropertyChanged("Dim1Print");
                    this.OnDim1PrintChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2Print in the schema.
        /// </summary>
        [Column(Name = @"dim2_print", Storage = "_Dim2Print", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim2Print
        {
            get
            {
                return this._Dim2Print;
            }
            set
            {
                if (this._Dim2Print != value)
                {
                    this.OnDim2PrintChanging(value);
                    this.SendPropertyChanging("Dim2Print");
                    this._Dim2Print = value;
                    this.SendPropertyChanged("Dim2Print");
                    this.OnDim2PrintChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3Print in the schema.
        /// </summary>
        [Column(Name = @"dim3_print", Storage = "_Dim3Print", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim3Print
        {
            get
            {
                return this._Dim3Print;
            }
            set
            {
                if (this._Dim3Print != value)
                {
                    this.OnDim3PrintChanging(value);
                    this.SendPropertyChanging("Dim3Print");
                    this._Dim3Print = value;
                    this.SendPropertyChanged("Dim3Print");
                    this.OnDim3PrintChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4Print in the schema.
        /// </summary>
        [Column(Name = @"dim4_print", Storage = "_Dim4Print", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim4Print
        {
            get
            {
                return this._Dim4Print;
            }
            set
            {
                if (this._Dim4Print != value)
                {
                    this.OnDim4PrintChanging(value);
                    this.SendPropertyChanging("Dim4Print");
                    this._Dim4Print = value;
                    this.SendPropertyChanged("Dim4Print");
                    this.OnDim4PrintChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5Print in the schema.
        /// </summary>
        [Column(Name = @"dim5_print", Storage = "_Dim5Print", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Dim5Print
        {
            get
            {
                return this._Dim5Print;
            }
            set
            {
                if (this._Dim5Print != value)
                {
                    this.OnDim5PrintChanging(value);
                    this.SendPropertyChanging("Dim5Print");
                    this._Dim5Print = value;
                    this.SendPropertyChanged("Dim5Print");
                    this.OnDim5PrintChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequireCertification in the schema.
        /// </summary>
        [Column(Name = @"require_certification", Storage = "_RequireCertification", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool RequireCertification
        {
            get
            {
                return this._RequireCertification;
            }
            set
            {
                if (this._RequireCertification != value)
                {
                    this.OnRequireCertificationChanging(value);
                    this.SendPropertyChanging("RequireCertification");
                    this._RequireCertification = value;
                    this.SendPropertyChanged("RequireCertification");
                    this.OnRequireCertificationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification1 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification1", Storage = "_MandatorySpecification1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification1
        {
            get
            {
                return this._MandatorySpecification1;
            }
            set
            {
                if (this._MandatorySpecification1 != value)
                {
                    this.OnMandatorySpecification1Changing(value);
                    this.SendPropertyChanging("MandatorySpecification1");
                    this._MandatorySpecification1 = value;
                    this.SendPropertyChanged("MandatorySpecification1");
                    this.OnMandatorySpecification1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification2 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification2", Storage = "_MandatorySpecification2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification2
        {
            get
            {
                return this._MandatorySpecification2;
            }
            set
            {
                if (this._MandatorySpecification2 != value)
                {
                    this.OnMandatorySpecification2Changing(value);
                    this.SendPropertyChanging("MandatorySpecification2");
                    this._MandatorySpecification2 = value;
                    this.SendPropertyChanged("MandatorySpecification2");
                    this.OnMandatorySpecification2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification3 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification3", Storage = "_MandatorySpecification3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification3
        {
            get
            {
                return this._MandatorySpecification3;
            }
            set
            {
                if (this._MandatorySpecification3 != value)
                {
                    this.OnMandatorySpecification3Changing(value);
                    this.SendPropertyChanging("MandatorySpecification3");
                    this._MandatorySpecification3 = value;
                    this.SendPropertyChanged("MandatorySpecification3");
                    this.OnMandatorySpecification3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification4 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification4", Storage = "_MandatorySpecification4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification4
        {
            get
            {
                return this._MandatorySpecification4;
            }
            set
            {
                if (this._MandatorySpecification4 != value)
                {
                    this.OnMandatorySpecification4Changing(value);
                    this.SendPropertyChanging("MandatorySpecification4");
                    this._MandatorySpecification4 = value;
                    this.SendPropertyChanged("MandatorySpecification4");
                    this.OnMandatorySpecification4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification5 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification5", Storage = "_MandatorySpecification5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification5
        {
            get
            {
                return this._MandatorySpecification5;
            }
            set
            {
                if (this._MandatorySpecification5 != value)
                {
                    this.OnMandatorySpecification5Changing(value);
                    this.SendPropertyChanging("MandatorySpecification5");
                    this._MandatorySpecification5 = value;
                    this.SendPropertyChanged("MandatorySpecification5");
                    this.OnMandatorySpecification5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification6 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification6", Storage = "_MandatorySpecification6", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification6
        {
            get
            {
                return this._MandatorySpecification6;
            }
            set
            {
                if (this._MandatorySpecification6 != value)
                {
                    this.OnMandatorySpecification6Changing(value);
                    this.SendPropertyChanging("MandatorySpecification6");
                    this._MandatorySpecification6 = value;
                    this.SendPropertyChanged("MandatorySpecification6");
                    this.OnMandatorySpecification6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification7 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification7", Storage = "_MandatorySpecification7", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification7
        {
            get
            {
                return this._MandatorySpecification7;
            }
            set
            {
                if (this._MandatorySpecification7 != value)
                {
                    this.OnMandatorySpecification7Changing(value);
                    this.SendPropertyChanging("MandatorySpecification7");
                    this._MandatorySpecification7 = value;
                    this.SendPropertyChanged("MandatorySpecification7");
                    this.OnMandatorySpecification7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification8 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification8", Storage = "_MandatorySpecification8", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification8
        {
            get
            {
                return this._MandatorySpecification8;
            }
            set
            {
                if (this._MandatorySpecification8 != value)
                {
                    this.OnMandatorySpecification8Changing(value);
                    this.SendPropertyChanging("MandatorySpecification8");
                    this._MandatorySpecification8 = value;
                    this.SendPropertyChanged("MandatorySpecification8");
                    this.OnMandatorySpecification8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification9 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification9", Storage = "_MandatorySpecification9", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification9
        {
            get
            {
                return this._MandatorySpecification9;
            }
            set
            {
                if (this._MandatorySpecification9 != value)
                {
                    this.OnMandatorySpecification9Changing(value);
                    this.SendPropertyChanging("MandatorySpecification9");
                    this._MandatorySpecification9 = value;
                    this.SendPropertyChanged("MandatorySpecification9");
                    this.OnMandatorySpecification9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatorySpecification10 in the schema.
        /// </summary>
        [Column(Name = @"mandatory_specification10", Storage = "_MandatorySpecification10", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatorySpecification10
        {
            get
            {
                return this._MandatorySpecification10;
            }
            set
            {
                if (this._MandatorySpecification10 != value)
                {
                    this.OnMandatorySpecification10Changing(value);
                    this.SendPropertyChanging("MandatorySpecification10");
                    this._MandatorySpecification10 = value;
                    this.SendPropertyChanged("MandatorySpecification10");
                    this.OnMandatorySpecification10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionQuantityEntryId in the schema.
        /// </summary>
        [Column(Name = @"production_quantity_entry_id", Storage = "_ProductionQuantityEntryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionQuantityEntryId
        {
            get
            {
                return this._ProductionQuantityEntryId;
            }
            set
            {
                if (this._ProductionQuantityEntryId != value)
                {
                    this.OnProductionQuantityEntryIdChanging(value);
                    this.SendPropertyChanging("ProductionQuantityEntryId");
                    this._ProductionQuantityEntryId = value;
                    this.SendPropertyChanged("ProductionQuantityEntryId");
                    this.OnProductionQuantityEntryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationCheck in the schema.
        /// </summary>
        [Column(Name = @"specification_check", Storage = "_SpecificationCheck", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool SpecificationCheck
        {
            get
            {
                return this._SpecificationCheck;
            }
            set
            {
                if (this._SpecificationCheck != value)
                {
                    this.OnSpecificationCheckChanging(value);
                    this.SendPropertyChanging("SpecificationCheck");
                    this._SpecificationCheck = value;
                    this.SendPropertyChanged("SpecificationCheck");
                    this.OnSpecificationCheckChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AutoAllocate in the schema.
        /// </summary>
        [Column(Name = @"auto_allocate", Storage = "_AutoAllocate", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool AutoAllocate
        {
            get
            {
                return this._AutoAllocate;
            }
            set
            {
                if (this._AutoAllocate != value)
                {
                    this.OnAutoAllocateChanging(value);
                    this.SendPropertyChanging("AutoAllocate");
                    this._AutoAllocate = value;
                    this.SendPropertyChanged("AutoAllocate");
                    this.OnAutoAllocateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionMixedCastsAllowed in the schema.
        /// </summary>
        [Column(Name = @"production_mixed_casts_allowed", Storage = "_ProductionMixedCastsAllowed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ProductionMixedCastsAllowed
        {
            get
            {
                return this._ProductionMixedCastsAllowed;
            }
            set
            {
                if (this._ProductionMixedCastsAllowed != value)
                {
                    this.OnProductionMixedCastsAllowedChanging(value);
                    this.SendPropertyChanging("ProductionMixedCastsAllowed");
                    this._ProductionMixedCastsAllowed = value;
                    this.SendPropertyChanged("ProductionMixedCastsAllowed");
                    this.OnProductionMixedCastsAllowedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FlagStockItemsWithNote in the schema.
        /// </summary>
        [Column(Name = @"flag_stock_items_with_notes", Storage = "_FlagStockItemsWithNote", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> FlagStockItemsWithNote
        {
            get
            {
                return this._FlagStockItemsWithNote;
            }
            set
            {
                if (this._FlagStockItemsWithNote != value)
                {
                    this.OnFlagStockItemsWithNoteChanging(value);
                    this.SendPropertyChanging("FlagStockItemsWithNote");
                    this._FlagStockItemsWithNote = value;
                    this.SendPropertyChanged("FlagStockItemsWithNote");
                    this.OnFlagStockItemsWithNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NonTraceable in the schema.
        /// </summary>
        [Column(Name = @"non_traceable", Storage = "_NonTraceable", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> NonTraceable
        {
            get
            {
                return this._NonTraceable;
            }
            set
            {
                if (this._NonTraceable != value)
                {
                    this.OnNonTraceableChanging(value);
                    this.SendPropertyChanging("NonTraceable");
                    this._NonTraceable = value;
                    this.SendPropertyChanged("NonTraceable");
                    this.OnNonTraceableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderQuantityEntryId in the schema.
        /// </summary>
        [Column(Name = @"order_quantity_entry_id", Storage = "_OrderQuantityEntryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OrderQuantityEntryId
        {
            get
            {
                return this._OrderQuantityEntryId;
            }
            set
            {
                if (this._OrderQuantityEntryId != value)
                {
                    this.OnOrderQuantityEntryIdChanging(value);
                    this.SendPropertyChanging("OrderQuantityEntryId");
                    this._OrderQuantityEntryId = value;
                    this.SendPropertyChanged("OrderQuantityEntryId");
                    this.OnOrderQuantityEntryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidateDynamicDensity in the schema.
        /// </summary>
        [Column(Name = @"validate_dynamic_density", Storage = "_ValidateDynamicDensity", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ValidateDynamicDensity
        {
            get
            {
                return this._ValidateDynamicDensity;
            }
            set
            {
                if (this._ValidateDynamicDensity != value)
                {
                    this.OnValidateDynamicDensityChanging(value);
                    this.SendPropertyChanging("ValidateDynamicDensity");
                    this._ValidateDynamicDensity = value;
                    this.SendPropertyChanged("ValidateDynamicDensity");
                    this.OnValidateDynamicDensityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceWeightUpdatesItemBalance in the schema.
        /// </summary>
        [Column(Name = @"invoice_weight_updates_item_balance", Storage = "_InvoiceWeightUpdatesItemBalance", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> InvoiceWeightUpdatesItemBalance
        {
            get
            {
                return this._InvoiceWeightUpdatesItemBalance;
            }
            set
            {
                if (this._InvoiceWeightUpdatesItemBalance != value)
                {
                    this.OnInvoiceWeightUpdatesItemBalanceChanging(value);
                    this.SendPropertyChanging("InvoiceWeightUpdatesItemBalance");
                    this._InvoiceWeightUpdatesItemBalance = value;
                    this.SendPropertyChanged("InvoiceWeightUpdatesItemBalance");
                    this.OnInvoiceWeightUpdatesItemBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim1_kerf", Storage = "_Dim1Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim1Kerf
        {
            get
            {
                return this._Dim1Kerf;
            }
            set
            {
                if (this._Dim1Kerf != value)
                {
                    this.OnDim1KerfChanging(value);
                    this.SendPropertyChanging("Dim1Kerf");
                    this._Dim1Kerf = value;
                    this.SendPropertyChanged("Dim1Kerf");
                    this.OnDim1KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim2_kerf", Storage = "_Dim2Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim2Kerf
        {
            get
            {
                return this._Dim2Kerf;
            }
            set
            {
                if (this._Dim2Kerf != value)
                {
                    this.OnDim2KerfChanging(value);
                    this.SendPropertyChanging("Dim2Kerf");
                    this._Dim2Kerf = value;
                    this.SendPropertyChanged("Dim2Kerf");
                    this.OnDim2KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim3_kerf", Storage = "_Dim3Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim3Kerf
        {
            get
            {
                return this._Dim3Kerf;
            }
            set
            {
                if (this._Dim3Kerf != value)
                {
                    this.OnDim3KerfChanging(value);
                    this.SendPropertyChanging("Dim3Kerf");
                    this._Dim3Kerf = value;
                    this.SendPropertyChanged("Dim3Kerf");
                    this.OnDim3KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim4_kerf", Storage = "_Dim4Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim4Kerf
        {
            get
            {
                return this._Dim4Kerf;
            }
            set
            {
                if (this._Dim4Kerf != value)
                {
                    this.OnDim4KerfChanging(value);
                    this.SendPropertyChanging("Dim4Kerf");
                    this._Dim4Kerf = value;
                    this.SendPropertyChanged("Dim4Kerf");
                    this.OnDim4KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5Kerf in the schema.
        /// </summary>
        [Column(Name = @"dim5_kerf", Storage = "_Dim5Kerf", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Dim5Kerf
        {
            get
            {
                return this._Dim5Kerf;
            }
            set
            {
                if (this._Dim5Kerf != value)
                {
                    this.OnDim5KerfChanging(value);
                    this.SendPropertyChanging("Dim5Kerf");
                    this._Dim5Kerf = value;
                    this.SendPropertyChanged("Dim5Kerf");
                    this.OnDim5KerfChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductControl in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductControl_ProductCategory", Storage="_ProductControl", ThisKey="ProductControlId", OtherKey="Id", IsForeignKey=true)]
        public ProductControl ProductControl
        {
            get
            {
                return this._ProductControl.Entity;
            }
            set
            {
                ProductControl previousValue = this._ProductControl.Entity;
                if ((previousValue != value) || (this._ProductControl.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductControl");
                    if (previousValue != null)
                    {
                        this._ProductControl.Entity = null;
                        previousValue.ProductCategory.Remove(this);
                    }
                    this._ProductControl.Entity = value;
                    if (value != null)
                    {
                        this._ProductControlId = value.Id;
                        value.ProductCategory.Add(this);
                    }
                    else
                    {
                        this._ProductControlId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductControl");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis1Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_ProductCategory", Storage="_StockAnalysisCode_Analysis1Id", ThisKey="Analysis1Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis1Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis1Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis1Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis1Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis1Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis1Id.Entity = null;
                        previousValue.ProductCategory_Analysis1Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis1Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis1Id = value.Id;
                        value.ProductCategory_Analysis1Id.Add(this);
                    }
                    else
                    {
                        this._Analysis1Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis1Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAnalysisCode_Analysis2Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockAnalysisCode_ProductCategory1", Storage="_StockAnalysisCode_Analysis2Id", ThisKey="Analysis2Id", OtherKey="Id", IsForeignKey=true)]
        public StockAnalysisCode StockAnalysisCode_Analysis2Id
        {
            get
            {
                return this._StockAnalysisCode_Analysis2Id.Entity;
            }
            set
            {
                StockAnalysisCode previousValue = this._StockAnalysisCode_Analysis2Id.Entity;
                if ((previousValue != value) || (this._StockAnalysisCode_Analysis2Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockAnalysisCode_Analysis2Id");
                    if (previousValue != null)
                    {
                        this._StockAnalysisCode_Analysis2Id.Entity = null;
                        previousValue.ProductCategory_Analysis2Id.Remove(this);
                    }
                    this._StockAnalysisCode_Analysis2Id.Entity = value;
                    if (value != null)
                    {
                        this._Analysis2Id = value.Id;
                        value.ProductCategory_Analysis2Id.Add(this);
                    }
                    else
                    {
                        this._Analysis2Id = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockAnalysisCode_Analysis2Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_BuyUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductCategory", Storage="_UnitsOfMeasure_BuyUnitId", ThisKey="BuyUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_BuyUnitId
        {
            get
            {
                return this._UnitsOfMeasure_BuyUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_BuyUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_BuyUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_BuyUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_BuyUnitId.Entity = null;
                        previousValue.ProductCategory_BuyUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_BuyUnitId.Entity = value;
                    if (value != null)
                    {
                        this._BuyUnitId = value.Id;
                        value.ProductCategory_BuyUnitId.Add(this);
                    }
                    else
                    {
                        this._BuyUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_BuyUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_BuyingQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductCategory1", Storage="_UnitsOfMeasure_BuyingQuantityUnitId", ThisKey="BuyingQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_BuyingQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_BuyingQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_BuyingQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_BuyingQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_BuyingQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_BuyingQuantityUnitId.Entity = null;
                        previousValue.ProductCategory_BuyingQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_BuyingQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._BuyingQuantityUnitId = value.Id;
                        value.ProductCategory_BuyingQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._BuyingQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_BuyingQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_CostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductCategory2", Storage="_UnitsOfMeasure_CostUnitId", ThisKey="CostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_CostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_CostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_CostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_CostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_CostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_CostUnitId.Entity = null;
                        previousValue.ProductCategory_CostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_CostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._CostUnitId = value.Id;
                        value.ProductCategory_CostUnitId.Add(this);
                    }
                    else
                    {
                        this._CostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_CostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_PriceUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductCategory3", Storage="_UnitsOfMeasure_PriceUnitId", ThisKey="PriceUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_PriceUnitId
        {
            get
            {
                return this._UnitsOfMeasure_PriceUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_PriceUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_PriceUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_PriceUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_PriceUnitId.Entity = null;
                        previousValue.ProductCategory_PriceUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_PriceUnitId.Entity = value;
                    if (value != null)
                    {
                        this._PriceUnitId = value.Id;
                        value.ProductCategory_PriceUnitId.Add(this);
                    }
                    else
                    {
                        this._PriceUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_PriceUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_SalesQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductCategory4", Storage="_UnitsOfMeasure_SalesQuantityUnitId", ThisKey="SalesQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_SalesQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_SalesQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_SalesQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_SalesQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_SalesQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_SalesQuantityUnitId.Entity = null;
                        previousValue.ProductCategory_SalesQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_SalesQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._SalesQuantityUnitId = value.Id;
                        value.ProductCategory_SalesQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._SalesQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_SalesQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory_SourceCategoryId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_ProductCategory", Storage="_ProductCategory_SourceCategoryId1", ThisKey="Id", OtherKey="SourceCategoryId", DeleteRule="NO ACTION")]
        public EntitySet<ProductCategory> ProductCategory_SourceCategoryId1
        {
            get
            {
                return this._ProductCategory_SourceCategoryId1;
            }
            set
            {
                this._ProductCategory_SourceCategoryId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory_SourceCategoryId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_ProductCategory", Storage="_ProductCategory_SourceCategoryId", ThisKey="SourceCategoryId", OtherKey="Id", IsForeignKey=true)]
        public ProductCategory ProductCategory_SourceCategoryId
        {
            get
            {
                return this._ProductCategory_SourceCategoryId.Entity;
            }
            set
            {
                ProductCategory previousValue = this._ProductCategory_SourceCategoryId.Entity;
                if ((previousValue != value) || (this._ProductCategory_SourceCategoryId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductCategory_SourceCategoryId");
                    if (previousValue != null)
                    {
                        this._ProductCategory_SourceCategoryId.Entity = null;
                        previousValue.ProductCategory_SourceCategoryId1.Remove(this);
                    }
                    this._ProductCategory_SourceCategoryId.Entity = value;
                    if (value != null)
                    {
                        this._SourceCategoryId = value.Id;
                        value.ProductCategory_SourceCategoryId1.Add(this);
                    }
                    else
                    {
                        this._SourceCategoryId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductCategory_SourceCategoryId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockCast in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_StockCast", Storage="_StockCast", ThisKey="Id", OtherKey="CategoryId", DeleteRule="NO ACTION")]
        public EntitySet<StockCast> StockCast
        {
            get
            {
                return this._StockCast;
            }
            set
            {
                this._StockCast.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_Product", Storage="_Product", ThisKey="Id", OtherKey="CategoryId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                this._Product.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductCategory_SourceCategoryId1(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategory_SourceCategoryId1");
            entity.ProductCategory_SourceCategoryId = this;
        }
    
        private void detach_ProductCategory_SourceCategoryId1(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategory_SourceCategoryId1");
            entity.ProductCategory_SourceCategoryId = null;
        }

        private void attach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.ProductCategory = this;
        }
    
        private void detach_StockCast(StockCast entity)
        {
            this.SendPropertyChanging("StockCast");
            entity.ProductCategory = null;
        }

        private void attach_Product(Product entity)
        {
            this.SendPropertyChanging("Product");
            entity.ProductCategory = this;
        }
    
        private void detach_Product(Product entity)
        {
            this.SendPropertyChanging("Product");
            entity.ProductCategory = null;
        }
    }

}
