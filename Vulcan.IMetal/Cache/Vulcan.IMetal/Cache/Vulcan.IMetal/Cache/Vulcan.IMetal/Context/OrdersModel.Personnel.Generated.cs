//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.Personnel in the schema.
    /// </summary>
    [Table(Name = @"public.personnel")]
    public partial class Personnel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Name;

        private string _Telephone;

        private string _FastDial;

        private string _Mobile;

        private string _Fax;

        private string _Email;

        private string _Password;

        private System.Nullable<bool> _Enabled;

        private string _SecurityRole;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _PersonnelGroupId;

        private System.Nullable<int> _DefaultPrinterId;

        private string _TableEditingPermissionLevel;

        private System.Nullable<int> _DefaultCustomerId;

        private string _DiaryGroupsCode;

        private decimal _ReconciliationVarianceValue = 0m;

        private decimal _ReconciliationVariancePercentage = 0m;

        private decimal _MaxSupplierDocumentValue = 0m;

        private string _LedgerSegmentCode;

        private string _GoogleCalendarUser;

        private string _GoogleCalendarPassword;

        private System.Nullable<bool> _MemberOfPickupCallsGroup = false;

        private System.Nullable<bool> _ViewAllEnquiryItemsAllowed = false;

        private System.Nullable<int> _DefaultLabelPrinterId;

        private string _LoginName;

        private System.Nullable<int> _DefaultSalesGroupId;

        private string _LocaleId;

        private bool _SupportUser = false;
        #pragma warning restore 0649

        private EntitySet<Company> _Company_PersonnelId;

        private EntityRef<Company> _Company_DefaultCustomerId;

        private EntityRef<SalesGroup> _SalesGroup;

        private EntitySet<Contact> _Contact;

        private EntitySet<Branch> _Branch_InboundAllocationManagerId;

        private EntityRef<Branch> _Branch_BranchId;

        private EntitySet<SalesHeader> _SalesHeader_CreditReleaseUserId;

        private EntitySet<SalesHeader> _SalesHeader_InsideSalespersonId;

        private EntitySet<SalesHeader> _SalesHeader_SalespersonId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFastDialChanging(string value);
        partial void OnFastDialChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEnabledChanging(System.Nullable<bool> value);
        partial void OnEnabledChanged();
        partial void OnSecurityRoleChanging(string value);
        partial void OnSecurityRoleChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnPersonnelGroupIdChanging(System.Nullable<int> value);
        partial void OnPersonnelGroupIdChanged();
        partial void OnDefaultPrinterIdChanging(System.Nullable<int> value);
        partial void OnDefaultPrinterIdChanged();
        partial void OnTableEditingPermissionLevelChanging(string value);
        partial void OnTableEditingPermissionLevelChanged();
        partial void OnDefaultCustomerIdChanging(System.Nullable<int> value);
        partial void OnDefaultCustomerIdChanged();
        partial void OnDiaryGroupsCodeChanging(string value);
        partial void OnDiaryGroupsCodeChanged();
        partial void OnReconciliationVarianceValueChanging(decimal value);
        partial void OnReconciliationVarianceValueChanged();
        partial void OnReconciliationVariancePercentageChanging(decimal value);
        partial void OnReconciliationVariancePercentageChanged();
        partial void OnMaxSupplierDocumentValueChanging(decimal value);
        partial void OnMaxSupplierDocumentValueChanged();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnGoogleCalendarUserChanging(string value);
        partial void OnGoogleCalendarUserChanged();
        partial void OnGoogleCalendarPasswordChanging(string value);
        partial void OnGoogleCalendarPasswordChanged();
        partial void OnMemberOfPickupCallsGroupChanging(System.Nullable<bool> value);
        partial void OnMemberOfPickupCallsGroupChanged();
        partial void OnViewAllEnquiryItemsAllowedChanging(System.Nullable<bool> value);
        partial void OnViewAllEnquiryItemsAllowedChanged();
        partial void OnDefaultLabelPrinterIdChanging(System.Nullable<int> value);
        partial void OnDefaultLabelPrinterIdChanged();
        partial void OnLoginNameChanging(string value);
        partial void OnLoginNameChanged();
        partial void OnDefaultSalesGroupIdChanging(System.Nullable<int> value);
        partial void OnDefaultSalesGroupIdChanged();
        partial void OnLocaleIdChanging(string value);
        partial void OnLocaleIdChanged();
        partial void OnSupportUserChanging(bool value);
        partial void OnSupportUserChanged();
        #endregion

        public Personnel()
        {
            this._Company_PersonnelId = new EntitySet<Company>(new Action<Company>(this.attach_Company_PersonnelId), new Action<Company>(this.detach_Company_PersonnelId));
            this._Company_DefaultCustomerId  = default(EntityRef<Company>);
            this._SalesGroup  = default(EntityRef<SalesGroup>);
            this._Contact = new EntitySet<Contact>(new Action<Contact>(this.attach_Contact), new Action<Contact>(this.detach_Contact));
            this._Branch_InboundAllocationManagerId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_InboundAllocationManagerId), new Action<Branch>(this.detach_Branch_InboundAllocationManagerId));
            this._Branch_BranchId  = default(EntityRef<Branch>);
            this._SalesHeader_CreditReleaseUserId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_CreditReleaseUserId), new Action<SalesHeader>(this.detach_SalesHeader_CreditReleaseUserId));
            this._SalesHeader_InsideSalespersonId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_InsideSalespersonId), new Action<SalesHeader>(this.detach_SalesHeader_InsideSalespersonId));
            this._SalesHeader_SalespersonId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_SalespersonId), new Action<SalesHeader>(this.detach_SalesHeader_SalespersonId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FastDial in the schema.
        /// </summary>
        [Column(Name = @"fast_dial", Storage = "_FastDial", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string FastDial
        {
            get
            {
                return this._FastDial;
            }
            set
            {
                if (this._FastDial != value)
                {
                    this.OnFastDialChanging(value);
                    this.SendPropertyChanging("FastDial");
                    this._FastDial = value;
                    this.SendPropertyChanged("FastDial");
                    this.OnFastDialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mobile in the schema.
        /// </summary>
        [Column(Name = @"mobile", Storage = "_Mobile", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if (this._Mobile != value)
                {
                    this.OnMobileChanging(value);
                    this.SendPropertyChanging("Mobile");
                    this._Mobile = value;
                    this.SendPropertyChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"""password""", Storage = "_Password", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Enabled in the schema.
        /// </summary>
        [Column(Name = @"enabled", Storage = "_Enabled", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Enabled
        {
            get
            {
                return this._Enabled;
            }
            set
            {
                if (this._Enabled != value)
                {
                    this.OnEnabledChanging(value);
                    this.SendPropertyChanging("Enabled");
                    this._Enabled = value;
                    this.SendPropertyChanged("Enabled");
                    this.OnEnabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecurityRole in the schema.
        /// </summary>
        [Column(Name = @"security_roles", Storage = "_SecurityRole", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string SecurityRole
        {
            get
            {
                return this._SecurityRole;
            }
            set
            {
                if (this._SecurityRole != value)
                {
                    this.OnSecurityRoleChanging(value);
                    this.SendPropertyChanging("SecurityRole");
                    this._SecurityRole = value;
                    this.SendPropertyChanged("SecurityRole");
                    this.OnSecurityRoleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch_BranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonnelGroupId in the schema.
        /// </summary>
        [Column(Name = @"personnel_group_id", Storage = "_PersonnelGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PersonnelGroupId
        {
            get
            {
                return this._PersonnelGroupId;
            }
            set
            {
                if (this._PersonnelGroupId != value)
                {
                    this.OnPersonnelGroupIdChanging(value);
                    this.SendPropertyChanging("PersonnelGroupId");
                    this._PersonnelGroupId = value;
                    this.SendPropertyChanged("PersonnelGroupId");
                    this.OnPersonnelGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultPrinterId in the schema.
        /// </summary>
        [Column(Name = @"default_printer_id", Storage = "_DefaultPrinterId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultPrinterId
        {
            get
            {
                return this._DefaultPrinterId;
            }
            set
            {
                if (this._DefaultPrinterId != value)
                {
                    this.OnDefaultPrinterIdChanging(value);
                    this.SendPropertyChanging("DefaultPrinterId");
                    this._DefaultPrinterId = value;
                    this.SendPropertyChanged("DefaultPrinterId");
                    this.OnDefaultPrinterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TableEditingPermissionLevel in the schema.
        /// </summary>
        [Column(Name = @"table_editing_permission_level", Storage = "_TableEditingPermissionLevel", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TableEditingPermissionLevel
        {
            get
            {
                return this._TableEditingPermissionLevel;
            }
            set
            {
                if (this._TableEditingPermissionLevel != value)
                {
                    this.OnTableEditingPermissionLevelChanging(value);
                    this.SendPropertyChanging("TableEditingPermissionLevel");
                    this._TableEditingPermissionLevel = value;
                    this.SendPropertyChanged("TableEditingPermissionLevel");
                    this.OnTableEditingPermissionLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultCustomerId in the schema.
        /// </summary>
        [Column(Name = @"default_customer_id", Storage = "_DefaultCustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultCustomerId
        {
            get
            {
                return this._DefaultCustomerId;
            }
            set
            {
                if (this._DefaultCustomerId != value)
                {
                    if (this._Company_DefaultCustomerId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefaultCustomerIdChanging(value);
                    this.SendPropertyChanging("DefaultCustomerId");
                    this._DefaultCustomerId = value;
                    this.SendPropertyChanged("DefaultCustomerId");
                    this.OnDefaultCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiaryGroupsCode in the schema.
        /// </summary>
        [Column(Name = @"diary_groups_code", Storage = "_DiaryGroupsCode", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string DiaryGroupsCode
        {
            get
            {
                return this._DiaryGroupsCode;
            }
            set
            {
                if (this._DiaryGroupsCode != value)
                {
                    this.OnDiaryGroupsCodeChanging(value);
                    this.SendPropertyChanging("DiaryGroupsCode");
                    this._DiaryGroupsCode = value;
                    this.SendPropertyChanged("DiaryGroupsCode");
                    this.OnDiaryGroupsCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReconciliationVarianceValue in the schema.
        /// </summary>
        [Column(Name = @"reconciliation_variance_value", Storage = "_ReconciliationVarianceValue", CanBeNull = false, DbType = "NUMERIC(12,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal ReconciliationVarianceValue
        {
            get
            {
                return this._ReconciliationVarianceValue;
            }
            set
            {
                if (this._ReconciliationVarianceValue != value)
                {
                    this.OnReconciliationVarianceValueChanging(value);
                    this.SendPropertyChanging("ReconciliationVarianceValue");
                    this._ReconciliationVarianceValue = value;
                    this.SendPropertyChanged("ReconciliationVarianceValue");
                    this.OnReconciliationVarianceValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReconciliationVariancePercentage in the schema.
        /// </summary>
        [Column(Name = @"reconciliation_variance_percentage", Storage = "_ReconciliationVariancePercentage", CanBeNull = false, DbType = "NUMERIC(6,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal ReconciliationVariancePercentage
        {
            get
            {
                return this._ReconciliationVariancePercentage;
            }
            set
            {
                if (this._ReconciliationVariancePercentage != value)
                {
                    this.OnReconciliationVariancePercentageChanging(value);
                    this.SendPropertyChanging("ReconciliationVariancePercentage");
                    this._ReconciliationVariancePercentage = value;
                    this.SendPropertyChanged("ReconciliationVariancePercentage");
                    this.OnReconciliationVariancePercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxSupplierDocumentValue in the schema.
        /// </summary>
        [Column(Name = @"max_supplier_document_value", Storage = "_MaxSupplierDocumentValue", CanBeNull = false, DbType = "NUMERIC(12,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal MaxSupplierDocumentValue
        {
            get
            {
                return this._MaxSupplierDocumentValue;
            }
            set
            {
                if (this._MaxSupplierDocumentValue != value)
                {
                    this.OnMaxSupplierDocumentValueChanging(value);
                    this.SendPropertyChanging("MaxSupplierDocumentValue");
                    this._MaxSupplierDocumentValue = value;
                    this.SendPropertyChanged("MaxSupplierDocumentValue");
                    this.OnMaxSupplierDocumentValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoogleCalendarUser in the schema.
        /// </summary>
        [Column(Name = @"google_calendar_user", Storage = "_GoogleCalendarUser", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string GoogleCalendarUser
        {
            get
            {
                return this._GoogleCalendarUser;
            }
            set
            {
                if (this._GoogleCalendarUser != value)
                {
                    this.OnGoogleCalendarUserChanging(value);
                    this.SendPropertyChanging("GoogleCalendarUser");
                    this._GoogleCalendarUser = value;
                    this.SendPropertyChanged("GoogleCalendarUser");
                    this.OnGoogleCalendarUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoogleCalendarPassword in the schema.
        /// </summary>
        [Column(Name = @"google_calendar_password", Storage = "_GoogleCalendarPassword", DbType = "VARCHAR(128)", UpdateCheck = UpdateCheck.Never)]
        public string GoogleCalendarPassword
        {
            get
            {
                return this._GoogleCalendarPassword;
            }
            set
            {
                if (this._GoogleCalendarPassword != value)
                {
                    this.OnGoogleCalendarPasswordChanging(value);
                    this.SendPropertyChanging("GoogleCalendarPassword");
                    this._GoogleCalendarPassword = value;
                    this.SendPropertyChanged("GoogleCalendarPassword");
                    this.OnGoogleCalendarPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemberOfPickupCallsGroup in the schema.
        /// </summary>
        [Column(Name = @"member_of_pickup_calls_group", Storage = "_MemberOfPickupCallsGroup", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MemberOfPickupCallsGroup
        {
            get
            {
                return this._MemberOfPickupCallsGroup;
            }
            set
            {
                if (this._MemberOfPickupCallsGroup != value)
                {
                    this.OnMemberOfPickupCallsGroupChanging(value);
                    this.SendPropertyChanging("MemberOfPickupCallsGroup");
                    this._MemberOfPickupCallsGroup = value;
                    this.SendPropertyChanged("MemberOfPickupCallsGroup");
                    this.OnMemberOfPickupCallsGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ViewAllEnquiryItemsAllowed in the schema.
        /// </summary>
        [Column(Name = @"view_all_enquiry_items_allowed", Storage = "_ViewAllEnquiryItemsAllowed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ViewAllEnquiryItemsAllowed
        {
            get
            {
                return this._ViewAllEnquiryItemsAllowed;
            }
            set
            {
                if (this._ViewAllEnquiryItemsAllowed != value)
                {
                    this.OnViewAllEnquiryItemsAllowedChanging(value);
                    this.SendPropertyChanging("ViewAllEnquiryItemsAllowed");
                    this._ViewAllEnquiryItemsAllowed = value;
                    this.SendPropertyChanged("ViewAllEnquiryItemsAllowed");
                    this.OnViewAllEnquiryItemsAllowedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultLabelPrinterId in the schema.
        /// </summary>
        [Column(Name = @"default_label_printer_id", Storage = "_DefaultLabelPrinterId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultLabelPrinterId
        {
            get
            {
                return this._DefaultLabelPrinterId;
            }
            set
            {
                if (this._DefaultLabelPrinterId != value)
                {
                    this.OnDefaultLabelPrinterIdChanging(value);
                    this.SendPropertyChanging("DefaultLabelPrinterId");
                    this._DefaultLabelPrinterId = value;
                    this.SendPropertyChanged("DefaultLabelPrinterId");
                    this.OnDefaultLabelPrinterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginName in the schema.
        /// </summary>
        [Column(Name = @"login_name", Storage = "_LoginName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string LoginName
        {
            get
            {
                return this._LoginName;
            }
            set
            {
                if (this._LoginName != value)
                {
                    this.OnLoginNameChanging(value);
                    this.SendPropertyChanging("LoginName");
                    this._LoginName = value;
                    this.SendPropertyChanged("LoginName");
                    this.OnLoginNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultSalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"default_sales_group_id", Storage = "_DefaultSalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultSalesGroupId
        {
            get
            {
                return this._DefaultSalesGroupId;
            }
            set
            {
                if (this._DefaultSalesGroupId != value)
                {
                    if (this._SalesGroup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefaultSalesGroupIdChanging(value);
                    this.SendPropertyChanging("DefaultSalesGroupId");
                    this._DefaultSalesGroupId = value;
                    this.SendPropertyChanged("DefaultSalesGroupId");
                    this.OnDefaultSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocaleId in the schema.
        /// </summary>
        [Column(Name = @"locale_id", Storage = "_LocaleId", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string LocaleId
        {
            get
            {
                return this._LocaleId;
            }
            set
            {
                if (this._LocaleId != value)
                {
                    this.OnLocaleIdChanging(value);
                    this.SendPropertyChanging("LocaleId");
                    this._LocaleId = value;
                    this.SendPropertyChanged("LocaleId");
                    this.OnLocaleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupportUser in the schema.
        /// </summary>
        [Column(Name = @"support_user", Storage = "_SupportUser", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool SupportUser
        {
            get
            {
                return this._SupportUser;
            }
            set
            {
                if (this._SupportUser != value)
                {
                    this.OnSupportUserChanging(value);
                    this.SendPropertyChanging("SupportUser");
                    this._SupportUser = value;
                    this.SendPropertyChanged("SupportUser");
                    this.OnSupportUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_PersonnelId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_Company", Storage="_Company_PersonnelId", ThisKey="Id", OtherKey="PersonnelId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_PersonnelId
        {
            get
            {
                return this._Company_PersonnelId;
            }
            set
            {
                this._Company_PersonnelId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_DefaultCustomerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Personnel", Storage="_Company_DefaultCustomerId", ThisKey="DefaultCustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_DefaultCustomerId
        {
            get
            {
                return this._Company_DefaultCustomerId.Entity;
            }
            set
            {
                Company previousValue = this._Company_DefaultCustomerId.Entity;
                if ((previousValue != value) || (this._Company_DefaultCustomerId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_DefaultCustomerId");
                    if (previousValue != null)
                    {
                        this._Company_DefaultCustomerId.Entity = null;
                        previousValue.Personnel_DefaultCustomerId.Remove(this);
                    }
                    this._Company_DefaultCustomerId.Entity = value;
                    if (value != null)
                    {
                        this._DefaultCustomerId = value.Id;
                        value.Personnel_DefaultCustomerId.Add(this);
                    }
                    else
                    {
                        this._DefaultCustomerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_DefaultCustomerId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesGroup_Personnel", Storage="_SalesGroup", ThisKey="DefaultSalesGroupId", OtherKey="Id", IsForeignKey=true)]
        public SalesGroup SalesGroup
        {
            get
            {
                return this._SalesGroup.Entity;
            }
            set
            {
                SalesGroup previousValue = this._SalesGroup.Entity;
                if ((previousValue != value) || (this._SalesGroup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesGroup");
                    if (previousValue != null)
                    {
                        this._SalesGroup.Entity = null;
                        previousValue.Personnel.Remove(this);
                    }
                    this._SalesGroup.Entity = value;
                    if (value != null)
                    {
                        this._DefaultSalesGroupId = value.Id;
                        value.Personnel.Add(this);
                    }
                    else
                    {
                        this._DefaultSalesGroupId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesGroup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_Contact", Storage="_Contact", ThisKey="Id", OtherKey="PersonnelId", DeleteRule="NO ACTION")]
        public EntitySet<Contact> Contact
        {
            get
            {
                return this._Contact;
            }
            set
            {
                this._Contact.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_InboundAllocationManagerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_Branch", Storage="_Branch_InboundAllocationManagerId", ThisKey="Id", OtherKey="InboundAllocationManagerId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_InboundAllocationManagerId
        {
            get
            {
                return this._Branch_InboundAllocationManagerId;
            }
            set
            {
                this._Branch_InboundAllocationManagerId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_BranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Personnel", Storage="_Branch_BranchId", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_BranchId
        {
            get
            {
                return this._Branch_BranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_BranchId.Entity;
                if ((previousValue != value) || (this._Branch_BranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_BranchId");
                    if (previousValue != null)
                    {
                        this._Branch_BranchId.Entity = null;
                        previousValue.Personnel_BranchId.Remove(this);
                    }
                    this._Branch_BranchId.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.Personnel_BranchId.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch_BranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_CreditReleaseUserId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_SalesHeader", Storage="_SalesHeader_CreditReleaseUserId", ThisKey="Id", OtherKey="CreditReleaseUserId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_CreditReleaseUserId
        {
            get
            {
                return this._SalesHeader_CreditReleaseUserId;
            }
            set
            {
                this._SalesHeader_CreditReleaseUserId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_InsideSalespersonId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_SalesHeader1", Storage="_SalesHeader_InsideSalespersonId", ThisKey="Id", OtherKey="InsideSalespersonId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_InsideSalespersonId
        {
            get
            {
                return this._SalesHeader_InsideSalespersonId;
            }
            set
            {
                this._SalesHeader_InsideSalespersonId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_SalespersonId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_SalesHeader2", Storage="_SalesHeader_SalespersonId", ThisKey="Id", OtherKey="SalespersonId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_SalespersonId
        {
            get
            {
                return this._SalesHeader_SalespersonId;
            }
            set
            {
                this._SalesHeader_SalespersonId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company_PersonnelId(Company entity)
        {
            this.SendPropertyChanging("Company_PersonnelId");
            entity.Personnel_PersonnelId = this;
        }
    
        private void detach_Company_PersonnelId(Company entity)
        {
            this.SendPropertyChanging("Company_PersonnelId");
            entity.Personnel_PersonnelId = null;
        }

        private void attach_Contact(Contact entity)
        {
            this.SendPropertyChanging("Contact");
            entity.Personnel = this;
        }
    
        private void detach_Contact(Contact entity)
        {
            this.SendPropertyChanging("Contact");
            entity.Personnel = null;
        }

        private void attach_Branch_InboundAllocationManagerId(Branch entity)
        {
            this.SendPropertyChanging("Branch_InboundAllocationManagerId");
            entity.Personnel_InboundAllocationManagerId = this;
        }
    
        private void detach_Branch_InboundAllocationManagerId(Branch entity)
        {
            this.SendPropertyChanging("Branch_InboundAllocationManagerId");
            entity.Personnel_InboundAllocationManagerId = null;
        }

        private void attach_SalesHeader_CreditReleaseUserId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_CreditReleaseUserId");
            entity.Personnel_CreditReleaseUserId = this;
        }
    
        private void detach_SalesHeader_CreditReleaseUserId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_CreditReleaseUserId");
            entity.Personnel_CreditReleaseUserId = null;
        }

        private void attach_SalesHeader_InsideSalespersonId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_InsideSalespersonId");
            entity.Personnel_InsideSalespersonId = this;
        }
    
        private void detach_SalesHeader_InsideSalespersonId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_InsideSalespersonId");
            entity.Personnel_InsideSalespersonId = null;
        }

        private void attach_SalesHeader_SalespersonId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalespersonId");
            entity.Personnel_SalespersonId = this;
        }
    
        private void detach_SalesHeader_SalespersonId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_SalespersonId");
            entity.Personnel_SalespersonId = null;
        }
    }

}
