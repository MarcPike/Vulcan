//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/22/2018 7:34:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.StockItems
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.StockItems.ProductBalance in the schema.
    /// </summary>
    [Table(Name = @"public.product_balances")]
    public partial class ProductBalance : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _PhysicalPiece;

        private System.Nullable<decimal> _PhysicalWeight;

        private System.Nullable<decimal> _PhysicalQuantity;

        private System.Nullable<decimal> _PhysicalValue;

        private System.Nullable<int> _AveragingPiece;

        private System.Nullable<decimal> _AveragingWeight;

        private System.Nullable<decimal> _AveragingQuantity;

        private System.Nullable<decimal> _AveragingValue;

        private System.Nullable<int> _QuarantinePiece;

        private System.Nullable<decimal> _QuarantineWeight;

        private System.Nullable<decimal> _QuarantineQuantity;

        private System.Nullable<int> _SalesAllocatedPiece;

        private System.Nullable<decimal> _SalesAllocatedWeight;

        private System.Nullable<decimal> _SalesAllocatedQuantity;

        private System.Nullable<int> _SalesOrderPiece;

        private System.Nullable<decimal> _SalesOrderWeight;

        private System.Nullable<decimal> _SalesOrderQuantity;

        private System.Nullable<int> _ProductionAllocatedPiece;

        private System.Nullable<decimal> _ProductionAllocatedWeight;

        private System.Nullable<decimal> _ProductionAllocatedQuantity;

        private System.Nullable<int> _TransientPiece;

        private System.Nullable<decimal> _TransientWeight;

        private System.Nullable<decimal> _TransientQuantity;

        private System.Nullable<int> _TransientAllocPiece;

        private System.Nullable<decimal> _TransientAllocWeight;

        private System.Nullable<decimal> _TransientAllocQuantity;

        private System.Nullable<int> _IncomingPiece;

        private System.Nullable<decimal> _IncomingWeight;

        private System.Nullable<decimal> _IncomingQuantity;

        private System.Nullable<decimal> _IncomingValue;

        private System.Nullable<int> _ReservedPiece;

        private System.Nullable<decimal> _ReservedWeight;

        private System.Nullable<decimal> _ReservedQuantity;

        private System.Nullable<int> _SalesReservedPiece;

        private System.Nullable<decimal> _SalesReservedWeight;

        private System.Nullable<decimal> _SalesReservedQuantity;

        private System.Nullable<decimal> _LastAverageCost;

        private System.Nullable<int> _ProductionDuePiece;

        private System.Nullable<decimal> _ProductionDueQuantity;

        private System.Nullable<decimal> _ProductionDueWeight;

        private System.Nullable<int> _StockUnavailablePiece = 0;

        private System.Nullable<decimal> _StockUnavailableWeight = 0m;

        private System.Nullable<decimal> _StockUnavailableQuantity = 0m;

        private System.Nullable<int> _ProductionDueAllocatedPiece;

        private System.Nullable<decimal> _ProductionDueAllocatedQuantity;

        private System.Nullable<decimal> _ProductionDueAllocatedWeight;
        #pragma warning restore 0649

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnPhysicalPieceChanging(System.Nullable<int> value);
        partial void OnPhysicalPieceChanged();
        partial void OnPhysicalWeightChanging(System.Nullable<decimal> value);
        partial void OnPhysicalWeightChanged();
        partial void OnPhysicalQuantityChanging(System.Nullable<decimal> value);
        partial void OnPhysicalQuantityChanged();
        partial void OnPhysicalValueChanging(System.Nullable<decimal> value);
        partial void OnPhysicalValueChanged();
        partial void OnAveragingPieceChanging(System.Nullable<int> value);
        partial void OnAveragingPieceChanged();
        partial void OnAveragingWeightChanging(System.Nullable<decimal> value);
        partial void OnAveragingWeightChanged();
        partial void OnAveragingQuantityChanging(System.Nullable<decimal> value);
        partial void OnAveragingQuantityChanged();
        partial void OnAveragingValueChanging(System.Nullable<decimal> value);
        partial void OnAveragingValueChanged();
        partial void OnQuarantinePieceChanging(System.Nullable<int> value);
        partial void OnQuarantinePieceChanged();
        partial void OnQuarantineWeightChanging(System.Nullable<decimal> value);
        partial void OnQuarantineWeightChanged();
        partial void OnQuarantineQuantityChanging(System.Nullable<decimal> value);
        partial void OnQuarantineQuantityChanged();
        partial void OnSalesAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnSalesAllocatedPieceChanged();
        partial void OnSalesAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnSalesAllocatedWeightChanged();
        partial void OnSalesAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnSalesAllocatedQuantityChanged();
        partial void OnSalesOrderPieceChanging(System.Nullable<int> value);
        partial void OnSalesOrderPieceChanged();
        partial void OnSalesOrderWeightChanging(System.Nullable<decimal> value);
        partial void OnSalesOrderWeightChanged();
        partial void OnSalesOrderQuantityChanging(System.Nullable<decimal> value);
        partial void OnSalesOrderQuantityChanged();
        partial void OnProductionAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnProductionAllocatedPieceChanged();
        partial void OnProductionAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnProductionAllocatedWeightChanged();
        partial void OnProductionAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnProductionAllocatedQuantityChanged();
        partial void OnTransientPieceChanging(System.Nullable<int> value);
        partial void OnTransientPieceChanged();
        partial void OnTransientWeightChanging(System.Nullable<decimal> value);
        partial void OnTransientWeightChanged();
        partial void OnTransientQuantityChanging(System.Nullable<decimal> value);
        partial void OnTransientQuantityChanged();
        partial void OnTransientAllocPieceChanging(System.Nullable<int> value);
        partial void OnTransientAllocPieceChanged();
        partial void OnTransientAllocWeightChanging(System.Nullable<decimal> value);
        partial void OnTransientAllocWeightChanged();
        partial void OnTransientAllocQuantityChanging(System.Nullable<decimal> value);
        partial void OnTransientAllocQuantityChanged();
        partial void OnIncomingPieceChanging(System.Nullable<int> value);
        partial void OnIncomingPieceChanged();
        partial void OnIncomingWeightChanging(System.Nullable<decimal> value);
        partial void OnIncomingWeightChanged();
        partial void OnIncomingQuantityChanging(System.Nullable<decimal> value);
        partial void OnIncomingQuantityChanged();
        partial void OnIncomingValueChanging(System.Nullable<decimal> value);
        partial void OnIncomingValueChanged();
        partial void OnReservedPieceChanging(System.Nullable<int> value);
        partial void OnReservedPieceChanged();
        partial void OnReservedWeightChanging(System.Nullable<decimal> value);
        partial void OnReservedWeightChanged();
        partial void OnReservedQuantityChanging(System.Nullable<decimal> value);
        partial void OnReservedQuantityChanged();
        partial void OnSalesReservedPieceChanging(System.Nullable<int> value);
        partial void OnSalesReservedPieceChanged();
        partial void OnSalesReservedWeightChanging(System.Nullable<decimal> value);
        partial void OnSalesReservedWeightChanged();
        partial void OnSalesReservedQuantityChanging(System.Nullable<decimal> value);
        partial void OnSalesReservedQuantityChanged();
        partial void OnLastAverageCostChanging(System.Nullable<decimal> value);
        partial void OnLastAverageCostChanged();
        partial void OnProductionDuePieceChanging(System.Nullable<int> value);
        partial void OnProductionDuePieceChanged();
        partial void OnProductionDueQuantityChanging(System.Nullable<decimal> value);
        partial void OnProductionDueQuantityChanged();
        partial void OnProductionDueWeightChanging(System.Nullable<decimal> value);
        partial void OnProductionDueWeightChanged();
        partial void OnStockUnavailablePieceChanging(System.Nullable<int> value);
        partial void OnStockUnavailablePieceChanged();
        partial void OnStockUnavailableWeightChanging(System.Nullable<decimal> value);
        partial void OnStockUnavailableWeightChanged();
        partial void OnStockUnavailableQuantityChanging(System.Nullable<decimal> value);
        partial void OnStockUnavailableQuantityChanged();
        partial void OnProductionDueAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnProductionDueAllocatedPieceChanged();
        partial void OnProductionDueAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnProductionDueAllocatedQuantityChanged();
        partial void OnProductionDueAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnProductionDueAllocatedWeightChanged();
        #endregion

        public ProductBalance()
        {
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalPiece in the schema.
        /// </summary>
        [Column(Name = @"physical_pieces", Storage = "_PhysicalPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PhysicalPiece
        {
            get
            {
                return this._PhysicalPiece;
            }
            set
            {
                if (this._PhysicalPiece != value)
                {
                    this.OnPhysicalPieceChanging(value);
                    this.SendPropertyChanging("PhysicalPiece");
                    this._PhysicalPiece = value;
                    this.SendPropertyChanged("PhysicalPiece");
                    this.OnPhysicalPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalWeight in the schema.
        /// </summary>
        [Column(Name = @"physical_weight", Storage = "_PhysicalWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PhysicalWeight
        {
            get
            {
                return this._PhysicalWeight;
            }
            set
            {
                if (this._PhysicalWeight != value)
                {
                    this.OnPhysicalWeightChanging(value);
                    this.SendPropertyChanging("PhysicalWeight");
                    this._PhysicalWeight = value;
                    this.SendPropertyChanged("PhysicalWeight");
                    this.OnPhysicalWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalQuantity in the schema.
        /// </summary>
        [Column(Name = @"physical_quantity", Storage = "_PhysicalQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PhysicalQuantity
        {
            get
            {
                return this._PhysicalQuantity;
            }
            set
            {
                if (this._PhysicalQuantity != value)
                {
                    this.OnPhysicalQuantityChanging(value);
                    this.SendPropertyChanging("PhysicalQuantity");
                    this._PhysicalQuantity = value;
                    this.SendPropertyChanged("PhysicalQuantity");
                    this.OnPhysicalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhysicalValue in the schema.
        /// </summary>
        [Column(Name = @"physical_value", Storage = "_PhysicalValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PhysicalValue
        {
            get
            {
                return this._PhysicalValue;
            }
            set
            {
                if (this._PhysicalValue != value)
                {
                    this.OnPhysicalValueChanging(value);
                    this.SendPropertyChanging("PhysicalValue");
                    this._PhysicalValue = value;
                    this.SendPropertyChanged("PhysicalValue");
                    this.OnPhysicalValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AveragingPiece in the schema.
        /// </summary>
        [Column(Name = @"averaging_pieces", Storage = "_AveragingPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AveragingPiece
        {
            get
            {
                return this._AveragingPiece;
            }
            set
            {
                if (this._AveragingPiece != value)
                {
                    this.OnAveragingPieceChanging(value);
                    this.SendPropertyChanging("AveragingPiece");
                    this._AveragingPiece = value;
                    this.SendPropertyChanged("AveragingPiece");
                    this.OnAveragingPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AveragingWeight in the schema.
        /// </summary>
        [Column(Name = @"averaging_weight", Storage = "_AveragingWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AveragingWeight
        {
            get
            {
                return this._AveragingWeight;
            }
            set
            {
                if (this._AveragingWeight != value)
                {
                    this.OnAveragingWeightChanging(value);
                    this.SendPropertyChanging("AveragingWeight");
                    this._AveragingWeight = value;
                    this.SendPropertyChanged("AveragingWeight");
                    this.OnAveragingWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AveragingQuantity in the schema.
        /// </summary>
        [Column(Name = @"averaging_quantity", Storage = "_AveragingQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AveragingQuantity
        {
            get
            {
                return this._AveragingQuantity;
            }
            set
            {
                if (this._AveragingQuantity != value)
                {
                    this.OnAveragingQuantityChanging(value);
                    this.SendPropertyChanging("AveragingQuantity");
                    this._AveragingQuantity = value;
                    this.SendPropertyChanged("AveragingQuantity");
                    this.OnAveragingQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AveragingValue in the schema.
        /// </summary>
        [Column(Name = @"averaging_value", Storage = "_AveragingValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AveragingValue
        {
            get
            {
                return this._AveragingValue;
            }
            set
            {
                if (this._AveragingValue != value)
                {
                    this.OnAveragingValueChanging(value);
                    this.SendPropertyChanging("AveragingValue");
                    this._AveragingValue = value;
                    this.SendPropertyChanged("AveragingValue");
                    this.OnAveragingValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuarantinePiece in the schema.
        /// </summary>
        [Column(Name = @"quarantine_pieces", Storage = "_QuarantinePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> QuarantinePiece
        {
            get
            {
                return this._QuarantinePiece;
            }
            set
            {
                if (this._QuarantinePiece != value)
                {
                    this.OnQuarantinePieceChanging(value);
                    this.SendPropertyChanging("QuarantinePiece");
                    this._QuarantinePiece = value;
                    this.SendPropertyChanged("QuarantinePiece");
                    this.OnQuarantinePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuarantineWeight in the schema.
        /// </summary>
        [Column(Name = @"quarantine_weight", Storage = "_QuarantineWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> QuarantineWeight
        {
            get
            {
                return this._QuarantineWeight;
            }
            set
            {
                if (this._QuarantineWeight != value)
                {
                    this.OnQuarantineWeightChanging(value);
                    this.SendPropertyChanging("QuarantineWeight");
                    this._QuarantineWeight = value;
                    this.SendPropertyChanged("QuarantineWeight");
                    this.OnQuarantineWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuarantineQuantity in the schema.
        /// </summary>
        [Column(Name = @"quarantine_quantity", Storage = "_QuarantineQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> QuarantineQuantity
        {
            get
            {
                return this._QuarantineQuantity;
            }
            set
            {
                if (this._QuarantineQuantity != value)
                {
                    this.OnQuarantineQuantityChanging(value);
                    this.SendPropertyChanging("QuarantineQuantity");
                    this._QuarantineQuantity = value;
                    this.SendPropertyChanged("QuarantineQuantity");
                    this.OnQuarantineQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesAllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"sales_allocated_pieces", Storage = "_SalesAllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesAllocatedPiece
        {
            get
            {
                return this._SalesAllocatedPiece;
            }
            set
            {
                if (this._SalesAllocatedPiece != value)
                {
                    this.OnSalesAllocatedPieceChanging(value);
                    this.SendPropertyChanging("SalesAllocatedPiece");
                    this._SalesAllocatedPiece = value;
                    this.SendPropertyChanged("SalesAllocatedPiece");
                    this.OnSalesAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesAllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"sales_allocated_weight", Storage = "_SalesAllocatedWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesAllocatedWeight
        {
            get
            {
                return this._SalesAllocatedWeight;
            }
            set
            {
                if (this._SalesAllocatedWeight != value)
                {
                    this.OnSalesAllocatedWeightChanging(value);
                    this.SendPropertyChanging("SalesAllocatedWeight");
                    this._SalesAllocatedWeight = value;
                    this.SendPropertyChanged("SalesAllocatedWeight");
                    this.OnSalesAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesAllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"sales_allocated_quantity", Storage = "_SalesAllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesAllocatedQuantity
        {
            get
            {
                return this._SalesAllocatedQuantity;
            }
            set
            {
                if (this._SalesAllocatedQuantity != value)
                {
                    this.OnSalesAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("SalesAllocatedQuantity");
                    this._SalesAllocatedQuantity = value;
                    this.SendPropertyChanged("SalesAllocatedQuantity");
                    this.OnSalesAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesOrderPiece in the schema.
        /// </summary>
        [Column(Name = @"sales_order_pieces", Storage = "_SalesOrderPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesOrderPiece
        {
            get
            {
                return this._SalesOrderPiece;
            }
            set
            {
                if (this._SalesOrderPiece != value)
                {
                    this.OnSalesOrderPieceChanging(value);
                    this.SendPropertyChanging("SalesOrderPiece");
                    this._SalesOrderPiece = value;
                    this.SendPropertyChanged("SalesOrderPiece");
                    this.OnSalesOrderPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesOrderWeight in the schema.
        /// </summary>
        [Column(Name = @"sales_order_weight", Storage = "_SalesOrderWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesOrderWeight
        {
            get
            {
                return this._SalesOrderWeight;
            }
            set
            {
                if (this._SalesOrderWeight != value)
                {
                    this.OnSalesOrderWeightChanging(value);
                    this.SendPropertyChanging("SalesOrderWeight");
                    this._SalesOrderWeight = value;
                    this.SendPropertyChanged("SalesOrderWeight");
                    this.OnSalesOrderWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesOrderQuantity in the schema.
        /// </summary>
        [Column(Name = @"sales_order_quantity", Storage = "_SalesOrderQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesOrderQuantity
        {
            get
            {
                return this._SalesOrderQuantity;
            }
            set
            {
                if (this._SalesOrderQuantity != value)
                {
                    this.OnSalesOrderQuantityChanging(value);
                    this.SendPropertyChanging("SalesOrderQuantity");
                    this._SalesOrderQuantity = value;
                    this.SendPropertyChanged("SalesOrderQuantity");
                    this.OnSalesOrderQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionAllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"production_allocated_pieces", Storage = "_ProductionAllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionAllocatedPiece
        {
            get
            {
                return this._ProductionAllocatedPiece;
            }
            set
            {
                if (this._ProductionAllocatedPiece != value)
                {
                    this.OnProductionAllocatedPieceChanging(value);
                    this.SendPropertyChanging("ProductionAllocatedPiece");
                    this._ProductionAllocatedPiece = value;
                    this.SendPropertyChanged("ProductionAllocatedPiece");
                    this.OnProductionAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionAllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"production_allocated_weight", Storage = "_ProductionAllocatedWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionAllocatedWeight
        {
            get
            {
                return this._ProductionAllocatedWeight;
            }
            set
            {
                if (this._ProductionAllocatedWeight != value)
                {
                    this.OnProductionAllocatedWeightChanging(value);
                    this.SendPropertyChanging("ProductionAllocatedWeight");
                    this._ProductionAllocatedWeight = value;
                    this.SendPropertyChanged("ProductionAllocatedWeight");
                    this.OnProductionAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionAllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"production_allocated_quantity", Storage = "_ProductionAllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionAllocatedQuantity
        {
            get
            {
                return this._ProductionAllocatedQuantity;
            }
            set
            {
                if (this._ProductionAllocatedQuantity != value)
                {
                    this.OnProductionAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("ProductionAllocatedQuantity");
                    this._ProductionAllocatedQuantity = value;
                    this.SendPropertyChanged("ProductionAllocatedQuantity");
                    this.OnProductionAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientPiece in the schema.
        /// </summary>
        [Column(Name = @"transient_pieces", Storage = "_TransientPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransientPiece
        {
            get
            {
                return this._TransientPiece;
            }
            set
            {
                if (this._TransientPiece != value)
                {
                    this.OnTransientPieceChanging(value);
                    this.SendPropertyChanging("TransientPiece");
                    this._TransientPiece = value;
                    this.SendPropertyChanged("TransientPiece");
                    this.OnTransientPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientWeight in the schema.
        /// </summary>
        [Column(Name = @"transient_weight", Storage = "_TransientWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientWeight
        {
            get
            {
                return this._TransientWeight;
            }
            set
            {
                if (this._TransientWeight != value)
                {
                    this.OnTransientWeightChanging(value);
                    this.SendPropertyChanging("TransientWeight");
                    this._TransientWeight = value;
                    this.SendPropertyChanged("TransientWeight");
                    this.OnTransientWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientQuantity in the schema.
        /// </summary>
        [Column(Name = @"transient_quantity", Storage = "_TransientQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientQuantity
        {
            get
            {
                return this._TransientQuantity;
            }
            set
            {
                if (this._TransientQuantity != value)
                {
                    this.OnTransientQuantityChanging(value);
                    this.SendPropertyChanging("TransientQuantity");
                    this._TransientQuantity = value;
                    this.SendPropertyChanged("TransientQuantity");
                    this.OnTransientQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientAllocPiece in the schema.
        /// </summary>
        [Column(Name = @"transient_alloc_pieces", Storage = "_TransientAllocPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransientAllocPiece
        {
            get
            {
                return this._TransientAllocPiece;
            }
            set
            {
                if (this._TransientAllocPiece != value)
                {
                    this.OnTransientAllocPieceChanging(value);
                    this.SendPropertyChanging("TransientAllocPiece");
                    this._TransientAllocPiece = value;
                    this.SendPropertyChanged("TransientAllocPiece");
                    this.OnTransientAllocPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientAllocWeight in the schema.
        /// </summary>
        [Column(Name = @"transient_alloc_weight", Storage = "_TransientAllocWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientAllocWeight
        {
            get
            {
                return this._TransientAllocWeight;
            }
            set
            {
                if (this._TransientAllocWeight != value)
                {
                    this.OnTransientAllocWeightChanging(value);
                    this.SendPropertyChanging("TransientAllocWeight");
                    this._TransientAllocWeight = value;
                    this.SendPropertyChanged("TransientAllocWeight");
                    this.OnTransientAllocWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransientAllocQuantity in the schema.
        /// </summary>
        [Column(Name = @"transient_alloc_quantity", Storage = "_TransientAllocQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransientAllocQuantity
        {
            get
            {
                return this._TransientAllocQuantity;
            }
            set
            {
                if (this._TransientAllocQuantity != value)
                {
                    this.OnTransientAllocQuantityChanging(value);
                    this.SendPropertyChanging("TransientAllocQuantity");
                    this._TransientAllocQuantity = value;
                    this.SendPropertyChanged("TransientAllocQuantity");
                    this.OnTransientAllocQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingPiece in the schema.
        /// </summary>
        [Column(Name = @"incoming_pieces", Storage = "_IncomingPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IncomingPiece
        {
            get
            {
                return this._IncomingPiece;
            }
            set
            {
                if (this._IncomingPiece != value)
                {
                    this.OnIncomingPieceChanging(value);
                    this.SendPropertyChanging("IncomingPiece");
                    this._IncomingPiece = value;
                    this.SendPropertyChanged("IncomingPiece");
                    this.OnIncomingPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingWeight in the schema.
        /// </summary>
        [Column(Name = @"incoming_weight", Storage = "_IncomingWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> IncomingWeight
        {
            get
            {
                return this._IncomingWeight;
            }
            set
            {
                if (this._IncomingWeight != value)
                {
                    this.OnIncomingWeightChanging(value);
                    this.SendPropertyChanging("IncomingWeight");
                    this._IncomingWeight = value;
                    this.SendPropertyChanged("IncomingWeight");
                    this.OnIncomingWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingQuantity in the schema.
        /// </summary>
        [Column(Name = @"incoming_quantity", Storage = "_IncomingQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> IncomingQuantity
        {
            get
            {
                return this._IncomingQuantity;
            }
            set
            {
                if (this._IncomingQuantity != value)
                {
                    this.OnIncomingQuantityChanging(value);
                    this.SendPropertyChanging("IncomingQuantity");
                    this._IncomingQuantity = value;
                    this.SendPropertyChanged("IncomingQuantity");
                    this.OnIncomingQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingValue in the schema.
        /// </summary>
        [Column(Name = @"incoming_value", Storage = "_IncomingValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> IncomingValue
        {
            get
            {
                return this._IncomingValue;
            }
            set
            {
                if (this._IncomingValue != value)
                {
                    this.OnIncomingValueChanging(value);
                    this.SendPropertyChanging("IncomingValue");
                    this._IncomingValue = value;
                    this.SendPropertyChanged("IncomingValue");
                    this.OnIncomingValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedPiece in the schema.
        /// </summary>
        [Column(Name = @"reserved_pieces", Storage = "_ReservedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ReservedPiece
        {
            get
            {
                return this._ReservedPiece;
            }
            set
            {
                if (this._ReservedPiece != value)
                {
                    this.OnReservedPieceChanging(value);
                    this.SendPropertyChanging("ReservedPiece");
                    this._ReservedPiece = value;
                    this.SendPropertyChanged("ReservedPiece");
                    this.OnReservedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedWeight in the schema.
        /// </summary>
        [Column(Name = @"reserved_weight", Storage = "_ReservedWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ReservedWeight
        {
            get
            {
                return this._ReservedWeight;
            }
            set
            {
                if (this._ReservedWeight != value)
                {
                    this.OnReservedWeightChanging(value);
                    this.SendPropertyChanging("ReservedWeight");
                    this._ReservedWeight = value;
                    this.SendPropertyChanged("ReservedWeight");
                    this.OnReservedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReservedQuantity in the schema.
        /// </summary>
        [Column(Name = @"reserved_quantity", Storage = "_ReservedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ReservedQuantity
        {
            get
            {
                return this._ReservedQuantity;
            }
            set
            {
                if (this._ReservedQuantity != value)
                {
                    this.OnReservedQuantityChanging(value);
                    this.SendPropertyChanging("ReservedQuantity");
                    this._ReservedQuantity = value;
                    this.SendPropertyChanged("ReservedQuantity");
                    this.OnReservedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesReservedPiece in the schema.
        /// </summary>
        [Column(Name = @"sales_reserved_pieces", Storage = "_SalesReservedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesReservedPiece
        {
            get
            {
                return this._SalesReservedPiece;
            }
            set
            {
                if (this._SalesReservedPiece != value)
                {
                    this.OnSalesReservedPieceChanging(value);
                    this.SendPropertyChanging("SalesReservedPiece");
                    this._SalesReservedPiece = value;
                    this.SendPropertyChanged("SalesReservedPiece");
                    this.OnSalesReservedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesReservedWeight in the schema.
        /// </summary>
        [Column(Name = @"sales_reserved_weight", Storage = "_SalesReservedWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesReservedWeight
        {
            get
            {
                return this._SalesReservedWeight;
            }
            set
            {
                if (this._SalesReservedWeight != value)
                {
                    this.OnSalesReservedWeightChanging(value);
                    this.SendPropertyChanging("SalesReservedWeight");
                    this._SalesReservedWeight = value;
                    this.SendPropertyChanged("SalesReservedWeight");
                    this.OnSalesReservedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesReservedQuantity in the schema.
        /// </summary>
        [Column(Name = @"sales_reserved_quantity", Storage = "_SalesReservedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> SalesReservedQuantity
        {
            get
            {
                return this._SalesReservedQuantity;
            }
            set
            {
                if (this._SalesReservedQuantity != value)
                {
                    this.OnSalesReservedQuantityChanging(value);
                    this.SendPropertyChanging("SalesReservedQuantity");
                    this._SalesReservedQuantity = value;
                    this.SendPropertyChanged("SalesReservedQuantity");
                    this.OnSalesReservedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastAverageCost in the schema.
        /// </summary>
        [Column(Name = @"last_average_cost", Storage = "_LastAverageCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> LastAverageCost
        {
            get
            {
                return this._LastAverageCost;
            }
            set
            {
                if (this._LastAverageCost != value)
                {
                    this.OnLastAverageCostChanging(value);
                    this.SendPropertyChanging("LastAverageCost");
                    this._LastAverageCost = value;
                    this.SendPropertyChanged("LastAverageCost");
                    this.OnLastAverageCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDuePiece in the schema.
        /// </summary>
        [Column(Name = @"production_due_pieces", Storage = "_ProductionDuePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionDuePiece
        {
            get
            {
                return this._ProductionDuePiece;
            }
            set
            {
                if (this._ProductionDuePiece != value)
                {
                    this.OnProductionDuePieceChanging(value);
                    this.SendPropertyChanging("ProductionDuePiece");
                    this._ProductionDuePiece = value;
                    this.SendPropertyChanged("ProductionDuePiece");
                    this.OnProductionDuePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDueQuantity in the schema.
        /// </summary>
        [Column(Name = @"production_due_quantity", Storage = "_ProductionDueQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionDueQuantity
        {
            get
            {
                return this._ProductionDueQuantity;
            }
            set
            {
                if (this._ProductionDueQuantity != value)
                {
                    this.OnProductionDueQuantityChanging(value);
                    this.SendPropertyChanging("ProductionDueQuantity");
                    this._ProductionDueQuantity = value;
                    this.SendPropertyChanged("ProductionDueQuantity");
                    this.OnProductionDueQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDueWeight in the schema.
        /// </summary>
        [Column(Name = @"production_due_weight", Storage = "_ProductionDueWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionDueWeight
        {
            get
            {
                return this._ProductionDueWeight;
            }
            set
            {
                if (this._ProductionDueWeight != value)
                {
                    this.OnProductionDueWeightChanging(value);
                    this.SendPropertyChanging("ProductionDueWeight");
                    this._ProductionDueWeight = value;
                    this.SendPropertyChanged("ProductionDueWeight");
                    this.OnProductionDueWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockUnavailablePiece in the schema.
        /// </summary>
        [Column(Name = @"stock_unavailable_pieces", Storage = "_StockUnavailablePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StockUnavailablePiece
        {
            get
            {
                return this._StockUnavailablePiece;
            }
            set
            {
                if (this._StockUnavailablePiece != value)
                {
                    this.OnStockUnavailablePieceChanging(value);
                    this.SendPropertyChanging("StockUnavailablePiece");
                    this._StockUnavailablePiece = value;
                    this.SendPropertyChanged("StockUnavailablePiece");
                    this.OnStockUnavailablePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockUnavailableWeight in the schema.
        /// </summary>
        [Column(Name = @"stock_unavailable_weight", Storage = "_StockUnavailableWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StockUnavailableWeight
        {
            get
            {
                return this._StockUnavailableWeight;
            }
            set
            {
                if (this._StockUnavailableWeight != value)
                {
                    this.OnStockUnavailableWeightChanging(value);
                    this.SendPropertyChanging("StockUnavailableWeight");
                    this._StockUnavailableWeight = value;
                    this.SendPropertyChanged("StockUnavailableWeight");
                    this.OnStockUnavailableWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockUnavailableQuantity in the schema.
        /// </summary>
        [Column(Name = @"stock_unavailable_quantity", Storage = "_StockUnavailableQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StockUnavailableQuantity
        {
            get
            {
                return this._StockUnavailableQuantity;
            }
            set
            {
                if (this._StockUnavailableQuantity != value)
                {
                    this.OnStockUnavailableQuantityChanging(value);
                    this.SendPropertyChanging("StockUnavailableQuantity");
                    this._StockUnavailableQuantity = value;
                    this.SendPropertyChanged("StockUnavailableQuantity");
                    this.OnStockUnavailableQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDueAllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"production_due_allocated_pieces", Storage = "_ProductionDueAllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionDueAllocatedPiece
        {
            get
            {
                return this._ProductionDueAllocatedPiece;
            }
            set
            {
                if (this._ProductionDueAllocatedPiece != value)
                {
                    this.OnProductionDueAllocatedPieceChanging(value);
                    this.SendPropertyChanging("ProductionDueAllocatedPiece");
                    this._ProductionDueAllocatedPiece = value;
                    this.SendPropertyChanged("ProductionDueAllocatedPiece");
                    this.OnProductionDueAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDueAllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"production_due_allocated_quantity", Storage = "_ProductionDueAllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionDueAllocatedQuantity
        {
            get
            {
                return this._ProductionDueAllocatedQuantity;
            }
            set
            {
                if (this._ProductionDueAllocatedQuantity != value)
                {
                    this.OnProductionDueAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("ProductionDueAllocatedQuantity");
                    this._ProductionDueAllocatedQuantity = value;
                    this.SendPropertyChanged("ProductionDueAllocatedQuantity");
                    this.OnProductionDueAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDueAllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"production_due_allocated_weight", Storage = "_ProductionDueAllocatedWeight", DbType = "NUMERIC(11,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionDueAllocatedWeight
        {
            get
            {
                return this._ProductionDueAllocatedWeight;
            }
            set
            {
                if (this._ProductionDueAllocatedWeight != value)
                {
                    this.OnProductionDueAllocatedWeightChanging(value);
                    this.SendPropertyChanging("ProductionDueAllocatedWeight");
                    this._ProductionDueAllocatedWeight = value;
                    this.SendPropertyChanged("ProductionDueAllocatedWeight");
                    this.OnProductionDueAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_ProductBalance", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.ProductBalance.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.ProductBalance.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
