//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/22/2018 7:34:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.StockItems
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.StockItems.StockCast in the schema.
    /// </summary>
    [Table(Name = @"public.stock_casts")]
    public partial class StockCast : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _MillId;

        private string _CastNumber;

        private string _OtherReference;

        private System.Nullable<int> _SupplierId;

        private System.Nullable<int> _CategoryId;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _GradeId;

        private string _CertNumber;

        private string _DeliveryReference;

        private System.Nullable<int> _ApprovedById;

        private System.Nullable<System.DateTime> _ApprovalDate;

        private string _Comment;

        private string _ImageIndex;

        private System.Nullable<int> _CountryOfMaterialOriginId;

        private System.Nullable<int> _CountryOfPrimaryProcessingId;

        private System.Nullable<int> _CountryOfFinalProcessingId;
        #pragma warning restore 0649

        private EntitySet<StockItem> _StockItem;

        private EntityRef<StockGrade> _StockGrade;

        private EntityRef<ProductCategory> _ProductCategory;

        private EntityRef<Mill> _Mill;

        private EntityRef<Product> _Product;

        private EntityRef<Personnel> _Personnel;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnMillIdChanging(System.Nullable<int> value);
        partial void OnMillIdChanged();
        partial void OnCastNumberChanging(string value);
        partial void OnCastNumberChanged();
        partial void OnOtherReferenceChanging(string value);
        partial void OnOtherReferenceChanged();
        partial void OnSupplierIdChanging(System.Nullable<int> value);
        partial void OnSupplierIdChanged();
        partial void OnCategoryIdChanging(System.Nullable<int> value);
        partial void OnCategoryIdChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnGradeIdChanging(System.Nullable<int> value);
        partial void OnGradeIdChanged();
        partial void OnCertNumberChanging(string value);
        partial void OnCertNumberChanged();
        partial void OnDeliveryReferenceChanging(string value);
        partial void OnDeliveryReferenceChanged();
        partial void OnApprovedByIdChanging(System.Nullable<int> value);
        partial void OnApprovedByIdChanged();
        partial void OnApprovalDateChanging(System.Nullable<System.DateTime> value);
        partial void OnApprovalDateChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnImageIndexChanging(string value);
        partial void OnImageIndexChanged();
        partial void OnCountryOfMaterialOriginIdChanging(System.Nullable<int> value);
        partial void OnCountryOfMaterialOriginIdChanged();
        partial void OnCountryOfPrimaryProcessingIdChanging(System.Nullable<int> value);
        partial void OnCountryOfPrimaryProcessingIdChanged();
        partial void OnCountryOfFinalProcessingIdChanging(System.Nullable<int> value);
        partial void OnCountryOfFinalProcessingIdChanged();
        #endregion

        public StockCast()
        {
            this._StockItem = new EntitySet<StockItem>(new Action<StockItem>(this.attach_StockItem), new Action<StockItem>(this.detach_StockItem));
            this._StockGrade  = default(EntityRef<StockGrade>);
            this._ProductCategory  = default(EntityRef<ProductCategory>);
            this._Mill  = default(EntityRef<Mill>);
            this._Product  = default(EntityRef<Product>);
            this._Personnel  = default(EntityRef<Personnel>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MillId in the schema.
        /// </summary>
        [Column(Name = @"mill_id", Storage = "_MillId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MillId
        {
            get
            {
                return this._MillId;
            }
            set
            {
                if (this._MillId != value)
                {
                    if (this._Mill.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMillIdChanging(value);
                    this.SendPropertyChanging("MillId");
                    this._MillId = value;
                    this.SendPropertyChanged("MillId");
                    this.OnMillIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CastNumber in the schema.
        /// </summary>
        [Column(Name = @"cast_number", Storage = "_CastNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CastNumber
        {
            get
            {
                return this._CastNumber;
            }
            set
            {
                if (this._CastNumber != value)
                {
                    this.OnCastNumberChanging(value);
                    this.SendPropertyChanging("CastNumber");
                    this._CastNumber = value;
                    this.SendPropertyChanged("CastNumber");
                    this.OnCastNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherReference in the schema.
        /// </summary>
        [Column(Name = @"other_reference", Storage = "_OtherReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string OtherReference
        {
            get
            {
                return this._OtherReference;
            }
            set
            {
                if (this._OtherReference != value)
                {
                    this.OnOtherReferenceChanging(value);
                    this.SendPropertyChanging("OtherReference");
                    this._OtherReference = value;
                    this.SendPropertyChanged("OtherReference");
                    this.OnOtherReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"supplier_id", Storage = "_SupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging("SupplierId");
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._ProductCategory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GradeId in the schema.
        /// </summary>
        [Column(Name = @"grade_id", Storage = "_GradeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GradeId
        {
            get
            {
                return this._GradeId;
            }
            set
            {
                if (this._GradeId != value)
                {
                    if (this._StockGrade.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGradeIdChanging(value);
                    this.SendPropertyChanging("GradeId");
                    this._GradeId = value;
                    this.SendPropertyChanged("GradeId");
                    this.OnGradeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertNumber in the schema.
        /// </summary>
        [Column(Name = @"cert_number", Storage = "_CertNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CertNumber
        {
            get
            {
                return this._CertNumber;
            }
            set
            {
                if (this._CertNumber != value)
                {
                    this.OnCertNumberChanging(value);
                    this.SendPropertyChanging("CertNumber");
                    this._CertNumber = value;
                    this.SendPropertyChanged("CertNumber");
                    this.OnCertNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryReference in the schema.
        /// </summary>
        [Column(Name = @"delivery_reference", Storage = "_DeliveryReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryReference
        {
            get
            {
                return this._DeliveryReference;
            }
            set
            {
                if (this._DeliveryReference != value)
                {
                    this.OnDeliveryReferenceChanging(value);
                    this.SendPropertyChanging("DeliveryReference");
                    this._DeliveryReference = value;
                    this.SendPropertyChanged("DeliveryReference");
                    this.OnDeliveryReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApprovedById in the schema.
        /// </summary>
        [Column(Name = @"approved_by_id", Storage = "_ApprovedById", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ApprovedById
        {
            get
            {
                return this._ApprovedById;
            }
            set
            {
                if (this._ApprovedById != value)
                {
                    if (this._Personnel.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnApprovedByIdChanging(value);
                    this.SendPropertyChanging("ApprovedById");
                    this._ApprovedById = value;
                    this.SendPropertyChanged("ApprovedById");
                    this.OnApprovedByIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApprovalDate in the schema.
        /// </summary>
        [Column(Name = @"approval_date", Storage = "_ApprovalDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ApprovalDate
        {
            get
            {
                return this._ApprovalDate;
            }
            set
            {
                if (this._ApprovalDate != value)
                {
                    this.OnApprovalDateChanging(value);
                    this.SendPropertyChanging("ApprovalDate");
                    this._ApprovalDate = value;
                    this.SendPropertyChanged("ApprovalDate");
                    this.OnApprovalDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"comments", Storage = "_Comment", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging("Comment");
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImageIndex in the schema.
        /// </summary>
        [Column(Name = @"image_index", Storage = "_ImageIndex", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ImageIndex
        {
            get
            {
                return this._ImageIndex;
            }
            set
            {
                if (this._ImageIndex != value)
                {
                    this.OnImageIndexChanging(value);
                    this.SendPropertyChanging("ImageIndex");
                    this._ImageIndex = value;
                    this.SendPropertyChanged("ImageIndex");
                    this.OnImageIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryOfMaterialOriginId in the schema.
        /// </summary>
        [Column(Name = @"country_of_material_origin_id", Storage = "_CountryOfMaterialOriginId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CountryOfMaterialOriginId
        {
            get
            {
                return this._CountryOfMaterialOriginId;
            }
            set
            {
                if (this._CountryOfMaterialOriginId != value)
                {
                    this.OnCountryOfMaterialOriginIdChanging(value);
                    this.SendPropertyChanging("CountryOfMaterialOriginId");
                    this._CountryOfMaterialOriginId = value;
                    this.SendPropertyChanged("CountryOfMaterialOriginId");
                    this.OnCountryOfMaterialOriginIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryOfPrimaryProcessingId in the schema.
        /// </summary>
        [Column(Name = @"country_of_primary_processing_id", Storage = "_CountryOfPrimaryProcessingId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CountryOfPrimaryProcessingId
        {
            get
            {
                return this._CountryOfPrimaryProcessingId;
            }
            set
            {
                if (this._CountryOfPrimaryProcessingId != value)
                {
                    this.OnCountryOfPrimaryProcessingIdChanging(value);
                    this.SendPropertyChanging("CountryOfPrimaryProcessingId");
                    this._CountryOfPrimaryProcessingId = value;
                    this.SendPropertyChanged("CountryOfPrimaryProcessingId");
                    this.OnCountryOfPrimaryProcessingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryOfFinalProcessingId in the schema.
        /// </summary>
        [Column(Name = @"country_of_final_processing_id", Storage = "_CountryOfFinalProcessingId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CountryOfFinalProcessingId
        {
            get
            {
                return this._CountryOfFinalProcessingId;
            }
            set
            {
                if (this._CountryOfFinalProcessingId != value)
                {
                    this.OnCountryOfFinalProcessingIdChanging(value);
                    this.SendPropertyChanging("CountryOfFinalProcessingId");
                    this._CountryOfFinalProcessingId = value;
                    this.SendPropertyChanged("CountryOfFinalProcessingId");
                    this.OnCountryOfFinalProcessingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockCast_StockItem", Storage="_StockItem", ThisKey="Id", OtherKey="StockCastId", DeleteRule="NO ACTION")]
        public EntitySet<StockItem> StockItem
        {
            get
            {
                return this._StockItem;
            }
            set
            {
                this._StockItem.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StockGrade in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StockGrade_StockCast", Storage="_StockGrade", ThisKey="GradeId", OtherKey="Id", IsForeignKey=true)]
        public StockGrade StockGrade
        {
            get
            {
                return this._StockGrade.Entity;
            }
            set
            {
                StockGrade previousValue = this._StockGrade.Entity;
                if ((previousValue != value) || (this._StockGrade.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StockGrade");
                    if (previousValue != null)
                    {
                        this._StockGrade.Entity = null;
                        previousValue.StockCast.Remove(this);
                    }
                    this._StockGrade.Entity = value;
                    if (value != null)
                    {
                        this._GradeId = value.Id;
                        value.StockCast.Add(this);
                    }
                    else
                    {
                        this._GradeId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("StockGrade");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_StockCast", Storage="_ProductCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
        public ProductCategory ProductCategory
        {
            get
            {
                return this._ProductCategory.Entity;
            }
            set
            {
                ProductCategory previousValue = this._ProductCategory.Entity;
                if ((previousValue != value) || (this._ProductCategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductCategory");
                    if (previousValue != null)
                    {
                        this._ProductCategory.Entity = null;
                        previousValue.StockCast.Remove(this);
                    }
                    this._ProductCategory.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.Id;
                        value.StockCast.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductCategory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mill in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Mill_StockCast", Storage="_Mill", ThisKey="MillId", OtherKey="Id", IsForeignKey=true)]
        public Mill Mill
        {
            get
            {
                return this._Mill.Entity;
            }
            set
            {
                Mill previousValue = this._Mill.Entity;
                if ((previousValue != value) || (this._Mill.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Mill");
                    if (previousValue != null)
                    {
                        this._Mill.Entity = null;
                        previousValue.StockCast.Remove(this);
                    }
                    this._Mill.Entity = value;
                    if (value != null)
                    {
                        this._MillId = value.Id;
                        value.StockCast.Add(this);
                    }
                    else
                    {
                        this._MillId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Mill");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_StockCast", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.StockCast.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.StockCast.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personnel in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_StockCast", Storage="_Personnel", ThisKey="ApprovedById", OtherKey="Id", IsForeignKey=true)]
        public Personnel Personnel
        {
            get
            {
                return this._Personnel.Entity;
            }
            set
            {
                Personnel previousValue = this._Personnel.Entity;
                if ((previousValue != value) || (this._Personnel.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Personnel");
                    if (previousValue != null)
                    {
                        this._Personnel.Entity = null;
                        previousValue.StockCast.Remove(this);
                    }
                    this._Personnel.Entity = value;
                    if (value != null)
                    {
                        this._ApprovedById = value.Id;
                        value.StockCast.Add(this);
                    }
                    else
                    {
                        this._ApprovedById = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Personnel");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StockItem(StockItem entity)
        {
            this.SendPropertyChanging("StockItem");
            entity.StockCast = this;
        }
    
        private void detach_StockItem(StockItem entity)
        {
            this.SendPropertyChanging("StockItem");
            entity.StockCast = null;
        }
    }

}
