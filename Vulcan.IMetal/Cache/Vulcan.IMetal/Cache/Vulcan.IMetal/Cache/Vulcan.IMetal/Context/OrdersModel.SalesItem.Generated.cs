//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.SalesItem in the schema.
    /// </summary>
    [Table(Name = @"public.sales_items")]
    public partial class SalesItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _SalesHeaderId;

        private System.Nullable<int> _ItemNumber;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _DimensionsId;

        private string _Description;

        private string _WorksNote;

        private string _ProductionNote;

        private string _InvoiceNote;

        private System.Nullable<int> _RequiredPiece;

        private System.Nullable<decimal> _RequiredQuantity;

        private System.Nullable<decimal> _RequiredWeight;

        private System.Nullable<int> _DeliveredPiece;

        private System.Nullable<decimal> _DeliveredQuantity;

        private System.Nullable<decimal> _DeliveredWeight;

        private System.Nullable<int> _BalancePiece;

        private System.Nullable<decimal> _BalanceQuantity;

        private System.Nullable<decimal> _BalanceWeight;

        private System.Nullable<int> _WeightUnitsId;

        private System.Nullable<int> _PartCustomerId;

        private System.Nullable<int> _PartSpecificationId;

        private System.Nullable<int> _StatusId;

        private System.Nullable<int> _SalesGroupId;

        private System.Nullable<int> _VatType1Id;

        private System.Nullable<int> _VatType2Id;

        private System.Nullable<int> _VatType3Id;

        private System.Nullable<int> _VatType4Id;

        private System.Nullable<System.DateTime> _DueDate;

        private string _ManualDate;

        private System.Nullable<bool> _Completed;

        private System.Nullable<System.DateTime> _CompletedDate;

        private string _SpecificationValue1;

        private string _SpecificationValue2;

        private string _SpecificationValue3;

        private string _SpecificationValue4;

        private string _SpecificationValue5;

        private System.Nullable<int> _CreditedItem;

        private string _CreditReference;

        private System.Nullable<int> _DespatchItemId;

        private System.Nullable<int> _OrderItemId;

        private System.Nullable<int> _DeliveryBranchId;

        private System.Nullable<int> _DeliveryWarehouseId;

        private System.Nullable<int> _LostReasonId;

        private System.Nullable<System.DateTime> _LostDate;

        private string _LostDescription;

        private System.Nullable<int> _SalesTotalId;

        private string _Discriminator;

        private System.Nullable<decimal> _OriginalQuantity;

        private System.Nullable<int> _OriginalQuantityUnitId;

        private System.Nullable<System.DateTime> _OriginalDueDate;

        private System.Nullable<int> _TransportPiece;

        private System.Nullable<decimal> _TransportQuantity;

        private System.Nullable<decimal> _TransportWeight;

        private System.Nullable<bool> _ShowPrice = true;

        private System.Nullable<bool> _UseMinimumGrade = false;

        private string _StockLocation;

        private System.Nullable<int> _InvoicedPiece;

        private System.Nullable<decimal> _InvoicedQuantity;

        private System.Nullable<decimal> _InvoicedWeight;

        private string _MarginType = @"M";

        private System.Nullable<int> _BalanceTotalId;

        private System.Nullable<int> _AllocatedPiece;

        private System.Nullable<decimal> _AllocatedQuantity;

        private System.Nullable<decimal> _AllocatedWeight;

        private string _TransferType = @"U";

        private System.Nullable<int> _TaxClass1;

        private System.Nullable<int> _TaxClass2;

        private System.Nullable<int> _TaxClass3;

        private System.Nullable<int> _TaxClass4;

        private System.Nullable<int> _TaxClass5;

        private System.Nullable<bool> _TaxExempt1;

        private System.Nullable<bool> _TaxExempt2;

        private System.Nullable<bool> _TaxExempt3;

        private System.Nullable<bool> _TaxExempt4;

        private System.Nullable<bool> _TaxExempt5;

        private string _PartNumber;

        private string _SpecificationValue6;

        private string _SpecificationValue7;

        private string _SpecificationValue8;

        private string _SpecificationValue9;

        private string _SpecificationValue10;

        private System.Nullable<int> _ProductLevelAllocationId;

        private System.Nullable<decimal> _OutsideDiameter;

        private System.Nullable<decimal> _OutsideDiameterMinimum;

        private System.Nullable<decimal> _OutsideDiameterMaximum;

        private System.Nullable<decimal> _PackHeight;

        private System.Nullable<decimal> _PackHeightMinimum;

        private System.Nullable<decimal> _PackHeightMaximum;

        private System.Nullable<decimal> _PackWeight;

        private System.Nullable<decimal> _PackWeightMinimum;

        private System.Nullable<decimal> _PackWeightMaximum;

        private System.Nullable<decimal> _InsideDiameter;

        private System.Nullable<decimal> _InsideDiameterMinimum;

        private System.Nullable<decimal> _InsideDiameterMaximum;

        private System.Nullable<bool> _TrimRequired = false;

        private System.Nullable<bool> _ShotblastingRequired = false;

        private string _PaintDescription;

        private System.Nullable<int> _GroupPriceUnitId;

        private System.Nullable<decimal> _GroupTotalPrice;

        private System.Nullable<decimal> _GroupTotalValue;

        private int _AllocatedCoilPiece = 0;

        private System.Nullable<int> _PackCountMinimum;

        private System.Nullable<int> _PackCountMaximum;

        private System.Nullable<decimal> _WorkOrderPrintedQuantity;

        private string _ProductDescription;

        private decimal _InvoiceCostingWeight = 0m;

        private System.Nullable<int> _WorkingSpecificationId;

        private System.Nullable<int> _CallOffPiece = 0;

        private System.Nullable<decimal> _CallOffQuantity = 0m;

        private System.Nullable<decimal> _CallOffWeight = 0m;

        private System.Nullable<int> _BlanketItemId;

        private System.Nullable<int> _CreditedOrderNumber;

        private System.Nullable<int> _CreditedOrderItem;

        private System.Nullable<int> _CreditedDespatchItem;

        private System.Nullable<int> _PaintTypeId;

        private bool _StockAvailable = false;

        private System.Nullable<decimal> _MixturePrice;

        private System.Nullable<decimal> _FabricationPrice;

        private System.Nullable<decimal> _AdjustmentPrice;

        private System.Nullable<decimal> _YieldPercentage;

        private string _CreditedCustomerOrder;

        private System.Nullable<bool> _CalculatePiece;

        private System.Nullable<decimal> _StandardPrice;

        private string _CuttingGroupReference;

        private System.Nullable<bool> _CompleteAfterNextInvoice = false;

        private System.Nullable<decimal> _CompletionBalanceQuantity;

        private System.Nullable<bool> _MechanicalCert = false;

        private System.Nullable<bool> _ShowCountryOfMaterialOrigin = false;

        private System.Nullable<bool> _ShowCountryOfPrimaryProcessing = false;

        private System.Nullable<bool> _ShowCountryOfFinalProcessing = false;

        private System.Nullable<bool> _ItemCredited = false;

        private string _AcknowledgementNote;

        private string _DespatchNote;

        private bool _FullyAllocated = false;

        private System.Nullable<bool> _InvoicePacking = true;

        private System.Nullable<decimal> _GroupCuttingCost;

        private System.Nullable<int> _GroupCuttingCostUnitId;

        private System.Nullable<decimal> _GroupDrillingCost;

        private System.Nullable<int> _GroupDrillingCostUnitId;

        private System.Nullable<decimal> _GroupPaintingCost;

        private System.Nullable<int> _GroupPaintingCostUnitId;

        private System.Nullable<decimal> _GroupShotblastingCost;

        private System.Nullable<int> _GroupShotblastingCostUnitId;

        private System.Nullable<int> _ProductSubGroupId;

        private System.Nullable<decimal> _GroupConsumptionPrice;

        private System.Nullable<int> _ImportBatchNumber;

        private System.Nullable<int> _ImportNumber;

        private System.Nullable<int> _ImportItem;

        private System.Nullable<int> _LostReasonValue;

        private decimal _FlatRolledValue = 0m;

        private bool _FlatRolled = false;

        private System.Nullable<int> _OldestPurchaseOrderNumber;

        private string _IntercompanyPurchaseBranch;

        private System.Nullable<int> _IntercompanyPurchaseOrder;

        private System.Nullable<int> _IntercompanyPurchaseItem;

        private bool _FromFlatRolled = false;
        #pragma warning restore 0649

        private EntityRef<Company> _Company;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_GroupCuttingCostUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_GroupDrillingCostUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_GroupPaintingCostUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_GroupPriceUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_GroupShotblastingCostUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_OriginalQuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_WeightUnitsId;

        private EntityRef<SalesGroup> _SalesGroup;

        private EntityRef<Warehouse> _Warehouse;

        private EntitySet<ProductLevelAllocation> _ProductLevelAllocation_SalesItemId;

        private EntityRef<ProductLevelAllocation> _ProductLevelAllocation_ProductLevelAllocationId;

        private EntityRef<Branch> _Branch;

        private EntityRef<Product> _Product;

        private EntityRef<ProductSubGroup> _ProductSubGroup;

        private EntityRef<SalesTotal> _SalesTotal_BalanceTotalId;

        private EntitySet<SalesItem> _SalesItem_BlanketItemId1;

        private EntityRef<SalesItem> _SalesItem_BlanketItemId;

        private EntityRef<DimensionValue> _DimensionValue;

        private EntityRef<EnquiryLostReason> _EnquiryLostReason;

        private EntitySet<SalesItem> _SalesItem_OrderItemId1;

        private EntityRef<SalesItem> _SalesItem_OrderItemId;

        private EntityRef<SalesHeader> _SalesHeader;

        private EntityRef<SalesTotal> _SalesTotal_SalesTotalId;

        private EntityRef<SalesStatusCode> _SalesStatusCode;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnSalesHeaderIdChanging(System.Nullable<int> value);
        partial void OnSalesHeaderIdChanged();
        partial void OnItemNumberChanging(System.Nullable<int> value);
        partial void OnItemNumberChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnDimensionsIdChanging(System.Nullable<int> value);
        partial void OnDimensionsIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnWorksNoteChanging(string value);
        partial void OnWorksNoteChanged();
        partial void OnProductionNoteChanging(string value);
        partial void OnProductionNoteChanged();
        partial void OnInvoiceNoteChanging(string value);
        partial void OnInvoiceNoteChanged();
        partial void OnRequiredPieceChanging(System.Nullable<int> value);
        partial void OnRequiredPieceChanged();
        partial void OnRequiredQuantityChanging(System.Nullable<decimal> value);
        partial void OnRequiredQuantityChanged();
        partial void OnRequiredWeightChanging(System.Nullable<decimal> value);
        partial void OnRequiredWeightChanged();
        partial void OnDeliveredPieceChanging(System.Nullable<int> value);
        partial void OnDeliveredPieceChanged();
        partial void OnDeliveredQuantityChanging(System.Nullable<decimal> value);
        partial void OnDeliveredQuantityChanged();
        partial void OnDeliveredWeightChanging(System.Nullable<decimal> value);
        partial void OnDeliveredWeightChanged();
        partial void OnBalancePieceChanging(System.Nullable<int> value);
        partial void OnBalancePieceChanged();
        partial void OnBalanceQuantityChanging(System.Nullable<decimal> value);
        partial void OnBalanceQuantityChanged();
        partial void OnBalanceWeightChanging(System.Nullable<decimal> value);
        partial void OnBalanceWeightChanged();
        partial void OnWeightUnitsIdChanging(System.Nullable<int> value);
        partial void OnWeightUnitsIdChanged();
        partial void OnPartCustomerIdChanging(System.Nullable<int> value);
        partial void OnPartCustomerIdChanged();
        partial void OnPartSpecificationIdChanging(System.Nullable<int> value);
        partial void OnPartSpecificationIdChanged();
        partial void OnStatusIdChanging(System.Nullable<int> value);
        partial void OnStatusIdChanged();
        partial void OnSalesGroupIdChanging(System.Nullable<int> value);
        partial void OnSalesGroupIdChanged();
        partial void OnVatType1IdChanging(System.Nullable<int> value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(System.Nullable<int> value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(System.Nullable<int> value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(System.Nullable<int> value);
        partial void OnVatType4IdChanged();
        partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDueDateChanged();
        partial void OnManualDateChanging(string value);
        partial void OnManualDateChanged();
        partial void OnCompletedChanging(System.Nullable<bool> value);
        partial void OnCompletedChanged();
        partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCompletedDateChanged();
        partial void OnSpecificationValue1Changing(string value);
        partial void OnSpecificationValue1Changed();
        partial void OnSpecificationValue2Changing(string value);
        partial void OnSpecificationValue2Changed();
        partial void OnSpecificationValue3Changing(string value);
        partial void OnSpecificationValue3Changed();
        partial void OnSpecificationValue4Changing(string value);
        partial void OnSpecificationValue4Changed();
        partial void OnSpecificationValue5Changing(string value);
        partial void OnSpecificationValue5Changed();
        partial void OnCreditedItemChanging(System.Nullable<int> value);
        partial void OnCreditedItemChanged();
        partial void OnCreditReferenceChanging(string value);
        partial void OnCreditReferenceChanged();
        partial void OnDespatchItemIdChanging(System.Nullable<int> value);
        partial void OnDespatchItemIdChanged();
        partial void OnOrderItemIdChanging(System.Nullable<int> value);
        partial void OnOrderItemIdChanged();
        partial void OnDeliveryBranchIdChanging(System.Nullable<int> value);
        partial void OnDeliveryBranchIdChanged();
        partial void OnDeliveryWarehouseIdChanging(System.Nullable<int> value);
        partial void OnDeliveryWarehouseIdChanged();
        partial void OnLostReasonIdChanging(System.Nullable<int> value);
        partial void OnLostReasonIdChanged();
        partial void OnLostDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLostDateChanged();
        partial void OnLostDescriptionChanging(string value);
        partial void OnLostDescriptionChanged();
        partial void OnSalesTotalIdChanging(System.Nullable<int> value);
        partial void OnSalesTotalIdChanged();
        partial void OnDiscriminatorChanging(string value);
        partial void OnDiscriminatorChanged();
        partial void OnOriginalQuantityChanging(System.Nullable<decimal> value);
        partial void OnOriginalQuantityChanged();
        partial void OnOriginalQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnOriginalQuantityUnitIdChanged();
        partial void OnOriginalDueDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOriginalDueDateChanged();
        partial void OnTransportPieceChanging(System.Nullable<int> value);
        partial void OnTransportPieceChanged();
        partial void OnTransportQuantityChanging(System.Nullable<decimal> value);
        partial void OnTransportQuantityChanged();
        partial void OnTransportWeightChanging(System.Nullable<decimal> value);
        partial void OnTransportWeightChanged();
        partial void OnShowPriceChanging(System.Nullable<bool> value);
        partial void OnShowPriceChanged();
        partial void OnUseMinimumGradeChanging(System.Nullable<bool> value);
        partial void OnUseMinimumGradeChanged();
        partial void OnStockLocationChanging(string value);
        partial void OnStockLocationChanged();
        partial void OnInvoicedPieceChanging(System.Nullable<int> value);
        partial void OnInvoicedPieceChanged();
        partial void OnInvoicedQuantityChanging(System.Nullable<decimal> value);
        partial void OnInvoicedQuantityChanged();
        partial void OnInvoicedWeightChanging(System.Nullable<decimal> value);
        partial void OnInvoicedWeightChanged();
        partial void OnMarginTypeChanging(string value);
        partial void OnMarginTypeChanged();
        partial void OnBalanceTotalIdChanging(System.Nullable<int> value);
        partial void OnBalanceTotalIdChanged();
        partial void OnAllocatedPieceChanging(System.Nullable<int> value);
        partial void OnAllocatedPieceChanged();
        partial void OnAllocatedQuantityChanging(System.Nullable<decimal> value);
        partial void OnAllocatedQuantityChanged();
        partial void OnAllocatedWeightChanging(System.Nullable<decimal> value);
        partial void OnAllocatedWeightChanged();
        partial void OnTransferTypeChanging(string value);
        partial void OnTransferTypeChanged();
        partial void OnTaxClass1Changing(System.Nullable<int> value);
        partial void OnTaxClass1Changed();
        partial void OnTaxClass2Changing(System.Nullable<int> value);
        partial void OnTaxClass2Changed();
        partial void OnTaxClass3Changing(System.Nullable<int> value);
        partial void OnTaxClass3Changed();
        partial void OnTaxClass4Changing(System.Nullable<int> value);
        partial void OnTaxClass4Changed();
        partial void OnTaxClass5Changing(System.Nullable<int> value);
        partial void OnTaxClass5Changed();
        partial void OnTaxExempt1Changing(System.Nullable<bool> value);
        partial void OnTaxExempt1Changed();
        partial void OnTaxExempt2Changing(System.Nullable<bool> value);
        partial void OnTaxExempt2Changed();
        partial void OnTaxExempt3Changing(System.Nullable<bool> value);
        partial void OnTaxExempt3Changed();
        partial void OnTaxExempt4Changing(System.Nullable<bool> value);
        partial void OnTaxExempt4Changed();
        partial void OnTaxExempt5Changing(System.Nullable<bool> value);
        partial void OnTaxExempt5Changed();
        partial void OnPartNumberChanging(string value);
        partial void OnPartNumberChanged();
        partial void OnSpecificationValue6Changing(string value);
        partial void OnSpecificationValue6Changed();
        partial void OnSpecificationValue7Changing(string value);
        partial void OnSpecificationValue7Changed();
        partial void OnSpecificationValue8Changing(string value);
        partial void OnSpecificationValue8Changed();
        partial void OnSpecificationValue9Changing(string value);
        partial void OnSpecificationValue9Changed();
        partial void OnSpecificationValue10Changing(string value);
        partial void OnSpecificationValue10Changed();
        partial void OnProductLevelAllocationIdChanging(System.Nullable<int> value);
        partial void OnProductLevelAllocationIdChanged();
        partial void OnOutsideDiameterChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterChanged();
        partial void OnOutsideDiameterMinimumChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterMinimumChanged();
        partial void OnOutsideDiameterMaximumChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterMaximumChanged();
        partial void OnPackHeightChanging(System.Nullable<decimal> value);
        partial void OnPackHeightChanged();
        partial void OnPackHeightMinimumChanging(System.Nullable<decimal> value);
        partial void OnPackHeightMinimumChanged();
        partial void OnPackHeightMaximumChanging(System.Nullable<decimal> value);
        partial void OnPackHeightMaximumChanged();
        partial void OnPackWeightChanging(System.Nullable<decimal> value);
        partial void OnPackWeightChanged();
        partial void OnPackWeightMinimumChanging(System.Nullable<decimal> value);
        partial void OnPackWeightMinimumChanged();
        partial void OnPackWeightMaximumChanging(System.Nullable<decimal> value);
        partial void OnPackWeightMaximumChanged();
        partial void OnInsideDiameterChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterChanged();
        partial void OnInsideDiameterMinimumChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterMinimumChanged();
        partial void OnInsideDiameterMaximumChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterMaximumChanged();
        partial void OnTrimRequiredChanging(System.Nullable<bool> value);
        partial void OnTrimRequiredChanged();
        partial void OnShotblastingRequiredChanging(System.Nullable<bool> value);
        partial void OnShotblastingRequiredChanged();
        partial void OnPaintDescriptionChanging(string value);
        partial void OnPaintDescriptionChanged();
        partial void OnGroupPriceUnitIdChanging(System.Nullable<int> value);
        partial void OnGroupPriceUnitIdChanged();
        partial void OnGroupTotalPriceChanging(System.Nullable<decimal> value);
        partial void OnGroupTotalPriceChanged();
        partial void OnGroupTotalValueChanging(System.Nullable<decimal> value);
        partial void OnGroupTotalValueChanged();
        partial void OnAllocatedCoilPieceChanging(int value);
        partial void OnAllocatedCoilPieceChanged();
        partial void OnPackCountMinimumChanging(System.Nullable<int> value);
        partial void OnPackCountMinimumChanged();
        partial void OnPackCountMaximumChanging(System.Nullable<int> value);
        partial void OnPackCountMaximumChanged();
        partial void OnWorkOrderPrintedQuantityChanging(System.Nullable<decimal> value);
        partial void OnWorkOrderPrintedQuantityChanged();
        partial void OnProductDescriptionChanging(string value);
        partial void OnProductDescriptionChanged();
        partial void OnInvoiceCostingWeightChanging(decimal value);
        partial void OnInvoiceCostingWeightChanged();
        partial void OnWorkingSpecificationIdChanging(System.Nullable<int> value);
        partial void OnWorkingSpecificationIdChanged();
        partial void OnCallOffPieceChanging(System.Nullable<int> value);
        partial void OnCallOffPieceChanged();
        partial void OnCallOffQuantityChanging(System.Nullable<decimal> value);
        partial void OnCallOffQuantityChanged();
        partial void OnCallOffWeightChanging(System.Nullable<decimal> value);
        partial void OnCallOffWeightChanged();
        partial void OnBlanketItemIdChanging(System.Nullable<int> value);
        partial void OnBlanketItemIdChanged();
        partial void OnCreditedOrderNumberChanging(System.Nullable<int> value);
        partial void OnCreditedOrderNumberChanged();
        partial void OnCreditedOrderItemChanging(System.Nullable<int> value);
        partial void OnCreditedOrderItemChanged();
        partial void OnCreditedDespatchItemChanging(System.Nullable<int> value);
        partial void OnCreditedDespatchItemChanged();
        partial void OnPaintTypeIdChanging(System.Nullable<int> value);
        partial void OnPaintTypeIdChanged();
        partial void OnStockAvailableChanging(bool value);
        partial void OnStockAvailableChanged();
        partial void OnMixturePriceChanging(System.Nullable<decimal> value);
        partial void OnMixturePriceChanged();
        partial void OnFabricationPriceChanging(System.Nullable<decimal> value);
        partial void OnFabricationPriceChanged();
        partial void OnAdjustmentPriceChanging(System.Nullable<decimal> value);
        partial void OnAdjustmentPriceChanged();
        partial void OnYieldPercentageChanging(System.Nullable<decimal> value);
        partial void OnYieldPercentageChanged();
        partial void OnCreditedCustomerOrderChanging(string value);
        partial void OnCreditedCustomerOrderChanged();
        partial void OnCalculatePieceChanging(System.Nullable<bool> value);
        partial void OnCalculatePieceChanged();
        partial void OnStandardPriceChanging(System.Nullable<decimal> value);
        partial void OnStandardPriceChanged();
        partial void OnCuttingGroupReferenceChanging(string value);
        partial void OnCuttingGroupReferenceChanged();
        partial void OnCompleteAfterNextInvoiceChanging(System.Nullable<bool> value);
        partial void OnCompleteAfterNextInvoiceChanged();
        partial void OnCompletionBalanceQuantityChanging(System.Nullable<decimal> value);
        partial void OnCompletionBalanceQuantityChanged();
        partial void OnMechanicalCertChanging(System.Nullable<bool> value);
        partial void OnMechanicalCertChanged();
        partial void OnShowCountryOfMaterialOriginChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfMaterialOriginChanged();
        partial void OnShowCountryOfPrimaryProcessingChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfPrimaryProcessingChanged();
        partial void OnShowCountryOfFinalProcessingChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfFinalProcessingChanged();
        partial void OnItemCreditedChanging(System.Nullable<bool> value);
        partial void OnItemCreditedChanged();
        partial void OnAcknowledgementNoteChanging(string value);
        partial void OnAcknowledgementNoteChanged();
        partial void OnDespatchNoteChanging(string value);
        partial void OnDespatchNoteChanged();
        partial void OnFullyAllocatedChanging(bool value);
        partial void OnFullyAllocatedChanged();
        partial void OnInvoicePackingChanging(System.Nullable<bool> value);
        partial void OnInvoicePackingChanged();
        partial void OnGroupCuttingCostChanging(System.Nullable<decimal> value);
        partial void OnGroupCuttingCostChanged();
        partial void OnGroupCuttingCostUnitIdChanging(System.Nullable<int> value);
        partial void OnGroupCuttingCostUnitIdChanged();
        partial void OnGroupDrillingCostChanging(System.Nullable<decimal> value);
        partial void OnGroupDrillingCostChanged();
        partial void OnGroupDrillingCostUnitIdChanging(System.Nullable<int> value);
        partial void OnGroupDrillingCostUnitIdChanged();
        partial void OnGroupPaintingCostChanging(System.Nullable<decimal> value);
        partial void OnGroupPaintingCostChanged();
        partial void OnGroupPaintingCostUnitIdChanging(System.Nullable<int> value);
        partial void OnGroupPaintingCostUnitIdChanged();
        partial void OnGroupShotblastingCostChanging(System.Nullable<decimal> value);
        partial void OnGroupShotblastingCostChanged();
        partial void OnGroupShotblastingCostUnitIdChanging(System.Nullable<int> value);
        partial void OnGroupShotblastingCostUnitIdChanged();
        partial void OnProductSubGroupIdChanging(System.Nullable<int> value);
        partial void OnProductSubGroupIdChanged();
        partial void OnGroupConsumptionPriceChanging(System.Nullable<decimal> value);
        partial void OnGroupConsumptionPriceChanged();
        partial void OnImportBatchNumberChanging(System.Nullable<int> value);
        partial void OnImportBatchNumberChanged();
        partial void OnImportNumberChanging(System.Nullable<int> value);
        partial void OnImportNumberChanged();
        partial void OnImportItemChanging(System.Nullable<int> value);
        partial void OnImportItemChanged();
        partial void OnLostReasonValueChanging(System.Nullable<int> value);
        partial void OnLostReasonValueChanged();
        partial void OnFlatRolledValueChanging(decimal value);
        partial void OnFlatRolledValueChanged();
        partial void OnFlatRolledChanging(bool value);
        partial void OnFlatRolledChanged();
        partial void OnOldestPurchaseOrderNumberChanging(System.Nullable<int> value);
        partial void OnOldestPurchaseOrderNumberChanged();
        partial void OnIntercompanyPurchaseBranchChanging(string value);
        partial void OnIntercompanyPurchaseBranchChanged();
        partial void OnIntercompanyPurchaseOrderChanging(System.Nullable<int> value);
        partial void OnIntercompanyPurchaseOrderChanged();
        partial void OnIntercompanyPurchaseItemChanging(System.Nullable<int> value);
        partial void OnIntercompanyPurchaseItemChanged();
        partial void OnFromFlatRolledChanging(bool value);
        partial void OnFromFlatRolledChanged();
        #endregion

        public SalesItem()
        {
            this._Company  = default(EntityRef<Company>);
            this._UnitsOfMeasure_GroupCuttingCostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_GroupDrillingCostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_GroupPaintingCostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_GroupPriceUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_GroupShotblastingCostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_OriginalQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_WeightUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._SalesGroup  = default(EntityRef<SalesGroup>);
            this._Warehouse  = default(EntityRef<Warehouse>);
            this._ProductLevelAllocation_SalesItemId = new EntitySet<ProductLevelAllocation>(new Action<ProductLevelAllocation>(this.attach_ProductLevelAllocation_SalesItemId), new Action<ProductLevelAllocation>(this.detach_ProductLevelAllocation_SalesItemId));
            this._ProductLevelAllocation_ProductLevelAllocationId  = default(EntityRef<ProductLevelAllocation>);
            this._Branch  = default(EntityRef<Branch>);
            this._Product  = default(EntityRef<Product>);
            this._ProductSubGroup  = default(EntityRef<ProductSubGroup>);
            this._SalesTotal_BalanceTotalId  = default(EntityRef<SalesTotal>);
            this._SalesItem_BlanketItemId1 = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem_BlanketItemId1), new Action<SalesItem>(this.detach_SalesItem_BlanketItemId1));
            this._SalesItem_BlanketItemId  = default(EntityRef<SalesItem>);
            this._DimensionValue  = default(EntityRef<DimensionValue>);
            this._EnquiryLostReason  = default(EntityRef<EnquiryLostReason>);
            this._SalesItem_OrderItemId1 = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem_OrderItemId1), new Action<SalesItem>(this.detach_SalesItem_OrderItemId1));
            this._SalesItem_OrderItemId  = default(EntityRef<SalesItem>);
            this._SalesHeader  = default(EntityRef<SalesHeader>);
            this._SalesTotal_SalesTotalId  = default(EntityRef<SalesTotal>);
            this._SalesStatusCode  = default(EntityRef<SalesStatusCode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeaderId in the schema.
        /// </summary>
        [Column(Name = @"sales_header_id", Storage = "_SalesHeaderId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesHeaderId
        {
            get
            {
                return this._SalesHeaderId;
            }
            set
            {
                if (this._SalesHeaderId != value)
                {
                    if (this._SalesHeader.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesHeaderIdChanging(value);
                    this.SendPropertyChanging("SalesHeaderId");
                    this._SalesHeaderId = value;
                    this.SendPropertyChanged("SalesHeaderId");
                    this.OnSalesHeaderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemNumber in the schema.
        /// </summary>
        [Column(Name = @"item_number", Storage = "_ItemNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ItemNumber
        {
            get
            {
                return this._ItemNumber;
            }
            set
            {
                if (this._ItemNumber != value)
                {
                    this.OnItemNumberChanging(value);
                    this.SendPropertyChanging("ItemNumber");
                    this._ItemNumber = value;
                    this.SendPropertyChanged("ItemNumber");
                    this.OnItemNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionsId in the schema.
        /// </summary>
        [Column(Name = @"dimensions_id", Storage = "_DimensionsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DimensionsId
        {
            get
            {
                return this._DimensionsId;
            }
            set
            {
                if (this._DimensionsId != value)
                {
                    if (this._DimensionValue.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDimensionsIdChanging(value);
                    this.SendPropertyChanging("DimensionsId");
                    this._DimensionsId = value;
                    this.SendPropertyChanged("DimensionsId");
                    this.OnDimensionsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorksNote in the schema.
        /// </summary>
        [Column(Name = @"works_notes", Storage = "_WorksNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string WorksNote
        {
            get
            {
                return this._WorksNote;
            }
            set
            {
                if (this._WorksNote != value)
                {
                    this.OnWorksNoteChanging(value);
                    this.SendPropertyChanging("WorksNote");
                    this._WorksNote = value;
                    this.SendPropertyChanged("WorksNote");
                    this.OnWorksNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionNote in the schema.
        /// </summary>
        [Column(Name = @"production_notes", Storage = "_ProductionNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProductionNote
        {
            get
            {
                return this._ProductionNote;
            }
            set
            {
                if (this._ProductionNote != value)
                {
                    this.OnProductionNoteChanging(value);
                    this.SendPropertyChanging("ProductionNote");
                    this._ProductionNote = value;
                    this.SendPropertyChanged("ProductionNote");
                    this.OnProductionNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceNote in the schema.
        /// </summary>
        [Column(Name = @"invoice_notes", Storage = "_InvoiceNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InvoiceNote
        {
            get
            {
                return this._InvoiceNote;
            }
            set
            {
                if (this._InvoiceNote != value)
                {
                    this.OnInvoiceNoteChanging(value);
                    this.SendPropertyChanging("InvoiceNote");
                    this._InvoiceNote = value;
                    this.SendPropertyChanged("InvoiceNote");
                    this.OnInvoiceNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredPiece in the schema.
        /// </summary>
        [Column(Name = @"required_pieces", Storage = "_RequiredPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RequiredPiece
        {
            get
            {
                return this._RequiredPiece;
            }
            set
            {
                if (this._RequiredPiece != value)
                {
                    this.OnRequiredPieceChanging(value);
                    this.SendPropertyChanging("RequiredPiece");
                    this._RequiredPiece = value;
                    this.SendPropertyChanged("RequiredPiece");
                    this.OnRequiredPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredQuantity in the schema.
        /// </summary>
        [Column(Name = @"required_quantity", Storage = "_RequiredQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> RequiredQuantity
        {
            get
            {
                return this._RequiredQuantity;
            }
            set
            {
                if (this._RequiredQuantity != value)
                {
                    this.OnRequiredQuantityChanging(value);
                    this.SendPropertyChanging("RequiredQuantity");
                    this._RequiredQuantity = value;
                    this.SendPropertyChanged("RequiredQuantity");
                    this.OnRequiredQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredWeight in the schema.
        /// </summary>
        [Column(Name = @"required_weight", Storage = "_RequiredWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> RequiredWeight
        {
            get
            {
                return this._RequiredWeight;
            }
            set
            {
                if (this._RequiredWeight != value)
                {
                    this.OnRequiredWeightChanging(value);
                    this.SendPropertyChanging("RequiredWeight");
                    this._RequiredWeight = value;
                    this.SendPropertyChanged("RequiredWeight");
                    this.OnRequiredWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredPiece in the schema.
        /// </summary>
        [Column(Name = @"delivered_pieces", Storage = "_DeliveredPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveredPiece
        {
            get
            {
                return this._DeliveredPiece;
            }
            set
            {
                if (this._DeliveredPiece != value)
                {
                    this.OnDeliveredPieceChanging(value);
                    this.SendPropertyChanging("DeliveredPiece");
                    this._DeliveredPiece = value;
                    this.SendPropertyChanged("DeliveredPiece");
                    this.OnDeliveredPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredQuantity in the schema.
        /// </summary>
        [Column(Name = @"delivered_quantity", Storage = "_DeliveredQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DeliveredQuantity
        {
            get
            {
                return this._DeliveredQuantity;
            }
            set
            {
                if (this._DeliveredQuantity != value)
                {
                    this.OnDeliveredQuantityChanging(value);
                    this.SendPropertyChanging("DeliveredQuantity");
                    this._DeliveredQuantity = value;
                    this.SendPropertyChanged("DeliveredQuantity");
                    this.OnDeliveredQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveredWeight in the schema.
        /// </summary>
        [Column(Name = @"delivered_weight", Storage = "_DeliveredWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DeliveredWeight
        {
            get
            {
                return this._DeliveredWeight;
            }
            set
            {
                if (this._DeliveredWeight != value)
                {
                    this.OnDeliveredWeightChanging(value);
                    this.SendPropertyChanging("DeliveredWeight");
                    this._DeliveredWeight = value;
                    this.SendPropertyChanged("DeliveredWeight");
                    this.OnDeliveredWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalancePiece in the schema.
        /// </summary>
        [Column(Name = @"balance_pieces", Storage = "_BalancePiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BalancePiece
        {
            get
            {
                return this._BalancePiece;
            }
            set
            {
                if (this._BalancePiece != value)
                {
                    this.OnBalancePieceChanging(value);
                    this.SendPropertyChanging("BalancePiece");
                    this._BalancePiece = value;
                    this.SendPropertyChanged("BalancePiece");
                    this.OnBalancePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceQuantity in the schema.
        /// </summary>
        [Column(Name = @"balance_quantity", Storage = "_BalanceQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BalanceQuantity
        {
            get
            {
                return this._BalanceQuantity;
            }
            set
            {
                if (this._BalanceQuantity != value)
                {
                    this.OnBalanceQuantityChanging(value);
                    this.SendPropertyChanging("BalanceQuantity");
                    this._BalanceQuantity = value;
                    this.SendPropertyChanged("BalanceQuantity");
                    this.OnBalanceQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceWeight in the schema.
        /// </summary>
        [Column(Name = @"balance_weight", Storage = "_BalanceWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BalanceWeight
        {
            get
            {
                return this._BalanceWeight;
            }
            set
            {
                if (this._BalanceWeight != value)
                {
                    this.OnBalanceWeightChanging(value);
                    this.SendPropertyChanging("BalanceWeight");
                    this._BalanceWeight = value;
                    this.SendPropertyChanged("BalanceWeight");
                    this.OnBalanceWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightUnitsId in the schema.
        /// </summary>
        [Column(Name = @"weight_units_id", Storage = "_WeightUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WeightUnitsId
        {
            get
            {
                return this._WeightUnitsId;
            }
            set
            {
                if (this._WeightUnitsId != value)
                {
                    if (this._UnitsOfMeasure_WeightUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWeightUnitsIdChanging(value);
                    this.SendPropertyChanging("WeightUnitsId");
                    this._WeightUnitsId = value;
                    this.SendPropertyChanged("WeightUnitsId");
                    this.OnWeightUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartCustomerId in the schema.
        /// </summary>
        [Column(Name = @"part_customer_id", Storage = "_PartCustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartCustomerId
        {
            get
            {
                return this._PartCustomerId;
            }
            set
            {
                if (this._PartCustomerId != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartCustomerIdChanging(value);
                    this.SendPropertyChanging("PartCustomerId");
                    this._PartCustomerId = value;
                    this.SendPropertyChanged("PartCustomerId");
                    this.OnPartCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartSpecificationId in the schema.
        /// </summary>
        [Column(Name = @"part_specification_id", Storage = "_PartSpecificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartSpecificationId
        {
            get
            {
                return this._PartSpecificationId;
            }
            set
            {
                if (this._PartSpecificationId != value)
                {
                    this.OnPartSpecificationIdChanging(value);
                    this.SendPropertyChanging("PartSpecificationId");
                    this._PartSpecificationId = value;
                    this.SendPropertyChanged("PartSpecificationId");
                    this.OnPartSpecificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._SalesStatusCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    if (this._SalesGroup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DueDate in the schema.
        /// </summary>
        [Column(Name = @"due_date", Storage = "_DueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DueDate
        {
            get
            {
                return this._DueDate;
            }
            set
            {
                if (this._DueDate != value)
                {
                    this.OnDueDateChanging(value);
                    this.SendPropertyChanging("DueDate");
                    this._DueDate = value;
                    this.SendPropertyChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManualDate in the schema.
        /// </summary>
        [Column(Name = @"manual_date", Storage = "_ManualDate", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string ManualDate
        {
            get
            {
                return this._ManualDate;
            }
            set
            {
                if (this._ManualDate != value)
                {
                    this.OnManualDateChanging(value);
                    this.SendPropertyChanging("ManualDate");
                    this._ManualDate = value;
                    this.SendPropertyChanged("ManualDate");
                    this.OnManualDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Completed in the schema.
        /// </summary>
        [Column(Name = @"completed", Storage = "_Completed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging("Completed");
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompletedDate in the schema.
        /// </summary>
        [Column(Name = @"completed_date", Storage = "_CompletedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CompletedDate
        {
            get
            {
                return this._CompletedDate;
            }
            set
            {
                if (this._CompletedDate != value)
                {
                    this.OnCompletedDateChanging(value);
                    this.SendPropertyChanging("CompletedDate");
                    this._CompletedDate = value;
                    this.SendPropertyChanged("CompletedDate");
                    this.OnCompletedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue1 in the schema.
        /// </summary>
        [Column(Name = @"specification_value1", Storage = "_SpecificationValue1", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue1
        {
            get
            {
                return this._SpecificationValue1;
            }
            set
            {
                if (this._SpecificationValue1 != value)
                {
                    this.OnSpecificationValue1Changing(value);
                    this.SendPropertyChanging("SpecificationValue1");
                    this._SpecificationValue1 = value;
                    this.SendPropertyChanged("SpecificationValue1");
                    this.OnSpecificationValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue2 in the schema.
        /// </summary>
        [Column(Name = @"specification_value2", Storage = "_SpecificationValue2", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue2
        {
            get
            {
                return this._SpecificationValue2;
            }
            set
            {
                if (this._SpecificationValue2 != value)
                {
                    this.OnSpecificationValue2Changing(value);
                    this.SendPropertyChanging("SpecificationValue2");
                    this._SpecificationValue2 = value;
                    this.SendPropertyChanged("SpecificationValue2");
                    this.OnSpecificationValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue3 in the schema.
        /// </summary>
        [Column(Name = @"specification_value3", Storage = "_SpecificationValue3", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue3
        {
            get
            {
                return this._SpecificationValue3;
            }
            set
            {
                if (this._SpecificationValue3 != value)
                {
                    this.OnSpecificationValue3Changing(value);
                    this.SendPropertyChanging("SpecificationValue3");
                    this._SpecificationValue3 = value;
                    this.SendPropertyChanged("SpecificationValue3");
                    this.OnSpecificationValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue4 in the schema.
        /// </summary>
        [Column(Name = @"specification_value4", Storage = "_SpecificationValue4", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue4
        {
            get
            {
                return this._SpecificationValue4;
            }
            set
            {
                if (this._SpecificationValue4 != value)
                {
                    this.OnSpecificationValue4Changing(value);
                    this.SendPropertyChanging("SpecificationValue4");
                    this._SpecificationValue4 = value;
                    this.SendPropertyChanged("SpecificationValue4");
                    this.OnSpecificationValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue5 in the schema.
        /// </summary>
        [Column(Name = @"specification_value5", Storage = "_SpecificationValue5", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue5
        {
            get
            {
                return this._SpecificationValue5;
            }
            set
            {
                if (this._SpecificationValue5 != value)
                {
                    this.OnSpecificationValue5Changing(value);
                    this.SendPropertyChanging("SpecificationValue5");
                    this._SpecificationValue5 = value;
                    this.SendPropertyChanged("SpecificationValue5");
                    this.OnSpecificationValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedItem in the schema.
        /// </summary>
        [Column(Name = @"credited_item", Storage = "_CreditedItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreditedItem
        {
            get
            {
                return this._CreditedItem;
            }
            set
            {
                if (this._CreditedItem != value)
                {
                    this.OnCreditedItemChanging(value);
                    this.SendPropertyChanging("CreditedItem");
                    this._CreditedItem = value;
                    this.SendPropertyChanged("CreditedItem");
                    this.OnCreditedItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditReference in the schema.
        /// </summary>
        [Column(Name = @"credit_reference", Storage = "_CreditReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CreditReference
        {
            get
            {
                return this._CreditReference;
            }
            set
            {
                if (this._CreditReference != value)
                {
                    this.OnCreditReferenceChanging(value);
                    this.SendPropertyChanging("CreditReference");
                    this._CreditReference = value;
                    this.SendPropertyChanged("CreditReference");
                    this.OnCreditReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchItemId in the schema.
        /// </summary>
        [Column(Name = @"despatch_item_id", Storage = "_DespatchItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DespatchItemId
        {
            get
            {
                return this._DespatchItemId;
            }
            set
            {
                if (this._DespatchItemId != value)
                {
                    this.OnDespatchItemIdChanging(value);
                    this.SendPropertyChanging("DespatchItemId");
                    this._DespatchItemId = value;
                    this.SendPropertyChanged("DespatchItemId");
                    this.OnDespatchItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderItemId in the schema.
        /// </summary>
        [Column(Name = @"order_item_id", Storage = "_OrderItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OrderItemId
        {
            get
            {
                return this._OrderItemId;
            }
            set
            {
                if (this._OrderItemId != value)
                {
                    if (this._SalesItem_OrderItemId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderItemIdChanging(value);
                    this.SendPropertyChanging("OrderItemId");
                    this._OrderItemId = value;
                    this.SendPropertyChanged("OrderItemId");
                    this.OnOrderItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryBranchId in the schema.
        /// </summary>
        [Column(Name = @"delivery_branch_id", Storage = "_DeliveryBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveryBranchId
        {
            get
            {
                return this._DeliveryBranchId;
            }
            set
            {
                if (this._DeliveryBranchId != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryBranchIdChanging(value);
                    this.SendPropertyChanging("DeliveryBranchId");
                    this._DeliveryBranchId = value;
                    this.SendPropertyChanged("DeliveryBranchId");
                    this.OnDeliveryBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"delivery_warehouse_id", Storage = "_DeliveryWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DeliveryWarehouseId
        {
            get
            {
                return this._DeliveryWarehouseId;
            }
            set
            {
                if (this._DeliveryWarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryWarehouseIdChanging(value);
                    this.SendPropertyChanging("DeliveryWarehouseId");
                    this._DeliveryWarehouseId = value;
                    this.SendPropertyChanged("DeliveryWarehouseId");
                    this.OnDeliveryWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostReasonId in the schema.
        /// </summary>
        [Column(Name = @"lost_reason_id", Storage = "_LostReasonId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> LostReasonId
        {
            get
            {
                return this._LostReasonId;
            }
            set
            {
                if (this._LostReasonId != value)
                {
                    if (this._EnquiryLostReason.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLostReasonIdChanging(value);
                    this.SendPropertyChanging("LostReasonId");
                    this._LostReasonId = value;
                    this.SendPropertyChanged("LostReasonId");
                    this.OnLostReasonIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostDate in the schema.
        /// </summary>
        [Column(Name = @"lost_date", Storage = "_LostDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LostDate
        {
            get
            {
                return this._LostDate;
            }
            set
            {
                if (this._LostDate != value)
                {
                    this.OnLostDateChanging(value);
                    this.SendPropertyChanging("LostDate");
                    this._LostDate = value;
                    this.SendPropertyChanged("LostDate");
                    this.OnLostDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostDescription in the schema.
        /// </summary>
        [Column(Name = @"lost_description", Storage = "_LostDescription", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string LostDescription
        {
            get
            {
                return this._LostDescription;
            }
            set
            {
                if (this._LostDescription != value)
                {
                    this.OnLostDescriptionChanging(value);
                    this.SendPropertyChanging("LostDescription");
                    this._LostDescription = value;
                    this.SendPropertyChanged("LostDescription");
                    this.OnLostDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotalId in the schema.
        /// </summary>
        [Column(Name = @"sales_total_id", Storage = "_SalesTotalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesTotalId
        {
            get
            {
                return this._SalesTotalId;
            }
            set
            {
                if (this._SalesTotalId != value)
                {
                    if (this._SalesTotal_SalesTotalId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesTotalIdChanging(value);
                    this.SendPropertyChanging("SalesTotalId");
                    this._SalesTotalId = value;
                    this.SendPropertyChanged("SalesTotalId");
                    this.OnSalesTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discriminator in the schema.
        /// </summary>
        [Column(Name = @"discriminator", Storage = "_Discriminator", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Discriminator
        {
            get
            {
                return this._Discriminator;
            }
            set
            {
                if (this._Discriminator != value)
                {
                    this.OnDiscriminatorChanging(value);
                    this.SendPropertyChanging("Discriminator");
                    this._Discriminator = value;
                    this.SendPropertyChanged("Discriminator");
                    this.OnDiscriminatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalQuantity in the schema.
        /// </summary>
        [Column(Name = @"original_quantity", Storage = "_OriginalQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OriginalQuantity
        {
            get
            {
                return this._OriginalQuantity;
            }
            set
            {
                if (this._OriginalQuantity != value)
                {
                    this.OnOriginalQuantityChanging(value);
                    this.SendPropertyChanging("OriginalQuantity");
                    this._OriginalQuantity = value;
                    this.SendPropertyChanged("OriginalQuantity");
                    this.OnOriginalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"original_quantity_unit_id", Storage = "_OriginalQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OriginalQuantityUnitId
        {
            get
            {
                return this._OriginalQuantityUnitId;
            }
            set
            {
                if (this._OriginalQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_OriginalQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOriginalQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("OriginalQuantityUnitId");
                    this._OriginalQuantityUnitId = value;
                    this.SendPropertyChanged("OriginalQuantityUnitId");
                    this.OnOriginalQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalDueDate in the schema.
        /// </summary>
        [Column(Name = @"original_due_date", Storage = "_OriginalDueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> OriginalDueDate
        {
            get
            {
                return this._OriginalDueDate;
            }
            set
            {
                if (this._OriginalDueDate != value)
                {
                    this.OnOriginalDueDateChanging(value);
                    this.SendPropertyChanging("OriginalDueDate");
                    this._OriginalDueDate = value;
                    this.SendPropertyChanged("OriginalDueDate");
                    this.OnOriginalDueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportPiece in the schema.
        /// </summary>
        [Column(Name = @"transport_pieces", Storage = "_TransportPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransportPiece
        {
            get
            {
                return this._TransportPiece;
            }
            set
            {
                if (this._TransportPiece != value)
                {
                    this.OnTransportPieceChanging(value);
                    this.SendPropertyChanging("TransportPiece");
                    this._TransportPiece = value;
                    this.SendPropertyChanged("TransportPiece");
                    this.OnTransportPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportQuantity in the schema.
        /// </summary>
        [Column(Name = @"transport_quantity", Storage = "_TransportQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportQuantity
        {
            get
            {
                return this._TransportQuantity;
            }
            set
            {
                if (this._TransportQuantity != value)
                {
                    this.OnTransportQuantityChanging(value);
                    this.SendPropertyChanging("TransportQuantity");
                    this._TransportQuantity = value;
                    this.SendPropertyChanged("TransportQuantity");
                    this.OnTransportQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportWeight in the schema.
        /// </summary>
        [Column(Name = @"transport_weight", Storage = "_TransportWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> TransportWeight
        {
            get
            {
                return this._TransportWeight;
            }
            set
            {
                if (this._TransportWeight != value)
                {
                    this.OnTransportWeightChanging(value);
                    this.SendPropertyChanging("TransportWeight");
                    this._TransportWeight = value;
                    this.SendPropertyChanged("TransportWeight");
                    this.OnTransportWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowPrice in the schema.
        /// </summary>
        [Column(Name = @"show_prices", Storage = "_ShowPrice", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowPrice
        {
            get
            {
                return this._ShowPrice;
            }
            set
            {
                if (this._ShowPrice != value)
                {
                    this.OnShowPriceChanging(value);
                    this.SendPropertyChanging("ShowPrice");
                    this._ShowPrice = value;
                    this.SendPropertyChanged("ShowPrice");
                    this.OnShowPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UseMinimumGrade in the schema.
        /// </summary>
        [Column(Name = @"use_minimum_grade", Storage = "_UseMinimumGrade", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> UseMinimumGrade
        {
            get
            {
                return this._UseMinimumGrade;
            }
            set
            {
                if (this._UseMinimumGrade != value)
                {
                    this.OnUseMinimumGradeChanging(value);
                    this.SendPropertyChanging("UseMinimumGrade");
                    this._UseMinimumGrade = value;
                    this.SendPropertyChanged("UseMinimumGrade");
                    this.OnUseMinimumGradeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockLocation in the schema.
        /// </summary>
        [Column(Name = @"stock_location", Storage = "_StockLocation", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string StockLocation
        {
            get
            {
                return this._StockLocation;
            }
            set
            {
                if (this._StockLocation != value)
                {
                    this.OnStockLocationChanging(value);
                    this.SendPropertyChanging("StockLocation");
                    this._StockLocation = value;
                    this.SendPropertyChanged("StockLocation");
                    this.OnStockLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedPiece in the schema.
        /// </summary>
        [Column(Name = @"invoiced_pieces", Storage = "_InvoicedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> InvoicedPiece
        {
            get
            {
                return this._InvoicedPiece;
            }
            set
            {
                if (this._InvoicedPiece != value)
                {
                    this.OnInvoicedPieceChanging(value);
                    this.SendPropertyChanging("InvoicedPiece");
                    this._InvoicedPiece = value;
                    this.SendPropertyChanged("InvoicedPiece");
                    this.OnInvoicedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedQuantity in the schema.
        /// </summary>
        [Column(Name = @"invoiced_quantity", Storage = "_InvoicedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InvoicedQuantity
        {
            get
            {
                return this._InvoicedQuantity;
            }
            set
            {
                if (this._InvoicedQuantity != value)
                {
                    this.OnInvoicedQuantityChanging(value);
                    this.SendPropertyChanging("InvoicedQuantity");
                    this._InvoicedQuantity = value;
                    this.SendPropertyChanged("InvoicedQuantity");
                    this.OnInvoicedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicedWeight in the schema.
        /// </summary>
        [Column(Name = @"invoiced_weight", Storage = "_InvoicedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InvoicedWeight
        {
            get
            {
                return this._InvoicedWeight;
            }
            set
            {
                if (this._InvoicedWeight != value)
                {
                    this.OnInvoicedWeightChanging(value);
                    this.SendPropertyChanging("InvoicedWeight");
                    this._InvoicedWeight = value;
                    this.SendPropertyChanged("InvoicedWeight");
                    this.OnInvoicedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MarginType in the schema.
        /// </summary>
        [Column(Name = @"margin_type", Storage = "_MarginType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string MarginType
        {
            get
            {
                return this._MarginType;
            }
            set
            {
                if (this._MarginType != value)
                {
                    this.OnMarginTypeChanging(value);
                    this.SendPropertyChanging("MarginType");
                    this._MarginType = value;
                    this.SendPropertyChanged("MarginType");
                    this.OnMarginTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BalanceTotalId in the schema.
        /// </summary>
        [Column(Name = @"balance_total_id", Storage = "_BalanceTotalId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BalanceTotalId
        {
            get
            {
                return this._BalanceTotalId;
            }
            set
            {
                if (this._BalanceTotalId != value)
                {
                    if (this._SalesTotal_BalanceTotalId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBalanceTotalIdChanging(value);
                    this.SendPropertyChanging("BalanceTotalId");
                    this._BalanceTotalId = value;
                    this.SendPropertyChanged("BalanceTotalId");
                    this.OnBalanceTotalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedPiece in the schema.
        /// </summary>
        [Column(Name = @"allocated_pieces", Storage = "_AllocatedPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AllocatedPiece
        {
            get
            {
                return this._AllocatedPiece;
            }
            set
            {
                if (this._AllocatedPiece != value)
                {
                    this.OnAllocatedPieceChanging(value);
                    this.SendPropertyChanging("AllocatedPiece");
                    this._AllocatedPiece = value;
                    this.SendPropertyChanged("AllocatedPiece");
                    this.OnAllocatedPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedQuantity in the schema.
        /// </summary>
        [Column(Name = @"allocated_quantity", Storage = "_AllocatedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedQuantity
        {
            get
            {
                return this._AllocatedQuantity;
            }
            set
            {
                if (this._AllocatedQuantity != value)
                {
                    this.OnAllocatedQuantityChanging(value);
                    this.SendPropertyChanging("AllocatedQuantity");
                    this._AllocatedQuantity = value;
                    this.SendPropertyChanged("AllocatedQuantity");
                    this.OnAllocatedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedWeight in the schema.
        /// </summary>
        [Column(Name = @"allocated_weight", Storage = "_AllocatedWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AllocatedWeight
        {
            get
            {
                return this._AllocatedWeight;
            }
            set
            {
                if (this._AllocatedWeight != value)
                {
                    this.OnAllocatedWeightChanging(value);
                    this.SendPropertyChanging("AllocatedWeight");
                    this._AllocatedWeight = value;
                    this.SendPropertyChanged("AllocatedWeight");
                    this.OnAllocatedWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferType in the schema.
        /// </summary>
        [Column(Name = @"transfer_type", Storage = "_TransferType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TransferType
        {
            get
            {
                return this._TransferType;
            }
            set
            {
                if (this._TransferType != value)
                {
                    this.OnTransferTypeChanging(value);
                    this.SendPropertyChanging("TransferType");
                    this._TransferType = value;
                    this.SendPropertyChanged("TransferType");
                    this.OnTransferTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass1 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_1", Storage = "_TaxClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TaxClass1
        {
            get
            {
                return this._TaxClass1;
            }
            set
            {
                if (this._TaxClass1 != value)
                {
                    this.OnTaxClass1Changing(value);
                    this.SendPropertyChanging("TaxClass1");
                    this._TaxClass1 = value;
                    this.SendPropertyChanged("TaxClass1");
                    this.OnTaxClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass2 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_2", Storage = "_TaxClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TaxClass2
        {
            get
            {
                return this._TaxClass2;
            }
            set
            {
                if (this._TaxClass2 != value)
                {
                    this.OnTaxClass2Changing(value);
                    this.SendPropertyChanging("TaxClass2");
                    this._TaxClass2 = value;
                    this.SendPropertyChanged("TaxClass2");
                    this.OnTaxClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass3 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_3", Storage = "_TaxClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TaxClass3
        {
            get
            {
                return this._TaxClass3;
            }
            set
            {
                if (this._TaxClass3 != value)
                {
                    this.OnTaxClass3Changing(value);
                    this.SendPropertyChanging("TaxClass3");
                    this._TaxClass3 = value;
                    this.SendPropertyChanged("TaxClass3");
                    this.OnTaxClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass4 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_4", Storage = "_TaxClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TaxClass4
        {
            get
            {
                return this._TaxClass4;
            }
            set
            {
                if (this._TaxClass4 != value)
                {
                    this.OnTaxClass4Changing(value);
                    this.SendPropertyChanging("TaxClass4");
                    this._TaxClass4 = value;
                    this.SendPropertyChanged("TaxClass4");
                    this.OnTaxClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass5 in the schema.
        /// </summary>
        [Column(Name = @"tax_class_5", Storage = "_TaxClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TaxClass5
        {
            get
            {
                return this._TaxClass5;
            }
            set
            {
                if (this._TaxClass5 != value)
                {
                    this.OnTaxClass5Changing(value);
                    this.SendPropertyChanging("TaxClass5");
                    this._TaxClass5 = value;
                    this.SendPropertyChanged("TaxClass5");
                    this.OnTaxClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt1 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt1", Storage = "_TaxExempt1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TaxExempt1
        {
            get
            {
                return this._TaxExempt1;
            }
            set
            {
                if (this._TaxExempt1 != value)
                {
                    this.OnTaxExempt1Changing(value);
                    this.SendPropertyChanging("TaxExempt1");
                    this._TaxExempt1 = value;
                    this.SendPropertyChanged("TaxExempt1");
                    this.OnTaxExempt1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt2 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt2", Storage = "_TaxExempt2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TaxExempt2
        {
            get
            {
                return this._TaxExempt2;
            }
            set
            {
                if (this._TaxExempt2 != value)
                {
                    this.OnTaxExempt2Changing(value);
                    this.SendPropertyChanging("TaxExempt2");
                    this._TaxExempt2 = value;
                    this.SendPropertyChanged("TaxExempt2");
                    this.OnTaxExempt2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt3 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt3", Storage = "_TaxExempt3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TaxExempt3
        {
            get
            {
                return this._TaxExempt3;
            }
            set
            {
                if (this._TaxExempt3 != value)
                {
                    this.OnTaxExempt3Changing(value);
                    this.SendPropertyChanging("TaxExempt3");
                    this._TaxExempt3 = value;
                    this.SendPropertyChanged("TaxExempt3");
                    this.OnTaxExempt3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt4 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt4", Storage = "_TaxExempt4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TaxExempt4
        {
            get
            {
                return this._TaxExempt4;
            }
            set
            {
                if (this._TaxExempt4 != value)
                {
                    this.OnTaxExempt4Changing(value);
                    this.SendPropertyChanging("TaxExempt4");
                    this._TaxExempt4 = value;
                    this.SendPropertyChanged("TaxExempt4");
                    this.OnTaxExempt4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt5 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt5", Storage = "_TaxExempt5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TaxExempt5
        {
            get
            {
                return this._TaxExempt5;
            }
            set
            {
                if (this._TaxExempt5 != value)
                {
                    this.OnTaxExempt5Changing(value);
                    this.SendPropertyChanging("TaxExempt5");
                    this._TaxExempt5 = value;
                    this.SendPropertyChanged("TaxExempt5");
                    this.OnTaxExempt5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartNumber in the schema.
        /// </summary>
        [Column(Name = @"part_number", Storage = "_PartNumber", DbType = "VARCHAR(35)", UpdateCheck = UpdateCheck.Never)]
        public string PartNumber
        {
            get
            {
                return this._PartNumber;
            }
            set
            {
                if (this._PartNumber != value)
                {
                    this.OnPartNumberChanging(value);
                    this.SendPropertyChanging("PartNumber");
                    this._PartNumber = value;
                    this.SendPropertyChanged("PartNumber");
                    this.OnPartNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue6 in the schema.
        /// </summary>
        [Column(Name = @"specification_value6", Storage = "_SpecificationValue6", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue6
        {
            get
            {
                return this._SpecificationValue6;
            }
            set
            {
                if (this._SpecificationValue6 != value)
                {
                    this.OnSpecificationValue6Changing(value);
                    this.SendPropertyChanging("SpecificationValue6");
                    this._SpecificationValue6 = value;
                    this.SendPropertyChanged("SpecificationValue6");
                    this.OnSpecificationValue6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue7 in the schema.
        /// </summary>
        [Column(Name = @"specification_value7", Storage = "_SpecificationValue7", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue7
        {
            get
            {
                return this._SpecificationValue7;
            }
            set
            {
                if (this._SpecificationValue7 != value)
                {
                    this.OnSpecificationValue7Changing(value);
                    this.SendPropertyChanging("SpecificationValue7");
                    this._SpecificationValue7 = value;
                    this.SendPropertyChanged("SpecificationValue7");
                    this.OnSpecificationValue7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue8 in the schema.
        /// </summary>
        [Column(Name = @"specification_value8", Storage = "_SpecificationValue8", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue8
        {
            get
            {
                return this._SpecificationValue8;
            }
            set
            {
                if (this._SpecificationValue8 != value)
                {
                    this.OnSpecificationValue8Changing(value);
                    this.SendPropertyChanging("SpecificationValue8");
                    this._SpecificationValue8 = value;
                    this.SendPropertyChanged("SpecificationValue8");
                    this.OnSpecificationValue8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue9 in the schema.
        /// </summary>
        [Column(Name = @"specification_value9", Storage = "_SpecificationValue9", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue9
        {
            get
            {
                return this._SpecificationValue9;
            }
            set
            {
                if (this._SpecificationValue9 != value)
                {
                    this.OnSpecificationValue9Changing(value);
                    this.SendPropertyChanging("SpecificationValue9");
                    this._SpecificationValue9 = value;
                    this.SendPropertyChanged("SpecificationValue9");
                    this.OnSpecificationValue9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue10 in the schema.
        /// </summary>
        [Column(Name = @"specification_value10", Storage = "_SpecificationValue10", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue10
        {
            get
            {
                return this._SpecificationValue10;
            }
            set
            {
                if (this._SpecificationValue10 != value)
                {
                    this.OnSpecificationValue10Changing(value);
                    this.SendPropertyChanging("SpecificationValue10");
                    this._SpecificationValue10 = value;
                    this.SendPropertyChanged("SpecificationValue10");
                    this.OnSpecificationValue10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductLevelAllocationId in the schema.
        /// </summary>
        [Column(Name = @"product_level_allocation_id", Storage = "_ProductLevelAllocationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductLevelAllocationId
        {
            get
            {
                return this._ProductLevelAllocationId;
            }
            set
            {
                if (this._ProductLevelAllocationId != value)
                {
                    if (this._ProductLevelAllocation_ProductLevelAllocationId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductLevelAllocationIdChanging(value);
                    this.SendPropertyChanging("ProductLevelAllocationId");
                    this._ProductLevelAllocationId = value;
                    this.SendPropertyChanged("ProductLevelAllocationId");
                    this.OnProductLevelAllocationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameter in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter", Storage = "_OutsideDiameter", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameter
        {
            get
            {
                return this._OutsideDiameter;
            }
            set
            {
                if (this._OutsideDiameter != value)
                {
                    this.OnOutsideDiameterChanging(value);
                    this.SendPropertyChanging("OutsideDiameter");
                    this._OutsideDiameter = value;
                    this.SendPropertyChanged("OutsideDiameter");
                    this.OnOutsideDiameterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameterMinimum in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter_minimum", Storage = "_OutsideDiameterMinimum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameterMinimum
        {
            get
            {
                return this._OutsideDiameterMinimum;
            }
            set
            {
                if (this._OutsideDiameterMinimum != value)
                {
                    this.OnOutsideDiameterMinimumChanging(value);
                    this.SendPropertyChanging("OutsideDiameterMinimum");
                    this._OutsideDiameterMinimum = value;
                    this.SendPropertyChanged("OutsideDiameterMinimum");
                    this.OnOutsideDiameterMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameterMaximum in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter_maximum", Storage = "_OutsideDiameterMaximum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameterMaximum
        {
            get
            {
                return this._OutsideDiameterMaximum;
            }
            set
            {
                if (this._OutsideDiameterMaximum != value)
                {
                    this.OnOutsideDiameterMaximumChanging(value);
                    this.SendPropertyChanging("OutsideDiameterMaximum");
                    this._OutsideDiameterMaximum = value;
                    this.SendPropertyChanged("OutsideDiameterMaximum");
                    this.OnOutsideDiameterMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeight in the schema.
        /// </summary>
        [Column(Name = @"pack_height", Storage = "_PackHeight", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeight
        {
            get
            {
                return this._PackHeight;
            }
            set
            {
                if (this._PackHeight != value)
                {
                    this.OnPackHeightChanging(value);
                    this.SendPropertyChanging("PackHeight");
                    this._PackHeight = value;
                    this.SendPropertyChanged("PackHeight");
                    this.OnPackHeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeightMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_height_minimum", Storage = "_PackHeightMinimum", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeightMinimum
        {
            get
            {
                return this._PackHeightMinimum;
            }
            set
            {
                if (this._PackHeightMinimum != value)
                {
                    this.OnPackHeightMinimumChanging(value);
                    this.SendPropertyChanging("PackHeightMinimum");
                    this._PackHeightMinimum = value;
                    this.SendPropertyChanged("PackHeightMinimum");
                    this.OnPackHeightMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeightMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_height_maximum", Storage = "_PackHeightMaximum", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeightMaximum
        {
            get
            {
                return this._PackHeightMaximum;
            }
            set
            {
                if (this._PackHeightMaximum != value)
                {
                    this.OnPackHeightMaximumChanging(value);
                    this.SendPropertyChanging("PackHeightMaximum");
                    this._PackHeightMaximum = value;
                    this.SendPropertyChanged("PackHeightMaximum");
                    this.OnPackHeightMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeight in the schema.
        /// </summary>
        [Column(Name = @"pack_weight", Storage = "_PackWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeight
        {
            get
            {
                return this._PackWeight;
            }
            set
            {
                if (this._PackWeight != value)
                {
                    this.OnPackWeightChanging(value);
                    this.SendPropertyChanging("PackWeight");
                    this._PackWeight = value;
                    this.SendPropertyChanged("PackWeight");
                    this.OnPackWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeightMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_weight_minimum", Storage = "_PackWeightMinimum", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeightMinimum
        {
            get
            {
                return this._PackWeightMinimum;
            }
            set
            {
                if (this._PackWeightMinimum != value)
                {
                    this.OnPackWeightMinimumChanging(value);
                    this.SendPropertyChanging("PackWeightMinimum");
                    this._PackWeightMinimum = value;
                    this.SendPropertyChanged("PackWeightMinimum");
                    this.OnPackWeightMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeightMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_weight_maximum", Storage = "_PackWeightMaximum", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeightMaximum
        {
            get
            {
                return this._PackWeightMaximum;
            }
            set
            {
                if (this._PackWeightMaximum != value)
                {
                    this.OnPackWeightMaximumChanging(value);
                    this.SendPropertyChanging("PackWeightMaximum");
                    this._PackWeightMaximum = value;
                    this.SendPropertyChanged("PackWeightMaximum");
                    this.OnPackWeightMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameter in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter", Storage = "_InsideDiameter", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameter
        {
            get
            {
                return this._InsideDiameter;
            }
            set
            {
                if (this._InsideDiameter != value)
                {
                    this.OnInsideDiameterChanging(value);
                    this.SendPropertyChanging("InsideDiameter");
                    this._InsideDiameter = value;
                    this.SendPropertyChanged("InsideDiameter");
                    this.OnInsideDiameterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameterMinimum in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter_minimum", Storage = "_InsideDiameterMinimum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameterMinimum
        {
            get
            {
                return this._InsideDiameterMinimum;
            }
            set
            {
                if (this._InsideDiameterMinimum != value)
                {
                    this.OnInsideDiameterMinimumChanging(value);
                    this.SendPropertyChanging("InsideDiameterMinimum");
                    this._InsideDiameterMinimum = value;
                    this.SendPropertyChanged("InsideDiameterMinimum");
                    this.OnInsideDiameterMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameterMaximum in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter_maximum", Storage = "_InsideDiameterMaximum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameterMaximum
        {
            get
            {
                return this._InsideDiameterMaximum;
            }
            set
            {
                if (this._InsideDiameterMaximum != value)
                {
                    this.OnInsideDiameterMaximumChanging(value);
                    this.SendPropertyChanging("InsideDiameterMaximum");
                    this._InsideDiameterMaximum = value;
                    this.SendPropertyChanged("InsideDiameterMaximum");
                    this.OnInsideDiameterMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrimRequired in the schema.
        /// </summary>
        [Column(Name = @"trim_required", Storage = "_TrimRequired", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> TrimRequired
        {
            get
            {
                return this._TrimRequired;
            }
            set
            {
                if (this._TrimRequired != value)
                {
                    this.OnTrimRequiredChanging(value);
                    this.SendPropertyChanging("TrimRequired");
                    this._TrimRequired = value;
                    this.SendPropertyChanged("TrimRequired");
                    this.OnTrimRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShotblastingRequired in the schema.
        /// </summary>
        [Column(Name = @"shotblasting_required", Storage = "_ShotblastingRequired", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShotblastingRequired
        {
            get
            {
                return this._ShotblastingRequired;
            }
            set
            {
                if (this._ShotblastingRequired != value)
                {
                    this.OnShotblastingRequiredChanging(value);
                    this.SendPropertyChanging("ShotblastingRequired");
                    this._ShotblastingRequired = value;
                    this.SendPropertyChanged("ShotblastingRequired");
                    this.OnShotblastingRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaintDescription in the schema.
        /// </summary>
        [Column(Name = @"paint_description", Storage = "_PaintDescription", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string PaintDescription
        {
            get
            {
                return this._PaintDescription;
            }
            set
            {
                if (this._PaintDescription != value)
                {
                    this.OnPaintDescriptionChanging(value);
                    this.SendPropertyChanging("PaintDescription");
                    this._PaintDescription = value;
                    this.SendPropertyChanged("PaintDescription");
                    this.OnPaintDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupPriceUnitId in the schema.
        /// </summary>
        [Column(Name = @"group_price_unit_id", Storage = "_GroupPriceUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupPriceUnitId
        {
            get
            {
                return this._GroupPriceUnitId;
            }
            set
            {
                if (this._GroupPriceUnitId != value)
                {
                    if (this._UnitsOfMeasure_GroupPriceUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGroupPriceUnitIdChanging(value);
                    this.SendPropertyChanging("GroupPriceUnitId");
                    this._GroupPriceUnitId = value;
                    this.SendPropertyChanged("GroupPriceUnitId");
                    this.OnGroupPriceUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupTotalPrice in the schema.
        /// </summary>
        [Column(Name = @"group_total_price", Storage = "_GroupTotalPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupTotalPrice
        {
            get
            {
                return this._GroupTotalPrice;
            }
            set
            {
                if (this._GroupTotalPrice != value)
                {
                    this.OnGroupTotalPriceChanging(value);
                    this.SendPropertyChanging("GroupTotalPrice");
                    this._GroupTotalPrice = value;
                    this.SendPropertyChanged("GroupTotalPrice");
                    this.OnGroupTotalPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupTotalValue in the schema.
        /// </summary>
        [Column(Name = @"group_total_value", Storage = "_GroupTotalValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupTotalValue
        {
            get
            {
                return this._GroupTotalValue;
            }
            set
            {
                if (this._GroupTotalValue != value)
                {
                    this.OnGroupTotalValueChanging(value);
                    this.SendPropertyChanging("GroupTotalValue");
                    this._GroupTotalValue = value;
                    this.SendPropertyChanged("GroupTotalValue");
                    this.OnGroupTotalValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocatedCoilPiece in the schema.
        /// </summary>
        [Column(Name = @"allocated_coil_pieces", Storage = "_AllocatedCoilPiece", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AllocatedCoilPiece
        {
            get
            {
                return this._AllocatedCoilPiece;
            }
            set
            {
                if (this._AllocatedCoilPiece != value)
                {
                    this.OnAllocatedCoilPieceChanging(value);
                    this.SendPropertyChanging("AllocatedCoilPiece");
                    this._AllocatedCoilPiece = value;
                    this.SendPropertyChanged("AllocatedCoilPiece");
                    this.OnAllocatedCoilPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackCountMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_count_minimum", Storage = "_PackCountMinimum", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PackCountMinimum
        {
            get
            {
                return this._PackCountMinimum;
            }
            set
            {
                if (this._PackCountMinimum != value)
                {
                    this.OnPackCountMinimumChanging(value);
                    this.SendPropertyChanging("PackCountMinimum");
                    this._PackCountMinimum = value;
                    this.SendPropertyChanged("PackCountMinimum");
                    this.OnPackCountMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackCountMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_count_maximum", Storage = "_PackCountMaximum", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PackCountMaximum
        {
            get
            {
                return this._PackCountMaximum;
            }
            set
            {
                if (this._PackCountMaximum != value)
                {
                    this.OnPackCountMaximumChanging(value);
                    this.SendPropertyChanging("PackCountMaximum");
                    this._PackCountMaximum = value;
                    this.SendPropertyChanged("PackCountMaximum");
                    this.OnPackCountMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkOrderPrintedQuantity in the schema.
        /// </summary>
        [Column(Name = @"work_order_printed_quantity", Storage = "_WorkOrderPrintedQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> WorkOrderPrintedQuantity
        {
            get
            {
                return this._WorkOrderPrintedQuantity;
            }
            set
            {
                if (this._WorkOrderPrintedQuantity != value)
                {
                    this.OnWorkOrderPrintedQuantityChanging(value);
                    this.SendPropertyChanging("WorkOrderPrintedQuantity");
                    this._WorkOrderPrintedQuantity = value;
                    this.SendPropertyChanged("WorkOrderPrintedQuantity");
                    this.OnWorkOrderPrintedQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductDescription in the schema.
        /// </summary>
        [Column(Name = @"product_description", Storage = "_ProductDescription", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProductDescription
        {
            get
            {
                return this._ProductDescription;
            }
            set
            {
                if (this._ProductDescription != value)
                {
                    this.OnProductDescriptionChanging(value);
                    this.SendPropertyChanging("ProductDescription");
                    this._ProductDescription = value;
                    this.SendPropertyChanged("ProductDescription");
                    this.OnProductDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceCostingWeight in the schema.
        /// </summary>
        [Column(Name = @"invoice_costing_weight", Storage = "_InvoiceCostingWeight", CanBeNull = false, DbType = "NUMERIC(10,3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal InvoiceCostingWeight
        {
            get
            {
                return this._InvoiceCostingWeight;
            }
            set
            {
                if (this._InvoiceCostingWeight != value)
                {
                    this.OnInvoiceCostingWeightChanging(value);
                    this.SendPropertyChanging("InvoiceCostingWeight");
                    this._InvoiceCostingWeight = value;
                    this.SendPropertyChanged("InvoiceCostingWeight");
                    this.OnInvoiceCostingWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingSpecificationId in the schema.
        /// </summary>
        [Column(Name = @"working_specification_id", Storage = "_WorkingSpecificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WorkingSpecificationId
        {
            get
            {
                return this._WorkingSpecificationId;
            }
            set
            {
                if (this._WorkingSpecificationId != value)
                {
                    this.OnWorkingSpecificationIdChanging(value);
                    this.SendPropertyChanging("WorkingSpecificationId");
                    this._WorkingSpecificationId = value;
                    this.SendPropertyChanged("WorkingSpecificationId");
                    this.OnWorkingSpecificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CallOffPiece in the schema.
        /// </summary>
        [Column(Name = @"call_off_pieces", Storage = "_CallOffPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CallOffPiece
        {
            get
            {
                return this._CallOffPiece;
            }
            set
            {
                if (this._CallOffPiece != value)
                {
                    this.OnCallOffPieceChanging(value);
                    this.SendPropertyChanging("CallOffPiece");
                    this._CallOffPiece = value;
                    this.SendPropertyChanged("CallOffPiece");
                    this.OnCallOffPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CallOffQuantity in the schema.
        /// </summary>
        [Column(Name = @"call_off_quantity", Storage = "_CallOffQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CallOffQuantity
        {
            get
            {
                return this._CallOffQuantity;
            }
            set
            {
                if (this._CallOffQuantity != value)
                {
                    this.OnCallOffQuantityChanging(value);
                    this.SendPropertyChanging("CallOffQuantity");
                    this._CallOffQuantity = value;
                    this.SendPropertyChanged("CallOffQuantity");
                    this.OnCallOffQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CallOffWeight in the schema.
        /// </summary>
        [Column(Name = @"call_off_weight", Storage = "_CallOffWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CallOffWeight
        {
            get
            {
                return this._CallOffWeight;
            }
            set
            {
                if (this._CallOffWeight != value)
                {
                    this.OnCallOffWeightChanging(value);
                    this.SendPropertyChanging("CallOffWeight");
                    this._CallOffWeight = value;
                    this.SendPropertyChanged("CallOffWeight");
                    this.OnCallOffWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlanketItemId in the schema.
        /// </summary>
        [Column(Name = @"blanket_item_id", Storage = "_BlanketItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BlanketItemId
        {
            get
            {
                return this._BlanketItemId;
            }
            set
            {
                if (this._BlanketItemId != value)
                {
                    if (this._SalesItem_BlanketItemId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBlanketItemIdChanging(value);
                    this.SendPropertyChanging("BlanketItemId");
                    this._BlanketItemId = value;
                    this.SendPropertyChanged("BlanketItemId");
                    this.OnBlanketItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"credited_order_number", Storage = "_CreditedOrderNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreditedOrderNumber
        {
            get
            {
                return this._CreditedOrderNumber;
            }
            set
            {
                if (this._CreditedOrderNumber != value)
                {
                    this.OnCreditedOrderNumberChanging(value);
                    this.SendPropertyChanging("CreditedOrderNumber");
                    this._CreditedOrderNumber = value;
                    this.SendPropertyChanged("CreditedOrderNumber");
                    this.OnCreditedOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedOrderItem in the schema.
        /// </summary>
        [Column(Name = @"credited_order_item", Storage = "_CreditedOrderItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreditedOrderItem
        {
            get
            {
                return this._CreditedOrderItem;
            }
            set
            {
                if (this._CreditedOrderItem != value)
                {
                    this.OnCreditedOrderItemChanging(value);
                    this.SendPropertyChanging("CreditedOrderItem");
                    this._CreditedOrderItem = value;
                    this.SendPropertyChanged("CreditedOrderItem");
                    this.OnCreditedOrderItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedDespatchItem in the schema.
        /// </summary>
        [Column(Name = @"credited_despatch_item", Storage = "_CreditedDespatchItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CreditedDespatchItem
        {
            get
            {
                return this._CreditedDespatchItem;
            }
            set
            {
                if (this._CreditedDespatchItem != value)
                {
                    this.OnCreditedDespatchItemChanging(value);
                    this.SendPropertyChanging("CreditedDespatchItem");
                    this._CreditedDespatchItem = value;
                    this.SendPropertyChanged("CreditedDespatchItem");
                    this.OnCreditedDespatchItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaintTypeId in the schema.
        /// </summary>
        [Column(Name = @"paint_type_id", Storage = "_PaintTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PaintTypeId
        {
            get
            {
                return this._PaintTypeId;
            }
            set
            {
                if (this._PaintTypeId != value)
                {
                    this.OnPaintTypeIdChanging(value);
                    this.SendPropertyChanging("PaintTypeId");
                    this._PaintTypeId = value;
                    this.SendPropertyChanged("PaintTypeId");
                    this.OnPaintTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockAvailable in the schema.
        /// </summary>
        [Column(Name = @"stock_available", Storage = "_StockAvailable", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool StockAvailable
        {
            get
            {
                return this._StockAvailable;
            }
            set
            {
                if (this._StockAvailable != value)
                {
                    this.OnStockAvailableChanging(value);
                    this.SendPropertyChanging("StockAvailable");
                    this._StockAvailable = value;
                    this.SendPropertyChanged("StockAvailable");
                    this.OnStockAvailableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MixturePrice in the schema.
        /// </summary>
        [Column(Name = @"mixture_price", Storage = "_MixturePrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MixturePrice
        {
            get
            {
                return this._MixturePrice;
            }
            set
            {
                if (this._MixturePrice != value)
                {
                    this.OnMixturePriceChanging(value);
                    this.SendPropertyChanging("MixturePrice");
                    this._MixturePrice = value;
                    this.SendPropertyChanged("MixturePrice");
                    this.OnMixturePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FabricationPrice in the schema.
        /// </summary>
        [Column(Name = @"fabrication_price", Storage = "_FabricationPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> FabricationPrice
        {
            get
            {
                return this._FabricationPrice;
            }
            set
            {
                if (this._FabricationPrice != value)
                {
                    this.OnFabricationPriceChanging(value);
                    this.SendPropertyChanging("FabricationPrice");
                    this._FabricationPrice = value;
                    this.SendPropertyChanged("FabricationPrice");
                    this.OnFabricationPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdjustmentPrice in the schema.
        /// </summary>
        [Column(Name = @"adjustment_price", Storage = "_AdjustmentPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AdjustmentPrice
        {
            get
            {
                return this._AdjustmentPrice;
            }
            set
            {
                if (this._AdjustmentPrice != value)
                {
                    this.OnAdjustmentPriceChanging(value);
                    this.SendPropertyChanging("AdjustmentPrice");
                    this._AdjustmentPrice = value;
                    this.SendPropertyChanged("AdjustmentPrice");
                    this.OnAdjustmentPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for YieldPercentage in the schema.
        /// </summary>
        [Column(Name = @"yield_percentage", Storage = "_YieldPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> YieldPercentage
        {
            get
            {
                return this._YieldPercentage;
            }
            set
            {
                if (this._YieldPercentage != value)
                {
                    this.OnYieldPercentageChanging(value);
                    this.SendPropertyChanging("YieldPercentage");
                    this._YieldPercentage = value;
                    this.SendPropertyChanged("YieldPercentage");
                    this.OnYieldPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditedCustomerOrder in the schema.
        /// </summary>
        [Column(Name = @"credited_customer_order", Storage = "_CreditedCustomerOrder", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CreditedCustomerOrder
        {
            get
            {
                return this._CreditedCustomerOrder;
            }
            set
            {
                if (this._CreditedCustomerOrder != value)
                {
                    this.OnCreditedCustomerOrderChanging(value);
                    this.SendPropertyChanging("CreditedCustomerOrder");
                    this._CreditedCustomerOrder = value;
                    this.SendPropertyChanged("CreditedCustomerOrder");
                    this.OnCreditedCustomerOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CalculatePiece in the schema.
        /// </summary>
        [Column(Name = @"calculate_pieces", Storage = "_CalculatePiece", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CalculatePiece
        {
            get
            {
                return this._CalculatePiece;
            }
            set
            {
                if (this._CalculatePiece != value)
                {
                    this.OnCalculatePieceChanging(value);
                    this.SendPropertyChanging("CalculatePiece");
                    this._CalculatePiece = value;
                    this.SendPropertyChanged("CalculatePiece");
                    this.OnCalculatePieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardPrice in the schema.
        /// </summary>
        [Column(Name = @"standard_price", Storage = "_StandardPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StandardPrice
        {
            get
            {
                return this._StandardPrice;
            }
            set
            {
                if (this._StandardPrice != value)
                {
                    this.OnStandardPriceChanging(value);
                    this.SendPropertyChanging("StandardPrice");
                    this._StandardPrice = value;
                    this.SendPropertyChanged("StandardPrice");
                    this.OnStandardPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuttingGroupReference in the schema.
        /// </summary>
        [Column(Name = @"cutting_group_reference", Storage = "_CuttingGroupReference", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string CuttingGroupReference
        {
            get
            {
                return this._CuttingGroupReference;
            }
            set
            {
                if (this._CuttingGroupReference != value)
                {
                    this.OnCuttingGroupReferenceChanging(value);
                    this.SendPropertyChanging("CuttingGroupReference");
                    this._CuttingGroupReference = value;
                    this.SendPropertyChanged("CuttingGroupReference");
                    this.OnCuttingGroupReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompleteAfterNextInvoice in the schema.
        /// </summary>
        [Column(Name = @"complete_after_next_invoice", Storage = "_CompleteAfterNextInvoice", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CompleteAfterNextInvoice
        {
            get
            {
                return this._CompleteAfterNextInvoice;
            }
            set
            {
                if (this._CompleteAfterNextInvoice != value)
                {
                    this.OnCompleteAfterNextInvoiceChanging(value);
                    this.SendPropertyChanging("CompleteAfterNextInvoice");
                    this._CompleteAfterNextInvoice = value;
                    this.SendPropertyChanged("CompleteAfterNextInvoice");
                    this.OnCompleteAfterNextInvoiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompletionBalanceQuantity in the schema.
        /// </summary>
        [Column(Name = @"completion_balance_quantity", Storage = "_CompletionBalanceQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CompletionBalanceQuantity
        {
            get
            {
                return this._CompletionBalanceQuantity;
            }
            set
            {
                if (this._CompletionBalanceQuantity != value)
                {
                    this.OnCompletionBalanceQuantityChanging(value);
                    this.SendPropertyChanging("CompletionBalanceQuantity");
                    this._CompletionBalanceQuantity = value;
                    this.SendPropertyChanged("CompletionBalanceQuantity");
                    this.OnCompletionBalanceQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MechanicalCert in the schema.
        /// </summary>
        [Column(Name = @"mechanical_cert", Storage = "_MechanicalCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MechanicalCert
        {
            get
            {
                return this._MechanicalCert;
            }
            set
            {
                if (this._MechanicalCert != value)
                {
                    this.OnMechanicalCertChanging(value);
                    this.SendPropertyChanging("MechanicalCert");
                    this._MechanicalCert = value;
                    this.SendPropertyChanged("MechanicalCert");
                    this.OnMechanicalCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfMaterialOrigin in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_material_origin", Storage = "_ShowCountryOfMaterialOrigin", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfMaterialOrigin
        {
            get
            {
                return this._ShowCountryOfMaterialOrigin;
            }
            set
            {
                if (this._ShowCountryOfMaterialOrigin != value)
                {
                    this.OnShowCountryOfMaterialOriginChanging(value);
                    this.SendPropertyChanging("ShowCountryOfMaterialOrigin");
                    this._ShowCountryOfMaterialOrigin = value;
                    this.SendPropertyChanged("ShowCountryOfMaterialOrigin");
                    this.OnShowCountryOfMaterialOriginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfPrimaryProcessing in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_primary_processing", Storage = "_ShowCountryOfPrimaryProcessing", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfPrimaryProcessing
        {
            get
            {
                return this._ShowCountryOfPrimaryProcessing;
            }
            set
            {
                if (this._ShowCountryOfPrimaryProcessing != value)
                {
                    this.OnShowCountryOfPrimaryProcessingChanging(value);
                    this.SendPropertyChanging("ShowCountryOfPrimaryProcessing");
                    this._ShowCountryOfPrimaryProcessing = value;
                    this.SendPropertyChanged("ShowCountryOfPrimaryProcessing");
                    this.OnShowCountryOfPrimaryProcessingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfFinalProcessing in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_final_processing", Storage = "_ShowCountryOfFinalProcessing", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfFinalProcessing
        {
            get
            {
                return this._ShowCountryOfFinalProcessing;
            }
            set
            {
                if (this._ShowCountryOfFinalProcessing != value)
                {
                    this.OnShowCountryOfFinalProcessingChanging(value);
                    this.SendPropertyChanging("ShowCountryOfFinalProcessing");
                    this._ShowCountryOfFinalProcessing = value;
                    this.SendPropertyChanged("ShowCountryOfFinalProcessing");
                    this.OnShowCountryOfFinalProcessingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCredited in the schema.
        /// </summary>
        [Column(Name = @"item_credited", Storage = "_ItemCredited", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ItemCredited
        {
            get
            {
                return this._ItemCredited;
            }
            set
            {
                if (this._ItemCredited != value)
                {
                    this.OnItemCreditedChanging(value);
                    this.SendPropertyChanging("ItemCredited");
                    this._ItemCredited = value;
                    this.SendPropertyChanged("ItemCredited");
                    this.OnItemCreditedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcknowledgementNote in the schema.
        /// </summary>
        [Column(Name = @"acknowledgement_notes", Storage = "_AcknowledgementNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string AcknowledgementNote
        {
            get
            {
                return this._AcknowledgementNote;
            }
            set
            {
                if (this._AcknowledgementNote != value)
                {
                    this.OnAcknowledgementNoteChanging(value);
                    this.SendPropertyChanging("AcknowledgementNote");
                    this._AcknowledgementNote = value;
                    this.SendPropertyChanged("AcknowledgementNote");
                    this.OnAcknowledgementNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchNote in the schema.
        /// </summary>
        [Column(Name = @"despatch_notes", Storage = "_DespatchNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DespatchNote
        {
            get
            {
                return this._DespatchNote;
            }
            set
            {
                if (this._DespatchNote != value)
                {
                    this.OnDespatchNoteChanging(value);
                    this.SendPropertyChanging("DespatchNote");
                    this._DespatchNote = value;
                    this.SendPropertyChanged("DespatchNote");
                    this.OnDespatchNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullyAllocated in the schema.
        /// </summary>
        [Column(Name = @"fully_allocated", Storage = "_FullyAllocated", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool FullyAllocated
        {
            get
            {
                return this._FullyAllocated;
            }
            set
            {
                if (this._FullyAllocated != value)
                {
                    this.OnFullyAllocatedChanging(value);
                    this.SendPropertyChanging("FullyAllocated");
                    this._FullyAllocated = value;
                    this.SendPropertyChanged("FullyAllocated");
                    this.OnFullyAllocatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicePacking in the schema.
        /// </summary>
        [Column(Name = @"invoice_packing", Storage = "_InvoicePacking", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> InvoicePacking
        {
            get
            {
                return this._InvoicePacking;
            }
            set
            {
                if (this._InvoicePacking != value)
                {
                    this.OnInvoicePackingChanging(value);
                    this.SendPropertyChanging("InvoicePacking");
                    this._InvoicePacking = value;
                    this.SendPropertyChanged("InvoicePacking");
                    this.OnInvoicePackingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupCuttingCost in the schema.
        /// </summary>
        [Column(Name = @"group_cutting_cost", Storage = "_GroupCuttingCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupCuttingCost
        {
            get
            {
                return this._GroupCuttingCost;
            }
            set
            {
                if (this._GroupCuttingCost != value)
                {
                    this.OnGroupCuttingCostChanging(value);
                    this.SendPropertyChanging("GroupCuttingCost");
                    this._GroupCuttingCost = value;
                    this.SendPropertyChanged("GroupCuttingCost");
                    this.OnGroupCuttingCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupCuttingCostUnitId in the schema.
        /// </summary>
        [Column(Name = @"group_cutting_cost_unit_id", Storage = "_GroupCuttingCostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupCuttingCostUnitId
        {
            get
            {
                return this._GroupCuttingCostUnitId;
            }
            set
            {
                if (this._GroupCuttingCostUnitId != value)
                {
                    if (this._UnitsOfMeasure_GroupCuttingCostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGroupCuttingCostUnitIdChanging(value);
                    this.SendPropertyChanging("GroupCuttingCostUnitId");
                    this._GroupCuttingCostUnitId = value;
                    this.SendPropertyChanged("GroupCuttingCostUnitId");
                    this.OnGroupCuttingCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupDrillingCost in the schema.
        /// </summary>
        [Column(Name = @"group_drilling_cost", Storage = "_GroupDrillingCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupDrillingCost
        {
            get
            {
                return this._GroupDrillingCost;
            }
            set
            {
                if (this._GroupDrillingCost != value)
                {
                    this.OnGroupDrillingCostChanging(value);
                    this.SendPropertyChanging("GroupDrillingCost");
                    this._GroupDrillingCost = value;
                    this.SendPropertyChanged("GroupDrillingCost");
                    this.OnGroupDrillingCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupDrillingCostUnitId in the schema.
        /// </summary>
        [Column(Name = @"group_drilling_cost_unit_id", Storage = "_GroupDrillingCostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupDrillingCostUnitId
        {
            get
            {
                return this._GroupDrillingCostUnitId;
            }
            set
            {
                if (this._GroupDrillingCostUnitId != value)
                {
                    if (this._UnitsOfMeasure_GroupDrillingCostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGroupDrillingCostUnitIdChanging(value);
                    this.SendPropertyChanging("GroupDrillingCostUnitId");
                    this._GroupDrillingCostUnitId = value;
                    this.SendPropertyChanged("GroupDrillingCostUnitId");
                    this.OnGroupDrillingCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupPaintingCost in the schema.
        /// </summary>
        [Column(Name = @"group_painting_cost", Storage = "_GroupPaintingCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupPaintingCost
        {
            get
            {
                return this._GroupPaintingCost;
            }
            set
            {
                if (this._GroupPaintingCost != value)
                {
                    this.OnGroupPaintingCostChanging(value);
                    this.SendPropertyChanging("GroupPaintingCost");
                    this._GroupPaintingCost = value;
                    this.SendPropertyChanged("GroupPaintingCost");
                    this.OnGroupPaintingCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupPaintingCostUnitId in the schema.
        /// </summary>
        [Column(Name = @"group_painting_cost_unit_id", Storage = "_GroupPaintingCostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupPaintingCostUnitId
        {
            get
            {
                return this._GroupPaintingCostUnitId;
            }
            set
            {
                if (this._GroupPaintingCostUnitId != value)
                {
                    if (this._UnitsOfMeasure_GroupPaintingCostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGroupPaintingCostUnitIdChanging(value);
                    this.SendPropertyChanging("GroupPaintingCostUnitId");
                    this._GroupPaintingCostUnitId = value;
                    this.SendPropertyChanged("GroupPaintingCostUnitId");
                    this.OnGroupPaintingCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupShotblastingCost in the schema.
        /// </summary>
        [Column(Name = @"group_shotblasting_cost", Storage = "_GroupShotblastingCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupShotblastingCost
        {
            get
            {
                return this._GroupShotblastingCost;
            }
            set
            {
                if (this._GroupShotblastingCost != value)
                {
                    this.OnGroupShotblastingCostChanging(value);
                    this.SendPropertyChanging("GroupShotblastingCost");
                    this._GroupShotblastingCost = value;
                    this.SendPropertyChanged("GroupShotblastingCost");
                    this.OnGroupShotblastingCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupShotblastingCostUnitId in the schema.
        /// </summary>
        [Column(Name = @"group_shotblasting_cost_unit_id", Storage = "_GroupShotblastingCostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupShotblastingCostUnitId
        {
            get
            {
                return this._GroupShotblastingCostUnitId;
            }
            set
            {
                if (this._GroupShotblastingCostUnitId != value)
                {
                    if (this._UnitsOfMeasure_GroupShotblastingCostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGroupShotblastingCostUnitIdChanging(value);
                    this.SendPropertyChanging("GroupShotblastingCostUnitId");
                    this._GroupShotblastingCostUnitId = value;
                    this.SendPropertyChanged("GroupShotblastingCostUnitId");
                    this.OnGroupShotblastingCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroupId in the schema.
        /// </summary>
        [Column(Name = @"product_sub_group_id", Storage = "_ProductSubGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductSubGroupId
        {
            get
            {
                return this._ProductSubGroupId;
            }
            set
            {
                if (this._ProductSubGroupId != value)
                {
                    if (this._ProductSubGroup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductSubGroupIdChanging(value);
                    this.SendPropertyChanging("ProductSubGroupId");
                    this._ProductSubGroupId = value;
                    this.SendPropertyChanged("ProductSubGroupId");
                    this.OnProductSubGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupConsumptionPrice in the schema.
        /// </summary>
        [Column(Name = @"group_consumption_price", Storage = "_GroupConsumptionPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> GroupConsumptionPrice
        {
            get
            {
                return this._GroupConsumptionPrice;
            }
            set
            {
                if (this._GroupConsumptionPrice != value)
                {
                    this.OnGroupConsumptionPriceChanging(value);
                    this.SendPropertyChanging("GroupConsumptionPrice");
                    this._GroupConsumptionPrice = value;
                    this.SendPropertyChanged("GroupConsumptionPrice");
                    this.OnGroupConsumptionPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportBatchNumber in the schema.
        /// </summary>
        [Column(Name = @"import_batch_number", Storage = "_ImportBatchNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportBatchNumber
        {
            get
            {
                return this._ImportBatchNumber;
            }
            set
            {
                if (this._ImportBatchNumber != value)
                {
                    this.OnImportBatchNumberChanging(value);
                    this.SendPropertyChanging("ImportBatchNumber");
                    this._ImportBatchNumber = value;
                    this.SendPropertyChanged("ImportBatchNumber");
                    this.OnImportBatchNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportNumber in the schema.
        /// </summary>
        [Column(Name = @"import_number", Storage = "_ImportNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportNumber
        {
            get
            {
                return this._ImportNumber;
            }
            set
            {
                if (this._ImportNumber != value)
                {
                    this.OnImportNumberChanging(value);
                    this.SendPropertyChanging("ImportNumber");
                    this._ImportNumber = value;
                    this.SendPropertyChanged("ImportNumber");
                    this.OnImportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportItem in the schema.
        /// </summary>
        [Column(Name = @"import_item", Storage = "_ImportItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ImportItem
        {
            get
            {
                return this._ImportItem;
            }
            set
            {
                if (this._ImportItem != value)
                {
                    this.OnImportItemChanging(value);
                    this.SendPropertyChanging("ImportItem");
                    this._ImportItem = value;
                    this.SendPropertyChanged("ImportItem");
                    this.OnImportItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostReasonValue in the schema.
        /// </summary>
        [Column(Name = @"lost_reason_value", Storage = "_LostReasonValue", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> LostReasonValue
        {
            get
            {
                return this._LostReasonValue;
            }
            set
            {
                if (this._LostReasonValue != value)
                {
                    this.OnLostReasonValueChanging(value);
                    this.SendPropertyChanging("LostReasonValue");
                    this._LostReasonValue = value;
                    this.SendPropertyChanged("LostReasonValue");
                    this.OnLostReasonValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FlatRolledValue in the schema.
        /// </summary>
        [Column(Name = @"flat_rolled_value", Storage = "_FlatRolledValue", CanBeNull = false, DbType = "NUMERIC(12,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal FlatRolledValue
        {
            get
            {
                return this._FlatRolledValue;
            }
            set
            {
                if (this._FlatRolledValue != value)
                {
                    this.OnFlatRolledValueChanging(value);
                    this.SendPropertyChanging("FlatRolledValue");
                    this._FlatRolledValue = value;
                    this.SendPropertyChanged("FlatRolledValue");
                    this.OnFlatRolledValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FlatRolled in the schema.
        /// </summary>
        [Column(Name = @"flat_rolled", Storage = "_FlatRolled", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool FlatRolled
        {
            get
            {
                return this._FlatRolled;
            }
            set
            {
                if (this._FlatRolled != value)
                {
                    this.OnFlatRolledChanging(value);
                    this.SendPropertyChanging("FlatRolled");
                    this._FlatRolled = value;
                    this.SendPropertyChanged("FlatRolled");
                    this.OnFlatRolledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OldestPurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"oldest_purchase_order_number", Storage = "_OldestPurchaseOrderNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OldestPurchaseOrderNumber
        {
            get
            {
                return this._OldestPurchaseOrderNumber;
            }
            set
            {
                if (this._OldestPurchaseOrderNumber != value)
                {
                    this.OnOldestPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging("OldestPurchaseOrderNumber");
                    this._OldestPurchaseOrderNumber = value;
                    this.SendPropertyChanged("OldestPurchaseOrderNumber");
                    this.OnOldestPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IntercompanyPurchaseBranch in the schema.
        /// </summary>
        [Column(Name = @"intercompany_purchase_branch", Storage = "_IntercompanyPurchaseBranch", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string IntercompanyPurchaseBranch
        {
            get
            {
                return this._IntercompanyPurchaseBranch;
            }
            set
            {
                if (this._IntercompanyPurchaseBranch != value)
                {
                    this.OnIntercompanyPurchaseBranchChanging(value);
                    this.SendPropertyChanging("IntercompanyPurchaseBranch");
                    this._IntercompanyPurchaseBranch = value;
                    this.SendPropertyChanged("IntercompanyPurchaseBranch");
                    this.OnIntercompanyPurchaseBranchChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IntercompanyPurchaseOrder in the schema.
        /// </summary>
        [Column(Name = @"intercompany_purchase_order", Storage = "_IntercompanyPurchaseOrder", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IntercompanyPurchaseOrder
        {
            get
            {
                return this._IntercompanyPurchaseOrder;
            }
            set
            {
                if (this._IntercompanyPurchaseOrder != value)
                {
                    this.OnIntercompanyPurchaseOrderChanging(value);
                    this.SendPropertyChanging("IntercompanyPurchaseOrder");
                    this._IntercompanyPurchaseOrder = value;
                    this.SendPropertyChanged("IntercompanyPurchaseOrder");
                    this.OnIntercompanyPurchaseOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IntercompanyPurchaseItem in the schema.
        /// </summary>
        [Column(Name = @"intercompany_purchase_item", Storage = "_IntercompanyPurchaseItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IntercompanyPurchaseItem
        {
            get
            {
                return this._IntercompanyPurchaseItem;
            }
            set
            {
                if (this._IntercompanyPurchaseItem != value)
                {
                    this.OnIntercompanyPurchaseItemChanging(value);
                    this.SendPropertyChanging("IntercompanyPurchaseItem");
                    this._IntercompanyPurchaseItem = value;
                    this.SendPropertyChanged("IntercompanyPurchaseItem");
                    this.OnIntercompanyPurchaseItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromFlatRolled in the schema.
        /// </summary>
        [Column(Name = @"from_flat_rolled", Storage = "_FromFlatRolled", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool FromFlatRolled
        {
            get
            {
                return this._FromFlatRolled;
            }
            set
            {
                if (this._FromFlatRolled != value)
                {
                    this.OnFromFlatRolledChanging(value);
                    this.SendPropertyChanging("FromFlatRolled");
                    this._FromFlatRolled = value;
                    this.SendPropertyChanged("FromFlatRolled");
                    this.OnFromFlatRolledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_SalesItem", Storage="_Company", ThisKey="PartCustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company");
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        this._PartCustomerId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._PartCustomerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_GroupCuttingCostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem", Storage="_UnitsOfMeasure_GroupCuttingCostUnitId", ThisKey="GroupCuttingCostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_GroupCuttingCostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_GroupCuttingCostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_GroupCuttingCostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_GroupCuttingCostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_GroupCuttingCostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_GroupCuttingCostUnitId.Entity = null;
                        previousValue.SalesItem_GroupCuttingCostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_GroupCuttingCostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._GroupCuttingCostUnitId = value.Id;
                        value.SalesItem_GroupCuttingCostUnitId.Add(this);
                    }
                    else
                    {
                        this._GroupCuttingCostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_GroupCuttingCostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_GroupDrillingCostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem1", Storage="_UnitsOfMeasure_GroupDrillingCostUnitId", ThisKey="GroupDrillingCostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_GroupDrillingCostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_GroupDrillingCostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_GroupDrillingCostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_GroupDrillingCostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_GroupDrillingCostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_GroupDrillingCostUnitId.Entity = null;
                        previousValue.SalesItem_GroupDrillingCostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_GroupDrillingCostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._GroupDrillingCostUnitId = value.Id;
                        value.SalesItem_GroupDrillingCostUnitId.Add(this);
                    }
                    else
                    {
                        this._GroupDrillingCostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_GroupDrillingCostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_GroupPaintingCostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem2", Storage="_UnitsOfMeasure_GroupPaintingCostUnitId", ThisKey="GroupPaintingCostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_GroupPaintingCostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_GroupPaintingCostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_GroupPaintingCostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_GroupPaintingCostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_GroupPaintingCostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_GroupPaintingCostUnitId.Entity = null;
                        previousValue.SalesItem_GroupPaintingCostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_GroupPaintingCostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._GroupPaintingCostUnitId = value.Id;
                        value.SalesItem_GroupPaintingCostUnitId.Add(this);
                    }
                    else
                    {
                        this._GroupPaintingCostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_GroupPaintingCostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_GroupPriceUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem3", Storage="_UnitsOfMeasure_GroupPriceUnitId", ThisKey="GroupPriceUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_GroupPriceUnitId
        {
            get
            {
                return this._UnitsOfMeasure_GroupPriceUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_GroupPriceUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_GroupPriceUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_GroupPriceUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_GroupPriceUnitId.Entity = null;
                        previousValue.SalesItem_GroupPriceUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_GroupPriceUnitId.Entity = value;
                    if (value != null)
                    {
                        this._GroupPriceUnitId = value.Id;
                        value.SalesItem_GroupPriceUnitId.Add(this);
                    }
                    else
                    {
                        this._GroupPriceUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_GroupPriceUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_GroupShotblastingCostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem4", Storage="_UnitsOfMeasure_GroupShotblastingCostUnitId", ThisKey="GroupShotblastingCostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_GroupShotblastingCostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_GroupShotblastingCostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_GroupShotblastingCostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_GroupShotblastingCostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_GroupShotblastingCostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_GroupShotblastingCostUnitId.Entity = null;
                        previousValue.SalesItem_GroupShotblastingCostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_GroupShotblastingCostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._GroupShotblastingCostUnitId = value.Id;
                        value.SalesItem_GroupShotblastingCostUnitId.Add(this);
                    }
                    else
                    {
                        this._GroupShotblastingCostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_GroupShotblastingCostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_OriginalQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem5", Storage="_UnitsOfMeasure_OriginalQuantityUnitId", ThisKey="OriginalQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_OriginalQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_OriginalQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_OriginalQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_OriginalQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_OriginalQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_OriginalQuantityUnitId.Entity = null;
                        previousValue.SalesItem_OriginalQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_OriginalQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._OriginalQuantityUnitId = value.Id;
                        value.SalesItem_OriginalQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._OriginalQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_OriginalQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_WeightUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_SalesItem6", Storage="_UnitsOfMeasure_WeightUnitsId", ThisKey="WeightUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_WeightUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_WeightUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_WeightUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_WeightUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_WeightUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_WeightUnitsId.Entity = null;
                        previousValue.SalesItem_WeightUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_WeightUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._WeightUnitsId = value.Id;
                        value.SalesItem_WeightUnitsId.Add(this);
                    }
                    else
                    {
                        this._WeightUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_WeightUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesGroup_SalesItem", Storage="_SalesGroup", ThisKey="SalesGroupId", OtherKey="Id", IsForeignKey=true)]
        public SalesGroup SalesGroup
        {
            get
            {
                return this._SalesGroup.Entity;
            }
            set
            {
                SalesGroup previousValue = this._SalesGroup.Entity;
                if ((previousValue != value) || (this._SalesGroup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesGroup");
                    if (previousValue != null)
                    {
                        this._SalesGroup.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._SalesGroup.Entity = value;
                    if (value != null)
                    {
                        this._SalesGroupId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._SalesGroupId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesGroup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Warehouse in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_SalesItem", Storage="_Warehouse", ThisKey="DeliveryWarehouseId", OtherKey="Id", IsForeignKey=true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Warehouse");
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryWarehouseId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._DeliveryWarehouseId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductLevelAllocation_SalesItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesItem_ProductLevelAllocation", Storage="_ProductLevelAllocation_SalesItemId", ThisKey="Id", OtherKey="SalesItemId", DeleteRule="NO ACTION")]
        public EntitySet<ProductLevelAllocation> ProductLevelAllocation_SalesItemId
        {
            get
            {
                return this._ProductLevelAllocation_SalesItemId;
            }
            set
            {
                this._ProductLevelAllocation_SalesItemId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductLevelAllocation_ProductLevelAllocationId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductLevelAllocation_SalesItem", Storage="_ProductLevelAllocation_ProductLevelAllocationId", ThisKey="ProductLevelAllocationId", OtherKey="Id", IsForeignKey=true)]
        public ProductLevelAllocation ProductLevelAllocation_ProductLevelAllocationId
        {
            get
            {
                return this._ProductLevelAllocation_ProductLevelAllocationId.Entity;
            }
            set
            {
                ProductLevelAllocation previousValue = this._ProductLevelAllocation_ProductLevelAllocationId.Entity;
                if ((previousValue != value) || (this._ProductLevelAllocation_ProductLevelAllocationId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductLevelAllocation_ProductLevelAllocationId");
                    if (previousValue != null)
                    {
                        this._ProductLevelAllocation_ProductLevelAllocationId.Entity = null;
                        previousValue.SalesItem_ProductLevelAllocationId.Remove(this);
                    }
                    this._ProductLevelAllocation_ProductLevelAllocationId.Entity = value;
                    if (value != null)
                    {
                        this._ProductLevelAllocationId = value.Id;
                        value.SalesItem_ProductLevelAllocationId.Add(this);
                    }
                    else
                    {
                        this._ProductLevelAllocationId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductLevelAllocation_ProductLevelAllocationId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_SalesItem", Storage="_Branch", ThisKey="DeliveryBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryBranchId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._DeliveryBranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_SalesItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSubGroup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductSubGroup_SalesItem", Storage="_ProductSubGroup", ThisKey="ProductSubGroupId", OtherKey="Id", IsForeignKey=true)]
        public ProductSubGroup ProductSubGroup
        {
            get
            {
                return this._ProductSubGroup.Entity;
            }
            set
            {
                ProductSubGroup previousValue = this._ProductSubGroup.Entity;
                if ((previousValue != value) || (this._ProductSubGroup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductSubGroup");
                    if (previousValue != null)
                    {
                        this._ProductSubGroup.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._ProductSubGroup.Entity = value;
                    if (value != null)
                    {
                        this._ProductSubGroupId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._ProductSubGroupId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductSubGroup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotal_BalanceTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesItem", Storage="_SalesTotal_BalanceTotalId", ThisKey="BalanceTotalId", OtherKey="Id", IsForeignKey=true)]
        public SalesTotal SalesTotal_BalanceTotalId
        {
            get
            {
                return this._SalesTotal_BalanceTotalId.Entity;
            }
            set
            {
                SalesTotal previousValue = this._SalesTotal_BalanceTotalId.Entity;
                if ((previousValue != value) || (this._SalesTotal_BalanceTotalId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesTotal_BalanceTotalId");
                    if (previousValue != null)
                    {
                        this._SalesTotal_BalanceTotalId.Entity = null;
                        previousValue.SalesItem_BalanceTotalId.Remove(this);
                    }
                    this._SalesTotal_BalanceTotalId.Entity = value;
                    if (value != null)
                    {
                        this._BalanceTotalId = value.Id;
                        value.SalesItem_BalanceTotalId.Add(this);
                    }
                    else
                    {
                        this._BalanceTotalId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesTotal_BalanceTotalId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_BlanketItemId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesItem_SalesItem", Storage="_SalesItem_BlanketItemId1", ThisKey="Id", OtherKey="BlanketItemId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem_BlanketItemId1
        {
            get
            {
                return this._SalesItem_BlanketItemId1;
            }
            set
            {
                this._SalesItem_BlanketItemId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_BlanketItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesItem_SalesItem", Storage="_SalesItem_BlanketItemId", ThisKey="BlanketItemId", OtherKey="Id", IsForeignKey=true)]
        public SalesItem SalesItem_BlanketItemId
        {
            get
            {
                return this._SalesItem_BlanketItemId.Entity;
            }
            set
            {
                SalesItem previousValue = this._SalesItem_BlanketItemId.Entity;
                if ((previousValue != value) || (this._SalesItem_BlanketItemId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesItem_BlanketItemId");
                    if (previousValue != null)
                    {
                        this._SalesItem_BlanketItemId.Entity = null;
                        previousValue.SalesItem_BlanketItemId1.Remove(this);
                    }
                    this._SalesItem_BlanketItemId.Entity = value;
                    if (value != null)
                    {
                        this._BlanketItemId = value.Id;
                        value.SalesItem_BlanketItemId1.Add(this);
                    }
                    else
                    {
                        this._BlanketItemId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesItem_BlanketItemId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionValue in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DimensionValue_SalesItem", Storage="_DimensionValue", ThisKey="DimensionsId", OtherKey="Id", IsForeignKey=true)]
        public DimensionValue DimensionValue
        {
            get
            {
                return this._DimensionValue.Entity;
            }
            set
            {
                DimensionValue previousValue = this._DimensionValue.Entity;
                if ((previousValue != value) || (this._DimensionValue.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DimensionValue");
                    if (previousValue != null)
                    {
                        this._DimensionValue.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._DimensionValue.Entity = value;
                    if (value != null)
                    {
                        this._DimensionsId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._DimensionsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("DimensionValue");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnquiryLostReason in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EnquiryLostReason_SalesItem", Storage="_EnquiryLostReason", ThisKey="LostReasonId", OtherKey="Id", IsForeignKey=true)]
        public EnquiryLostReason EnquiryLostReason
        {
            get
            {
                return this._EnquiryLostReason.Entity;
            }
            set
            {
                EnquiryLostReason previousValue = this._EnquiryLostReason.Entity;
                if ((previousValue != value) || (this._EnquiryLostReason.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EnquiryLostReason");
                    if (previousValue != null)
                    {
                        this._EnquiryLostReason.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._EnquiryLostReason.Entity = value;
                    if (value != null)
                    {
                        this._LostReasonId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._LostReasonId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("EnquiryLostReason");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_OrderItemId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesItem_SalesItem1", Storage="_SalesItem_OrderItemId1", ThisKey="Id", OtherKey="OrderItemId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem_OrderItemId1
        {
            get
            {
                return this._SalesItem_OrderItemId1;
            }
            set
            {
                this._SalesItem_OrderItemId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem_OrderItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesItem_SalesItem1", Storage="_SalesItem_OrderItemId", ThisKey="OrderItemId", OtherKey="Id", IsForeignKey=true)]
        public SalesItem SalesItem_OrderItemId
        {
            get
            {
                return this._SalesItem_OrderItemId.Entity;
            }
            set
            {
                SalesItem previousValue = this._SalesItem_OrderItemId.Entity;
                if ((previousValue != value) || (this._SalesItem_OrderItemId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesItem_OrderItemId");
                    if (previousValue != null)
                    {
                        this._SalesItem_OrderItemId.Entity = null;
                        previousValue.SalesItem_OrderItemId1.Remove(this);
                    }
                    this._SalesItem_OrderItemId.Entity = value;
                    if (value != null)
                    {
                        this._OrderItemId = value.Id;
                        value.SalesItem_OrderItemId1.Add(this);
                    }
                    else
                    {
                        this._OrderItemId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesItem_OrderItemId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesHeader_SalesItem", Storage="_SalesHeader", ThisKey="SalesHeaderId", OtherKey="Id", IsForeignKey=true)]
        public SalesHeader SalesHeader
        {
            get
            {
                return this._SalesHeader.Entity;
            }
            set
            {
                SalesHeader previousValue = this._SalesHeader.Entity;
                if ((previousValue != value) || (this._SalesHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesHeader");
                    if (previousValue != null)
                    {
                        this._SalesHeader.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._SalesHeader.Entity = value;
                    if (value != null)
                    {
                        this._SalesHeaderId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._SalesHeaderId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesHeader");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesTotal_SalesTotalId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesTotal_SalesItem1", Storage="_SalesTotal_SalesTotalId", ThisKey="SalesTotalId", OtherKey="Id", IsForeignKey=true)]
        public SalesTotal SalesTotal_SalesTotalId
        {
            get
            {
                return this._SalesTotal_SalesTotalId.Entity;
            }
            set
            {
                SalesTotal previousValue = this._SalesTotal_SalesTotalId.Entity;
                if ((previousValue != value) || (this._SalesTotal_SalesTotalId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesTotal_SalesTotalId");
                    if (previousValue != null)
                    {
                        this._SalesTotal_SalesTotalId.Entity = null;
                        previousValue.SalesItem_SalesTotalId.Remove(this);
                    }
                    this._SalesTotal_SalesTotalId.Entity = value;
                    if (value != null)
                    {
                        this._SalesTotalId = value.Id;
                        value.SalesItem_SalesTotalId.Add(this);
                    }
                    else
                    {
                        this._SalesTotalId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesTotal_SalesTotalId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesStatusCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesStatusCode_SalesItem", Storage="_SalesStatusCode", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
        public SalesStatusCode SalesStatusCode
        {
            get
            {
                return this._SalesStatusCode.Entity;
            }
            set
            {
                SalesStatusCode previousValue = this._SalesStatusCode.Entity;
                if ((previousValue != value) || (this._SalesStatusCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesStatusCode");
                    if (previousValue != null)
                    {
                        this._SalesStatusCode.Entity = null;
                        previousValue.SalesItem.Remove(this);
                    }
                    this._SalesStatusCode.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.Id;
                        value.SalesItem.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SalesStatusCode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductLevelAllocation_SalesItemId(ProductLevelAllocation entity)
        {
            this.SendPropertyChanging("ProductLevelAllocation_SalesItemId");
            entity.SalesItem_SalesItemId = this;
        }
    
        private void detach_ProductLevelAllocation_SalesItemId(ProductLevelAllocation entity)
        {
            this.SendPropertyChanging("ProductLevelAllocation_SalesItemId");
            entity.SalesItem_SalesItemId = null;
        }

        private void attach_SalesItem_BlanketItemId1(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_BlanketItemId1");
            entity.SalesItem_BlanketItemId = this;
        }
    
        private void detach_SalesItem_BlanketItemId1(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_BlanketItemId1");
            entity.SalesItem_BlanketItemId = null;
        }

        private void attach_SalesItem_OrderItemId1(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_OrderItemId1");
            entity.SalesItem_OrderItemId = this;
        }
    
        private void detach_SalesItem_OrderItemId1(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem_OrderItemId1");
            entity.SalesItem_OrderItemId = null;
        }
    }

}
