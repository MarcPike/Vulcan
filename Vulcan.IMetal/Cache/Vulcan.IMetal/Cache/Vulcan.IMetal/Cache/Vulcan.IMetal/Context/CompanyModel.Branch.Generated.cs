//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/8/2019 10:47:06 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.Branch in the schema.
    /// </summary>
    [Table(Name = @"public.branches")]
    public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private string _Code;

        private string _Name;

        private string _Type;

        private string _TaxReference;

        private string _CompanyRegistration;

        private string _Telephone;

        private string _Fax;

        private string _Email;

        private string _WebAddress;

        private int? _StockWarehouseId;

        private int? _FinishedWarehouseId;

        private int? _OffcutWarehouseId;

        private int? _WipWarehouseId;

        private int? _QuarantineWarehouseId;

        private int? _ScrapWarehouseId;

        private int? _ClaimWarehouseId;

        private int? _CustownWarehouseId;

        private int? _NominalBranchId;

        private int? _SequenceBranchId;

        private int? _CorporateEntityId;

        private int? _AddressId;

        private int? _CustomerId;

        private int? _CuttingGroupCostingDefaultsId;

        private string _LedgerSegmentCode;

        private int? _DeliveryBranchId;

        private int? _InboundAllocationManagerId;

        private int? _DefaultBuyerId;

        private bool _StockTransferClearsOriginalParent = false;

        private string _InternalMaterialTransferGl;

        private string _InternalTransportTransferGl;

        private string _InternalProductionTransferGl;

        private string _InternalMiscellaneousTransferGl;

        private string _InternalSurchargeTransferGl;

        private string _InternalCreditMaterialTransferGl;

        private string _InternalCreditTransportTransferGl;

        private string _InternalCreditProductionTransferGl;

        private string _InternalCreditMiscellaneousTransferGl;

        private string _InternalCreditSurchargeTransferGl;

        private string _ExternalMaterialTransferGl;

        private string _ExternalTransportTransferGl;

        private string _ExternalProductionTransferGl;

        private string _ExternalMiscellaneousTransferGl;

        private string _ExternalSurchargeTransferGl;

        private string _ExternalCreditMaterialTransferGl;

        private string _ExternalCreditTransportTransferGl;

        private string _ExternalCreditProductionTransferGl;

        private string _ExternalCreditMiscellaneousTransferGl;

        private string _ExternalCreditSurchargeTransferGl;

        private int? _DefaultCertPrinterId;

        private string _StockNumberingPrefix;

        private int? _OutworkWarehouseId;
        #pragma warning restore 0649

        private EntitySet<Company> _Company_BranchId;

        private EntityRef<Company> _Company_CustomerId;

        private EntitySet<BranchLocation> _BranchLocation;

        private EntitySet<Contact> _Contact;

        private EntityRef<Address> _Address;

        private EntitySet<Branch> _Branch_DeliveryBranchId1;

        private EntityRef<Branch> _Branch_DeliveryBranchId;

        private EntitySet<Branch> _Branch_NominalBranchId1;

        private EntityRef<Branch> _Branch_NominalBranchId;

        private EntitySet<Branch> _Branch_SequenceBranchId1;

        private EntityRef<Branch> _Branch_SequenceBranchId;

        private EntitySet<CompanySubAddress> _CompanySubAddress;

        private EntitySet<Company> _Company_OutworkBranchId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnTaxReferenceChanging(string value);
        partial void OnTaxReferenceChanged();
        partial void OnCompanyRegistrationChanging(string value);
        partial void OnCompanyRegistrationChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnWebAddressChanging(string value);
        partial void OnWebAddressChanged();
        partial void OnStockWarehouseIdChanging(int? value);
        partial void OnStockWarehouseIdChanged();
        partial void OnFinishedWarehouseIdChanging(int? value);
        partial void OnFinishedWarehouseIdChanged();
        partial void OnOffcutWarehouseIdChanging(int? value);
        partial void OnOffcutWarehouseIdChanged();
        partial void OnWipWarehouseIdChanging(int? value);
        partial void OnWipWarehouseIdChanged();
        partial void OnQuarantineWarehouseIdChanging(int? value);
        partial void OnQuarantineWarehouseIdChanged();
        partial void OnScrapWarehouseIdChanging(int? value);
        partial void OnScrapWarehouseIdChanged();
        partial void OnClaimWarehouseIdChanging(int? value);
        partial void OnClaimWarehouseIdChanged();
        partial void OnCustownWarehouseIdChanging(int? value);
        partial void OnCustownWarehouseIdChanged();
        partial void OnNominalBranchIdChanging(int? value);
        partial void OnNominalBranchIdChanged();
        partial void OnSequenceBranchIdChanging(int? value);
        partial void OnSequenceBranchIdChanged();
        partial void OnCorporateEntityIdChanging(int? value);
        partial void OnCorporateEntityIdChanged();
        partial void OnAddressIdChanging(int? value);
        partial void OnAddressIdChanged();
        partial void OnCustomerIdChanging(int? value);
        partial void OnCustomerIdChanged();
        partial void OnCuttingGroupCostingDefaultsIdChanging(int? value);
        partial void OnCuttingGroupCostingDefaultsIdChanged();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnDeliveryBranchIdChanging(int? value);
        partial void OnDeliveryBranchIdChanged();
        partial void OnInboundAllocationManagerIdChanging(int? value);
        partial void OnInboundAllocationManagerIdChanged();
        partial void OnDefaultBuyerIdChanging(int? value);
        partial void OnDefaultBuyerIdChanged();
        partial void OnStockTransferClearsOriginalParentChanging(bool value);
        partial void OnStockTransferClearsOriginalParentChanged();
        partial void OnInternalMaterialTransferGlChanging(string value);
        partial void OnInternalMaterialTransferGlChanged();
        partial void OnInternalTransportTransferGlChanging(string value);
        partial void OnInternalTransportTransferGlChanged();
        partial void OnInternalProductionTransferGlChanging(string value);
        partial void OnInternalProductionTransferGlChanged();
        partial void OnInternalMiscellaneousTransferGlChanging(string value);
        partial void OnInternalMiscellaneousTransferGlChanged();
        partial void OnInternalSurchargeTransferGlChanging(string value);
        partial void OnInternalSurchargeTransferGlChanged();
        partial void OnInternalCreditMaterialTransferGlChanging(string value);
        partial void OnInternalCreditMaterialTransferGlChanged();
        partial void OnInternalCreditTransportTransferGlChanging(string value);
        partial void OnInternalCreditTransportTransferGlChanged();
        partial void OnInternalCreditProductionTransferGlChanging(string value);
        partial void OnInternalCreditProductionTransferGlChanged();
        partial void OnInternalCreditMiscellaneousTransferGlChanging(string value);
        partial void OnInternalCreditMiscellaneousTransferGlChanged();
        partial void OnInternalCreditSurchargeTransferGlChanging(string value);
        partial void OnInternalCreditSurchargeTransferGlChanged();
        partial void OnExternalMaterialTransferGlChanging(string value);
        partial void OnExternalMaterialTransferGlChanged();
        partial void OnExternalTransportTransferGlChanging(string value);
        partial void OnExternalTransportTransferGlChanged();
        partial void OnExternalProductionTransferGlChanging(string value);
        partial void OnExternalProductionTransferGlChanged();
        partial void OnExternalMiscellaneousTransferGlChanging(string value);
        partial void OnExternalMiscellaneousTransferGlChanged();
        partial void OnExternalSurchargeTransferGlChanging(string value);
        partial void OnExternalSurchargeTransferGlChanged();
        partial void OnExternalCreditMaterialTransferGlChanging(string value);
        partial void OnExternalCreditMaterialTransferGlChanged();
        partial void OnExternalCreditTransportTransferGlChanging(string value);
        partial void OnExternalCreditTransportTransferGlChanged();
        partial void OnExternalCreditProductionTransferGlChanging(string value);
        partial void OnExternalCreditProductionTransferGlChanged();
        partial void OnExternalCreditMiscellaneousTransferGlChanging(string value);
        partial void OnExternalCreditMiscellaneousTransferGlChanged();
        partial void OnExternalCreditSurchargeTransferGlChanging(string value);
        partial void OnExternalCreditSurchargeTransferGlChanged();
        partial void OnDefaultCertPrinterIdChanging(int? value);
        partial void OnDefaultCertPrinterIdChanged();
        partial void OnStockNumberingPrefixChanging(string value);
        partial void OnStockNumberingPrefixChanged();
        partial void OnOutworkWarehouseIdChanging(int? value);
        partial void OnOutworkWarehouseIdChanged();
        #endregion

        public Branch()
        {
            this._Company_BranchId = new EntitySet<Company>(new Action<Company>(this.attach_Company_BranchId), new Action<Company>(this.detach_Company_BranchId));
            this._Company_CustomerId  = default(EntityRef<Company>);
            this._BranchLocation = new EntitySet<BranchLocation>(new Action<BranchLocation>(this.attach_BranchLocation), new Action<BranchLocation>(this.detach_BranchLocation));
            this._Contact = new EntitySet<Contact>(new Action<Contact>(this.attach_Contact), new Action<Contact>(this.detach_Contact));
            this._Address  = default(EntityRef<Address>);
            this._Branch_DeliveryBranchId1 = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_DeliveryBranchId1), new Action<Branch>(this.detach_Branch_DeliveryBranchId1));
            this._Branch_DeliveryBranchId  = default(EntityRef<Branch>);
            this._Branch_NominalBranchId1 = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_NominalBranchId1), new Action<Branch>(this.detach_Branch_NominalBranchId1));
            this._Branch_NominalBranchId  = default(EntityRef<Branch>);
            this._Branch_SequenceBranchId1 = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_SequenceBranchId1), new Action<Branch>(this.detach_Branch_SequenceBranchId1));
            this._Branch_SequenceBranchId  = default(EntityRef<Branch>);
            this._CompanySubAddress = new EntitySet<CompanySubAddress>(new Action<CompanySubAddress>(this.attach_CompanySubAddress), new Action<CompanySubAddress>(this.detach_CompanySubAddress));
            this._Company_OutworkBranchId = new EntitySet<Company>(new Action<Company>(this.attach_Company_OutworkBranchId), new Action<Company>(this.detach_Company_OutworkBranchId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(6)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"""type""", Storage = "_Type", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxReference in the schema.
        /// </summary>
        [Column(Name = @"tax_reference", Storage = "_TaxReference", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string TaxReference
        {
            get
            {
                return this._TaxReference;
            }
            set
            {
                if (this._TaxReference != value)
                {
                    this.OnTaxReferenceChanging(value);
                    this.SendPropertyChanging("TaxReference");
                    this._TaxReference = value;
                    this.SendPropertyChanged("TaxReference");
                    this.OnTaxReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyRegistration in the schema.
        /// </summary>
        [Column(Name = @"company_registration", Storage = "_CompanyRegistration", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CompanyRegistration
        {
            get
            {
                return this._CompanyRegistration;
            }
            set
            {
                if (this._CompanyRegistration != value)
                {
                    this.OnCompanyRegistrationChanging(value);
                    this.SendPropertyChanging("CompanyRegistration");
                    this._CompanyRegistration = value;
                    this.SendPropertyChanged("CompanyRegistration");
                    this.OnCompanyRegistrationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WebAddress in the schema.
        /// </summary>
        [Column(Name = @"web_address", Storage = "_WebAddress", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string WebAddress
        {
            get
            {
                return this._WebAddress;
            }
            set
            {
                if (this._WebAddress != value)
                {
                    this.OnWebAddressChanging(value);
                    this.SendPropertyChanging("WebAddress");
                    this._WebAddress = value;
                    this.SendPropertyChanged("WebAddress");
                    this.OnWebAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"stock_warehouse_id", Storage = "_StockWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? StockWarehouseId
        {
            get
            {
                return this._StockWarehouseId;
            }
            set
            {
                if (this._StockWarehouseId != value)
                {
                    this.OnStockWarehouseIdChanging(value);
                    this.SendPropertyChanging("StockWarehouseId");
                    this._StockWarehouseId = value;
                    this.SendPropertyChanged("StockWarehouseId");
                    this.OnStockWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FinishedWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"finished_warehouse_id", Storage = "_FinishedWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? FinishedWarehouseId
        {
            get
            {
                return this._FinishedWarehouseId;
            }
            set
            {
                if (this._FinishedWarehouseId != value)
                {
                    this.OnFinishedWarehouseIdChanging(value);
                    this.SendPropertyChanging("FinishedWarehouseId");
                    this._FinishedWarehouseId = value;
                    this.SendPropertyChanged("FinishedWarehouseId");
                    this.OnFinishedWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OffcutWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"offcut_warehouse_id", Storage = "_OffcutWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OffcutWarehouseId
        {
            get
            {
                return this._OffcutWarehouseId;
            }
            set
            {
                if (this._OffcutWarehouseId != value)
                {
                    this.OnOffcutWarehouseIdChanging(value);
                    this.SendPropertyChanging("OffcutWarehouseId");
                    this._OffcutWarehouseId = value;
                    this.SendPropertyChanged("OffcutWarehouseId");
                    this.OnOffcutWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WipWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"wip_warehouse_id", Storage = "_WipWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? WipWarehouseId
        {
            get
            {
                return this._WipWarehouseId;
            }
            set
            {
                if (this._WipWarehouseId != value)
                {
                    this.OnWipWarehouseIdChanging(value);
                    this.SendPropertyChanging("WipWarehouseId");
                    this._WipWarehouseId = value;
                    this.SendPropertyChanged("WipWarehouseId");
                    this.OnWipWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuarantineWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"quarantine_warehouse_id", Storage = "_QuarantineWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? QuarantineWarehouseId
        {
            get
            {
                return this._QuarantineWarehouseId;
            }
            set
            {
                if (this._QuarantineWarehouseId != value)
                {
                    this.OnQuarantineWarehouseIdChanging(value);
                    this.SendPropertyChanging("QuarantineWarehouseId");
                    this._QuarantineWarehouseId = value;
                    this.SendPropertyChanged("QuarantineWarehouseId");
                    this.OnQuarantineWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScrapWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"scrap_warehouse_id", Storage = "_ScrapWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ScrapWarehouseId
        {
            get
            {
                return this._ScrapWarehouseId;
            }
            set
            {
                if (this._ScrapWarehouseId != value)
                {
                    this.OnScrapWarehouseIdChanging(value);
                    this.SendPropertyChanging("ScrapWarehouseId");
                    this._ScrapWarehouseId = value;
                    this.SendPropertyChanged("ScrapWarehouseId");
                    this.OnScrapWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClaimWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"claim_warehouse_id", Storage = "_ClaimWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ClaimWarehouseId
        {
            get
            {
                return this._ClaimWarehouseId;
            }
            set
            {
                if (this._ClaimWarehouseId != value)
                {
                    this.OnClaimWarehouseIdChanging(value);
                    this.SendPropertyChanging("ClaimWarehouseId");
                    this._ClaimWarehouseId = value;
                    this.SendPropertyChanged("ClaimWarehouseId");
                    this.OnClaimWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustownWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"custown_warehouse_id", Storage = "_CustownWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CustownWarehouseId
        {
            get
            {
                return this._CustownWarehouseId;
            }
            set
            {
                if (this._CustownWarehouseId != value)
                {
                    this.OnCustownWarehouseIdChanging(value);
                    this.SendPropertyChanging("CustownWarehouseId");
                    this._CustownWarehouseId = value;
                    this.SendPropertyChanged("CustownWarehouseId");
                    this.OnCustownWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NominalBranchId in the schema.
        /// </summary>
        [Column(Name = @"nominal_branch_id", Storage = "_NominalBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? NominalBranchId
        {
            get
            {
                return this._NominalBranchId;
            }
            set
            {
                if (this._NominalBranchId != value)
                {
                    if (this._Branch_NominalBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNominalBranchIdChanging(value);
                    this.SendPropertyChanging("NominalBranchId");
                    this._NominalBranchId = value;
                    this.SendPropertyChanged("NominalBranchId");
                    this.OnNominalBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SequenceBranchId in the schema.
        /// </summary>
        [Column(Name = @"sequence_branch_id", Storage = "_SequenceBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SequenceBranchId
        {
            get
            {
                return this._SequenceBranchId;
            }
            set
            {
                if (this._SequenceBranchId != value)
                {
                    if (this._Branch_SequenceBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSequenceBranchIdChanging(value);
                    this.SendPropertyChanging("SequenceBranchId");
                    this._SequenceBranchId = value;
                    this.SendPropertyChanged("SequenceBranchId");
                    this.OnSequenceBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorporateEntityId in the schema.
        /// </summary>
        [Column(Name = @"corporate_entity_id", Storage = "_CorporateEntityId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CorporateEntityId
        {
            get
            {
                return this._CorporateEntityId;
            }
            set
            {
                if (this._CorporateEntityId != value)
                {
                    this.OnCorporateEntityIdChanging(value);
                    this.SendPropertyChanging("CorporateEntityId");
                    this._CorporateEntityId = value;
                    this.SendPropertyChanged("CorporateEntityId");
                    this.OnCorporateEntityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    if (this._Address.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Company_CustomerId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging("CustomerId");
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuttingGroupCostingDefaultsId in the schema.
        /// </summary>
        [Column(Name = @"cutting_group_costing_defaults_id", Storage = "_CuttingGroupCostingDefaultsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuttingGroupCostingDefaultsId
        {
            get
            {
                return this._CuttingGroupCostingDefaultsId;
            }
            set
            {
                if (this._CuttingGroupCostingDefaultsId != value)
                {
                    this.OnCuttingGroupCostingDefaultsIdChanging(value);
                    this.SendPropertyChanging("CuttingGroupCostingDefaultsId");
                    this._CuttingGroupCostingDefaultsId = value;
                    this.SendPropertyChanged("CuttingGroupCostingDefaultsId");
                    this.OnCuttingGroupCostingDefaultsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryBranchId in the schema.
        /// </summary>
        [Column(Name = @"delivery_branch_id", Storage = "_DeliveryBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryBranchId
        {
            get
            {
                return this._DeliveryBranchId;
            }
            set
            {
                if (this._DeliveryBranchId != value)
                {
                    if (this._Branch_DeliveryBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDeliveryBranchIdChanging(value);
                    this.SendPropertyChanging("DeliveryBranchId");
                    this._DeliveryBranchId = value;
                    this.SendPropertyChanged("DeliveryBranchId");
                    this.OnDeliveryBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InboundAllocationManagerId in the schema.
        /// </summary>
        [Column(Name = @"inbound_allocation_manager_id", Storage = "_InboundAllocationManagerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InboundAllocationManagerId
        {
            get
            {
                return this._InboundAllocationManagerId;
            }
            set
            {
                if (this._InboundAllocationManagerId != value)
                {
                    this.OnInboundAllocationManagerIdChanging(value);
                    this.SendPropertyChanging("InboundAllocationManagerId");
                    this._InboundAllocationManagerId = value;
                    this.SendPropertyChanged("InboundAllocationManagerId");
                    this.OnInboundAllocationManagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultBuyerId in the schema.
        /// </summary>
        [Column(Name = @"default_buyer_id", Storage = "_DefaultBuyerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultBuyerId
        {
            get
            {
                return this._DefaultBuyerId;
            }
            set
            {
                if (this._DefaultBuyerId != value)
                {
                    this.OnDefaultBuyerIdChanging(value);
                    this.SendPropertyChanging("DefaultBuyerId");
                    this._DefaultBuyerId = value;
                    this.SendPropertyChanged("DefaultBuyerId");
                    this.OnDefaultBuyerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockTransferClearsOriginalParent in the schema.
        /// </summary>
        [Column(Name = @"stock_transfer_clears_original_parent", Storage = "_StockTransferClearsOriginalParent", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool StockTransferClearsOriginalParent
        {
            get
            {
                return this._StockTransferClearsOriginalParent;
            }
            set
            {
                if (this._StockTransferClearsOriginalParent != value)
                {
                    this.OnStockTransferClearsOriginalParentChanging(value);
                    this.SendPropertyChanging("StockTransferClearsOriginalParent");
                    this._StockTransferClearsOriginalParent = value;
                    this.SendPropertyChanged("StockTransferClearsOriginalParent");
                    this.OnStockTransferClearsOriginalParentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalMaterialTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_material_transfer_gl", Storage = "_InternalMaterialTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalMaterialTransferGl
        {
            get
            {
                return this._InternalMaterialTransferGl;
            }
            set
            {
                if (this._InternalMaterialTransferGl != value)
                {
                    this.OnInternalMaterialTransferGlChanging(value);
                    this.SendPropertyChanging("InternalMaterialTransferGl");
                    this._InternalMaterialTransferGl = value;
                    this.SendPropertyChanged("InternalMaterialTransferGl");
                    this.OnInternalMaterialTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalTransportTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_transport_transfer_gl", Storage = "_InternalTransportTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalTransportTransferGl
        {
            get
            {
                return this._InternalTransportTransferGl;
            }
            set
            {
                if (this._InternalTransportTransferGl != value)
                {
                    this.OnInternalTransportTransferGlChanging(value);
                    this.SendPropertyChanging("InternalTransportTransferGl");
                    this._InternalTransportTransferGl = value;
                    this.SendPropertyChanged("InternalTransportTransferGl");
                    this.OnInternalTransportTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalProductionTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_production_transfer_gl", Storage = "_InternalProductionTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalProductionTransferGl
        {
            get
            {
                return this._InternalProductionTransferGl;
            }
            set
            {
                if (this._InternalProductionTransferGl != value)
                {
                    this.OnInternalProductionTransferGlChanging(value);
                    this.SendPropertyChanging("InternalProductionTransferGl");
                    this._InternalProductionTransferGl = value;
                    this.SendPropertyChanged("InternalProductionTransferGl");
                    this.OnInternalProductionTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalMiscellaneousTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_miscellaneous_transfer_gl", Storage = "_InternalMiscellaneousTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalMiscellaneousTransferGl
        {
            get
            {
                return this._InternalMiscellaneousTransferGl;
            }
            set
            {
                if (this._InternalMiscellaneousTransferGl != value)
                {
                    this.OnInternalMiscellaneousTransferGlChanging(value);
                    this.SendPropertyChanging("InternalMiscellaneousTransferGl");
                    this._InternalMiscellaneousTransferGl = value;
                    this.SendPropertyChanged("InternalMiscellaneousTransferGl");
                    this.OnInternalMiscellaneousTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalSurchargeTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_surcharge_transfer_gl", Storage = "_InternalSurchargeTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalSurchargeTransferGl
        {
            get
            {
                return this._InternalSurchargeTransferGl;
            }
            set
            {
                if (this._InternalSurchargeTransferGl != value)
                {
                    this.OnInternalSurchargeTransferGlChanging(value);
                    this.SendPropertyChanging("InternalSurchargeTransferGl");
                    this._InternalSurchargeTransferGl = value;
                    this.SendPropertyChanged("InternalSurchargeTransferGl");
                    this.OnInternalSurchargeTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCreditMaterialTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_credit_material_transfer_gl", Storage = "_InternalCreditMaterialTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalCreditMaterialTransferGl
        {
            get
            {
                return this._InternalCreditMaterialTransferGl;
            }
            set
            {
                if (this._InternalCreditMaterialTransferGl != value)
                {
                    this.OnInternalCreditMaterialTransferGlChanging(value);
                    this.SendPropertyChanging("InternalCreditMaterialTransferGl");
                    this._InternalCreditMaterialTransferGl = value;
                    this.SendPropertyChanged("InternalCreditMaterialTransferGl");
                    this.OnInternalCreditMaterialTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCreditTransportTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_credit_transport_transfer_gl", Storage = "_InternalCreditTransportTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalCreditTransportTransferGl
        {
            get
            {
                return this._InternalCreditTransportTransferGl;
            }
            set
            {
                if (this._InternalCreditTransportTransferGl != value)
                {
                    this.OnInternalCreditTransportTransferGlChanging(value);
                    this.SendPropertyChanging("InternalCreditTransportTransferGl");
                    this._InternalCreditTransportTransferGl = value;
                    this.SendPropertyChanged("InternalCreditTransportTransferGl");
                    this.OnInternalCreditTransportTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCreditProductionTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_credit_production_transfer_gl", Storage = "_InternalCreditProductionTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalCreditProductionTransferGl
        {
            get
            {
                return this._InternalCreditProductionTransferGl;
            }
            set
            {
                if (this._InternalCreditProductionTransferGl != value)
                {
                    this.OnInternalCreditProductionTransferGlChanging(value);
                    this.SendPropertyChanging("InternalCreditProductionTransferGl");
                    this._InternalCreditProductionTransferGl = value;
                    this.SendPropertyChanged("InternalCreditProductionTransferGl");
                    this.OnInternalCreditProductionTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCreditMiscellaneousTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_credit_miscellaneous_transfer_gl", Storage = "_InternalCreditMiscellaneousTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalCreditMiscellaneousTransferGl
        {
            get
            {
                return this._InternalCreditMiscellaneousTransferGl;
            }
            set
            {
                if (this._InternalCreditMiscellaneousTransferGl != value)
                {
                    this.OnInternalCreditMiscellaneousTransferGlChanging(value);
                    this.SendPropertyChanging("InternalCreditMiscellaneousTransferGl");
                    this._InternalCreditMiscellaneousTransferGl = value;
                    this.SendPropertyChanged("InternalCreditMiscellaneousTransferGl");
                    this.OnInternalCreditMiscellaneousTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCreditSurchargeTransferGl in the schema.
        /// </summary>
        [Column(Name = @"internal_credit_surcharge_transfer_gl", Storage = "_InternalCreditSurchargeTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string InternalCreditSurchargeTransferGl
        {
            get
            {
                return this._InternalCreditSurchargeTransferGl;
            }
            set
            {
                if (this._InternalCreditSurchargeTransferGl != value)
                {
                    this.OnInternalCreditSurchargeTransferGlChanging(value);
                    this.SendPropertyChanging("InternalCreditSurchargeTransferGl");
                    this._InternalCreditSurchargeTransferGl = value;
                    this.SendPropertyChanged("InternalCreditSurchargeTransferGl");
                    this.OnInternalCreditSurchargeTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalMaterialTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_material_transfer_gl", Storage = "_ExternalMaterialTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalMaterialTransferGl
        {
            get
            {
                return this._ExternalMaterialTransferGl;
            }
            set
            {
                if (this._ExternalMaterialTransferGl != value)
                {
                    this.OnExternalMaterialTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalMaterialTransferGl");
                    this._ExternalMaterialTransferGl = value;
                    this.SendPropertyChanged("ExternalMaterialTransferGl");
                    this.OnExternalMaterialTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalTransportTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_transport_transfer_gl", Storage = "_ExternalTransportTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalTransportTransferGl
        {
            get
            {
                return this._ExternalTransportTransferGl;
            }
            set
            {
                if (this._ExternalTransportTransferGl != value)
                {
                    this.OnExternalTransportTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalTransportTransferGl");
                    this._ExternalTransportTransferGl = value;
                    this.SendPropertyChanged("ExternalTransportTransferGl");
                    this.OnExternalTransportTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalProductionTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_production_transfer_gl", Storage = "_ExternalProductionTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalProductionTransferGl
        {
            get
            {
                return this._ExternalProductionTransferGl;
            }
            set
            {
                if (this._ExternalProductionTransferGl != value)
                {
                    this.OnExternalProductionTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalProductionTransferGl");
                    this._ExternalProductionTransferGl = value;
                    this.SendPropertyChanged("ExternalProductionTransferGl");
                    this.OnExternalProductionTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalMiscellaneousTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_miscellaneous_transfer_gl", Storage = "_ExternalMiscellaneousTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalMiscellaneousTransferGl
        {
            get
            {
                return this._ExternalMiscellaneousTransferGl;
            }
            set
            {
                if (this._ExternalMiscellaneousTransferGl != value)
                {
                    this.OnExternalMiscellaneousTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalMiscellaneousTransferGl");
                    this._ExternalMiscellaneousTransferGl = value;
                    this.SendPropertyChanged("ExternalMiscellaneousTransferGl");
                    this.OnExternalMiscellaneousTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalSurchargeTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_surcharge_transfer_gl", Storage = "_ExternalSurchargeTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalSurchargeTransferGl
        {
            get
            {
                return this._ExternalSurchargeTransferGl;
            }
            set
            {
                if (this._ExternalSurchargeTransferGl != value)
                {
                    this.OnExternalSurchargeTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalSurchargeTransferGl");
                    this._ExternalSurchargeTransferGl = value;
                    this.SendPropertyChanged("ExternalSurchargeTransferGl");
                    this.OnExternalSurchargeTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalCreditMaterialTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_credit_material_transfer_gl", Storage = "_ExternalCreditMaterialTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalCreditMaterialTransferGl
        {
            get
            {
                return this._ExternalCreditMaterialTransferGl;
            }
            set
            {
                if (this._ExternalCreditMaterialTransferGl != value)
                {
                    this.OnExternalCreditMaterialTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalCreditMaterialTransferGl");
                    this._ExternalCreditMaterialTransferGl = value;
                    this.SendPropertyChanged("ExternalCreditMaterialTransferGl");
                    this.OnExternalCreditMaterialTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalCreditTransportTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_credit_transport_transfer_gl", Storage = "_ExternalCreditTransportTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalCreditTransportTransferGl
        {
            get
            {
                return this._ExternalCreditTransportTransferGl;
            }
            set
            {
                if (this._ExternalCreditTransportTransferGl != value)
                {
                    this.OnExternalCreditTransportTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalCreditTransportTransferGl");
                    this._ExternalCreditTransportTransferGl = value;
                    this.SendPropertyChanged("ExternalCreditTransportTransferGl");
                    this.OnExternalCreditTransportTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalCreditProductionTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_credit_production_transfer_gl", Storage = "_ExternalCreditProductionTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalCreditProductionTransferGl
        {
            get
            {
                return this._ExternalCreditProductionTransferGl;
            }
            set
            {
                if (this._ExternalCreditProductionTransferGl != value)
                {
                    this.OnExternalCreditProductionTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalCreditProductionTransferGl");
                    this._ExternalCreditProductionTransferGl = value;
                    this.SendPropertyChanged("ExternalCreditProductionTransferGl");
                    this.OnExternalCreditProductionTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalCreditMiscellaneousTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_credit_miscellaneous_transfer_gl", Storage = "_ExternalCreditMiscellaneousTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalCreditMiscellaneousTransferGl
        {
            get
            {
                return this._ExternalCreditMiscellaneousTransferGl;
            }
            set
            {
                if (this._ExternalCreditMiscellaneousTransferGl != value)
                {
                    this.OnExternalCreditMiscellaneousTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalCreditMiscellaneousTransferGl");
                    this._ExternalCreditMiscellaneousTransferGl = value;
                    this.SendPropertyChanged("ExternalCreditMiscellaneousTransferGl");
                    this.OnExternalCreditMiscellaneousTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExternalCreditSurchargeTransferGl in the schema.
        /// </summary>
        [Column(Name = @"external_credit_surcharge_transfer_gl", Storage = "_ExternalCreditSurchargeTransferGl", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string ExternalCreditSurchargeTransferGl
        {
            get
            {
                return this._ExternalCreditSurchargeTransferGl;
            }
            set
            {
                if (this._ExternalCreditSurchargeTransferGl != value)
                {
                    this.OnExternalCreditSurchargeTransferGlChanging(value);
                    this.SendPropertyChanging("ExternalCreditSurchargeTransferGl");
                    this._ExternalCreditSurchargeTransferGl = value;
                    this.SendPropertyChanged("ExternalCreditSurchargeTransferGl");
                    this.OnExternalCreditSurchargeTransferGlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultCertPrinterId in the schema.
        /// </summary>
        [Column(Name = @"default_cert_printer_id", Storage = "_DefaultCertPrinterId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultCertPrinterId
        {
            get
            {
                return this._DefaultCertPrinterId;
            }
            set
            {
                if (this._DefaultCertPrinterId != value)
                {
                    this.OnDefaultCertPrinterIdChanging(value);
                    this.SendPropertyChanging("DefaultCertPrinterId");
                    this._DefaultCertPrinterId = value;
                    this.SendPropertyChanged("DefaultCertPrinterId");
                    this.OnDefaultCertPrinterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockNumberingPrefix in the schema.
        /// </summary>
        [Column(Name = @"stock_numbering_prefix", Storage = "_StockNumberingPrefix", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string StockNumberingPrefix
        {
            get
            {
                return this._StockNumberingPrefix;
            }
            set
            {
                if (this._StockNumberingPrefix != value)
                {
                    this.OnStockNumberingPrefixChanging(value);
                    this.SendPropertyChanging("StockNumberingPrefix");
                    this._StockNumberingPrefix = value;
                    this.SendPropertyChanged("StockNumberingPrefix");
                    this.OnStockNumberingPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutworkWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"outwork_warehouse_id", Storage = "_OutworkWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OutworkWarehouseId
        {
            get
            {
                return this._OutworkWarehouseId;
            }
            set
            {
                if (this._OutworkWarehouseId != value)
                {
                    this.OnOutworkWarehouseIdChanging(value);
                    this.SendPropertyChanging("OutworkWarehouseId");
                    this._OutworkWarehouseId = value;
                    this.SendPropertyChanged("OutworkWarehouseId");
                    this.OnOutworkWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_BranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Company", Storage="_Company_BranchId", ThisKey="Id", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_BranchId
        {
            get
            {
                return this._Company_BranchId;
            }
            set
            {
                this._Company_BranchId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CustomerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Branch", Storage="_Company_CustomerId", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_CustomerId
        {
            get
            {
                return this._Company_CustomerId.Entity;
            }
            set
            {
                Company previousValue = this._Company_CustomerId.Entity;
                if ((previousValue != value) || (this._Company_CustomerId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_CustomerId");
                    if (previousValue != null)
                    {
                        this._Company_CustomerId.Entity = null;
                        previousValue.Branch_CustomerId.Remove(this);
                    }
                    this._Company_CustomerId.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.Branch_CustomerId.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(int?);
                    }
                    this.SendPropertyChanged("Company_CustomerId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchLocation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_BranchLocation", Storage="_BranchLocation", ThisKey="Id", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<BranchLocation> BranchLocation
        {
            get
            {
                return this._BranchLocation;
            }
            set
            {
                this._BranchLocation.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Contact", Storage="_Contact", ThisKey="Id", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<Contact> Contact
        {
            get
            {
                return this._Contact;
            }
            set
            {
                this._Contact.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_Branch", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address
        {
            get
            {
                return this._Address.Entity;
            }
            set
            {
                Address previousValue = this._Address.Entity;
                if ((previousValue != value) || (this._Address.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address");
                    if (previousValue != null)
                    {
                        this._Address.Entity = null;
                        previousValue.Branch.Remove(this);
                    }
                    this._Address.Entity = value;
                    if (value != null)
                    {
                        this._AddressId = value.Id;
                        value.Branch.Add(this);
                    }
                    else
                    {
                        this._AddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_DeliveryBranchId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch", Storage="_Branch_DeliveryBranchId1", ThisKey="Id", OtherKey="DeliveryBranchId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_DeliveryBranchId1
        {
            get
            {
                return this._Branch_DeliveryBranchId1;
            }
            set
            {
                this._Branch_DeliveryBranchId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_DeliveryBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch", Storage="_Branch_DeliveryBranchId", ThisKey="DeliveryBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_DeliveryBranchId
        {
            get
            {
                return this._Branch_DeliveryBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_DeliveryBranchId.Entity;
                if ((previousValue != value) || (this._Branch_DeliveryBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_DeliveryBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_DeliveryBranchId.Entity = null;
                        previousValue.Branch_DeliveryBranchId1.Remove(this);
                    }
                    this._Branch_DeliveryBranchId.Entity = value;
                    if (value != null)
                    {
                        this._DeliveryBranchId = value.Id;
                        value.Branch_DeliveryBranchId1.Add(this);
                    }
                    else
                    {
                        this._DeliveryBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_DeliveryBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_NominalBranchId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch1", Storage="_Branch_NominalBranchId1", ThisKey="Id", OtherKey="NominalBranchId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_NominalBranchId1
        {
            get
            {
                return this._Branch_NominalBranchId1;
            }
            set
            {
                this._Branch_NominalBranchId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_NominalBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch1", Storage="_Branch_NominalBranchId", ThisKey="NominalBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_NominalBranchId
        {
            get
            {
                return this._Branch_NominalBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_NominalBranchId.Entity;
                if ((previousValue != value) || (this._Branch_NominalBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_NominalBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_NominalBranchId.Entity = null;
                        previousValue.Branch_NominalBranchId1.Remove(this);
                    }
                    this._Branch_NominalBranchId.Entity = value;
                    if (value != null)
                    {
                        this._NominalBranchId = value.Id;
                        value.Branch_NominalBranchId1.Add(this);
                    }
                    else
                    {
                        this._NominalBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_NominalBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_SequenceBranchId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch2", Storage="_Branch_SequenceBranchId1", ThisKey="Id", OtherKey="SequenceBranchId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_SequenceBranchId1
        {
            get
            {
                return this._Branch_SequenceBranchId1;
            }
            set
            {
                this._Branch_SequenceBranchId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_SequenceBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Branch2", Storage="_Branch_SequenceBranchId", ThisKey="SequenceBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_SequenceBranchId
        {
            get
            {
                return this._Branch_SequenceBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_SequenceBranchId.Entity;
                if ((previousValue != value) || (this._Branch_SequenceBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_SequenceBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_SequenceBranchId.Entity = null;
                        previousValue.Branch_SequenceBranchId1.Remove(this);
                    }
                    this._Branch_SequenceBranchId.Entity = value;
                    if (value != null)
                    {
                        this._SequenceBranchId = value.Id;
                        value.Branch_SequenceBranchId1.Add(this);
                    }
                    else
                    {
                        this._SequenceBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_SequenceBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_CompanySubAddress", Storage="_CompanySubAddress", ThisKey="Id", OtherKey="ConsignmentBranchId", DeleteRule="NO ACTION")]
        public EntitySet<CompanySubAddress> CompanySubAddress
        {
            get
            {
                return this._CompanySubAddress;
            }
            set
            {
                this._CompanySubAddress.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_OutworkBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Company1", Storage="_Company_OutworkBranchId", ThisKey="Id", OtherKey="OutworkBranchId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_OutworkBranchId
        {
            get
            {
                return this._Company_OutworkBranchId;
            }
            set
            {
                this._Company_OutworkBranchId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company_BranchId(Company entity)
        {
            this.SendPropertyChanging("Company_BranchId");
            entity.Branch_BranchId = this;
        }
    
        private void detach_Company_BranchId(Company entity)
        {
            this.SendPropertyChanging("Company_BranchId");
            entity.Branch_BranchId = null;
        }

        private void attach_BranchLocation(BranchLocation entity)
        {
            this.SendPropertyChanging("BranchLocation");
            entity.Branch = this;
        }
    
        private void detach_BranchLocation(BranchLocation entity)
        {
            this.SendPropertyChanging("BranchLocation");
            entity.Branch = null;
        }

        private void attach_Contact(Contact entity)
        {
            this.SendPropertyChanging("Contact");
            entity.Branch = this;
        }
    
        private void detach_Contact(Contact entity)
        {
            this.SendPropertyChanging("Contact");
            entity.Branch = null;
        }

        private void attach_Branch_DeliveryBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_DeliveryBranchId1");
            entity.Branch_DeliveryBranchId = this;
        }
    
        private void detach_Branch_DeliveryBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_DeliveryBranchId1");
            entity.Branch_DeliveryBranchId = null;
        }

        private void attach_Branch_NominalBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_NominalBranchId1");
            entity.Branch_NominalBranchId = this;
        }
    
        private void detach_Branch_NominalBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_NominalBranchId1");
            entity.Branch_NominalBranchId = null;
        }

        private void attach_Branch_SequenceBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_SequenceBranchId1");
            entity.Branch_SequenceBranchId = this;
        }
    
        private void detach_Branch_SequenceBranchId1(Branch entity)
        {
            this.SendPropertyChanging("Branch_SequenceBranchId1");
            entity.Branch_SequenceBranchId = null;
        }

        private void attach_CompanySubAddress(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress");
            entity.Branch = this;
        }
    
        private void detach_CompanySubAddress(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress");
            entity.Branch = null;
        }

        private void attach_Company_OutworkBranchId(Company entity)
        {
            this.SendPropertyChanging("Company_OutworkBranchId");
            entity.Branch_OutworkBranchId = this;
        }
    
        private void detach_Company_OutworkBranchId(Company entity)
        {
            this.SendPropertyChanging("Company_OutworkBranchId");
            entity.Branch_OutworkBranchId = null;
        }
    }

}
