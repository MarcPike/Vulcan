//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.PartNumberSpecification in the schema.
    /// </summary>
    [Table(Name = @"public.part_number_specifications")]
    public partial class PartNumberSpecification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _CustomerId;

        private string _Number;

        private string _Name;

        private string _Description;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _DimensionsId;

        private System.Nullable<decimal> _EntryQuantity;

        private System.Nullable<int> _EntryQuantityUnitId;

        private System.Nullable<int> _StandardPiece;

        private System.Nullable<decimal> _StandardQuantity;

        private System.Nullable<decimal> _StandardWeight;

        private System.Nullable<bool> _OverrideAllowed;

        private System.Nullable<int> _ConsumptionProductId;

        private System.Nullable<int> _ConsumptionDimensionsId;

        private System.Nullable<decimal> _ProductionFactor;

        private System.Nullable<decimal> _ExpectedScrap;

        private string _WorksNote;

        private string _ProductionNote;

        private string _InvoiceNote;

        private string _PartNote;

        private System.Nullable<int> _SalesGroupId;

        private string _SpecificationValue1;

        private string _SpecificationValue2;

        private string _SpecificationValue3;

        private string _SpecificationValue4;

        private string _SpecificationValue5;

        private System.Nullable<bool> _ShowPrice = true;

        private System.Nullable<bool> _UseMinimumGrade = false;

        private System.Nullable<int> _EndUseId;

        private string _DocumentNumber;

        private string _RevisionNumber;

        private string _DrawingNumber;

        private System.Nullable<int> _ApprovedById;

        private System.Nullable<System.DateTime> _ApprovalDate;

        private System.Nullable<System.DateTime> _LastUsedDate;

        private string _PartStatus;

        private string _CustomerOrderNumber;

        private string _DescriptionFormula;

        private string _CompositeKey = @"";

        private System.Nullable<decimal> _OutsideDiameter;

        private System.Nullable<decimal> _OutsideDiameterMinimum;

        private System.Nullable<decimal> _OutsideDiameterMaximum;

        private System.Nullable<decimal> _PackHeight;

        private System.Nullable<decimal> _PackHeightMinimum;

        private System.Nullable<decimal> _PackHeightMaximum;

        private System.Nullable<decimal> _PackWeight;

        private System.Nullable<decimal> _PackWeightMinimum;

        private System.Nullable<decimal> _PackWeightMaximum;

        private System.Nullable<decimal> _InsideDiameter;

        private System.Nullable<decimal> _InsideDiameterMinimum;

        private System.Nullable<decimal> _InsideDiameterMaximum;

        private string _SpecificationValue6;

        private string _SpecificationValue7;

        private string _SpecificationValue8;

        private string _SpecificationValue9;

        private string _SpecificationValue10;

        private System.Nullable<int> _ProcessPlanId;

        private System.Nullable<int> _PackCountMinimum;

        private System.Nullable<int> _PackCountMaximum;

        private string _PartCompanyType;

        private string _InternalNote;

        private string _GoodsInwardsNote;

        private System.Nullable<int> _PurchaseGroupId;

        private System.Nullable<decimal> _AdjustmentPrice;

        private System.Nullable<decimal> _YieldPercentage;

        private string _PriceCode;

        private System.Nullable<bool> _MechanicalCert = false;

        private System.Nullable<bool> _ShowCountryOfMaterialOrigin = false;

        private System.Nullable<bool> _ShowCountryOfPrimaryProcessing = false;

        private System.Nullable<bool> _ShowCountryOfFinalProcessing = false;

        private string _AcknowledgementNote;

        private string _DespatchNote;

        private System.Nullable<bool> _InvoicePacking = true;

        private System.Nullable<int> _PartProcessTypeId;
        #pragma warning restore 0649

        private EntityRef<Company> _Company;

        private EntityRef<Product> _Product_ConsumptionProductId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure;

        private EntityRef<Product> _Product_ProductId;

        private EntitySet<PurchaseOrderItem> _PurchaseOrderItem;

        private EntityRef<DimensionValue> _DimensionValue_ConsumptionDimensionsId;

        private EntityRef<DimensionValue> _DimensionValue_DimensionsId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCustomerIdChanging(System.Nullable<int> value);
        partial void OnCustomerIdChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnDimensionsIdChanging(System.Nullable<int> value);
        partial void OnDimensionsIdChanged();
        partial void OnEntryQuantityChanging(System.Nullable<decimal> value);
        partial void OnEntryQuantityChanged();
        partial void OnEntryQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnEntryQuantityUnitIdChanged();
        partial void OnStandardPieceChanging(System.Nullable<int> value);
        partial void OnStandardPieceChanged();
        partial void OnStandardQuantityChanging(System.Nullable<decimal> value);
        partial void OnStandardQuantityChanged();
        partial void OnStandardWeightChanging(System.Nullable<decimal> value);
        partial void OnStandardWeightChanged();
        partial void OnOverrideAllowedChanging(System.Nullable<bool> value);
        partial void OnOverrideAllowedChanged();
        partial void OnConsumptionProductIdChanging(System.Nullable<int> value);
        partial void OnConsumptionProductIdChanged();
        partial void OnConsumptionDimensionsIdChanging(System.Nullable<int> value);
        partial void OnConsumptionDimensionsIdChanged();
        partial void OnProductionFactorChanging(System.Nullable<decimal> value);
        partial void OnProductionFactorChanged();
        partial void OnExpectedScrapChanging(System.Nullable<decimal> value);
        partial void OnExpectedScrapChanged();
        partial void OnWorksNoteChanging(string value);
        partial void OnWorksNoteChanged();
        partial void OnProductionNoteChanging(string value);
        partial void OnProductionNoteChanged();
        partial void OnInvoiceNoteChanging(string value);
        partial void OnInvoiceNoteChanged();
        partial void OnPartNoteChanging(string value);
        partial void OnPartNoteChanged();
        partial void OnSalesGroupIdChanging(System.Nullable<int> value);
        partial void OnSalesGroupIdChanged();
        partial void OnSpecificationValue1Changing(string value);
        partial void OnSpecificationValue1Changed();
        partial void OnSpecificationValue2Changing(string value);
        partial void OnSpecificationValue2Changed();
        partial void OnSpecificationValue3Changing(string value);
        partial void OnSpecificationValue3Changed();
        partial void OnSpecificationValue4Changing(string value);
        partial void OnSpecificationValue4Changed();
        partial void OnSpecificationValue5Changing(string value);
        partial void OnSpecificationValue5Changed();
        partial void OnShowPriceChanging(System.Nullable<bool> value);
        partial void OnShowPriceChanged();
        partial void OnUseMinimumGradeChanging(System.Nullable<bool> value);
        partial void OnUseMinimumGradeChanged();
        partial void OnEndUseIdChanging(System.Nullable<int> value);
        partial void OnEndUseIdChanged();
        partial void OnDocumentNumberChanging(string value);
        partial void OnDocumentNumberChanged();
        partial void OnRevisionNumberChanging(string value);
        partial void OnRevisionNumberChanged();
        partial void OnDrawingNumberChanging(string value);
        partial void OnDrawingNumberChanged();
        partial void OnApprovedByIdChanging(System.Nullable<int> value);
        partial void OnApprovedByIdChanged();
        partial void OnApprovalDateChanging(System.Nullable<System.DateTime> value);
        partial void OnApprovalDateChanged();
        partial void OnLastUsedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastUsedDateChanged();
        partial void OnPartStatusChanging(string value);
        partial void OnPartStatusChanged();
        partial void OnCustomerOrderNumberChanging(string value);
        partial void OnCustomerOrderNumberChanged();
        partial void OnDescriptionFormulaChanging(string value);
        partial void OnDescriptionFormulaChanged();
        partial void OnCompositeKeyChanging(string value);
        partial void OnCompositeKeyChanged();
        partial void OnOutsideDiameterChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterChanged();
        partial void OnOutsideDiameterMinimumChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterMinimumChanged();
        partial void OnOutsideDiameterMaximumChanging(System.Nullable<decimal> value);
        partial void OnOutsideDiameterMaximumChanged();
        partial void OnPackHeightChanging(System.Nullable<decimal> value);
        partial void OnPackHeightChanged();
        partial void OnPackHeightMinimumChanging(System.Nullable<decimal> value);
        partial void OnPackHeightMinimumChanged();
        partial void OnPackHeightMaximumChanging(System.Nullable<decimal> value);
        partial void OnPackHeightMaximumChanged();
        partial void OnPackWeightChanging(System.Nullable<decimal> value);
        partial void OnPackWeightChanged();
        partial void OnPackWeightMinimumChanging(System.Nullable<decimal> value);
        partial void OnPackWeightMinimumChanged();
        partial void OnPackWeightMaximumChanging(System.Nullable<decimal> value);
        partial void OnPackWeightMaximumChanged();
        partial void OnInsideDiameterChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterChanged();
        partial void OnInsideDiameterMinimumChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterMinimumChanged();
        partial void OnInsideDiameterMaximumChanging(System.Nullable<decimal> value);
        partial void OnInsideDiameterMaximumChanged();
        partial void OnSpecificationValue6Changing(string value);
        partial void OnSpecificationValue6Changed();
        partial void OnSpecificationValue7Changing(string value);
        partial void OnSpecificationValue7Changed();
        partial void OnSpecificationValue8Changing(string value);
        partial void OnSpecificationValue8Changed();
        partial void OnSpecificationValue9Changing(string value);
        partial void OnSpecificationValue9Changed();
        partial void OnSpecificationValue10Changing(string value);
        partial void OnSpecificationValue10Changed();
        partial void OnProcessPlanIdChanging(System.Nullable<int> value);
        partial void OnProcessPlanIdChanged();
        partial void OnPackCountMinimumChanging(System.Nullable<int> value);
        partial void OnPackCountMinimumChanged();
        partial void OnPackCountMaximumChanging(System.Nullable<int> value);
        partial void OnPackCountMaximumChanged();
        partial void OnPartCompanyTypeChanging(string value);
        partial void OnPartCompanyTypeChanged();
        partial void OnInternalNoteChanging(string value);
        partial void OnInternalNoteChanged();
        partial void OnGoodsInwardsNoteChanging(string value);
        partial void OnGoodsInwardsNoteChanged();
        partial void OnPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnPurchaseGroupIdChanged();
        partial void OnAdjustmentPriceChanging(System.Nullable<decimal> value);
        partial void OnAdjustmentPriceChanged();
        partial void OnYieldPercentageChanging(System.Nullable<decimal> value);
        partial void OnYieldPercentageChanged();
        partial void OnPriceCodeChanging(string value);
        partial void OnPriceCodeChanged();
        partial void OnMechanicalCertChanging(System.Nullable<bool> value);
        partial void OnMechanicalCertChanged();
        partial void OnShowCountryOfMaterialOriginChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfMaterialOriginChanged();
        partial void OnShowCountryOfPrimaryProcessingChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfPrimaryProcessingChanged();
        partial void OnShowCountryOfFinalProcessingChanging(System.Nullable<bool> value);
        partial void OnShowCountryOfFinalProcessingChanged();
        partial void OnAcknowledgementNoteChanging(string value);
        partial void OnAcknowledgementNoteChanged();
        partial void OnDespatchNoteChanging(string value);
        partial void OnDespatchNoteChanged();
        partial void OnInvoicePackingChanging(System.Nullable<bool> value);
        partial void OnInvoicePackingChanged();
        partial void OnPartProcessTypeIdChanging(System.Nullable<int> value);
        partial void OnPartProcessTypeIdChanged();
        #endregion

        public PartNumberSpecification()
        {
            this._Company  = default(EntityRef<Company>);
            this._Product_ConsumptionProductId  = default(EntityRef<Product>);
            this._UnitsOfMeasure  = default(EntityRef<UnitsOfMeasure>);
            this._Product_ProductId  = default(EntityRef<Product>);
            this._PurchaseOrderItem = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItem), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItem));
            this._DimensionValue_ConsumptionDimensionsId  = default(EntityRef<DimensionValue>);
            this._DimensionValue_DimensionsId  = default(EntityRef<DimensionValue>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"customer_id", Storage = "_CustomerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging("CustomerId");
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Name = @"""number""", Storage = "_Number", DbType = "VARCHAR(35)", UpdateCheck = UpdateCheck.Never)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging("Number");
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product_ProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionsId in the schema.
        /// </summary>
        [Column(Name = @"dimensions_id", Storage = "_DimensionsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DimensionsId
        {
            get
            {
                return this._DimensionsId;
            }
            set
            {
                if (this._DimensionsId != value)
                {
                    if (this._DimensionValue_DimensionsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDimensionsIdChanging(value);
                    this.SendPropertyChanging("DimensionsId");
                    this._DimensionsId = value;
                    this.SendPropertyChanged("DimensionsId");
                    this.OnDimensionsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EntryQuantity in the schema.
        /// </summary>
        [Column(Name = @"entry_quantity", Storage = "_EntryQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> EntryQuantity
        {
            get
            {
                return this._EntryQuantity;
            }
            set
            {
                if (this._EntryQuantity != value)
                {
                    this.OnEntryQuantityChanging(value);
                    this.SendPropertyChanging("EntryQuantity");
                    this._EntryQuantity = value;
                    this.SendPropertyChanged("EntryQuantity");
                    this.OnEntryQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EntryQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"entry_quantity_unit_id", Storage = "_EntryQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EntryQuantityUnitId
        {
            get
            {
                return this._EntryQuantityUnitId;
            }
            set
            {
                if (this._EntryQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEntryQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("EntryQuantityUnitId");
                    this._EntryQuantityUnitId = value;
                    this.SendPropertyChanged("EntryQuantityUnitId");
                    this.OnEntryQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardPiece in the schema.
        /// </summary>
        [Column(Name = @"standard_pieces", Storage = "_StandardPiece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StandardPiece
        {
            get
            {
                return this._StandardPiece;
            }
            set
            {
                if (this._StandardPiece != value)
                {
                    this.OnStandardPieceChanging(value);
                    this.SendPropertyChanging("StandardPiece");
                    this._StandardPiece = value;
                    this.SendPropertyChanged("StandardPiece");
                    this.OnStandardPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardQuantity in the schema.
        /// </summary>
        [Column(Name = @"standard_quantity", Storage = "_StandardQuantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StandardQuantity
        {
            get
            {
                return this._StandardQuantity;
            }
            set
            {
                if (this._StandardQuantity != value)
                {
                    this.OnStandardQuantityChanging(value);
                    this.SendPropertyChanging("StandardQuantity");
                    this._StandardQuantity = value;
                    this.SendPropertyChanged("StandardQuantity");
                    this.OnStandardQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StandardWeight in the schema.
        /// </summary>
        [Column(Name = @"standard_weight", Storage = "_StandardWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> StandardWeight
        {
            get
            {
                return this._StandardWeight;
            }
            set
            {
                if (this._StandardWeight != value)
                {
                    this.OnStandardWeightChanging(value);
                    this.SendPropertyChanging("StandardWeight");
                    this._StandardWeight = value;
                    this.SendPropertyChanged("StandardWeight");
                    this.OnStandardWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OverrideAllowed in the schema.
        /// </summary>
        [Column(Name = @"override_allowed", Storage = "_OverrideAllowed", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> OverrideAllowed
        {
            get
            {
                return this._OverrideAllowed;
            }
            set
            {
                if (this._OverrideAllowed != value)
                {
                    this.OnOverrideAllowedChanging(value);
                    this.SendPropertyChanging("OverrideAllowed");
                    this._OverrideAllowed = value;
                    this.SendPropertyChanged("OverrideAllowed");
                    this.OnOverrideAllowedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConsumptionProductId in the schema.
        /// </summary>
        [Column(Name = @"consumption_product_id", Storage = "_ConsumptionProductId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ConsumptionProductId
        {
            get
            {
                return this._ConsumptionProductId;
            }
            set
            {
                if (this._ConsumptionProductId != value)
                {
                    if (this._Product_ConsumptionProductId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnConsumptionProductIdChanging(value);
                    this.SendPropertyChanging("ConsumptionProductId");
                    this._ConsumptionProductId = value;
                    this.SendPropertyChanged("ConsumptionProductId");
                    this.OnConsumptionProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConsumptionDimensionsId in the schema.
        /// </summary>
        [Column(Name = @"consumption_dimensions_id", Storage = "_ConsumptionDimensionsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ConsumptionDimensionsId
        {
            get
            {
                return this._ConsumptionDimensionsId;
            }
            set
            {
                if (this._ConsumptionDimensionsId != value)
                {
                    if (this._DimensionValue_ConsumptionDimensionsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnConsumptionDimensionsIdChanging(value);
                    this.SendPropertyChanging("ConsumptionDimensionsId");
                    this._ConsumptionDimensionsId = value;
                    this.SendPropertyChanged("ConsumptionDimensionsId");
                    this.OnConsumptionDimensionsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionFactor in the schema.
        /// </summary>
        [Column(Name = @"production_factor", Storage = "_ProductionFactor", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ProductionFactor
        {
            get
            {
                return this._ProductionFactor;
            }
            set
            {
                if (this._ProductionFactor != value)
                {
                    this.OnProductionFactorChanging(value);
                    this.SendPropertyChanging("ProductionFactor");
                    this._ProductionFactor = value;
                    this.SendPropertyChanged("ProductionFactor");
                    this.OnProductionFactorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpectedScrap in the schema.
        /// </summary>
        [Column(Name = @"expected_scrap", Storage = "_ExpectedScrap", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ExpectedScrap
        {
            get
            {
                return this._ExpectedScrap;
            }
            set
            {
                if (this._ExpectedScrap != value)
                {
                    this.OnExpectedScrapChanging(value);
                    this.SendPropertyChanging("ExpectedScrap");
                    this._ExpectedScrap = value;
                    this.SendPropertyChanged("ExpectedScrap");
                    this.OnExpectedScrapChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorksNote in the schema.
        /// </summary>
        [Column(Name = @"works_notes", Storage = "_WorksNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string WorksNote
        {
            get
            {
                return this._WorksNote;
            }
            set
            {
                if (this._WorksNote != value)
                {
                    this.OnWorksNoteChanging(value);
                    this.SendPropertyChanging("WorksNote");
                    this._WorksNote = value;
                    this.SendPropertyChanged("WorksNote");
                    this.OnWorksNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionNote in the schema.
        /// </summary>
        [Column(Name = @"production_notes", Storage = "_ProductionNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProductionNote
        {
            get
            {
                return this._ProductionNote;
            }
            set
            {
                if (this._ProductionNote != value)
                {
                    this.OnProductionNoteChanging(value);
                    this.SendPropertyChanging("ProductionNote");
                    this._ProductionNote = value;
                    this.SendPropertyChanged("ProductionNote");
                    this.OnProductionNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceNote in the schema.
        /// </summary>
        [Column(Name = @"invoice_notes", Storage = "_InvoiceNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InvoiceNote
        {
            get
            {
                return this._InvoiceNote;
            }
            set
            {
                if (this._InvoiceNote != value)
                {
                    this.OnInvoiceNoteChanging(value);
                    this.SendPropertyChanging("InvoiceNote");
                    this._InvoiceNote = value;
                    this.SendPropertyChanged("InvoiceNote");
                    this.OnInvoiceNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartNote in the schema.
        /// </summary>
        [Column(Name = @"part_notes", Storage = "_PartNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PartNote
        {
            get
            {
                return this._PartNote;
            }
            set
            {
                if (this._PartNote != value)
                {
                    this.OnPartNoteChanging(value);
                    this.SendPropertyChanging("PartNote");
                    this._PartNote = value;
                    this.SendPropertyChanged("PartNote");
                    this.OnPartNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue1 in the schema.
        /// </summary>
        [Column(Name = @"specification_value1", Storage = "_SpecificationValue1", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue1
        {
            get
            {
                return this._SpecificationValue1;
            }
            set
            {
                if (this._SpecificationValue1 != value)
                {
                    this.OnSpecificationValue1Changing(value);
                    this.SendPropertyChanging("SpecificationValue1");
                    this._SpecificationValue1 = value;
                    this.SendPropertyChanged("SpecificationValue1");
                    this.OnSpecificationValue1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue2 in the schema.
        /// </summary>
        [Column(Name = @"specification_value2", Storage = "_SpecificationValue2", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue2
        {
            get
            {
                return this._SpecificationValue2;
            }
            set
            {
                if (this._SpecificationValue2 != value)
                {
                    this.OnSpecificationValue2Changing(value);
                    this.SendPropertyChanging("SpecificationValue2");
                    this._SpecificationValue2 = value;
                    this.SendPropertyChanged("SpecificationValue2");
                    this.OnSpecificationValue2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue3 in the schema.
        /// </summary>
        [Column(Name = @"specification_value3", Storage = "_SpecificationValue3", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue3
        {
            get
            {
                return this._SpecificationValue3;
            }
            set
            {
                if (this._SpecificationValue3 != value)
                {
                    this.OnSpecificationValue3Changing(value);
                    this.SendPropertyChanging("SpecificationValue3");
                    this._SpecificationValue3 = value;
                    this.SendPropertyChanged("SpecificationValue3");
                    this.OnSpecificationValue3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue4 in the schema.
        /// </summary>
        [Column(Name = @"specification_value4", Storage = "_SpecificationValue4", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue4
        {
            get
            {
                return this._SpecificationValue4;
            }
            set
            {
                if (this._SpecificationValue4 != value)
                {
                    this.OnSpecificationValue4Changing(value);
                    this.SendPropertyChanging("SpecificationValue4");
                    this._SpecificationValue4 = value;
                    this.SendPropertyChanged("SpecificationValue4");
                    this.OnSpecificationValue4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue5 in the schema.
        /// </summary>
        [Column(Name = @"specification_value5", Storage = "_SpecificationValue5", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue5
        {
            get
            {
                return this._SpecificationValue5;
            }
            set
            {
                if (this._SpecificationValue5 != value)
                {
                    this.OnSpecificationValue5Changing(value);
                    this.SendPropertyChanging("SpecificationValue5");
                    this._SpecificationValue5 = value;
                    this.SendPropertyChanged("SpecificationValue5");
                    this.OnSpecificationValue5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowPrice in the schema.
        /// </summary>
        [Column(Name = @"show_prices", Storage = "_ShowPrice", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowPrice
        {
            get
            {
                return this._ShowPrice;
            }
            set
            {
                if (this._ShowPrice != value)
                {
                    this.OnShowPriceChanging(value);
                    this.SendPropertyChanging("ShowPrice");
                    this._ShowPrice = value;
                    this.SendPropertyChanged("ShowPrice");
                    this.OnShowPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UseMinimumGrade in the schema.
        /// </summary>
        [Column(Name = @"use_minimum_grade", Storage = "_UseMinimumGrade", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> UseMinimumGrade
        {
            get
            {
                return this._UseMinimumGrade;
            }
            set
            {
                if (this._UseMinimumGrade != value)
                {
                    this.OnUseMinimumGradeChanging(value);
                    this.SendPropertyChanging("UseMinimumGrade");
                    this._UseMinimumGrade = value;
                    this.SendPropertyChanged("UseMinimumGrade");
                    this.OnUseMinimumGradeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndUseId in the schema.
        /// </summary>
        [Column(Name = @"end_use_id", Storage = "_EndUseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EndUseId
        {
            get
            {
                return this._EndUseId;
            }
            set
            {
                if (this._EndUseId != value)
                {
                    this.OnEndUseIdChanging(value);
                    this.SendPropertyChanging("EndUseId");
                    this._EndUseId = value;
                    this.SendPropertyChanged("EndUseId");
                    this.OnEndUseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentNumber in the schema.
        /// </summary>
        [Column(Name = @"document_number", Storage = "_DocumentNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string DocumentNumber
        {
            get
            {
                return this._DocumentNumber;
            }
            set
            {
                if (this._DocumentNumber != value)
                {
                    this.OnDocumentNumberChanging(value);
                    this.SendPropertyChanging("DocumentNumber");
                    this._DocumentNumber = value;
                    this.SendPropertyChanged("DocumentNumber");
                    this.OnDocumentNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RevisionNumber in the schema.
        /// </summary>
        [Column(Name = @"revision_number", Storage = "_RevisionNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string RevisionNumber
        {
            get
            {
                return this._RevisionNumber;
            }
            set
            {
                if (this._RevisionNumber != value)
                {
                    this.OnRevisionNumberChanging(value);
                    this.SendPropertyChanging("RevisionNumber");
                    this._RevisionNumber = value;
                    this.SendPropertyChanged("RevisionNumber");
                    this.OnRevisionNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DrawingNumber in the schema.
        /// </summary>
        [Column(Name = @"drawing_number", Storage = "_DrawingNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string DrawingNumber
        {
            get
            {
                return this._DrawingNumber;
            }
            set
            {
                if (this._DrawingNumber != value)
                {
                    this.OnDrawingNumberChanging(value);
                    this.SendPropertyChanging("DrawingNumber");
                    this._DrawingNumber = value;
                    this.SendPropertyChanged("DrawingNumber");
                    this.OnDrawingNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApprovedById in the schema.
        /// </summary>
        [Column(Name = @"approved_by_id", Storage = "_ApprovedById", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ApprovedById
        {
            get
            {
                return this._ApprovedById;
            }
            set
            {
                if (this._ApprovedById != value)
                {
                    this.OnApprovedByIdChanging(value);
                    this.SendPropertyChanging("ApprovedById");
                    this._ApprovedById = value;
                    this.SendPropertyChanged("ApprovedById");
                    this.OnApprovedByIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApprovalDate in the schema.
        /// </summary>
        [Column(Name = @"approval_date", Storage = "_ApprovalDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ApprovalDate
        {
            get
            {
                return this._ApprovalDate;
            }
            set
            {
                if (this._ApprovalDate != value)
                {
                    this.OnApprovalDateChanging(value);
                    this.SendPropertyChanging("ApprovalDate");
                    this._ApprovalDate = value;
                    this.SendPropertyChanged("ApprovalDate");
                    this.OnApprovalDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUsedDate in the schema.
        /// </summary>
        [Column(Name = @"last_used_date", Storage = "_LastUsedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastUsedDate
        {
            get
            {
                return this._LastUsedDate;
            }
            set
            {
                if (this._LastUsedDate != value)
                {
                    this.OnLastUsedDateChanging(value);
                    this.SendPropertyChanging("LastUsedDate");
                    this._LastUsedDate = value;
                    this.SendPropertyChanged("LastUsedDate");
                    this.OnLastUsedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartStatus in the schema.
        /// </summary>
        [Column(Name = @"part_status", Storage = "_PartStatus", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string PartStatus
        {
            get
            {
                return this._PartStatus;
            }
            set
            {
                if (this._PartStatus != value)
                {
                    this.OnPartStatusChanging(value);
                    this.SendPropertyChanging("PartStatus");
                    this._PartStatus = value;
                    this.SendPropertyChanged("PartStatus");
                    this.OnPartStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"customer_order_number", Storage = "_CustomerOrderNumber", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string CustomerOrderNumber
        {
            get
            {
                return this._CustomerOrderNumber;
            }
            set
            {
                if (this._CustomerOrderNumber != value)
                {
                    this.OnCustomerOrderNumberChanging(value);
                    this.SendPropertyChanging("CustomerOrderNumber");
                    this._CustomerOrderNumber = value;
                    this.SendPropertyChanged("CustomerOrderNumber");
                    this.OnCustomerOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DescriptionFormula in the schema.
        /// </summary>
        [Column(Name = @"description_formula", Storage = "_DescriptionFormula", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DescriptionFormula
        {
            get
            {
                return this._DescriptionFormula;
            }
            set
            {
                if (this._DescriptionFormula != value)
                {
                    this.OnDescriptionFormulaChanging(value);
                    this.SendPropertyChanging("DescriptionFormula");
                    this._DescriptionFormula = value;
                    this.SendPropertyChanged("DescriptionFormula");
                    this.OnDescriptionFormulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompositeKey in the schema.
        /// </summary>
        [Column(Name = @"composite_key", Storage = "_CompositeKey", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompositeKey
        {
            get
            {
                return this._CompositeKey;
            }
            set
            {
                if (this._CompositeKey != value)
                {
                    this.OnCompositeKeyChanging(value);
                    this.SendPropertyChanging("CompositeKey");
                    this._CompositeKey = value;
                    this.SendPropertyChanged("CompositeKey");
                    this.OnCompositeKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameter in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter", Storage = "_OutsideDiameter", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameter
        {
            get
            {
                return this._OutsideDiameter;
            }
            set
            {
                if (this._OutsideDiameter != value)
                {
                    this.OnOutsideDiameterChanging(value);
                    this.SendPropertyChanging("OutsideDiameter");
                    this._OutsideDiameter = value;
                    this.SendPropertyChanged("OutsideDiameter");
                    this.OnOutsideDiameterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameterMinimum in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter_minimum", Storage = "_OutsideDiameterMinimum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameterMinimum
        {
            get
            {
                return this._OutsideDiameterMinimum;
            }
            set
            {
                if (this._OutsideDiameterMinimum != value)
                {
                    this.OnOutsideDiameterMinimumChanging(value);
                    this.SendPropertyChanging("OutsideDiameterMinimum");
                    this._OutsideDiameterMinimum = value;
                    this.SendPropertyChanged("OutsideDiameterMinimum");
                    this.OnOutsideDiameterMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutsideDiameterMaximum in the schema.
        /// </summary>
        [Column(Name = @"outside_diameter_maximum", Storage = "_OutsideDiameterMaximum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> OutsideDiameterMaximum
        {
            get
            {
                return this._OutsideDiameterMaximum;
            }
            set
            {
                if (this._OutsideDiameterMaximum != value)
                {
                    this.OnOutsideDiameterMaximumChanging(value);
                    this.SendPropertyChanging("OutsideDiameterMaximum");
                    this._OutsideDiameterMaximum = value;
                    this.SendPropertyChanged("OutsideDiameterMaximum");
                    this.OnOutsideDiameterMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeight in the schema.
        /// </summary>
        [Column(Name = @"pack_height", Storage = "_PackHeight", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeight
        {
            get
            {
                return this._PackHeight;
            }
            set
            {
                if (this._PackHeight != value)
                {
                    this.OnPackHeightChanging(value);
                    this.SendPropertyChanging("PackHeight");
                    this._PackHeight = value;
                    this.SendPropertyChanged("PackHeight");
                    this.OnPackHeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeightMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_height_minimum", Storage = "_PackHeightMinimum", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeightMinimum
        {
            get
            {
                return this._PackHeightMinimum;
            }
            set
            {
                if (this._PackHeightMinimum != value)
                {
                    this.OnPackHeightMinimumChanging(value);
                    this.SendPropertyChanging("PackHeightMinimum");
                    this._PackHeightMinimum = value;
                    this.SendPropertyChanged("PackHeightMinimum");
                    this.OnPackHeightMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackHeightMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_height_maximum", Storage = "_PackHeightMaximum", DbType = "NUMERIC(9,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackHeightMaximum
        {
            get
            {
                return this._PackHeightMaximum;
            }
            set
            {
                if (this._PackHeightMaximum != value)
                {
                    this.OnPackHeightMaximumChanging(value);
                    this.SendPropertyChanging("PackHeightMaximum");
                    this._PackHeightMaximum = value;
                    this.SendPropertyChanged("PackHeightMaximum");
                    this.OnPackHeightMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeight in the schema.
        /// </summary>
        [Column(Name = @"pack_weight", Storage = "_PackWeight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeight
        {
            get
            {
                return this._PackWeight;
            }
            set
            {
                if (this._PackWeight != value)
                {
                    this.OnPackWeightChanging(value);
                    this.SendPropertyChanging("PackWeight");
                    this._PackWeight = value;
                    this.SendPropertyChanged("PackWeight");
                    this.OnPackWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeightMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_weight_minimum", Storage = "_PackWeightMinimum", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeightMinimum
        {
            get
            {
                return this._PackWeightMinimum;
            }
            set
            {
                if (this._PackWeightMinimum != value)
                {
                    this.OnPackWeightMinimumChanging(value);
                    this.SendPropertyChanging("PackWeightMinimum");
                    this._PackWeightMinimum = value;
                    this.SendPropertyChanged("PackWeightMinimum");
                    this.OnPackWeightMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackWeightMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_weight_maximum", Storage = "_PackWeightMaximum", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PackWeightMaximum
        {
            get
            {
                return this._PackWeightMaximum;
            }
            set
            {
                if (this._PackWeightMaximum != value)
                {
                    this.OnPackWeightMaximumChanging(value);
                    this.SendPropertyChanging("PackWeightMaximum");
                    this._PackWeightMaximum = value;
                    this.SendPropertyChanged("PackWeightMaximum");
                    this.OnPackWeightMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameter in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter", Storage = "_InsideDiameter", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameter
        {
            get
            {
                return this._InsideDiameter;
            }
            set
            {
                if (this._InsideDiameter != value)
                {
                    this.OnInsideDiameterChanging(value);
                    this.SendPropertyChanging("InsideDiameter");
                    this._InsideDiameter = value;
                    this.SendPropertyChanged("InsideDiameter");
                    this.OnInsideDiameterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameterMinimum in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter_minimum", Storage = "_InsideDiameterMinimum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameterMinimum
        {
            get
            {
                return this._InsideDiameterMinimum;
            }
            set
            {
                if (this._InsideDiameterMinimum != value)
                {
                    this.OnInsideDiameterMinimumChanging(value);
                    this.SendPropertyChanging("InsideDiameterMinimum");
                    this._InsideDiameterMinimum = value;
                    this.SendPropertyChanged("InsideDiameterMinimum");
                    this.OnInsideDiameterMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsideDiameterMaximum in the schema.
        /// </summary>
        [Column(Name = @"inside_diameter_maximum", Storage = "_InsideDiameterMaximum", DbType = "NUMERIC(9,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> InsideDiameterMaximum
        {
            get
            {
                return this._InsideDiameterMaximum;
            }
            set
            {
                if (this._InsideDiameterMaximum != value)
                {
                    this.OnInsideDiameterMaximumChanging(value);
                    this.SendPropertyChanging("InsideDiameterMaximum");
                    this._InsideDiameterMaximum = value;
                    this.SendPropertyChanged("InsideDiameterMaximum");
                    this.OnInsideDiameterMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue6 in the schema.
        /// </summary>
        [Column(Name = @"specification_value6", Storage = "_SpecificationValue6", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue6
        {
            get
            {
                return this._SpecificationValue6;
            }
            set
            {
                if (this._SpecificationValue6 != value)
                {
                    this.OnSpecificationValue6Changing(value);
                    this.SendPropertyChanging("SpecificationValue6");
                    this._SpecificationValue6 = value;
                    this.SendPropertyChanged("SpecificationValue6");
                    this.OnSpecificationValue6Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue7 in the schema.
        /// </summary>
        [Column(Name = @"specification_value7", Storage = "_SpecificationValue7", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue7
        {
            get
            {
                return this._SpecificationValue7;
            }
            set
            {
                if (this._SpecificationValue7 != value)
                {
                    this.OnSpecificationValue7Changing(value);
                    this.SendPropertyChanging("SpecificationValue7");
                    this._SpecificationValue7 = value;
                    this.SendPropertyChanged("SpecificationValue7");
                    this.OnSpecificationValue7Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue8 in the schema.
        /// </summary>
        [Column(Name = @"specification_value8", Storage = "_SpecificationValue8", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue8
        {
            get
            {
                return this._SpecificationValue8;
            }
            set
            {
                if (this._SpecificationValue8 != value)
                {
                    this.OnSpecificationValue8Changing(value);
                    this.SendPropertyChanging("SpecificationValue8");
                    this._SpecificationValue8 = value;
                    this.SendPropertyChanged("SpecificationValue8");
                    this.OnSpecificationValue8Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue9 in the schema.
        /// </summary>
        [Column(Name = @"specification_value9", Storage = "_SpecificationValue9", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue9
        {
            get
            {
                return this._SpecificationValue9;
            }
            set
            {
                if (this._SpecificationValue9 != value)
                {
                    this.OnSpecificationValue9Changing(value);
                    this.SendPropertyChanging("SpecificationValue9");
                    this._SpecificationValue9 = value;
                    this.SendPropertyChanged("SpecificationValue9");
                    this.OnSpecificationValue9Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationValue10 in the schema.
        /// </summary>
        [Column(Name = @"specification_value10", Storage = "_SpecificationValue10", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string SpecificationValue10
        {
            get
            {
                return this._SpecificationValue10;
            }
            set
            {
                if (this._SpecificationValue10 != value)
                {
                    this.OnSpecificationValue10Changing(value);
                    this.SendPropertyChanging("SpecificationValue10");
                    this._SpecificationValue10 = value;
                    this.SendPropertyChanged("SpecificationValue10");
                    this.OnSpecificationValue10Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProcessPlanId in the schema.
        /// </summary>
        [Column(Name = @"process_plan_id", Storage = "_ProcessPlanId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProcessPlanId
        {
            get
            {
                return this._ProcessPlanId;
            }
            set
            {
                if (this._ProcessPlanId != value)
                {
                    this.OnProcessPlanIdChanging(value);
                    this.SendPropertyChanging("ProcessPlanId");
                    this._ProcessPlanId = value;
                    this.SendPropertyChanged("ProcessPlanId");
                    this.OnProcessPlanIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackCountMinimum in the schema.
        /// </summary>
        [Column(Name = @"pack_count_minimum", Storage = "_PackCountMinimum", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PackCountMinimum
        {
            get
            {
                return this._PackCountMinimum;
            }
            set
            {
                if (this._PackCountMinimum != value)
                {
                    this.OnPackCountMinimumChanging(value);
                    this.SendPropertyChanging("PackCountMinimum");
                    this._PackCountMinimum = value;
                    this.SendPropertyChanged("PackCountMinimum");
                    this.OnPackCountMinimumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackCountMaximum in the schema.
        /// </summary>
        [Column(Name = @"pack_count_maximum", Storage = "_PackCountMaximum", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PackCountMaximum
        {
            get
            {
                return this._PackCountMaximum;
            }
            set
            {
                if (this._PackCountMaximum != value)
                {
                    this.OnPackCountMaximumChanging(value);
                    this.SendPropertyChanging("PackCountMaximum");
                    this._PackCountMaximum = value;
                    this.SendPropertyChanged("PackCountMaximum");
                    this.OnPackCountMaximumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartCompanyType in the schema.
        /// </summary>
        [Column(Name = @"part_company_type", Storage = "_PartCompanyType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string PartCompanyType
        {
            get
            {
                return this._PartCompanyType;
            }
            set
            {
                if (this._PartCompanyType != value)
                {
                    this.OnPartCompanyTypeChanging(value);
                    this.SendPropertyChanging("PartCompanyType");
                    this._PartCompanyType = value;
                    this.SendPropertyChanged("PartCompanyType");
                    this.OnPartCompanyTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalNote in the schema.
        /// </summary>
        [Column(Name = @"internal_notes", Storage = "_InternalNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InternalNote
        {
            get
            {
                return this._InternalNote;
            }
            set
            {
                if (this._InternalNote != value)
                {
                    this.OnInternalNoteChanging(value);
                    this.SendPropertyChanging("InternalNote");
                    this._InternalNote = value;
                    this.SendPropertyChanged("InternalNote");
                    this.OnInternalNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsInwardsNote in the schema.
        /// </summary>
        [Column(Name = @"goods_inwards_notes", Storage = "_GoodsInwardsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GoodsInwardsNote
        {
            get
            {
                return this._GoodsInwardsNote;
            }
            set
            {
                if (this._GoodsInwardsNote != value)
                {
                    this.OnGoodsInwardsNoteChanging(value);
                    this.SendPropertyChanging("GoodsInwardsNote");
                    this._GoodsInwardsNote = value;
                    this.SendPropertyChanged("GoodsInwardsNote");
                    this.OnGoodsInwardsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"purchase_group_id", Storage = "_PurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseGroupId
        {
            get
            {
                return this._PurchaseGroupId;
            }
            set
            {
                if (this._PurchaseGroupId != value)
                {
                    this.OnPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("PurchaseGroupId");
                    this._PurchaseGroupId = value;
                    this.SendPropertyChanged("PurchaseGroupId");
                    this.OnPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdjustmentPrice in the schema.
        /// </summary>
        [Column(Name = @"adjustment_price", Storage = "_AdjustmentPrice", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> AdjustmentPrice
        {
            get
            {
                return this._AdjustmentPrice;
            }
            set
            {
                if (this._AdjustmentPrice != value)
                {
                    this.OnAdjustmentPriceChanging(value);
                    this.SendPropertyChanging("AdjustmentPrice");
                    this._AdjustmentPrice = value;
                    this.SendPropertyChanged("AdjustmentPrice");
                    this.OnAdjustmentPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for YieldPercentage in the schema.
        /// </summary>
        [Column(Name = @"yield_percentage", Storage = "_YieldPercentage", DbType = "NUMERIC(5,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> YieldPercentage
        {
            get
            {
                return this._YieldPercentage;
            }
            set
            {
                if (this._YieldPercentage != value)
                {
                    this.OnYieldPercentageChanging(value);
                    this.SendPropertyChanging("YieldPercentage");
                    this._YieldPercentage = value;
                    this.SendPropertyChanged("YieldPercentage");
                    this.OnYieldPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PriceCode in the schema.
        /// </summary>
        [Column(Name = @"price_code", Storage = "_PriceCode", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string PriceCode
        {
            get
            {
                return this._PriceCode;
            }
            set
            {
                if (this._PriceCode != value)
                {
                    this.OnPriceCodeChanging(value);
                    this.SendPropertyChanging("PriceCode");
                    this._PriceCode = value;
                    this.SendPropertyChanged("PriceCode");
                    this.OnPriceCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MechanicalCert in the schema.
        /// </summary>
        [Column(Name = @"mechanical_cert", Storage = "_MechanicalCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MechanicalCert
        {
            get
            {
                return this._MechanicalCert;
            }
            set
            {
                if (this._MechanicalCert != value)
                {
                    this.OnMechanicalCertChanging(value);
                    this.SendPropertyChanging("MechanicalCert");
                    this._MechanicalCert = value;
                    this.SendPropertyChanged("MechanicalCert");
                    this.OnMechanicalCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfMaterialOrigin in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_material_origin", Storage = "_ShowCountryOfMaterialOrigin", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfMaterialOrigin
        {
            get
            {
                return this._ShowCountryOfMaterialOrigin;
            }
            set
            {
                if (this._ShowCountryOfMaterialOrigin != value)
                {
                    this.OnShowCountryOfMaterialOriginChanging(value);
                    this.SendPropertyChanging("ShowCountryOfMaterialOrigin");
                    this._ShowCountryOfMaterialOrigin = value;
                    this.SendPropertyChanged("ShowCountryOfMaterialOrigin");
                    this.OnShowCountryOfMaterialOriginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfPrimaryProcessing in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_primary_processing", Storage = "_ShowCountryOfPrimaryProcessing", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfPrimaryProcessing
        {
            get
            {
                return this._ShowCountryOfPrimaryProcessing;
            }
            set
            {
                if (this._ShowCountryOfPrimaryProcessing != value)
                {
                    this.OnShowCountryOfPrimaryProcessingChanging(value);
                    this.SendPropertyChanging("ShowCountryOfPrimaryProcessing");
                    this._ShowCountryOfPrimaryProcessing = value;
                    this.SendPropertyChanged("ShowCountryOfPrimaryProcessing");
                    this.OnShowCountryOfPrimaryProcessingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowCountryOfFinalProcessing in the schema.
        /// </summary>
        [Column(Name = @"show_country_of_final_processing", Storage = "_ShowCountryOfFinalProcessing", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ShowCountryOfFinalProcessing
        {
            get
            {
                return this._ShowCountryOfFinalProcessing;
            }
            set
            {
                if (this._ShowCountryOfFinalProcessing != value)
                {
                    this.OnShowCountryOfFinalProcessingChanging(value);
                    this.SendPropertyChanging("ShowCountryOfFinalProcessing");
                    this._ShowCountryOfFinalProcessing = value;
                    this.SendPropertyChanged("ShowCountryOfFinalProcessing");
                    this.OnShowCountryOfFinalProcessingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcknowledgementNote in the schema.
        /// </summary>
        [Column(Name = @"acknowledgement_notes", Storage = "_AcknowledgementNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string AcknowledgementNote
        {
            get
            {
                return this._AcknowledgementNote;
            }
            set
            {
                if (this._AcknowledgementNote != value)
                {
                    this.OnAcknowledgementNoteChanging(value);
                    this.SendPropertyChanging("AcknowledgementNote");
                    this._AcknowledgementNote = value;
                    this.SendPropertyChanged("AcknowledgementNote");
                    this.OnAcknowledgementNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchNote in the schema.
        /// </summary>
        [Column(Name = @"despatch_notes", Storage = "_DespatchNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string DespatchNote
        {
            get
            {
                return this._DespatchNote;
            }
            set
            {
                if (this._DespatchNote != value)
                {
                    this.OnDespatchNoteChanging(value);
                    this.SendPropertyChanging("DespatchNote");
                    this._DespatchNote = value;
                    this.SendPropertyChanged("DespatchNote");
                    this.OnDespatchNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicePacking in the schema.
        /// </summary>
        [Column(Name = @"invoice_packing", Storage = "_InvoicePacking", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> InvoicePacking
        {
            get
            {
                return this._InvoicePacking;
            }
            set
            {
                if (this._InvoicePacking != value)
                {
                    this.OnInvoicePackingChanging(value);
                    this.SendPropertyChanging("InvoicePacking");
                    this._InvoicePacking = value;
                    this.SendPropertyChanged("InvoicePacking");
                    this.OnInvoicePackingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartProcessTypeId in the schema.
        /// </summary>
        [Column(Name = @"part_process_type_id", Storage = "_PartProcessTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PartProcessTypeId
        {
            get
            {
                return this._PartProcessTypeId;
            }
            set
            {
                if (this._PartProcessTypeId != value)
                {
                    this.OnPartProcessTypeIdChanging(value);
                    this.SendPropertyChanging("PartProcessTypeId");
                    this._PartProcessTypeId = value;
                    this.SendPropertyChanged("PartProcessTypeId");
                    this.OnPartProcessTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_PartNumberSpecification", Storage="_Company", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company");
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.PartNumberSpecification.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.PartNumberSpecification.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ConsumptionProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PartNumberSpecification", Storage="_Product_ConsumptionProductId", ThisKey="ConsumptionProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_ConsumptionProductId
        {
            get
            {
                return this._Product_ConsumptionProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_ConsumptionProductId.Entity;
                if ((previousValue != value) || (this._Product_ConsumptionProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_ConsumptionProductId");
                    if (previousValue != null)
                    {
                        this._Product_ConsumptionProductId.Entity = null;
                        previousValue.PartNumberSpecification_ConsumptionProductId.Remove(this);
                    }
                    this._Product_ConsumptionProductId.Entity = value;
                    if (value != null)
                    {
                        this._ConsumptionProductId = value.Id;
                        value.PartNumberSpecification_ConsumptionProductId.Add(this);
                    }
                    else
                    {
                        this._ConsumptionProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_ConsumptionProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_PartNumberSpecification", Storage="_UnitsOfMeasure", ThisKey="EntryQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure
        {
            get
            {
                return this._UnitsOfMeasure.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure.Entity = null;
                        previousValue.PartNumberSpecification.Remove(this);
                    }
                    this._UnitsOfMeasure.Entity = value;
                    if (value != null)
                    {
                        this._EntryQuantityUnitId = value.Id;
                        value.PartNumberSpecification.Add(this);
                    }
                    else
                    {
                        this._EntryQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product_ProductId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PartNumberSpecification1", Storage="_Product_ProductId", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product_ProductId
        {
            get
            {
                return this._Product_ProductId.Entity;
            }
            set
            {
                Product previousValue = this._Product_ProductId.Entity;
                if ((previousValue != value) || (this._Product_ProductId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product_ProductId");
                    if (previousValue != null)
                    {
                        this._Product_ProductId.Entity = null;
                        previousValue.PartNumberSpecification_ProductId.Remove(this);
                    }
                    this._Product_ProductId.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.PartNumberSpecification_ProductId.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_ProductId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PartNumberSpecification_PurchaseOrderItem", Storage="_PurchaseOrderItem", ThisKey="Id", OtherKey="PartSpecificationId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseOrderItem> PurchaseOrderItem
        {
            get
            {
                return this._PurchaseOrderItem;
            }
            set
            {
                this._PurchaseOrderItem.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionValue_ConsumptionDimensionsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DimensionValue_PartNumberSpecification", Storage="_DimensionValue_ConsumptionDimensionsId", ThisKey="ConsumptionDimensionsId", OtherKey="Id", IsForeignKey=true)]
        public DimensionValue DimensionValue_ConsumptionDimensionsId
        {
            get
            {
                return this._DimensionValue_ConsumptionDimensionsId.Entity;
            }
            set
            {
                DimensionValue previousValue = this._DimensionValue_ConsumptionDimensionsId.Entity;
                if ((previousValue != value) || (this._DimensionValue_ConsumptionDimensionsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DimensionValue_ConsumptionDimensionsId");
                    if (previousValue != null)
                    {
                        this._DimensionValue_ConsumptionDimensionsId.Entity = null;
                        previousValue.PartNumberSpecification_ConsumptionDimensionsId.Remove(this);
                    }
                    this._DimensionValue_ConsumptionDimensionsId.Entity = value;
                    if (value != null)
                    {
                        this._ConsumptionDimensionsId = value.Id;
                        value.PartNumberSpecification_ConsumptionDimensionsId.Add(this);
                    }
                    else
                    {
                        this._ConsumptionDimensionsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("DimensionValue_ConsumptionDimensionsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DimensionValue_DimensionsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DimensionValue_PartNumberSpecification1", Storage="_DimensionValue_DimensionsId", ThisKey="DimensionsId", OtherKey="Id", IsForeignKey=true)]
        public DimensionValue DimensionValue_DimensionsId
        {
            get
            {
                return this._DimensionValue_DimensionsId.Entity;
            }
            set
            {
                DimensionValue previousValue = this._DimensionValue_DimensionsId.Entity;
                if ((previousValue != value) || (this._DimensionValue_DimensionsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DimensionValue_DimensionsId");
                    if (previousValue != null)
                    {
                        this._DimensionValue_DimensionsId.Entity = null;
                        previousValue.PartNumberSpecification_DimensionsId.Remove(this);
                    }
                    this._DimensionValue_DimensionsId.Entity = value;
                    if (value != null)
                    {
                        this._DimensionsId = value.Id;
                        value.PartNumberSpecification_DimensionsId.Add(this);
                    }
                    else
                    {
                        this._DimensionsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("DimensionValue_DimensionsId");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PurchaseOrderItem(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem");
            entity.PartNumberSpecification = this;
        }
    
        private void detach_PurchaseOrderItem(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItem");
            entity.PartNumberSpecification = null;
        }
    }

}
