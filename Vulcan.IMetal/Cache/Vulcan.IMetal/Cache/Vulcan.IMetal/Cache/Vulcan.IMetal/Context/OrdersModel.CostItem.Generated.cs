//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.CostItem in the schema.
    /// </summary>
    [Table(Name = @"public.cost_items")]
    public partial class CostItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _CostGroupId;

        private System.Nullable<decimal> _Cost;

        private System.Nullable<int> _CostUnitId;

        private System.Nullable<decimal> _CostQuantity;

        private System.Nullable<int> _CostQuantityUnitId;

        private System.Nullable<decimal> _Value;

        private System.Nullable<int> _PoBranchId;

        private System.Nullable<int> _PoNumber;

        private System.Nullable<int> _PoItem;

        private System.Nullable<int> _SupplierId;

        private string _BillingReference;

        private System.Nullable<decimal> _ExchangeRate;

        private string _ItemType;

        private System.Nullable<int> _ItemId;

        private System.Nullable<bool> _InternalCost;

        private System.Nullable<bool> _ActualCost;

        private System.Nullable<int> _WorkCentreId;

        private System.Nullable<bool> _SystemCost;

        private System.Nullable<int> _QuantityTypeCode;

        private System.Nullable<decimal> _BaseCost;

        private System.Nullable<decimal> _BaseValue;

        private System.Nullable<int> _ExchangeRateType;

        private string _Description;

        private System.Nullable<int> _PurchaseGroupId;

        private System.Nullable<int> _CostPurchaseItemId;

        private string _CostFixStatus = @"V";

        private string _Visibility = @"S";

        private System.Nullable<bool> _DutyItem = false;

        private System.Nullable<decimal> _PurchaseItemLumpSumCost;
        #pragma warning restore 0649

        private EntityRef<Company> _Company;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_CostQuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_CostUnitId;

        private EntityRef<Branch> _Branch;

        private EntityRef<CostGroupCode> _CostGroupCode;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCostGroupIdChanging(System.Nullable<int> value);
        partial void OnCostGroupIdChanged();
        partial void OnCostChanging(System.Nullable<decimal> value);
        partial void OnCostChanged();
        partial void OnCostUnitIdChanging(System.Nullable<int> value);
        partial void OnCostUnitIdChanged();
        partial void OnCostQuantityChanging(System.Nullable<decimal> value);
        partial void OnCostQuantityChanged();
        partial void OnCostQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnCostQuantityUnitIdChanged();
        partial void OnValueChanging(System.Nullable<decimal> value);
        partial void OnValueChanged();
        partial void OnPoBranchIdChanging(System.Nullable<int> value);
        partial void OnPoBranchIdChanged();
        partial void OnPoNumberChanging(System.Nullable<int> value);
        partial void OnPoNumberChanged();
        partial void OnPoItemChanging(System.Nullable<int> value);
        partial void OnPoItemChanged();
        partial void OnSupplierIdChanging(System.Nullable<int> value);
        partial void OnSupplierIdChanged();
        partial void OnBillingReferenceChanging(string value);
        partial void OnBillingReferenceChanged();
        partial void OnExchangeRateChanging(System.Nullable<decimal> value);
        partial void OnExchangeRateChanged();
        partial void OnItemTypeChanging(string value);
        partial void OnItemTypeChanged();
        partial void OnItemIdChanging(System.Nullable<int> value);
        partial void OnItemIdChanged();
        partial void OnInternalCostChanging(System.Nullable<bool> value);
        partial void OnInternalCostChanged();
        partial void OnActualCostChanging(System.Nullable<bool> value);
        partial void OnActualCostChanged();
        partial void OnWorkCentreIdChanging(System.Nullable<int> value);
        partial void OnWorkCentreIdChanged();
        partial void OnSystemCostChanging(System.Nullable<bool> value);
        partial void OnSystemCostChanged();
        partial void OnQuantityTypeCodeChanging(System.Nullable<int> value);
        partial void OnQuantityTypeCodeChanged();
        partial void OnBaseCostChanging(System.Nullable<decimal> value);
        partial void OnBaseCostChanged();
        partial void OnBaseValueChanging(System.Nullable<decimal> value);
        partial void OnBaseValueChanged();
        partial void OnExchangeRateTypeChanging(System.Nullable<int> value);
        partial void OnExchangeRateTypeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPurchaseGroupIdChanging(System.Nullable<int> value);
        partial void OnPurchaseGroupIdChanged();
        partial void OnCostPurchaseItemIdChanging(System.Nullable<int> value);
        partial void OnCostPurchaseItemIdChanged();
        partial void OnCostFixStatusChanging(string value);
        partial void OnCostFixStatusChanged();
        partial void OnVisibilityChanging(string value);
        partial void OnVisibilityChanged();
        partial void OnDutyItemChanging(System.Nullable<bool> value);
        partial void OnDutyItemChanged();
        partial void OnPurchaseItemLumpSumCostChanging(System.Nullable<decimal> value);
        partial void OnPurchaseItemLumpSumCostChanged();
        #endregion

        public CostItem()
        {
            this._Company  = default(EntityRef<Company>);
            this._UnitsOfMeasure_CostQuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_CostUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._Branch  = default(EntityRef<Branch>);
            this._CostGroupCode  = default(EntityRef<CostGroupCode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostGroupId in the schema.
        /// </summary>
        [Column(Name = @"cost_group_id", Storage = "_CostGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostGroupId
        {
            get
            {
                return this._CostGroupId;
            }
            set
            {
                if (this._CostGroupId != value)
                {
                    if (this._CostGroupCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostGroupIdChanging(value);
                    this.SendPropertyChanging("CostGroupId");
                    this._CostGroupId = value;
                    this.SendPropertyChanged("CostGroupId");
                    this.OnCostGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"cost", Storage = "_Cost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging("Cost");
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostUnitId in the schema.
        /// </summary>
        [Column(Name = @"cost_unit_id", Storage = "_CostUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostUnitId
        {
            get
            {
                return this._CostUnitId;
            }
            set
            {
                if (this._CostUnitId != value)
                {
                    if (this._UnitsOfMeasure_CostUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostUnitIdChanging(value);
                    this.SendPropertyChanging("CostUnitId");
                    this._CostUnitId = value;
                    this.SendPropertyChanged("CostUnitId");
                    this.OnCostUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostQuantity in the schema.
        /// </summary>
        [Column(Name = @"cost_quantity", Storage = "_CostQuantity", DbType = "NUMERIC(15,6)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> CostQuantity
        {
            get
            {
                return this._CostQuantity;
            }
            set
            {
                if (this._CostQuantity != value)
                {
                    this.OnCostQuantityChanging(value);
                    this.SendPropertyChanging("CostQuantity");
                    this._CostQuantity = value;
                    this.SendPropertyChanged("CostQuantity");
                    this.OnCostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostQuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"cost_quantity_unit_id", Storage = "_CostQuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostQuantityUnitId
        {
            get
            {
                return this._CostQuantityUnitId;
            }
            set
            {
                if (this._CostQuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_CostQuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("CostQuantityUnitId");
                    this._CostQuantityUnitId = value;
                    this.SendPropertyChanged("CostQuantityUnitId");
                    this.OnCostQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"""value""", Storage = "_Value", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PoBranchId in the schema.
        /// </summary>
        [Column(Name = @"po_branch_id", Storage = "_PoBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PoBranchId
        {
            get
            {
                return this._PoBranchId;
            }
            set
            {
                if (this._PoBranchId != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPoBranchIdChanging(value);
                    this.SendPropertyChanging("PoBranchId");
                    this._PoBranchId = value;
                    this.SendPropertyChanged("PoBranchId");
                    this.OnPoBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PoNumber in the schema.
        /// </summary>
        [Column(Name = @"po_number", Storage = "_PoNumber", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PoNumber
        {
            get
            {
                return this._PoNumber;
            }
            set
            {
                if (this._PoNumber != value)
                {
                    this.OnPoNumberChanging(value);
                    this.SendPropertyChanging("PoNumber");
                    this._PoNumber = value;
                    this.SendPropertyChanged("PoNumber");
                    this.OnPoNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PoItem in the schema.
        /// </summary>
        [Column(Name = @"po_item", Storage = "_PoItem", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PoItem
        {
            get
            {
                return this._PoItem;
            }
            set
            {
                if (this._PoItem != value)
                {
                    this.OnPoItemChanging(value);
                    this.SendPropertyChanging("PoItem");
                    this._PoItem = value;
                    this.SendPropertyChanged("PoItem");
                    this.OnPoItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"supplier_id", Storage = "_SupplierId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging("SupplierId");
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BillingReference in the schema.
        /// </summary>
        [Column(Name = @"billing_reference", Storage = "_BillingReference", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string BillingReference
        {
            get
            {
                return this._BillingReference;
            }
            set
            {
                if (this._BillingReference != value)
                {
                    this.OnBillingReferenceChanging(value);
                    this.SendPropertyChanging("BillingReference");
                    this._BillingReference = value;
                    this.SendPropertyChanged("BillingReference");
                    this.OnBillingReferenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate", Storage = "_ExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> ExchangeRate
        {
            get
            {
                return this._ExchangeRate;
            }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this.OnExchangeRateChanging(value);
                    this.SendPropertyChanging("ExchangeRate");
                    this._ExchangeRate = value;
                    this.SendPropertyChanged("ExchangeRate");
                    this.OnExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemType in the schema.
        /// </summary>
        [Column(Name = @"item_type", Storage = "_ItemType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ItemType
        {
            get
            {
                return this._ItemType;
            }
            set
            {
                if (this._ItemType != value)
                {
                    this.OnItemTypeChanging(value);
                    this.SendPropertyChanging("ItemType");
                    this._ItemType = value;
                    this.SendPropertyChanged("ItemType");
                    this.OnItemTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemId in the schema.
        /// </summary>
        [Column(Name = @"item_id", Storage = "_ItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if (this._ItemId != value)
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging("ItemId");
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InternalCost in the schema.
        /// </summary>
        [Column(Name = @"internal_cost", Storage = "_InternalCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> InternalCost
        {
            get
            {
                return this._InternalCost;
            }
            set
            {
                if (this._InternalCost != value)
                {
                    this.OnInternalCostChanging(value);
                    this.SendPropertyChanging("InternalCost");
                    this._InternalCost = value;
                    this.SendPropertyChanged("InternalCost");
                    this.OnInternalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActualCost in the schema.
        /// </summary>
        [Column(Name = @"actual_cost", Storage = "_ActualCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ActualCost
        {
            get
            {
                return this._ActualCost;
            }
            set
            {
                if (this._ActualCost != value)
                {
                    this.OnActualCostChanging(value);
                    this.SendPropertyChanging("ActualCost");
                    this._ActualCost = value;
                    this.SendPropertyChanged("ActualCost");
                    this.OnActualCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkCentreId in the schema.
        /// </summary>
        [Column(Name = @"work_centre_id", Storage = "_WorkCentreId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WorkCentreId
        {
            get
            {
                return this._WorkCentreId;
            }
            set
            {
                if (this._WorkCentreId != value)
                {
                    this.OnWorkCentreIdChanging(value);
                    this.SendPropertyChanging("WorkCentreId");
                    this._WorkCentreId = value;
                    this.SendPropertyChanged("WorkCentreId");
                    this.OnWorkCentreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SystemCost in the schema.
        /// </summary>
        [Column(Name = @"system_cost", Storage = "_SystemCost", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> SystemCost
        {
            get
            {
                return this._SystemCost;
            }
            set
            {
                if (this._SystemCost != value)
                {
                    this.OnSystemCostChanging(value);
                    this.SendPropertyChanging("SystemCost");
                    this._SystemCost = value;
                    this.SendPropertyChanged("SystemCost");
                    this.OnSystemCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityTypeCode in the schema.
        /// </summary>
        [Column(Name = @"quantity_type_code", Storage = "_QuantityTypeCode", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> QuantityTypeCode
        {
            get
            {
                return this._QuantityTypeCode;
            }
            set
            {
                if (this._QuantityTypeCode != value)
                {
                    this.OnQuantityTypeCodeChanging(value);
                    this.SendPropertyChanging("QuantityTypeCode");
                    this._QuantityTypeCode = value;
                    this.SendPropertyChanged("QuantityTypeCode");
                    this.OnQuantityTypeCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseCost in the schema.
        /// </summary>
        [Column(Name = @"base_cost", Storage = "_BaseCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BaseCost
        {
            get
            {
                return this._BaseCost;
            }
            set
            {
                if (this._BaseCost != value)
                {
                    this.OnBaseCostChanging(value);
                    this.SendPropertyChanging("BaseCost");
                    this._BaseCost = value;
                    this.SendPropertyChanged("BaseCost");
                    this.OnBaseCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseValue in the schema.
        /// </summary>
        [Column(Name = @"base_value", Storage = "_BaseValue", DbType = "NUMERIC(12,2)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> BaseValue
        {
            get
            {
                return this._BaseValue;
            }
            set
            {
                if (this._BaseValue != value)
                {
                    this.OnBaseValueChanging(value);
                    this.SendPropertyChanging("BaseValue");
                    this._BaseValue = value;
                    this.SendPropertyChanged("BaseValue");
                    this.OnBaseValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRateType in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate_type", Storage = "_ExchangeRateType", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ExchangeRateType
        {
            get
            {
                return this._ExchangeRateType;
            }
            set
            {
                if (this._ExchangeRateType != value)
                {
                    this.OnExchangeRateTypeChanging(value);
                    this.SendPropertyChanging("ExchangeRateType");
                    this._ExchangeRateType = value;
                    this.SendPropertyChanged("ExchangeRateType");
                    this.OnExchangeRateTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseGroupId in the schema.
        /// </summary>
        [Column(Name = @"purchase_group_id", Storage = "_PurchaseGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseGroupId
        {
            get
            {
                return this._PurchaseGroupId;
            }
            set
            {
                if (this._PurchaseGroupId != value)
                {
                    this.OnPurchaseGroupIdChanging(value);
                    this.SendPropertyChanging("PurchaseGroupId");
                    this._PurchaseGroupId = value;
                    this.SendPropertyChanged("PurchaseGroupId");
                    this.OnPurchaseGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostPurchaseItemId in the schema.
        /// </summary>
        [Column(Name = @"cost_purchase_item_id", Storage = "_CostPurchaseItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CostPurchaseItemId
        {
            get
            {
                return this._CostPurchaseItemId;
            }
            set
            {
                if (this._CostPurchaseItemId != value)
                {
                    this.OnCostPurchaseItemIdChanging(value);
                    this.SendPropertyChanging("CostPurchaseItemId");
                    this._CostPurchaseItemId = value;
                    this.SendPropertyChanged("CostPurchaseItemId");
                    this.OnCostPurchaseItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostFixStatus in the schema.
        /// </summary>
        [Column(Name = @"cost_fix_status", Storage = "_CostFixStatus", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CostFixStatus
        {
            get
            {
                return this._CostFixStatus;
            }
            set
            {
                if (this._CostFixStatus != value)
                {
                    this.OnCostFixStatusChanging(value);
                    this.SendPropertyChanging("CostFixStatus");
                    this._CostFixStatus = value;
                    this.SendPropertyChanged("CostFixStatus");
                    this.OnCostFixStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Visibility in the schema.
        /// </summary>
        [Column(Name = @"visibility", Storage = "_Visibility", CanBeNull = false, DbType = "CHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Visibility
        {
            get
            {
                return this._Visibility;
            }
            set
            {
                if (this._Visibility != value)
                {
                    this.OnVisibilityChanging(value);
                    this.SendPropertyChanging("Visibility");
                    this._Visibility = value;
                    this.SendPropertyChanged("Visibility");
                    this.OnVisibilityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DutyItem in the schema.
        /// </summary>
        [Column(Name = @"duty_item", Storage = "_DutyItem", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DutyItem
        {
            get
            {
                return this._DutyItem;
            }
            set
            {
                if (this._DutyItem != value)
                {
                    this.OnDutyItemChanging(value);
                    this.SendPropertyChanging("DutyItem");
                    this._DutyItem = value;
                    this.SendPropertyChanged("DutyItem");
                    this.OnDutyItemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemLumpSumCost in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_lump_sum_cost", Storage = "_PurchaseItemLumpSumCost", DbType = "NUMERIC(12,4)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> PurchaseItemLumpSumCost
        {
            get
            {
                return this._PurchaseItemLumpSumCost;
            }
            set
            {
                if (this._PurchaseItemLumpSumCost != value)
                {
                    this.OnPurchaseItemLumpSumCostChanging(value);
                    this.SendPropertyChanging("PurchaseItemLumpSumCost");
                    this._PurchaseItemLumpSumCost = value;
                    this.SendPropertyChanged("PurchaseItemLumpSumCost");
                    this.OnPurchaseItemLumpSumCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CostItem", Storage="_Company", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company");
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.CostItem.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        this._SupplierId = value.Id;
                        value.CostItem.Add(this);
                    }
                    else
                    {
                        this._SupplierId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_CostQuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_CostItem", Storage="_UnitsOfMeasure_CostQuantityUnitId", ThisKey="CostQuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_CostQuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_CostQuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_CostQuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_CostQuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_CostQuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_CostQuantityUnitId.Entity = null;
                        previousValue.CostItem_CostQuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_CostQuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._CostQuantityUnitId = value.Id;
                        value.CostItem_CostQuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._CostQuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_CostQuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_CostUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_CostItem1", Storage="_UnitsOfMeasure_CostUnitId", ThisKey="CostUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_CostUnitId
        {
            get
            {
                return this._UnitsOfMeasure_CostUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_CostUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_CostUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_CostUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_CostUnitId.Entity = null;
                        previousValue.CostItem_CostUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_CostUnitId.Entity = value;
                    if (value != null)
                    {
                        this._CostUnitId = value.Id;
                        value.CostItem_CostUnitId.Add(this);
                    }
                    else
                    {
                        this._CostUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_CostUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_CostItem", Storage="_Branch", ThisKey="PoBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.CostItem.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._PoBranchId = value.Id;
                        value.CostItem.Add(this);
                    }
                    else
                    {
                        this._PoBranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostGroupCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CostGroupCode_CostItem", Storage="_CostGroupCode", ThisKey="CostGroupId", OtherKey="Id", IsForeignKey=true)]
        public CostGroupCode CostGroupCode
        {
            get
            {
                return this._CostGroupCode.Entity;
            }
            set
            {
                CostGroupCode previousValue = this._CostGroupCode.Entity;
                if ((previousValue != value) || (this._CostGroupCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CostGroupCode");
                    if (previousValue != null)
                    {
                        this._CostGroupCode.Entity = null;
                        previousValue.CostItem.Remove(this);
                    }
                    this._CostGroupCode.Entity = value;
                    if (value != null)
                    {
                        this._CostGroupId = value.Id;
                        value.CostItem.Add(this);
                    }
                    else
                    {
                        this._CostGroupId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("CostGroupCode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
