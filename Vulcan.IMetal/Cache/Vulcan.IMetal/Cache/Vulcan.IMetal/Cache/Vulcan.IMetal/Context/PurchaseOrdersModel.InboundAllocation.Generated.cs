//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/13/2018 9:26:28 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.PurchaseOrders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.PurchaseOrders.InboundAllocation in the schema.
    /// </summary>
    [Table(Name = @"public.inbound_allocations")]
    public partial class InboundAllocation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private System.Nullable<int> _PurchaseItemId;

        private System.Nullable<int> _TransferItemId;

        private System.Nullable<int> _SalesItemId;

        private System.Nullable<bool> _ReserveOnly;

        private System.Nullable<System.DateTime> _ExpiryDate;

        private System.Nullable<int> _Piece;

        private System.Nullable<decimal> _Weight;

        private System.Nullable<decimal> _Quantity;

        private string _Comment;

        private string _AllocationType;

        private System.Nullable<int> _ProductLevelAllocationId;

        private System.Nullable<int> _Cut;

        private System.Nullable<int> _ProductionItemId;
        #pragma warning restore 0649

        private EntityRef<PurchaseOrderItem> _PurchaseOrderItem;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnPurchaseItemIdChanging(System.Nullable<int> value);
        partial void OnPurchaseItemIdChanged();
        partial void OnTransferItemIdChanging(System.Nullable<int> value);
        partial void OnTransferItemIdChanged();
        partial void OnSalesItemIdChanging(System.Nullable<int> value);
        partial void OnSalesItemIdChanged();
        partial void OnReserveOnlyChanging(System.Nullable<bool> value);
        partial void OnReserveOnlyChanged();
        partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
        partial void OnExpiryDateChanged();
        partial void OnPieceChanging(System.Nullable<int> value);
        partial void OnPieceChanged();
        partial void OnWeightChanging(System.Nullable<decimal> value);
        partial void OnWeightChanged();
        partial void OnQuantityChanging(System.Nullable<decimal> value);
        partial void OnQuantityChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnAllocationTypeChanging(string value);
        partial void OnAllocationTypeChanged();
        partial void OnProductLevelAllocationIdChanging(System.Nullable<int> value);
        partial void OnProductLevelAllocationIdChanged();
        partial void OnCutChanging(System.Nullable<int> value);
        partial void OnCutChanged();
        partial void OnProductionItemIdChanging(System.Nullable<int> value);
        partial void OnProductionItemIdChanged();
        #endregion

        public InboundAllocation()
        {
            this._PurchaseOrderItem  = default(EntityRef<PurchaseOrderItem>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemId in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_id", Storage = "_PurchaseItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PurchaseItemId
        {
            get
            {
                return this._PurchaseItemId;
            }
            set
            {
                if (this._PurchaseItemId != value)
                {
                    if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseItemIdChanging(value);
                    this.SendPropertyChanging("PurchaseItemId");
                    this._PurchaseItemId = value;
                    this.SendPropertyChanged("PurchaseItemId");
                    this.OnPurchaseItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferItemId in the schema.
        /// </summary>
        [Column(Name = @"transfer_item_id", Storage = "_TransferItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransferItemId
        {
            get
            {
                return this._TransferItemId;
            }
            set
            {
                if (this._TransferItemId != value)
                {
                    this.OnTransferItemIdChanging(value);
                    this.SendPropertyChanging("TransferItemId");
                    this._TransferItemId = value;
                    this.SendPropertyChanged("TransferItemId");
                    this.OnTransferItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItemId in the schema.
        /// </summary>
        [Column(Name = @"sales_item_id", Storage = "_SalesItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SalesItemId
        {
            get
            {
                return this._SalesItemId;
            }
            set
            {
                if (this._SalesItemId != value)
                {
                    this.OnSalesItemIdChanging(value);
                    this.SendPropertyChanging("SalesItemId");
                    this._SalesItemId = value;
                    this.SendPropertyChanged("SalesItemId");
                    this.OnSalesItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReserveOnly in the schema.
        /// </summary>
        [Column(Name = @"reserve_only", Storage = "_ReserveOnly", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ReserveOnly
        {
            get
            {
                return this._ReserveOnly;
            }
            set
            {
                if (this._ReserveOnly != value)
                {
                    this.OnReserveOnlyChanging(value);
                    this.SendPropertyChanging("ReserveOnly");
                    this._ReserveOnly = value;
                    this.SendPropertyChanged("ReserveOnly");
                    this.OnReserveOnlyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Name = @"expiry_date", Storage = "_ExpiryDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging("ExpiryDate");
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Piece in the schema.
        /// </summary>
        [Column(Name = @"pieces", Storage = "_Piece", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Piece
        {
            get
            {
                return this._Piece;
            }
            set
            {
                if (this._Piece != value)
                {
                    this.OnPieceChanging(value);
                    this.SendPropertyChanging("Piece");
                    this._Piece = value;
                    this.SendPropertyChanged("Piece");
                    this.OnPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [Column(Name = @"weight", Storage = "_Weight", DbType = "NUMERIC(10,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Weight
        {
            get
            {
                return this._Weight;
            }
            set
            {
                if (this._Weight != value)
                {
                    this.OnWeightChanging(value);
                    this.SendPropertyChanging("Weight");
                    this._Weight = value;
                    this.SendPropertyChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", DbType = "NUMERIC(12,3)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"comments", Storage = "_Comment", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging("Comment");
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AllocationType in the schema.
        /// </summary>
        [Column(Name = @"allocation_type", Storage = "_AllocationType", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string AllocationType
        {
            get
            {
                return this._AllocationType;
            }
            set
            {
                if (this._AllocationType != value)
                {
                    this.OnAllocationTypeChanging(value);
                    this.SendPropertyChanging("AllocationType");
                    this._AllocationType = value;
                    this.SendPropertyChanged("AllocationType");
                    this.OnAllocationTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductLevelAllocationId in the schema.
        /// </summary>
        [Column(Name = @"product_level_allocation_id", Storage = "_ProductLevelAllocationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductLevelAllocationId
        {
            get
            {
                return this._ProductLevelAllocationId;
            }
            set
            {
                if (this._ProductLevelAllocationId != value)
                {
                    this.OnProductLevelAllocationIdChanging(value);
                    this.SendPropertyChanging("ProductLevelAllocationId");
                    this._ProductLevelAllocationId = value;
                    this.SendPropertyChanged("ProductLevelAllocationId");
                    this.OnProductLevelAllocationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cut in the schema.
        /// </summary>
        [Column(Name = @"cuts", Storage = "_Cut", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Cut
        {
            get
            {
                return this._Cut;
            }
            set
            {
                if (this._Cut != value)
                {
                    this.OnCutChanging(value);
                    this.SendPropertyChanging("Cut");
                    this._Cut = value;
                    this.SendPropertyChanged("Cut");
                    this.OnCutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionItemId in the schema.
        /// </summary>
        [Column(Name = @"production_item_id", Storage = "_ProductionItemId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductionItemId
        {
            get
            {
                return this._ProductionItemId;
            }
            set
            {
                if (this._ProductionItemId != value)
                {
                    this.OnProductionItemIdChanging(value);
                    this.SendPropertyChanging("ProductionItemId");
                    this._ProductionItemId = value;
                    this.SendPropertyChanged("ProductionItemId");
                    this.OnProductionItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrderItem_InboundAllocation", Storage="_PurchaseOrderItem", ThisKey="PurchaseItemId", OtherKey="Id", IsForeignKey=true)]
        public PurchaseOrderItem PurchaseOrderItem
        {
            get
            {
                return this._PurchaseOrderItem.Entity;
            }
            set
            {
                PurchaseOrderItem previousValue = this._PurchaseOrderItem.Entity;
                if ((previousValue != value) || (this._PurchaseOrderItem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseOrderItem");
                    if (previousValue != null)
                    {
                        this._PurchaseOrderItem.Entity = null;
                        previousValue.InboundAllocation.Remove(this);
                    }
                    this._PurchaseOrderItem.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseItemId = value.Id;
                        value.InboundAllocation.Add(this);
                    }
                    else
                    {
                        this._PurchaseItemId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PurchaseOrderItem");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
