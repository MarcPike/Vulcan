//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.Warehouse in the schema.
    /// </summary>
    [Table(Name = @"public.warehouses")]
    public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Name;

        private string _Telephone;

        private string _Fax;

        private string _Email;

        private string _Website;

        private System.Nullable<bool> _MandatoryLocation;

        private string _Code;

        private string _ShortName;

        private System.Nullable<int> _WarehouseTypeId;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _DefaultStockStatusId;

        private System.Nullable<int> _AddressId;

        private System.Nullable<int> _BayStartCharacter;

        private System.Nullable<int> _BayLength;

        private System.Nullable<int> _RackStartCharacter;

        private System.Nullable<int> _RackLength;

        private System.Nullable<int> _BinStartCharacter;

        private System.Nullable<int> _BinLength;

        private System.Nullable<bool> _SendMasterYardOrder = false;

        private System.Nullable<int> _SubAddressId;

        private System.Nullable<bool> _ProductionWarehouse = true;

        private string _LedgerSegmentCode;

        private System.Nullable<bool> _RestrictedVisibility = false;

        private System.Nullable<int> _DefaultCertPrinterId;
        #pragma warning restore 0649

        private EntityRef<Address> _Address;

        private EntityRef<Branch> _Branch_BranchId;

        private EntityRef<CompanySubAddress> _CompanySubAddress_SubAddressId;

        private EntitySet<Branch> _Branch_ClaimWarehouseId;

        private EntitySet<Branch> _Branch_CustownWarehouseId;

        private EntitySet<Branch> _Branch_FinishedWarehouseId;

        private EntitySet<Branch> _Branch_OffcutWarehouseId;

        private EntitySet<Branch> _Branch_QuarantineWarehouseId;

        private EntitySet<Branch> _Branch_ScrapWarehouseId;

        private EntitySet<Branch> _Branch_StockWarehouseId;

        private EntitySet<Branch> _Branch_WipWarehouseId;

        private EntitySet<SalesItem> _SalesItem;

        private EntitySet<CompanySubAddress> _CompanySubAddress_ConsignmentWarehouseId;

        private EntitySet<SalesHeader> _SalesHeader_DeliveryWarehouseId;

        private EntitySet<SalesHeader> _SalesHeader_TransferToWarehouseId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnWebsiteChanging(string value);
        partial void OnWebsiteChanged();
        partial void OnMandatoryLocationChanging(System.Nullable<bool> value);
        partial void OnMandatoryLocationChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnWarehouseTypeIdChanging(System.Nullable<int> value);
        partial void OnWarehouseTypeIdChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnDefaultStockStatusIdChanging(System.Nullable<int> value);
        partial void OnDefaultStockStatusIdChanged();
        partial void OnAddressIdChanging(System.Nullable<int> value);
        partial void OnAddressIdChanged();
        partial void OnBayStartCharacterChanging(System.Nullable<int> value);
        partial void OnBayStartCharacterChanged();
        partial void OnBayLengthChanging(System.Nullable<int> value);
        partial void OnBayLengthChanged();
        partial void OnRackStartCharacterChanging(System.Nullable<int> value);
        partial void OnRackStartCharacterChanged();
        partial void OnRackLengthChanging(System.Nullable<int> value);
        partial void OnRackLengthChanged();
        partial void OnBinStartCharacterChanging(System.Nullable<int> value);
        partial void OnBinStartCharacterChanged();
        partial void OnBinLengthChanging(System.Nullable<int> value);
        partial void OnBinLengthChanged();
        partial void OnSendMasterYardOrderChanging(System.Nullable<bool> value);
        partial void OnSendMasterYardOrderChanged();
        partial void OnSubAddressIdChanging(System.Nullable<int> value);
        partial void OnSubAddressIdChanged();
        partial void OnProductionWarehouseChanging(System.Nullable<bool> value);
        partial void OnProductionWarehouseChanged();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnRestrictedVisibilityChanging(System.Nullable<bool> value);
        partial void OnRestrictedVisibilityChanged();
        partial void OnDefaultCertPrinterIdChanging(System.Nullable<int> value);
        partial void OnDefaultCertPrinterIdChanged();
        #endregion

        public Warehouse()
        {
            this._Address  = default(EntityRef<Address>);
            this._Branch_BranchId  = default(EntityRef<Branch>);
            this._CompanySubAddress_SubAddressId  = default(EntityRef<CompanySubAddress>);
            this._Branch_ClaimWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_ClaimWarehouseId), new Action<Branch>(this.detach_Branch_ClaimWarehouseId));
            this._Branch_CustownWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_CustownWarehouseId), new Action<Branch>(this.detach_Branch_CustownWarehouseId));
            this._Branch_FinishedWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_FinishedWarehouseId), new Action<Branch>(this.detach_Branch_FinishedWarehouseId));
            this._Branch_OffcutWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_OffcutWarehouseId), new Action<Branch>(this.detach_Branch_OffcutWarehouseId));
            this._Branch_QuarantineWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_QuarantineWarehouseId), new Action<Branch>(this.detach_Branch_QuarantineWarehouseId));
            this._Branch_ScrapWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_ScrapWarehouseId), new Action<Branch>(this.detach_Branch_ScrapWarehouseId));
            this._Branch_StockWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_StockWarehouseId), new Action<Branch>(this.detach_Branch_StockWarehouseId));
            this._Branch_WipWarehouseId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_WipWarehouseId), new Action<Branch>(this.detach_Branch_WipWarehouseId));
            this._SalesItem = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItem), new Action<SalesItem>(this.detach_SalesItem));
            this._CompanySubAddress_ConsignmentWarehouseId = new EntitySet<CompanySubAddress>(new Action<CompanySubAddress>(this.attach_CompanySubAddress_ConsignmentWarehouseId), new Action<CompanySubAddress>(this.detach_CompanySubAddress_ConsignmentWarehouseId));
            this._SalesHeader_DeliveryWarehouseId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_DeliveryWarehouseId), new Action<SalesHeader>(this.detach_SalesHeader_DeliveryWarehouseId));
            this._SalesHeader_TransferToWarehouseId = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader_TransferToWarehouseId), new Action<SalesHeader>(this.detach_SalesHeader_TransferToWarehouseId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Website in the schema.
        /// </summary>
        [Column(Name = @"website", Storage = "_Website", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Website
        {
            get
            {
                return this._Website;
            }
            set
            {
                if (this._Website != value)
                {
                    this.OnWebsiteChanging(value);
                    this.SendPropertyChanging("Website");
                    this._Website = value;
                    this.SendPropertyChanged("Website");
                    this.OnWebsiteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MandatoryLocation in the schema.
        /// </summary>
        [Column(Name = @"mandatory_location", Storage = "_MandatoryLocation", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MandatoryLocation
        {
            get
            {
                return this._MandatoryLocation;
            }
            set
            {
                if (this._MandatoryLocation != value)
                {
                    this.OnMandatoryLocationChanging(value);
                    this.SendPropertyChanging("MandatoryLocation");
                    this._MandatoryLocation = value;
                    this.SendPropertyChanged("MandatoryLocation");
                    this.OnMandatoryLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShortName in the schema.
        /// </summary>
        [Column(Name = @"short_name", Storage = "_ShortName", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string ShortName
        {
            get
            {
                return this._ShortName;
            }
            set
            {
                if (this._ShortName != value)
                {
                    this.OnShortNameChanging(value);
                    this.SendPropertyChanging("ShortName");
                    this._ShortName = value;
                    this.SendPropertyChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WarehouseTypeId in the schema.
        /// </summary>
        [Column(Name = @"warehouse_type_id", Storage = "_WarehouseTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WarehouseTypeId
        {
            get
            {
                return this._WarehouseTypeId;
            }
            set
            {
                if (this._WarehouseTypeId != value)
                {
                    this.OnWarehouseTypeIdChanging(value);
                    this.SendPropertyChanging("WarehouseTypeId");
                    this._WarehouseTypeId = value;
                    this.SendPropertyChanged("WarehouseTypeId");
                    this.OnWarehouseTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch_BranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultStockStatusId in the schema.
        /// </summary>
        [Column(Name = @"default_stock_status_id", Storage = "_DefaultStockStatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultStockStatusId
        {
            get
            {
                return this._DefaultStockStatusId;
            }
            set
            {
                if (this._DefaultStockStatusId != value)
                {
                    this.OnDefaultStockStatusIdChanging(value);
                    this.SendPropertyChanging("DefaultStockStatusId");
                    this._DefaultStockStatusId = value;
                    this.SendPropertyChanged("DefaultStockStatusId");
                    this.OnDefaultStockStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    if (this._Address.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BayStartCharacter in the schema.
        /// </summary>
        [Column(Name = @"bay_start_character", Storage = "_BayStartCharacter", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BayStartCharacter
        {
            get
            {
                return this._BayStartCharacter;
            }
            set
            {
                if (this._BayStartCharacter != value)
                {
                    this.OnBayStartCharacterChanging(value);
                    this.SendPropertyChanging("BayStartCharacter");
                    this._BayStartCharacter = value;
                    this.SendPropertyChanged("BayStartCharacter");
                    this.OnBayStartCharacterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BayLength in the schema.
        /// </summary>
        [Column(Name = @"bay_length", Storage = "_BayLength", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BayLength
        {
            get
            {
                return this._BayLength;
            }
            set
            {
                if (this._BayLength != value)
                {
                    this.OnBayLengthChanging(value);
                    this.SendPropertyChanging("BayLength");
                    this._BayLength = value;
                    this.SendPropertyChanged("BayLength");
                    this.OnBayLengthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RackStartCharacter in the schema.
        /// </summary>
        [Column(Name = @"rack_start_character", Storage = "_RackStartCharacter", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RackStartCharacter
        {
            get
            {
                return this._RackStartCharacter;
            }
            set
            {
                if (this._RackStartCharacter != value)
                {
                    this.OnRackStartCharacterChanging(value);
                    this.SendPropertyChanging("RackStartCharacter");
                    this._RackStartCharacter = value;
                    this.SendPropertyChanged("RackStartCharacter");
                    this.OnRackStartCharacterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RackLength in the schema.
        /// </summary>
        [Column(Name = @"rack_length", Storage = "_RackLength", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RackLength
        {
            get
            {
                return this._RackLength;
            }
            set
            {
                if (this._RackLength != value)
                {
                    this.OnRackLengthChanging(value);
                    this.SendPropertyChanging("RackLength");
                    this._RackLength = value;
                    this.SendPropertyChanged("RackLength");
                    this.OnRackLengthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinStartCharacter in the schema.
        /// </summary>
        [Column(Name = @"bin_start_character", Storage = "_BinStartCharacter", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BinStartCharacter
        {
            get
            {
                return this._BinStartCharacter;
            }
            set
            {
                if (this._BinStartCharacter != value)
                {
                    this.OnBinStartCharacterChanging(value);
                    this.SendPropertyChanging("BinStartCharacter");
                    this._BinStartCharacter = value;
                    this.SendPropertyChanged("BinStartCharacter");
                    this.OnBinStartCharacterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BinLength in the schema.
        /// </summary>
        [Column(Name = @"bin_length", Storage = "_BinLength", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BinLength
        {
            get
            {
                return this._BinLength;
            }
            set
            {
                if (this._BinLength != value)
                {
                    this.OnBinLengthChanging(value);
                    this.SendPropertyChanging("BinLength");
                    this._BinLength = value;
                    this.SendPropertyChanged("BinLength");
                    this.OnBinLengthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SendMasterYardOrder in the schema.
        /// </summary>
        [Column(Name = @"send_master_yard_order", Storage = "_SendMasterYardOrder", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> SendMasterYardOrder
        {
            get
            {
                return this._SendMasterYardOrder;
            }
            set
            {
                if (this._SendMasterYardOrder != value)
                {
                    this.OnSendMasterYardOrderChanging(value);
                    this.SendPropertyChanging("SendMasterYardOrder");
                    this._SendMasterYardOrder = value;
                    this.SendPropertyChanged("SendMasterYardOrder");
                    this.OnSendMasterYardOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubAddressId in the schema.
        /// </summary>
        [Column(Name = @"sub_address_id", Storage = "_SubAddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SubAddressId
        {
            get
            {
                return this._SubAddressId;
            }
            set
            {
                if (this._SubAddressId != value)
                {
                    if (this._CompanySubAddress_SubAddressId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSubAddressIdChanging(value);
                    this.SendPropertyChanging("SubAddressId");
                    this._SubAddressId = value;
                    this.SendPropertyChanged("SubAddressId");
                    this.OnSubAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionWarehouse in the schema.
        /// </summary>
        [Column(Name = @"production_warehouse", Storage = "_ProductionWarehouse", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ProductionWarehouse
        {
            get
            {
                return this._ProductionWarehouse;
            }
            set
            {
                if (this._ProductionWarehouse != value)
                {
                    this.OnProductionWarehouseChanging(value);
                    this.SendPropertyChanging("ProductionWarehouse");
                    this._ProductionWarehouse = value;
                    this.SendPropertyChanged("ProductionWarehouse");
                    this.OnProductionWarehouseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RestrictedVisibility in the schema.
        /// </summary>
        [Column(Name = @"restricted_visibility", Storage = "_RestrictedVisibility", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> RestrictedVisibility
        {
            get
            {
                return this._RestrictedVisibility;
            }
            set
            {
                if (this._RestrictedVisibility != value)
                {
                    this.OnRestrictedVisibilityChanging(value);
                    this.SendPropertyChanging("RestrictedVisibility");
                    this._RestrictedVisibility = value;
                    this.SendPropertyChanged("RestrictedVisibility");
                    this.OnRestrictedVisibilityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultCertPrinterId in the schema.
        /// </summary>
        [Column(Name = @"default_cert_printer_id", Storage = "_DefaultCertPrinterId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DefaultCertPrinterId
        {
            get
            {
                return this._DefaultCertPrinterId;
            }
            set
            {
                if (this._DefaultCertPrinterId != value)
                {
                    this.OnDefaultCertPrinterIdChanging(value);
                    this.SendPropertyChanging("DefaultCertPrinterId");
                    this._DefaultCertPrinterId = value;
                    this.SendPropertyChanged("DefaultCertPrinterId");
                    this.OnDefaultCertPrinterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_Warehouse", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address
        {
            get
            {
                return this._Address.Entity;
            }
            set
            {
                Address previousValue = this._Address.Entity;
                if ((previousValue != value) || (this._Address.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address");
                    if (previousValue != null)
                    {
                        this._Address.Entity = null;
                        previousValue.Warehouse.Remove(this);
                    }
                    this._Address.Entity = value;
                    if (value != null)
                    {
                        this._AddressId = value.Id;
                        value.Warehouse.Add(this);
                    }
                    else
                    {
                        this._AddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Address");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_BranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Warehouse", Storage="_Branch_BranchId", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_BranchId
        {
            get
            {
                return this._Branch_BranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_BranchId.Entity;
                if ((previousValue != value) || (this._Branch_BranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_BranchId");
                    if (previousValue != null)
                    {
                        this._Branch_BranchId.Entity = null;
                        previousValue.Warehouse_BranchId.Remove(this);
                    }
                    this._Branch_BranchId.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.Warehouse_BranchId.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch_BranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress_SubAddressId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanySubAddress_Warehouse", Storage="_CompanySubAddress_SubAddressId", ThisKey="SubAddressId", OtherKey="Id", IsForeignKey=true)]
        public CompanySubAddress CompanySubAddress_SubAddressId
        {
            get
            {
                return this._CompanySubAddress_SubAddressId.Entity;
            }
            set
            {
                CompanySubAddress previousValue = this._CompanySubAddress_SubAddressId.Entity;
                if ((previousValue != value) || (this._CompanySubAddress_SubAddressId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanySubAddress_SubAddressId");
                    if (previousValue != null)
                    {
                        this._CompanySubAddress_SubAddressId.Entity = null;
                        previousValue.Warehouse_SubAddressId.Remove(this);
                    }
                    this._CompanySubAddress_SubAddressId.Entity = value;
                    if (value != null)
                    {
                        this._SubAddressId = value.Id;
                        value.Warehouse_SubAddressId.Add(this);
                    }
                    else
                    {
                        this._SubAddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("CompanySubAddress_SubAddressId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_ClaimWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch", Storage="_Branch_ClaimWarehouseId", ThisKey="Id", OtherKey="ClaimWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_ClaimWarehouseId
        {
            get
            {
                return this._Branch_ClaimWarehouseId;
            }
            set
            {
                this._Branch_ClaimWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_CustownWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch1", Storage="_Branch_CustownWarehouseId", ThisKey="Id", OtherKey="CustownWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_CustownWarehouseId
        {
            get
            {
                return this._Branch_CustownWarehouseId;
            }
            set
            {
                this._Branch_CustownWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_FinishedWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch2", Storage="_Branch_FinishedWarehouseId", ThisKey="Id", OtherKey="FinishedWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_FinishedWarehouseId
        {
            get
            {
                return this._Branch_FinishedWarehouseId;
            }
            set
            {
                this._Branch_FinishedWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_OffcutWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch3", Storage="_Branch_OffcutWarehouseId", ThisKey="Id", OtherKey="OffcutWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_OffcutWarehouseId
        {
            get
            {
                return this._Branch_OffcutWarehouseId;
            }
            set
            {
                this._Branch_OffcutWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_QuarantineWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch4", Storage="_Branch_QuarantineWarehouseId", ThisKey="Id", OtherKey="QuarantineWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_QuarantineWarehouseId
        {
            get
            {
                return this._Branch_QuarantineWarehouseId;
            }
            set
            {
                this._Branch_QuarantineWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_ScrapWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch5", Storage="_Branch_ScrapWarehouseId", ThisKey="Id", OtherKey="ScrapWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_ScrapWarehouseId
        {
            get
            {
                return this._Branch_ScrapWarehouseId;
            }
            set
            {
                this._Branch_ScrapWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_StockWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch6", Storage="_Branch_StockWarehouseId", ThisKey="Id", OtherKey="StockWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_StockWarehouseId
        {
            get
            {
                return this._Branch_StockWarehouseId;
            }
            set
            {
                this._Branch_StockWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_WipWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_Branch7", Storage="_Branch_WipWarehouseId", ThisKey="Id", OtherKey="WipWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_WipWarehouseId
        {
            get
            {
                return this._Branch_WipWarehouseId;
            }
            set
            {
                this._Branch_WipWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_SalesItem", Storage="_SalesItem", ThisKey="Id", OtherKey="DeliveryWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<SalesItem> SalesItem
        {
            get
            {
                return this._SalesItem;
            }
            set
            {
                this._SalesItem.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress_ConsignmentWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_CompanySubAddress", Storage="_CompanySubAddress_ConsignmentWarehouseId", ThisKey="Id", OtherKey="ConsignmentWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<CompanySubAddress> CompanySubAddress_ConsignmentWarehouseId
        {
            get
            {
                return this._CompanySubAddress_ConsignmentWarehouseId;
            }
            set
            {
                this._CompanySubAddress_ConsignmentWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_DeliveryWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_SalesHeader", Storage="_SalesHeader_DeliveryWarehouseId", ThisKey="Id", OtherKey="DeliveryWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_DeliveryWarehouseId
        {
            get
            {
                return this._SalesHeader_DeliveryWarehouseId;
            }
            set
            {
                this._SalesHeader_DeliveryWarehouseId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader_TransferToWarehouseId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Warehouse_SalesHeader1", Storage="_SalesHeader_TransferToWarehouseId", ThisKey="Id", OtherKey="TransferToWarehouseId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader_TransferToWarehouseId
        {
            get
            {
                return this._SalesHeader_TransferToWarehouseId;
            }
            set
            {
                this._SalesHeader_TransferToWarehouseId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Branch_ClaimWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_ClaimWarehouseId");
            entity.Warehouse_ClaimWarehouseId = this;
        }
    
        private void detach_Branch_ClaimWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_ClaimWarehouseId");
            entity.Warehouse_ClaimWarehouseId = null;
        }

        private void attach_Branch_CustownWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_CustownWarehouseId");
            entity.Warehouse_CustownWarehouseId = this;
        }
    
        private void detach_Branch_CustownWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_CustownWarehouseId");
            entity.Warehouse_CustownWarehouseId = null;
        }

        private void attach_Branch_FinishedWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_FinishedWarehouseId");
            entity.Warehouse_FinishedWarehouseId = this;
        }
    
        private void detach_Branch_FinishedWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_FinishedWarehouseId");
            entity.Warehouse_FinishedWarehouseId = null;
        }

        private void attach_Branch_OffcutWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_OffcutWarehouseId");
            entity.Warehouse_OffcutWarehouseId = this;
        }
    
        private void detach_Branch_OffcutWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_OffcutWarehouseId");
            entity.Warehouse_OffcutWarehouseId = null;
        }

        private void attach_Branch_QuarantineWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_QuarantineWarehouseId");
            entity.Warehouse_QuarantineWarehouseId = this;
        }
    
        private void detach_Branch_QuarantineWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_QuarantineWarehouseId");
            entity.Warehouse_QuarantineWarehouseId = null;
        }

        private void attach_Branch_ScrapWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_ScrapWarehouseId");
            entity.Warehouse_ScrapWarehouseId = this;
        }
    
        private void detach_Branch_ScrapWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_ScrapWarehouseId");
            entity.Warehouse_ScrapWarehouseId = null;
        }

        private void attach_Branch_StockWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_StockWarehouseId");
            entity.Warehouse_StockWarehouseId = this;
        }
    
        private void detach_Branch_StockWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_StockWarehouseId");
            entity.Warehouse_StockWarehouseId = null;
        }

        private void attach_Branch_WipWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_WipWarehouseId");
            entity.Warehouse_WipWarehouseId = this;
        }
    
        private void detach_Branch_WipWarehouseId(Branch entity)
        {
            this.SendPropertyChanging("Branch_WipWarehouseId");
            entity.Warehouse_WipWarehouseId = null;
        }

        private void attach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.Warehouse = this;
        }
    
        private void detach_SalesItem(SalesItem entity)
        {
            this.SendPropertyChanging("SalesItem");
            entity.Warehouse = null;
        }

        private void attach_CompanySubAddress_ConsignmentWarehouseId(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress_ConsignmentWarehouseId");
            entity.Warehouse_ConsignmentWarehouseId = this;
        }
    
        private void detach_CompanySubAddress_ConsignmentWarehouseId(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress_ConsignmentWarehouseId");
            entity.Warehouse_ConsignmentWarehouseId = null;
        }

        private void attach_SalesHeader_DeliveryWarehouseId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_DeliveryWarehouseId");
            entity.Warehouse_DeliveryWarehouseId = this;
        }
    
        private void detach_SalesHeader_DeliveryWarehouseId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_DeliveryWarehouseId");
            entity.Warehouse_DeliveryWarehouseId = null;
        }

        private void attach_SalesHeader_TransferToWarehouseId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_TransferToWarehouseId");
            entity.Warehouse_TransferToWarehouseId = this;
        }
    
        private void detach_SalesHeader_TransferToWarehouseId(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader_TransferToWarehouseId");
            entity.Warehouse_TransferToWarehouseId = null;
        }
    }

}
