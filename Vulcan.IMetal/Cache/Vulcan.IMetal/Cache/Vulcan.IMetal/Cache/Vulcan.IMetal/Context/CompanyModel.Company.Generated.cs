//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/8/2019 10:47:06 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.Company in the schema.
    /// </summary>
    [Table(Name = @"public.companies")]
    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private string _Code;

        private int? _BranchId;

        private int? _PersonnelId;

        private int? _RelationshipId;

        private int? _StatusId;

        private string _Name;

        private int? _TerritoryId;

        private string _Telephone;

        private string _FastDial;

        private string _Fax;

        private string _Email;

        private string _WebAddress;

        private int? _ContactFrequency;

        private bool? _AcceptMail;

        private bool? _AcceptEmail;

        private bool? _AcceptFax;

        private bool? _AcceptCall;

        private bool? _AcceptVisit;

        private string _GeneralNote;

        private string _ProductsNote;

        private string _CompetitionNote;

        private string _Category;

        private string _AccessMethod;

        private string _Password;

        private int? _ParentCompanyId;

        private System.DateTime? _LastContactDate;

        private string _Idxfti;

        private int? _TermsId;

        private string _AccountsNote;

        private int? _AddressId;

        private string _ShortName;

        private string _Rank;

        private int? _CurrencyId;

        private int? _VatType1Id;

        private int? _VatType2Id;

        private int? _VatType3Id;

        private int? _VatType4Id;

        private int? _TypeId;

        private int? _SalesGroupId;

        private int? _CompanyTotalsId;

        private int? _CompanyCreditRulesId;

        private bool? _ShowPrice = true;

        private bool? _RequireSalesAcknowledgement = false;

        private int? _CertificationsId;

        private int? _InvoiceCompanyId;

        private string _PartnerCode;

        private string _CreditComment;

        private string _RegistrationNumber;

        private bool? _RequireProforma = false;

        private int? _CrmAccountId;

        private bool? _StatementRequired = true;

        private System.DateTime? _SynchronisationDate;

        private System.DateTime? _DateAppointed;

        private int? _DocumentDeliveryTypeId;

        private int? _DefaultContactId;

        private int? _DefaultBuyerId;

        private string _LedgerSegmentCode;

        private int? _SupplierRollingDay;

        private int? _DespatchNoteItemRuleId = 1;

        private string _TaxGroup;

        private string _TaxAuthority1;

        private string _TaxAuthority2;

        private string _TaxAuthority3;

        private string _TaxAuthority4;

        private string _TaxAuthority5;

        private int? _TaxClass1;

        private int? _TaxClass2;

        private int? _TaxClass3;

        private int? _TaxClass4;

        private int? _TaxClass5;

        private string _TaxRegistration1;

        private string _TaxRegistration2;

        private string _TaxRegistration3;

        private string _TaxRegistration4;

        private string _TaxRegistration5;

        private bool? _TaxExempt1 = false;

        private bool? _TaxExempt2 = false;

        private bool? _TaxExempt3 = false;

        private bool? _TaxExempt4 = false;

        private bool? _TaxExempt5 = false;

        private string _PopupNote;

        private int? _AnalysisCode1Id;

        private int? _AnalysisCode2Id;

        private int? _AnalysisCode3Id;

        private int? _AnalysisCode4Id;

        private decimal? _PackingWeightPercentage;

        private int? _DefaultNominalCode;

        private bool? _InvoicePacking = true;

        private string _StockItemPrefix;

        private int? _DefaultOrderClassificationId;

        private int? _InvoiceBaseCurrencyFlag = 0;

        private bool? _IntercompanyAccount = false;

        private bool? _PaymentHold = false;

        private string _TestCertificateSendMethod = @"D";

        private string _TestCertificateDestination;

        private string _TestCertificateHold = @"";

        private string _InvoiceWeightRoundingMode;

        private int? _DefaultItemClass1;

        private int? _DefaultItemClass2;

        private int? _DefaultItemClass3;

        private int? _DefaultItemClass4;

        private int? _DefaultItemClass5;

        private int? _AnalysisCode5Id;

        private int? _AnalysisCode6Id;

        private int? _OutworkBranchId;

        private bool? _CounterSalesDefault = false;

        private int? _DefaultTransportTypeId;
        #pragma warning restore 0649

        private EntityRef<ContactFrequencyCode> _ContactFrequencyCode;

        private EntityRef<Address> _Address;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode1Id;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode2Id;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode3Id;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode4Id;

        private EntityRef<Branch> _Branch_BranchId;

        private EntityRef<CompanyTotal> _CompanyTotal;

        private EntityRef<CurrencyCode> _CurrencyCode;

        private EntityRef<Contact> _Contact_DefaultContactId;

        private EntitySet<Company> _Company_InvoiceCompanyId1;

        private EntityRef<Company> _Company_InvoiceCompanyId;

        private EntitySet<Company> _Company_ParentCompanyId1;

        private EntityRef<Company> _Company_ParentCompanyId;

        private EntityRef<CompanyStatusCode> _CompanyStatusCode;

        private EntityRef<CompanyTypeCode> _CompanyTypeCode;

        private EntitySet<Contact> _Contact_CompanyId;

        private EntitySet<Branch> _Branch_CustomerId;

        private EntitySet<CompanyNoteTemplate> _CompanyNoteTemplate;

        private EntitySet<CompanySubAddress> _CompanySubAddress;

        private EntityRef<CertificationRequirement> _CertificationRequirement;

        private EntityRef<Term> _Term;

        private EntityRef<SalesGroup> _SalesGroup;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode5Id;

        private EntityRef<CustomerAnalysisCode> _CustomerAnalysisCode_AnalysisCode6Id;

        private EntityRef<Branch> _Branch_OutworkBranchId;

        private EntityRef<TransportTypeCode> _TransportTypeCode;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnBranchIdChanging(int? value);
        partial void OnBranchIdChanged();
        partial void OnPersonnelIdChanging(int? value);
        partial void OnPersonnelIdChanged();
        partial void OnRelationshipIdChanging(int? value);
        partial void OnRelationshipIdChanged();
        partial void OnStatusIdChanging(int? value);
        partial void OnStatusIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTerritoryIdChanging(int? value);
        partial void OnTerritoryIdChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFastDialChanging(string value);
        partial void OnFastDialChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnWebAddressChanging(string value);
        partial void OnWebAddressChanged();
        partial void OnContactFrequencyChanging(int? value);
        partial void OnContactFrequencyChanged();
        partial void OnAcceptMailChanging(bool? value);
        partial void OnAcceptMailChanged();
        partial void OnAcceptEmailChanging(bool? value);
        partial void OnAcceptEmailChanged();
        partial void OnAcceptFaxChanging(bool? value);
        partial void OnAcceptFaxChanged();
        partial void OnAcceptCallChanging(bool? value);
        partial void OnAcceptCallChanged();
        partial void OnAcceptVisitChanging(bool? value);
        partial void OnAcceptVisitChanged();
        partial void OnGeneralNoteChanging(string value);
        partial void OnGeneralNoteChanged();
        partial void OnProductsNoteChanging(string value);
        partial void OnProductsNoteChanged();
        partial void OnCompetitionNoteChanging(string value);
        partial void OnCompetitionNoteChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnAccessMethodChanging(string value);
        partial void OnAccessMethodChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnParentCompanyIdChanging(int? value);
        partial void OnParentCompanyIdChanged();
        partial void OnLastContactDateChanging(System.DateTime? value);
        partial void OnLastContactDateChanged();
        partial void OnIdxftiChanging(string value);
        partial void OnIdxftiChanged();
        partial void OnTermsIdChanging(int? value);
        partial void OnTermsIdChanged();
        partial void OnAccountsNoteChanging(string value);
        partial void OnAccountsNoteChanged();
        partial void OnAddressIdChanging(int? value);
        partial void OnAddressIdChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnRankChanging(string value);
        partial void OnRankChanged();
        partial void OnCurrencyIdChanging(int? value);
        partial void OnCurrencyIdChanged();
        partial void OnVatType1IdChanging(int? value);
        partial void OnVatType1IdChanged();
        partial void OnVatType2IdChanging(int? value);
        partial void OnVatType2IdChanged();
        partial void OnVatType3IdChanging(int? value);
        partial void OnVatType3IdChanged();
        partial void OnVatType4IdChanging(int? value);
        partial void OnVatType4IdChanged();
        partial void OnTypeIdChanging(int? value);
        partial void OnTypeIdChanged();
        partial void OnSalesGroupIdChanging(int? value);
        partial void OnSalesGroupIdChanged();
        partial void OnCompanyTotalsIdChanging(int? value);
        partial void OnCompanyTotalsIdChanged();
        partial void OnCompanyCreditRulesIdChanging(int? value);
        partial void OnCompanyCreditRulesIdChanged();
        partial void OnShowPriceChanging(bool? value);
        partial void OnShowPriceChanged();
        partial void OnRequireSalesAcknowledgementChanging(bool? value);
        partial void OnRequireSalesAcknowledgementChanged();
        partial void OnCertificationsIdChanging(int? value);
        partial void OnCertificationsIdChanged();
        partial void OnInvoiceCompanyIdChanging(int? value);
        partial void OnInvoiceCompanyIdChanged();
        partial void OnPartnerCodeChanging(string value);
        partial void OnPartnerCodeChanged();
        partial void OnCreditCommentChanging(string value);
        partial void OnCreditCommentChanged();
        partial void OnRegistrationNumberChanging(string value);
        partial void OnRegistrationNumberChanged();
        partial void OnRequireProformaChanging(bool? value);
        partial void OnRequireProformaChanged();
        partial void OnCrmAccountIdChanging(int? value);
        partial void OnCrmAccountIdChanged();
        partial void OnStatementRequiredChanging(bool? value);
        partial void OnStatementRequiredChanged();
        partial void OnSynchronisationDateChanging(System.DateTime? value);
        partial void OnSynchronisationDateChanged();
        partial void OnDateAppointedChanging(System.DateTime? value);
        partial void OnDateAppointedChanged();
        partial void OnDocumentDeliveryTypeIdChanging(int? value);
        partial void OnDocumentDeliveryTypeIdChanged();
        partial void OnDefaultContactIdChanging(int? value);
        partial void OnDefaultContactIdChanged();
        partial void OnDefaultBuyerIdChanging(int? value);
        partial void OnDefaultBuyerIdChanged();
        partial void OnLedgerSegmentCodeChanging(string value);
        partial void OnLedgerSegmentCodeChanged();
        partial void OnSupplierRollingDayChanging(int? value);
        partial void OnSupplierRollingDayChanged();
        partial void OnDespatchNoteItemRuleIdChanging(int? value);
        partial void OnDespatchNoteItemRuleIdChanged();
        partial void OnTaxGroupChanging(string value);
        partial void OnTaxGroupChanged();
        partial void OnTaxAuthority1Changing(string value);
        partial void OnTaxAuthority1Changed();
        partial void OnTaxAuthority2Changing(string value);
        partial void OnTaxAuthority2Changed();
        partial void OnTaxAuthority3Changing(string value);
        partial void OnTaxAuthority3Changed();
        partial void OnTaxAuthority4Changing(string value);
        partial void OnTaxAuthority4Changed();
        partial void OnTaxAuthority5Changing(string value);
        partial void OnTaxAuthority5Changed();
        partial void OnTaxClass1Changing(int? value);
        partial void OnTaxClass1Changed();
        partial void OnTaxClass2Changing(int? value);
        partial void OnTaxClass2Changed();
        partial void OnTaxClass3Changing(int? value);
        partial void OnTaxClass3Changed();
        partial void OnTaxClass4Changing(int? value);
        partial void OnTaxClass4Changed();
        partial void OnTaxClass5Changing(int? value);
        partial void OnTaxClass5Changed();
        partial void OnTaxRegistration1Changing(string value);
        partial void OnTaxRegistration1Changed();
        partial void OnTaxRegistration2Changing(string value);
        partial void OnTaxRegistration2Changed();
        partial void OnTaxRegistration3Changing(string value);
        partial void OnTaxRegistration3Changed();
        partial void OnTaxRegistration4Changing(string value);
        partial void OnTaxRegistration4Changed();
        partial void OnTaxRegistration5Changing(string value);
        partial void OnTaxRegistration5Changed();
        partial void OnTaxExempt1Changing(bool? value);
        partial void OnTaxExempt1Changed();
        partial void OnTaxExempt2Changing(bool? value);
        partial void OnTaxExempt2Changed();
        partial void OnTaxExempt3Changing(bool? value);
        partial void OnTaxExempt3Changed();
        partial void OnTaxExempt4Changing(bool? value);
        partial void OnTaxExempt4Changed();
        partial void OnTaxExempt5Changing(bool? value);
        partial void OnTaxExempt5Changed();
        partial void OnPopupNoteChanging(string value);
        partial void OnPopupNoteChanged();
        partial void OnAnalysisCode1IdChanging(int? value);
        partial void OnAnalysisCode1IdChanged();
        partial void OnAnalysisCode2IdChanging(int? value);
        partial void OnAnalysisCode2IdChanged();
        partial void OnAnalysisCode3IdChanging(int? value);
        partial void OnAnalysisCode3IdChanged();
        partial void OnAnalysisCode4IdChanging(int? value);
        partial void OnAnalysisCode4IdChanged();
        partial void OnPackingWeightPercentageChanging(decimal? value);
        partial void OnPackingWeightPercentageChanged();
        partial void OnDefaultNominalCodeChanging(int? value);
        partial void OnDefaultNominalCodeChanged();
        partial void OnInvoicePackingChanging(bool? value);
        partial void OnInvoicePackingChanged();
        partial void OnStockItemPrefixChanging(string value);
        partial void OnStockItemPrefixChanged();
        partial void OnDefaultOrderClassificationIdChanging(int? value);
        partial void OnDefaultOrderClassificationIdChanged();
        partial void OnInvoiceBaseCurrencyFlagChanging(int? value);
        partial void OnInvoiceBaseCurrencyFlagChanged();
        partial void OnIntercompanyAccountChanging(bool? value);
        partial void OnIntercompanyAccountChanged();
        partial void OnPaymentHoldChanging(bool? value);
        partial void OnPaymentHoldChanged();
        partial void OnTestCertificateSendMethodChanging(string value);
        partial void OnTestCertificateSendMethodChanged();
        partial void OnTestCertificateDestinationChanging(string value);
        partial void OnTestCertificateDestinationChanged();
        partial void OnTestCertificateHoldChanging(string value);
        partial void OnTestCertificateHoldChanged();
        partial void OnInvoiceWeightRoundingModeChanging(string value);
        partial void OnInvoiceWeightRoundingModeChanged();
        partial void OnDefaultItemClass1Changing(int? value);
        partial void OnDefaultItemClass1Changed();
        partial void OnDefaultItemClass2Changing(int? value);
        partial void OnDefaultItemClass2Changed();
        partial void OnDefaultItemClass3Changing(int? value);
        partial void OnDefaultItemClass3Changed();
        partial void OnDefaultItemClass4Changing(int? value);
        partial void OnDefaultItemClass4Changed();
        partial void OnDefaultItemClass5Changing(int? value);
        partial void OnDefaultItemClass5Changed();
        partial void OnAnalysisCode5IdChanging(int? value);
        partial void OnAnalysisCode5IdChanged();
        partial void OnAnalysisCode6IdChanging(int? value);
        partial void OnAnalysisCode6IdChanged();
        partial void OnOutworkBranchIdChanging(int? value);
        partial void OnOutworkBranchIdChanged();
        partial void OnCounterSalesDefaultChanging(bool? value);
        partial void OnCounterSalesDefaultChanged();
        partial void OnDefaultTransportTypeIdChanging(int? value);
        partial void OnDefaultTransportTypeIdChanged();
        #endregion

        public Company()
        {
            this._ContactFrequencyCode  = default(EntityRef<ContactFrequencyCode>);
            this._Address  = default(EntityRef<Address>);
            this._CustomerAnalysisCode_AnalysisCode1Id  = default(EntityRef<CustomerAnalysisCode>);
            this._CustomerAnalysisCode_AnalysisCode2Id  = default(EntityRef<CustomerAnalysisCode>);
            this._CustomerAnalysisCode_AnalysisCode3Id  = default(EntityRef<CustomerAnalysisCode>);
            this._CustomerAnalysisCode_AnalysisCode4Id  = default(EntityRef<CustomerAnalysisCode>);
            this._Branch_BranchId  = default(EntityRef<Branch>);
            this._CompanyTotal  = default(EntityRef<CompanyTotal>);
            this._CurrencyCode  = default(EntityRef<CurrencyCode>);
            this._Contact_DefaultContactId  = default(EntityRef<Contact>);
            this._Company_InvoiceCompanyId1 = new EntitySet<Company>(new Action<Company>(this.attach_Company_InvoiceCompanyId1), new Action<Company>(this.detach_Company_InvoiceCompanyId1));
            this._Company_InvoiceCompanyId  = default(EntityRef<Company>);
            this._Company_ParentCompanyId1 = new EntitySet<Company>(new Action<Company>(this.attach_Company_ParentCompanyId1), new Action<Company>(this.detach_Company_ParentCompanyId1));
            this._Company_ParentCompanyId  = default(EntityRef<Company>);
            this._CompanyStatusCode  = default(EntityRef<CompanyStatusCode>);
            this._CompanyTypeCode  = default(EntityRef<CompanyTypeCode>);
            this._Contact_CompanyId = new EntitySet<Contact>(new Action<Contact>(this.attach_Contact_CompanyId), new Action<Contact>(this.detach_Contact_CompanyId));
            this._Branch_CustomerId = new EntitySet<Branch>(new Action<Branch>(this.attach_Branch_CustomerId), new Action<Branch>(this.detach_Branch_CustomerId));
            this._CompanyNoteTemplate = new EntitySet<CompanyNoteTemplate>(new Action<CompanyNoteTemplate>(this.attach_CompanyNoteTemplate), new Action<CompanyNoteTemplate>(this.detach_CompanyNoteTemplate));
            this._CompanySubAddress = new EntitySet<CompanySubAddress>(new Action<CompanySubAddress>(this.attach_CompanySubAddress), new Action<CompanySubAddress>(this.detach_CompanySubAddress));
            this._CertificationRequirement  = default(EntityRef<CertificationRequirement>);
            this._Term  = default(EntityRef<Term>);
            this._SalesGroup  = default(EntityRef<SalesGroup>);
            this._CustomerAnalysisCode_AnalysisCode5Id  = default(EntityRef<CustomerAnalysisCode>);
            this._CustomerAnalysisCode_AnalysisCode6Id  = default(EntityRef<CustomerAnalysisCode>);
            this._Branch_OutworkBranchId  = default(EntityRef<Branch>);
            this._TransportTypeCode  = default(EntityRef<TransportTypeCode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch_BranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonnelId in the schema.
        /// </summary>
        [Column(Name = @"personnel_id", Storage = "_PersonnelId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? PersonnelId
        {
            get
            {
                return this._PersonnelId;
            }
            set
            {
                if (this._PersonnelId != value)
                {
                    this.OnPersonnelIdChanging(value);
                    this.SendPropertyChanging("PersonnelId");
                    this._PersonnelId = value;
                    this.SendPropertyChanged("PersonnelId");
                    this.OnPersonnelIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelationshipId in the schema.
        /// </summary>
        [Column(Name = @"relationship_id", Storage = "_RelationshipId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? RelationshipId
        {
            get
            {
                return this._RelationshipId;
            }
            set
            {
                if (this._RelationshipId != value)
                {
                    this.OnRelationshipIdChanging(value);
                    this.SendPropertyChanging("RelationshipId");
                    this._RelationshipId = value;
                    this.SendPropertyChanged("RelationshipId");
                    this.OnRelationshipIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._CompanyStatusCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryId in the schema.
        /// </summary>
        [Column(Name = @"territory_id", Storage = "_TerritoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TerritoryId
        {
            get
            {
                return this._TerritoryId;
            }
            set
            {
                if (this._TerritoryId != value)
                {
                    this.OnTerritoryIdChanging(value);
                    this.SendPropertyChanging("TerritoryId");
                    this._TerritoryId = value;
                    this.SendPropertyChanged("TerritoryId");
                    this.OnTerritoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FastDial in the schema.
        /// </summary>
        [Column(Name = @"fast_dial", Storage = "_FastDial", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string FastDial
        {
            get
            {
                return this._FastDial;
            }
            set
            {
                if (this._FastDial != value)
                {
                    this.OnFastDialChanging(value);
                    this.SendPropertyChanging("FastDial");
                    this._FastDial = value;
                    this.SendPropertyChanged("FastDial");
                    this.OnFastDialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WebAddress in the schema.
        /// </summary>
        [Column(Name = @"web_address", Storage = "_WebAddress", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string WebAddress
        {
            get
            {
                return this._WebAddress;
            }
            set
            {
                if (this._WebAddress != value)
                {
                    this.OnWebAddressChanging(value);
                    this.SendPropertyChanging("WebAddress");
                    this._WebAddress = value;
                    this.SendPropertyChanged("WebAddress");
                    this.OnWebAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactFrequency in the schema.
        /// </summary>
        [Column(Name = @"contact_frequency", Storage = "_ContactFrequency", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ContactFrequency
        {
            get
            {
                return this._ContactFrequency;
            }
            set
            {
                if (this._ContactFrequency != value)
                {
                    if (this._ContactFrequencyCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactFrequencyChanging(value);
                    this.SendPropertyChanging("ContactFrequency");
                    this._ContactFrequency = value;
                    this.SendPropertyChanged("ContactFrequency");
                    this.OnContactFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptMail in the schema.
        /// </summary>
        [Column(Name = @"accept_mail", Storage = "_AcceptMail", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? AcceptMail
        {
            get
            {
                return this._AcceptMail;
            }
            set
            {
                if (this._AcceptMail != value)
                {
                    this.OnAcceptMailChanging(value);
                    this.SendPropertyChanging("AcceptMail");
                    this._AcceptMail = value;
                    this.SendPropertyChanged("AcceptMail");
                    this.OnAcceptMailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptEmail in the schema.
        /// </summary>
        [Column(Name = @"accept_email", Storage = "_AcceptEmail", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? AcceptEmail
        {
            get
            {
                return this._AcceptEmail;
            }
            set
            {
                if (this._AcceptEmail != value)
                {
                    this.OnAcceptEmailChanging(value);
                    this.SendPropertyChanging("AcceptEmail");
                    this._AcceptEmail = value;
                    this.SendPropertyChanged("AcceptEmail");
                    this.OnAcceptEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptFax in the schema.
        /// </summary>
        [Column(Name = @"accept_fax", Storage = "_AcceptFax", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? AcceptFax
        {
            get
            {
                return this._AcceptFax;
            }
            set
            {
                if (this._AcceptFax != value)
                {
                    this.OnAcceptFaxChanging(value);
                    this.SendPropertyChanging("AcceptFax");
                    this._AcceptFax = value;
                    this.SendPropertyChanged("AcceptFax");
                    this.OnAcceptFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptCall in the schema.
        /// </summary>
        [Column(Name = @"accept_calls", Storage = "_AcceptCall", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? AcceptCall
        {
            get
            {
                return this._AcceptCall;
            }
            set
            {
                if (this._AcceptCall != value)
                {
                    this.OnAcceptCallChanging(value);
                    this.SendPropertyChanging("AcceptCall");
                    this._AcceptCall = value;
                    this.SendPropertyChanged("AcceptCall");
                    this.OnAcceptCallChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptVisit in the schema.
        /// </summary>
        [Column(Name = @"accept_visits", Storage = "_AcceptVisit", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? AcceptVisit
        {
            get
            {
                return this._AcceptVisit;
            }
            set
            {
                if (this._AcceptVisit != value)
                {
                    this.OnAcceptVisitChanging(value);
                    this.SendPropertyChanging("AcceptVisit");
                    this._AcceptVisit = value;
                    this.SendPropertyChanged("AcceptVisit");
                    this.OnAcceptVisitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GeneralNote in the schema.
        /// </summary>
        [Column(Name = @"general_note", Storage = "_GeneralNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GeneralNote
        {
            get
            {
                return this._GeneralNote;
            }
            set
            {
                if (this._GeneralNote != value)
                {
                    this.OnGeneralNoteChanging(value);
                    this.SendPropertyChanging("GeneralNote");
                    this._GeneralNote = value;
                    this.SendPropertyChanged("GeneralNote");
                    this.OnGeneralNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductsNote in the schema.
        /// </summary>
        [Column(Name = @"products_note", Storage = "_ProductsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProductsNote
        {
            get
            {
                return this._ProductsNote;
            }
            set
            {
                if (this._ProductsNote != value)
                {
                    this.OnProductsNoteChanging(value);
                    this.SendPropertyChanging("ProductsNote");
                    this._ProductsNote = value;
                    this.SendPropertyChanged("ProductsNote");
                    this.OnProductsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompetitionNote in the schema.
        /// </summary>
        [Column(Name = @"competition_note", Storage = "_CompetitionNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CompetitionNote
        {
            get
            {
                return this._CompetitionNote;
            }
            set
            {
                if (this._CompetitionNote != value)
                {
                    this.OnCompetitionNoteChanging(value);
                    this.SendPropertyChanging("CompetitionNote");
                    this._CompetitionNote = value;
                    this.SendPropertyChanged("CompetitionNote");
                    this.OnCompetitionNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Name = @"categories", Storage = "_Category", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging("Category");
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccessMethod in the schema.
        /// </summary>
        [Column(Name = @"access_method", Storage = "_AccessMethod", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string AccessMethod
        {
            get
            {
                return this._AccessMethod;
            }
            set
            {
                if (this._AccessMethod != value)
                {
                    this.OnAccessMethodChanging(value);
                    this.SendPropertyChanging("AccessMethod");
                    this._AccessMethod = value;
                    this.SendPropertyChanged("AccessMethod");
                    this.OnAccessMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"""password""", Storage = "_Password", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentCompanyId in the schema.
        /// </summary>
        [Column(Name = @"parent_company_id", Storage = "_ParentCompanyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ParentCompanyId
        {
            get
            {
                return this._ParentCompanyId;
            }
            set
            {
                if (this._ParentCompanyId != value)
                {
                    if (this._Company_ParentCompanyId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCompanyIdChanging(value);
                    this.SendPropertyChanging("ParentCompanyId");
                    this._ParentCompanyId = value;
                    this.SendPropertyChanged("ParentCompanyId");
                    this.OnParentCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastContactDate in the schema.
        /// </summary>
        [Column(Name = @"last_contact_date", Storage = "_LastContactDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? LastContactDate
        {
            get
            {
                return this._LastContactDate;
            }
            set
            {
                if (this._LastContactDate != value)
                {
                    this.OnLastContactDateChanging(value);
                    this.SendPropertyChanging("LastContactDate");
                    this._LastContactDate = value;
                    this.SendPropertyChanged("LastContactDate");
                    this.OnLastContactDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Idxfti in the schema.
        /// </summary>
        [Column(Name = @"idxfti", Storage = "_Idxfti", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Idxfti
        {
            get
            {
                return this._Idxfti;
            }
            set
            {
                if (this._Idxfti != value)
                {
                    this.OnIdxftiChanging(value);
                    this.SendPropertyChanging("Idxfti");
                    this._Idxfti = value;
                    this.SendPropertyChanged("Idxfti");
                    this.OnIdxftiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermsId in the schema.
        /// </summary>
        [Column(Name = @"terms_id", Storage = "_TermsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TermsId
        {
            get
            {
                return this._TermsId;
            }
            set
            {
                if (this._TermsId != value)
                {
                    if (this._Term.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTermsIdChanging(value);
                    this.SendPropertyChanging("TermsId");
                    this._TermsId = value;
                    this.SendPropertyChanged("TermsId");
                    this.OnTermsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountsNote in the schema.
        /// </summary>
        [Column(Name = @"accounts_note", Storage = "_AccountsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string AccountsNote
        {
            get
            {
                return this._AccountsNote;
            }
            set
            {
                if (this._AccountsNote != value)
                {
                    this.OnAccountsNoteChanging(value);
                    this.SendPropertyChanging("AccountsNote");
                    this._AccountsNote = value;
                    this.SendPropertyChanged("AccountsNote");
                    this.OnAccountsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    if (this._Address.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShortName in the schema.
        /// </summary>
        [Column(Name = @"short_name", Storage = "_ShortName", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ShortName
        {
            get
            {
                return this._ShortName;
            }
            set
            {
                if (this._ShortName != value)
                {
                    this.OnShortNameChanging(value);
                    this.SendPropertyChanging("ShortName");
                    this._ShortName = value;
                    this.SendPropertyChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rank in the schema.
        /// </summary>
        [Column(Name = @"rank", Storage = "_Rank", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string Rank
        {
            get
            {
                return this._Rank;
            }
            set
            {
                if (this._Rank != value)
                {
                    this.OnRankChanging(value);
                    this.SendPropertyChanging("Rank");
                    this._Rank = value;
                    this.SendPropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyId in the schema.
        /// </summary>
        [Column(Name = @"currency_id", Storage = "_CurrencyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CurrencyId
        {
            get
            {
                return this._CurrencyId;
            }
            set
            {
                if (this._CurrencyId != value)
                {
                    if (this._CurrencyCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencyIdChanging(value);
                    this.SendPropertyChanging("CurrencyId");
                    this._CurrencyId = value;
                    this.SendPropertyChanged("CurrencyId");
                    this.OnCurrencyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType1Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type1_id", Storage = "_VatType1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType1Id
        {
            get
            {
                return this._VatType1Id;
            }
            set
            {
                if (this._VatType1Id != value)
                {
                    this.OnVatType1IdChanging(value);
                    this.SendPropertyChanging("VatType1Id");
                    this._VatType1Id = value;
                    this.SendPropertyChanged("VatType1Id");
                    this.OnVatType1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType2Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type2_id", Storage = "_VatType2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType2Id
        {
            get
            {
                return this._VatType2Id;
            }
            set
            {
                if (this._VatType2Id != value)
                {
                    this.OnVatType2IdChanging(value);
                    this.SendPropertyChanging("VatType2Id");
                    this._VatType2Id = value;
                    this.SendPropertyChanged("VatType2Id");
                    this.OnVatType2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType3Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type3_id", Storage = "_VatType3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType3Id
        {
            get
            {
                return this._VatType3Id;
            }
            set
            {
                if (this._VatType3Id != value)
                {
                    this.OnVatType3IdChanging(value);
                    this.SendPropertyChanging("VatType3Id");
                    this._VatType3Id = value;
                    this.SendPropertyChanged("VatType3Id");
                    this.OnVatType3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatType4Id in the schema.
        /// </summary>
        [Column(Name = @"vat_type4_id", Storage = "_VatType4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? VatType4Id
        {
            get
            {
                return this._VatType4Id;
            }
            set
            {
                if (this._VatType4Id != value)
                {
                    this.OnVatType4IdChanging(value);
                    this.SendPropertyChanging("VatType4Id");
                    this._VatType4Id = value;
                    this.SendPropertyChanged("VatType4Id");
                    this.OnVatType4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"type_id", Storage = "_TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._CompanyTypeCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroupId in the schema.
        /// </summary>
        [Column(Name = @"sales_group_id", Storage = "_SalesGroupId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SalesGroupId
        {
            get
            {
                return this._SalesGroupId;
            }
            set
            {
                if (this._SalesGroupId != value)
                {
                    if (this._SalesGroup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesGroupIdChanging(value);
                    this.SendPropertyChanging("SalesGroupId");
                    this._SalesGroupId = value;
                    this.SendPropertyChanged("SalesGroupId");
                    this.OnSalesGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyTotalsId in the schema.
        /// </summary>
        [Column(Name = @"company_totals_id", Storage = "_CompanyTotalsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CompanyTotalsId
        {
            get
            {
                return this._CompanyTotalsId;
            }
            set
            {
                if (this._CompanyTotalsId != value)
                {
                    if (this._CompanyTotal.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyTotalsIdChanging(value);
                    this.SendPropertyChanging("CompanyTotalsId");
                    this._CompanyTotalsId = value;
                    this.SendPropertyChanged("CompanyTotalsId");
                    this.OnCompanyTotalsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCreditRulesId in the schema.
        /// </summary>
        [Column(Name = @"company_credit_rules_id", Storage = "_CompanyCreditRulesId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CompanyCreditRulesId
        {
            get
            {
                return this._CompanyCreditRulesId;
            }
            set
            {
                if (this._CompanyCreditRulesId != value)
                {
                    this.OnCompanyCreditRulesIdChanging(value);
                    this.SendPropertyChanging("CompanyCreditRulesId");
                    this._CompanyCreditRulesId = value;
                    this.SendPropertyChanged("CompanyCreditRulesId");
                    this.OnCompanyCreditRulesIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShowPrice in the schema.
        /// </summary>
        [Column(Name = @"show_prices", Storage = "_ShowPrice", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? ShowPrice
        {
            get
            {
                return this._ShowPrice;
            }
            set
            {
                if (this._ShowPrice != value)
                {
                    this.OnShowPriceChanging(value);
                    this.SendPropertyChanging("ShowPrice");
                    this._ShowPrice = value;
                    this.SendPropertyChanged("ShowPrice");
                    this.OnShowPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequireSalesAcknowledgement in the schema.
        /// </summary>
        [Column(Name = @"require_sales_acknowledgement", Storage = "_RequireSalesAcknowledgement", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? RequireSalesAcknowledgement
        {
            get
            {
                return this._RequireSalesAcknowledgement;
            }
            set
            {
                if (this._RequireSalesAcknowledgement != value)
                {
                    this.OnRequireSalesAcknowledgementChanging(value);
                    this.SendPropertyChanging("RequireSalesAcknowledgement");
                    this._RequireSalesAcknowledgement = value;
                    this.SendPropertyChanged("RequireSalesAcknowledgement");
                    this.OnRequireSalesAcknowledgementChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificationsId in the schema.
        /// </summary>
        [Column(Name = @"certifications_id", Storage = "_CertificationsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CertificationsId
        {
            get
            {
                return this._CertificationsId;
            }
            set
            {
                if (this._CertificationsId != value)
                {
                    if (this._CertificationRequirement.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCertificationsIdChanging(value);
                    this.SendPropertyChanging("CertificationsId");
                    this._CertificationsId = value;
                    this.SendPropertyChanged("CertificationsId");
                    this.OnCertificationsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceCompanyId in the schema.
        /// </summary>
        [Column(Name = @"invoice_company_id", Storage = "_InvoiceCompanyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InvoiceCompanyId
        {
            get
            {
                return this._InvoiceCompanyId;
            }
            set
            {
                if (this._InvoiceCompanyId != value)
                {
                    if (this._Company_InvoiceCompanyId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnInvoiceCompanyIdChanging(value);
                    this.SendPropertyChanging("InvoiceCompanyId");
                    this._InvoiceCompanyId = value;
                    this.SendPropertyChanged("InvoiceCompanyId");
                    this.OnInvoiceCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartnerCode in the schema.
        /// </summary>
        [Column(Name = @"partner_code", Storage = "_PartnerCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PartnerCode
        {
            get
            {
                return this._PartnerCode;
            }
            set
            {
                if (this._PartnerCode != value)
                {
                    this.OnPartnerCodeChanging(value);
                    this.SendPropertyChanging("PartnerCode");
                    this._PartnerCode = value;
                    this.SendPropertyChanged("PartnerCode");
                    this.OnPartnerCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditComment in the schema.
        /// </summary>
        [Column(Name = @"credit_comments", Storage = "_CreditComment", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CreditComment
        {
            get
            {
                return this._CreditComment;
            }
            set
            {
                if (this._CreditComment != value)
                {
                    this.OnCreditCommentChanging(value);
                    this.SendPropertyChanging("CreditComment");
                    this._CreditComment = value;
                    this.SendPropertyChanged("CreditComment");
                    this.OnCreditCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegistrationNumber in the schema.
        /// </summary>
        [Column(Name = @"registration_number", Storage = "_RegistrationNumber", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string RegistrationNumber
        {
            get
            {
                return this._RegistrationNumber;
            }
            set
            {
                if (this._RegistrationNumber != value)
                {
                    this.OnRegistrationNumberChanging(value);
                    this.SendPropertyChanging("RegistrationNumber");
                    this._RegistrationNumber = value;
                    this.SendPropertyChanged("RegistrationNumber");
                    this.OnRegistrationNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequireProforma in the schema.
        /// </summary>
        [Column(Name = @"require_proforma", Storage = "_RequireProforma", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? RequireProforma
        {
            get
            {
                return this._RequireProforma;
            }
            set
            {
                if (this._RequireProforma != value)
                {
                    this.OnRequireProformaChanging(value);
                    this.SendPropertyChanging("RequireProforma");
                    this._RequireProforma = value;
                    this.SendPropertyChanged("RequireProforma");
                    this.OnRequireProformaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CrmAccountId in the schema.
        /// </summary>
        [Column(Name = @"crm_account_id", Storage = "_CrmAccountId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CrmAccountId
        {
            get
            {
                return this._CrmAccountId;
            }
            set
            {
                if (this._CrmAccountId != value)
                {
                    this.OnCrmAccountIdChanging(value);
                    this.SendPropertyChanging("CrmAccountId");
                    this._CrmAccountId = value;
                    this.SendPropertyChanged("CrmAccountId");
                    this.OnCrmAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatementRequired in the schema.
        /// </summary>
        [Column(Name = @"statement_required", Storage = "_StatementRequired", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? StatementRequired
        {
            get
            {
                return this._StatementRequired;
            }
            set
            {
                if (this._StatementRequired != value)
                {
                    this.OnStatementRequiredChanging(value);
                    this.SendPropertyChanging("StatementRequired");
                    this._StatementRequired = value;
                    this.SendPropertyChanged("StatementRequired");
                    this.OnStatementRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynchronisationDate in the schema.
        /// </summary>
        [Column(Name = @"synchronisation_date", Storage = "_SynchronisationDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? SynchronisationDate
        {
            get
            {
                return this._SynchronisationDate;
            }
            set
            {
                if (this._SynchronisationDate != value)
                {
                    this.OnSynchronisationDateChanging(value);
                    this.SendPropertyChanging("SynchronisationDate");
                    this._SynchronisationDate = value;
                    this.SendPropertyChanged("SynchronisationDate");
                    this.OnSynchronisationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateAppointed in the schema.
        /// </summary>
        [Column(Name = @"date_appointed", Storage = "_DateAppointed", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateAppointed
        {
            get
            {
                return this._DateAppointed;
            }
            set
            {
                if (this._DateAppointed != value)
                {
                    this.OnDateAppointedChanging(value);
                    this.SendPropertyChanging("DateAppointed");
                    this._DateAppointed = value;
                    this.SendPropertyChanged("DateAppointed");
                    this.OnDateAppointedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentDeliveryTypeId in the schema.
        /// </summary>
        [Column(Name = @"document_delivery_type_id", Storage = "_DocumentDeliveryTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DocumentDeliveryTypeId
        {
            get
            {
                return this._DocumentDeliveryTypeId;
            }
            set
            {
                if (this._DocumentDeliveryTypeId != value)
                {
                    this.OnDocumentDeliveryTypeIdChanging(value);
                    this.SendPropertyChanging("DocumentDeliveryTypeId");
                    this._DocumentDeliveryTypeId = value;
                    this.SendPropertyChanged("DocumentDeliveryTypeId");
                    this.OnDocumentDeliveryTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultContactId in the schema.
        /// </summary>
        [Column(Name = @"default_contact_id", Storage = "_DefaultContactId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultContactId
        {
            get
            {
                return this._DefaultContactId;
            }
            set
            {
                if (this._DefaultContactId != value)
                {
                    if (this._Contact_DefaultContactId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefaultContactIdChanging(value);
                    this.SendPropertyChanging("DefaultContactId");
                    this._DefaultContactId = value;
                    this.SendPropertyChanged("DefaultContactId");
                    this.OnDefaultContactIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultBuyerId in the schema.
        /// </summary>
        [Column(Name = @"default_buyer_id", Storage = "_DefaultBuyerId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultBuyerId
        {
            get
            {
                return this._DefaultBuyerId;
            }
            set
            {
                if (this._DefaultBuyerId != value)
                {
                    this.OnDefaultBuyerIdChanging(value);
                    this.SendPropertyChanging("DefaultBuyerId");
                    this._DefaultBuyerId = value;
                    this.SendPropertyChanged("DefaultBuyerId");
                    this.OnDefaultBuyerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LedgerSegmentCode in the schema.
        /// </summary>
        [Column(Name = @"ledger_segment_code", Storage = "_LedgerSegmentCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string LedgerSegmentCode
        {
            get
            {
                return this._LedgerSegmentCode;
            }
            set
            {
                if (this._LedgerSegmentCode != value)
                {
                    this.OnLedgerSegmentCodeChanging(value);
                    this.SendPropertyChanging("LedgerSegmentCode");
                    this._LedgerSegmentCode = value;
                    this.SendPropertyChanged("LedgerSegmentCode");
                    this.OnLedgerSegmentCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierRollingDay in the schema.
        /// </summary>
        [Column(Name = @"supplier_rolling_days", Storage = "_SupplierRollingDay", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? SupplierRollingDay
        {
            get
            {
                return this._SupplierRollingDay;
            }
            set
            {
                if (this._SupplierRollingDay != value)
                {
                    this.OnSupplierRollingDayChanging(value);
                    this.SendPropertyChanging("SupplierRollingDay");
                    this._SupplierRollingDay = value;
                    this.SendPropertyChanged("SupplierRollingDay");
                    this.OnSupplierRollingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DespatchNoteItemRuleId in the schema.
        /// </summary>
        [Column(Name = @"despatch_note_item_rule_id", Storage = "_DespatchNoteItemRuleId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DespatchNoteItemRuleId
        {
            get
            {
                return this._DespatchNoteItemRuleId;
            }
            set
            {
                if (this._DespatchNoteItemRuleId != value)
                {
                    this.OnDespatchNoteItemRuleIdChanging(value);
                    this.SendPropertyChanging("DespatchNoteItemRuleId");
                    this._DespatchNoteItemRuleId = value;
                    this.SendPropertyChanged("DespatchNoteItemRuleId");
                    this.OnDespatchNoteItemRuleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxGroup in the schema.
        /// </summary>
        [Column(Name = @"tax_group", Storage = "_TaxGroup", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxGroup
        {
            get
            {
                return this._TaxGroup;
            }
            set
            {
                if (this._TaxGroup != value)
                {
                    this.OnTaxGroupChanging(value);
                    this.SendPropertyChanging("TaxGroup");
                    this._TaxGroup = value;
                    this.SendPropertyChanged("TaxGroup");
                    this.OnTaxGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority1 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority1", Storage = "_TaxAuthority1", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority1
        {
            get
            {
                return this._TaxAuthority1;
            }
            set
            {
                if (this._TaxAuthority1 != value)
                {
                    this.OnTaxAuthority1Changing(value);
                    this.SendPropertyChanging("TaxAuthority1");
                    this._TaxAuthority1 = value;
                    this.SendPropertyChanged("TaxAuthority1");
                    this.OnTaxAuthority1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority2 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority2", Storage = "_TaxAuthority2", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority2
        {
            get
            {
                return this._TaxAuthority2;
            }
            set
            {
                if (this._TaxAuthority2 != value)
                {
                    this.OnTaxAuthority2Changing(value);
                    this.SendPropertyChanging("TaxAuthority2");
                    this._TaxAuthority2 = value;
                    this.SendPropertyChanged("TaxAuthority2");
                    this.OnTaxAuthority2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority3 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority3", Storage = "_TaxAuthority3", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority3
        {
            get
            {
                return this._TaxAuthority3;
            }
            set
            {
                if (this._TaxAuthority3 != value)
                {
                    this.OnTaxAuthority3Changing(value);
                    this.SendPropertyChanging("TaxAuthority3");
                    this._TaxAuthority3 = value;
                    this.SendPropertyChanged("TaxAuthority3");
                    this.OnTaxAuthority3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority4 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority4", Storage = "_TaxAuthority4", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority4
        {
            get
            {
                return this._TaxAuthority4;
            }
            set
            {
                if (this._TaxAuthority4 != value)
                {
                    this.OnTaxAuthority4Changing(value);
                    this.SendPropertyChanging("TaxAuthority4");
                    this._TaxAuthority4 = value;
                    this.SendPropertyChanged("TaxAuthority4");
                    this.OnTaxAuthority4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority5 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority5", Storage = "_TaxAuthority5", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority5
        {
            get
            {
                return this._TaxAuthority5;
            }
            set
            {
                if (this._TaxAuthority5 != value)
                {
                    this.OnTaxAuthority5Changing(value);
                    this.SendPropertyChanging("TaxAuthority5");
                    this._TaxAuthority5 = value;
                    this.SendPropertyChanged("TaxAuthority5");
                    this.OnTaxAuthority5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass1 in the schema.
        /// </summary>
        [Column(Name = @"tax_class1", Storage = "_TaxClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass1
        {
            get
            {
                return this._TaxClass1;
            }
            set
            {
                if (this._TaxClass1 != value)
                {
                    this.OnTaxClass1Changing(value);
                    this.SendPropertyChanging("TaxClass1");
                    this._TaxClass1 = value;
                    this.SendPropertyChanged("TaxClass1");
                    this.OnTaxClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass2 in the schema.
        /// </summary>
        [Column(Name = @"tax_class2", Storage = "_TaxClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass2
        {
            get
            {
                return this._TaxClass2;
            }
            set
            {
                if (this._TaxClass2 != value)
                {
                    this.OnTaxClass2Changing(value);
                    this.SendPropertyChanging("TaxClass2");
                    this._TaxClass2 = value;
                    this.SendPropertyChanged("TaxClass2");
                    this.OnTaxClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass3 in the schema.
        /// </summary>
        [Column(Name = @"tax_class3", Storage = "_TaxClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass3
        {
            get
            {
                return this._TaxClass3;
            }
            set
            {
                if (this._TaxClass3 != value)
                {
                    this.OnTaxClass3Changing(value);
                    this.SendPropertyChanging("TaxClass3");
                    this._TaxClass3 = value;
                    this.SendPropertyChanged("TaxClass3");
                    this.OnTaxClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass4 in the schema.
        /// </summary>
        [Column(Name = @"tax_class4", Storage = "_TaxClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass4
        {
            get
            {
                return this._TaxClass4;
            }
            set
            {
                if (this._TaxClass4 != value)
                {
                    this.OnTaxClass4Changing(value);
                    this.SendPropertyChanging("TaxClass4");
                    this._TaxClass4 = value;
                    this.SendPropertyChanged("TaxClass4");
                    this.OnTaxClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass5 in the schema.
        /// </summary>
        [Column(Name = @"tax_class5", Storage = "_TaxClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass5
        {
            get
            {
                return this._TaxClass5;
            }
            set
            {
                if (this._TaxClass5 != value)
                {
                    this.OnTaxClass5Changing(value);
                    this.SendPropertyChanging("TaxClass5");
                    this._TaxClass5 = value;
                    this.SendPropertyChanged("TaxClass5");
                    this.OnTaxClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration1 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration1", Storage = "_TaxRegistration1", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration1
        {
            get
            {
                return this._TaxRegistration1;
            }
            set
            {
                if (this._TaxRegistration1 != value)
                {
                    this.OnTaxRegistration1Changing(value);
                    this.SendPropertyChanging("TaxRegistration1");
                    this._TaxRegistration1 = value;
                    this.SendPropertyChanged("TaxRegistration1");
                    this.OnTaxRegistration1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration2 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration2", Storage = "_TaxRegistration2", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration2
        {
            get
            {
                return this._TaxRegistration2;
            }
            set
            {
                if (this._TaxRegistration2 != value)
                {
                    this.OnTaxRegistration2Changing(value);
                    this.SendPropertyChanging("TaxRegistration2");
                    this._TaxRegistration2 = value;
                    this.SendPropertyChanged("TaxRegistration2");
                    this.OnTaxRegistration2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration3 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration3", Storage = "_TaxRegistration3", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration3
        {
            get
            {
                return this._TaxRegistration3;
            }
            set
            {
                if (this._TaxRegistration3 != value)
                {
                    this.OnTaxRegistration3Changing(value);
                    this.SendPropertyChanging("TaxRegistration3");
                    this._TaxRegistration3 = value;
                    this.SendPropertyChanged("TaxRegistration3");
                    this.OnTaxRegistration3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration4 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration4", Storage = "_TaxRegistration4", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration4
        {
            get
            {
                return this._TaxRegistration4;
            }
            set
            {
                if (this._TaxRegistration4 != value)
                {
                    this.OnTaxRegistration4Changing(value);
                    this.SendPropertyChanging("TaxRegistration4");
                    this._TaxRegistration4 = value;
                    this.SendPropertyChanged("TaxRegistration4");
                    this.OnTaxRegistration4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration5 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration5", Storage = "_TaxRegistration5", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration5
        {
            get
            {
                return this._TaxRegistration5;
            }
            set
            {
                if (this._TaxRegistration5 != value)
                {
                    this.OnTaxRegistration5Changing(value);
                    this.SendPropertyChanging("TaxRegistration5");
                    this._TaxRegistration5 = value;
                    this.SendPropertyChanged("TaxRegistration5");
                    this.OnTaxRegistration5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt1 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt1", Storage = "_TaxExempt1", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt1
        {
            get
            {
                return this._TaxExempt1;
            }
            set
            {
                if (this._TaxExempt1 != value)
                {
                    this.OnTaxExempt1Changing(value);
                    this.SendPropertyChanging("TaxExempt1");
                    this._TaxExempt1 = value;
                    this.SendPropertyChanged("TaxExempt1");
                    this.OnTaxExempt1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt2 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt2", Storage = "_TaxExempt2", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt2
        {
            get
            {
                return this._TaxExempt2;
            }
            set
            {
                if (this._TaxExempt2 != value)
                {
                    this.OnTaxExempt2Changing(value);
                    this.SendPropertyChanging("TaxExempt2");
                    this._TaxExempt2 = value;
                    this.SendPropertyChanged("TaxExempt2");
                    this.OnTaxExempt2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt3 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt3", Storage = "_TaxExempt3", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt3
        {
            get
            {
                return this._TaxExempt3;
            }
            set
            {
                if (this._TaxExempt3 != value)
                {
                    this.OnTaxExempt3Changing(value);
                    this.SendPropertyChanging("TaxExempt3");
                    this._TaxExempt3 = value;
                    this.SendPropertyChanged("TaxExempt3");
                    this.OnTaxExempt3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt4 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt4", Storage = "_TaxExempt4", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt4
        {
            get
            {
                return this._TaxExempt4;
            }
            set
            {
                if (this._TaxExempt4 != value)
                {
                    this.OnTaxExempt4Changing(value);
                    this.SendPropertyChanging("TaxExempt4");
                    this._TaxExempt4 = value;
                    this.SendPropertyChanged("TaxExempt4");
                    this.OnTaxExempt4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxExempt5 in the schema.
        /// </summary>
        [Column(Name = @"tax_exempt5", Storage = "_TaxExempt5", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? TaxExempt5
        {
            get
            {
                return this._TaxExempt5;
            }
            set
            {
                if (this._TaxExempt5 != value)
                {
                    this.OnTaxExempt5Changing(value);
                    this.SendPropertyChanging("TaxExempt5");
                    this._TaxExempt5 = value;
                    this.SendPropertyChanged("TaxExempt5");
                    this.OnTaxExempt5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PopupNote in the schema.
        /// </summary>
        [Column(Name = @"popup_notes", Storage = "_PopupNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PopupNote
        {
            get
            {
                return this._PopupNote;
            }
            set
            {
                if (this._PopupNote != value)
                {
                    this.OnPopupNoteChanging(value);
                    this.SendPropertyChanging("PopupNote");
                    this._PopupNote = value;
                    this.SendPropertyChanged("PopupNote");
                    this.OnPopupNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode1Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_1_id", Storage = "_AnalysisCode1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode1Id
        {
            get
            {
                return this._AnalysisCode1Id;
            }
            set
            {
                if (this._AnalysisCode1Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode1Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode1IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode1Id");
                    this._AnalysisCode1Id = value;
                    this.SendPropertyChanged("AnalysisCode1Id");
                    this.OnAnalysisCode1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode2Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_2_id", Storage = "_AnalysisCode2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode2Id
        {
            get
            {
                return this._AnalysisCode2Id;
            }
            set
            {
                if (this._AnalysisCode2Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode2Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode2IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode2Id");
                    this._AnalysisCode2Id = value;
                    this.SendPropertyChanged("AnalysisCode2Id");
                    this.OnAnalysisCode2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode3Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_3_id", Storage = "_AnalysisCode3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode3Id
        {
            get
            {
                return this._AnalysisCode3Id;
            }
            set
            {
                if (this._AnalysisCode3Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode3Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode3IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode3Id");
                    this._AnalysisCode3Id = value;
                    this.SendPropertyChanged("AnalysisCode3Id");
                    this.OnAnalysisCode3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode4Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_4_id", Storage = "_AnalysisCode4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode4Id
        {
            get
            {
                return this._AnalysisCode4Id;
            }
            set
            {
                if (this._AnalysisCode4Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode4Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode4IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode4Id");
                    this._AnalysisCode4Id = value;
                    this.SendPropertyChanged("AnalysisCode4Id");
                    this.OnAnalysisCode4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackingWeightPercentage in the schema.
        /// </summary>
        [Column(Name = @"packing_weight_percentage", Storage = "_PackingWeightPercentage", DbType = "NUMERIC(6,2)", UpdateCheck = UpdateCheck.Never)]
        public decimal? PackingWeightPercentage
        {
            get
            {
                return this._PackingWeightPercentage;
            }
            set
            {
                if (this._PackingWeightPercentage != value)
                {
                    this.OnPackingWeightPercentageChanging(value);
                    this.SendPropertyChanging("PackingWeightPercentage");
                    this._PackingWeightPercentage = value;
                    this.SendPropertyChanged("PackingWeightPercentage");
                    this.OnPackingWeightPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultNominalCode in the schema.
        /// </summary>
        [Column(Name = @"default_nominal_code", Storage = "_DefaultNominalCode", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultNominalCode
        {
            get
            {
                return this._DefaultNominalCode;
            }
            set
            {
                if (this._DefaultNominalCode != value)
                {
                    this.OnDefaultNominalCodeChanging(value);
                    this.SendPropertyChanging("DefaultNominalCode");
                    this._DefaultNominalCode = value;
                    this.SendPropertyChanged("DefaultNominalCode");
                    this.OnDefaultNominalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoicePacking in the schema.
        /// </summary>
        [Column(Name = @"invoice_packing", Storage = "_InvoicePacking", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? InvoicePacking
        {
            get
            {
                return this._InvoicePacking;
            }
            set
            {
                if (this._InvoicePacking != value)
                {
                    this.OnInvoicePackingChanging(value);
                    this.SendPropertyChanging("InvoicePacking");
                    this._InvoicePacking = value;
                    this.SendPropertyChanged("InvoicePacking");
                    this.OnInvoicePackingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockItemPrefix in the schema.
        /// </summary>
        [Column(Name = @"stock_item_prefix", Storage = "_StockItemPrefix", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string StockItemPrefix
        {
            get
            {
                return this._StockItemPrefix;
            }
            set
            {
                if (this._StockItemPrefix != value)
                {
                    this.OnStockItemPrefixChanging(value);
                    this.SendPropertyChanging("StockItemPrefix");
                    this._StockItemPrefix = value;
                    this.SendPropertyChanged("StockItemPrefix");
                    this.OnStockItemPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultOrderClassificationId in the schema.
        /// </summary>
        [Column(Name = @"default_order_classification_id", Storage = "_DefaultOrderClassificationId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultOrderClassificationId
        {
            get
            {
                return this._DefaultOrderClassificationId;
            }
            set
            {
                if (this._DefaultOrderClassificationId != value)
                {
                    this.OnDefaultOrderClassificationIdChanging(value);
                    this.SendPropertyChanging("DefaultOrderClassificationId");
                    this._DefaultOrderClassificationId = value;
                    this.SendPropertyChanged("DefaultOrderClassificationId");
                    this.OnDefaultOrderClassificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceBaseCurrencyFlag in the schema.
        /// </summary>
        [Column(Name = @"invoice_base_currency_flag", Storage = "_InvoiceBaseCurrencyFlag", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InvoiceBaseCurrencyFlag
        {
            get
            {
                return this._InvoiceBaseCurrencyFlag;
            }
            set
            {
                if (this._InvoiceBaseCurrencyFlag != value)
                {
                    this.OnInvoiceBaseCurrencyFlagChanging(value);
                    this.SendPropertyChanging("InvoiceBaseCurrencyFlag");
                    this._InvoiceBaseCurrencyFlag = value;
                    this.SendPropertyChanged("InvoiceBaseCurrencyFlag");
                    this.OnInvoiceBaseCurrencyFlagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IntercompanyAccount in the schema.
        /// </summary>
        [Column(Name = @"intercompany_account", Storage = "_IntercompanyAccount", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? IntercompanyAccount
        {
            get
            {
                return this._IntercompanyAccount;
            }
            set
            {
                if (this._IntercompanyAccount != value)
                {
                    this.OnIntercompanyAccountChanging(value);
                    this.SendPropertyChanging("IntercompanyAccount");
                    this._IntercompanyAccount = value;
                    this.SendPropertyChanged("IntercompanyAccount");
                    this.OnIntercompanyAccountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentHold in the schema.
        /// </summary>
        [Column(Name = @"payment_hold", Storage = "_PaymentHold", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? PaymentHold
        {
            get
            {
                return this._PaymentHold;
            }
            set
            {
                if (this._PaymentHold != value)
                {
                    this.OnPaymentHoldChanging(value);
                    this.SendPropertyChanging("PaymentHold");
                    this._PaymentHold = value;
                    this.SendPropertyChanged("PaymentHold");
                    this.OnPaymentHoldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateSendMethod in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_send_method", Storage = "_TestCertificateSendMethod", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateSendMethod
        {
            get
            {
                return this._TestCertificateSendMethod;
            }
            set
            {
                if (this._TestCertificateSendMethod != value)
                {
                    this.OnTestCertificateSendMethodChanging(value);
                    this.SendPropertyChanging("TestCertificateSendMethod");
                    this._TestCertificateSendMethod = value;
                    this.SendPropertyChanged("TestCertificateSendMethod");
                    this.OnTestCertificateSendMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateDestination in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_destination", Storage = "_TestCertificateDestination", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateDestination
        {
            get
            {
                return this._TestCertificateDestination;
            }
            set
            {
                if (this._TestCertificateDestination != value)
                {
                    this.OnTestCertificateDestinationChanging(value);
                    this.SendPropertyChanging("TestCertificateDestination");
                    this._TestCertificateDestination = value;
                    this.SendPropertyChanged("TestCertificateDestination");
                    this.OnTestCertificateDestinationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateHold in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_hold", Storage = "_TestCertificateHold", CanBeNull = false, DbType = "VARCHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateHold
        {
            get
            {
                return this._TestCertificateHold;
            }
            set
            {
                if (this._TestCertificateHold != value)
                {
                    this.OnTestCertificateHoldChanging(value);
                    this.SendPropertyChanging("TestCertificateHold");
                    this._TestCertificateHold = value;
                    this.SendPropertyChanged("TestCertificateHold");
                    this.OnTestCertificateHoldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceWeightRoundingMode in the schema.
        /// </summary>
        [Column(Name = @"invoice_weight_rounding_mode", Storage = "_InvoiceWeightRoundingMode", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string InvoiceWeightRoundingMode
        {
            get
            {
                return this._InvoiceWeightRoundingMode;
            }
            set
            {
                if (this._InvoiceWeightRoundingMode != value)
                {
                    this.OnInvoiceWeightRoundingModeChanging(value);
                    this.SendPropertyChanging("InvoiceWeightRoundingMode");
                    this._InvoiceWeightRoundingMode = value;
                    this.SendPropertyChanged("InvoiceWeightRoundingMode");
                    this.OnInvoiceWeightRoundingModeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass1 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class1", Storage = "_DefaultItemClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass1
        {
            get
            {
                return this._DefaultItemClass1;
            }
            set
            {
                if (this._DefaultItemClass1 != value)
                {
                    this.OnDefaultItemClass1Changing(value);
                    this.SendPropertyChanging("DefaultItemClass1");
                    this._DefaultItemClass1 = value;
                    this.SendPropertyChanged("DefaultItemClass1");
                    this.OnDefaultItemClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass2 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class2", Storage = "_DefaultItemClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass2
        {
            get
            {
                return this._DefaultItemClass2;
            }
            set
            {
                if (this._DefaultItemClass2 != value)
                {
                    this.OnDefaultItemClass2Changing(value);
                    this.SendPropertyChanging("DefaultItemClass2");
                    this._DefaultItemClass2 = value;
                    this.SendPropertyChanged("DefaultItemClass2");
                    this.OnDefaultItemClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass3 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class3", Storage = "_DefaultItemClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass3
        {
            get
            {
                return this._DefaultItemClass3;
            }
            set
            {
                if (this._DefaultItemClass3 != value)
                {
                    this.OnDefaultItemClass3Changing(value);
                    this.SendPropertyChanging("DefaultItemClass3");
                    this._DefaultItemClass3 = value;
                    this.SendPropertyChanged("DefaultItemClass3");
                    this.OnDefaultItemClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass4 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class4", Storage = "_DefaultItemClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass4
        {
            get
            {
                return this._DefaultItemClass4;
            }
            set
            {
                if (this._DefaultItemClass4 != value)
                {
                    this.OnDefaultItemClass4Changing(value);
                    this.SendPropertyChanging("DefaultItemClass4");
                    this._DefaultItemClass4 = value;
                    this.SendPropertyChanged("DefaultItemClass4");
                    this.OnDefaultItemClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass5 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class5", Storage = "_DefaultItemClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass5
        {
            get
            {
                return this._DefaultItemClass5;
            }
            set
            {
                if (this._DefaultItemClass5 != value)
                {
                    this.OnDefaultItemClass5Changing(value);
                    this.SendPropertyChanging("DefaultItemClass5");
                    this._DefaultItemClass5 = value;
                    this.SendPropertyChanged("DefaultItemClass5");
                    this.OnDefaultItemClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode5Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_5_id", Storage = "_AnalysisCode5Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode5Id
        {
            get
            {
                return this._AnalysisCode5Id;
            }
            set
            {
                if (this._AnalysisCode5Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode5Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode5IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode5Id");
                    this._AnalysisCode5Id = value;
                    this.SendPropertyChanged("AnalysisCode5Id");
                    this.OnAnalysisCode5IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnalysisCode6Id in the schema.
        /// </summary>
        [Column(Name = @"analysis_code_6_id", Storage = "_AnalysisCode6Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AnalysisCode6Id
        {
            get
            {
                return this._AnalysisCode6Id;
            }
            set
            {
                if (this._AnalysisCode6Id != value)
                {
                    if (this._CustomerAnalysisCode_AnalysisCode6Id.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnalysisCode6IdChanging(value);
                    this.SendPropertyChanging("AnalysisCode6Id");
                    this._AnalysisCode6Id = value;
                    this.SendPropertyChanged("AnalysisCode6Id");
                    this.OnAnalysisCode6IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutworkBranchId in the schema.
        /// </summary>
        [Column(Name = @"outwork_branch_id", Storage = "_OutworkBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OutworkBranchId
        {
            get
            {
                return this._OutworkBranchId;
            }
            set
            {
                if (this._OutworkBranchId != value)
                {
                    if (this._Branch_OutworkBranchId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOutworkBranchIdChanging(value);
                    this.SendPropertyChanging("OutworkBranchId");
                    this._OutworkBranchId = value;
                    this.SendPropertyChanged("OutworkBranchId");
                    this.OnOutworkBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CounterSalesDefault in the schema.
        /// </summary>
        [Column(Name = @"counter_sales_default", Storage = "_CounterSalesDefault", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? CounterSalesDefault
        {
            get
            {
                return this._CounterSalesDefault;
            }
            set
            {
                if (this._CounterSalesDefault != value)
                {
                    this.OnCounterSalesDefaultChanging(value);
                    this.SendPropertyChanging("CounterSalesDefault");
                    this._CounterSalesDefault = value;
                    this.SendPropertyChanged("CounterSalesDefault");
                    this.OnCounterSalesDefaultChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultTransportTypeId in the schema.
        /// </summary>
        [Column(Name = @"default_transport_type_id", Storage = "_DefaultTransportTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultTransportTypeId
        {
            get
            {
                return this._DefaultTransportTypeId;
            }
            set
            {
                if (this._DefaultTransportTypeId != value)
                {
                    if (this._TransportTypeCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefaultTransportTypeIdChanging(value);
                    this.SendPropertyChanging("DefaultTransportTypeId");
                    this._DefaultTransportTypeId = value;
                    this.SendPropertyChanged("DefaultTransportTypeId");
                    this.OnDefaultTransportTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactFrequencyCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ContactFrequencyCode_Company", Storage="_ContactFrequencyCode", ThisKey="ContactFrequency", OtherKey="Id", IsForeignKey=true)]
        public ContactFrequencyCode ContactFrequencyCode
        {
            get
            {
                return this._ContactFrequencyCode.Entity;
            }
            set
            {
                ContactFrequencyCode previousValue = this._ContactFrequencyCode.Entity;
                if ((previousValue != value) || (this._ContactFrequencyCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ContactFrequencyCode");
                    if (previousValue != null)
                    {
                        this._ContactFrequencyCode.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._ContactFrequencyCode.Entity = value;
                    if (value != null)
                    {
                        this._ContactFrequency = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._ContactFrequency = default(int?);
                    }
                    this.SendPropertyChanged("ContactFrequencyCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_Company", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address
        {
            get
            {
                return this._Address.Entity;
            }
            set
            {
                Address previousValue = this._Address.Entity;
                if ((previousValue != value) || (this._Address.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address");
                    if (previousValue != null)
                    {
                        this._Address.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._Address.Entity = value;
                    if (value != null)
                    {
                        this._AddressId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._AddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode1Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company", Storage="_CustomerAnalysisCode_AnalysisCode1Id", ThisKey="AnalysisCode1Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode1Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode1Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode1Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode1Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode1Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode1Id.Entity = null;
                        previousValue.Company_AnalysisCode1Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode1Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode1Id = value.Id;
                        value.Company_AnalysisCode1Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode1Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode1Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode2Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company1", Storage="_CustomerAnalysisCode_AnalysisCode2Id", ThisKey="AnalysisCode2Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode2Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode2Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode2Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode2Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode2Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode2Id.Entity = null;
                        previousValue.Company_AnalysisCode2Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode2Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode2Id = value.Id;
                        value.Company_AnalysisCode2Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode2Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode2Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode3Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company2", Storage="_CustomerAnalysisCode_AnalysisCode3Id", ThisKey="AnalysisCode3Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode3Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode3Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode3Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode3Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode3Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode3Id.Entity = null;
                        previousValue.Company_AnalysisCode3Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode3Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode3Id = value.Id;
                        value.Company_AnalysisCode3Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode3Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode3Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode4Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company3", Storage="_CustomerAnalysisCode_AnalysisCode4Id", ThisKey="AnalysisCode4Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode4Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode4Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode4Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode4Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode4Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode4Id.Entity = null;
                        previousValue.Company_AnalysisCode4Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode4Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode4Id = value.Id;
                        value.Company_AnalysisCode4Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode4Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode4Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_BranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Company", Storage="_Branch_BranchId", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_BranchId
        {
            get
            {
                return this._Branch_BranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_BranchId.Entity;
                if ((previousValue != value) || (this._Branch_BranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_BranchId");
                    if (previousValue != null)
                    {
                        this._Branch_BranchId.Entity = null;
                        previousValue.Company_BranchId.Remove(this);
                    }
                    this._Branch_BranchId.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.Company_BranchId.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_BranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyTotal in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanyTotal_Company", Storage="_CompanyTotal", ThisKey="CompanyTotalsId", OtherKey="Id", IsForeignKey=true)]
        public CompanyTotal CompanyTotal
        {
            get
            {
                return this._CompanyTotal.Entity;
            }
            set
            {
                CompanyTotal previousValue = this._CompanyTotal.Entity;
                if ((previousValue != value) || (this._CompanyTotal.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanyTotal");
                    if (previousValue != null)
                    {
                        this._CompanyTotal.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._CompanyTotal.Entity = value;
                    if (value != null)
                    {
                        this._CompanyTotalsId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._CompanyTotalsId = default(int?);
                    }
                    this.SendPropertyChanged("CompanyTotal");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrencyCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CurrencyCode_Company", Storage="_CurrencyCode", ThisKey="CurrencyId", OtherKey="Id", IsForeignKey=true)]
        public CurrencyCode CurrencyCode
        {
            get
            {
                return this._CurrencyCode.Entity;
            }
            set
            {
                CurrencyCode previousValue = this._CurrencyCode.Entity;
                if ((previousValue != value) || (this._CurrencyCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CurrencyCode");
                    if (previousValue != null)
                    {
                        this._CurrencyCode.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._CurrencyCode.Entity = value;
                    if (value != null)
                    {
                        this._CurrencyId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._CurrencyId = default(int?);
                    }
                    this.SendPropertyChanged("CurrencyCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact_DefaultContactId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contact_Company", Storage="_Contact_DefaultContactId", ThisKey="DefaultContactId", OtherKey="Id", IsForeignKey=true)]
        public Contact Contact_DefaultContactId
        {
            get
            {
                return this._Contact_DefaultContactId.Entity;
            }
            set
            {
                Contact previousValue = this._Contact_DefaultContactId.Entity;
                if ((previousValue != value) || (this._Contact_DefaultContactId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Contact_DefaultContactId");
                    if (previousValue != null)
                    {
                        this._Contact_DefaultContactId.Entity = null;
                        previousValue.Company_DefaultContactId.Remove(this);
                    }
                    this._Contact_DefaultContactId.Entity = value;
                    if (value != null)
                    {
                        this._DefaultContactId = value.Id;
                        value.Company_DefaultContactId.Add(this);
                    }
                    else
                    {
                        this._DefaultContactId = default(int?);
                    }
                    this.SendPropertyChanged("Contact_DefaultContactId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_InvoiceCompanyId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Company", Storage="_Company_InvoiceCompanyId1", ThisKey="Id", OtherKey="InvoiceCompanyId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_InvoiceCompanyId1
        {
            get
            {
                return this._Company_InvoiceCompanyId1;
            }
            set
            {
                this._Company_InvoiceCompanyId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_InvoiceCompanyId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Company", Storage="_Company_InvoiceCompanyId", ThisKey="InvoiceCompanyId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_InvoiceCompanyId
        {
            get
            {
                return this._Company_InvoiceCompanyId.Entity;
            }
            set
            {
                Company previousValue = this._Company_InvoiceCompanyId.Entity;
                if ((previousValue != value) || (this._Company_InvoiceCompanyId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_InvoiceCompanyId");
                    if (previousValue != null)
                    {
                        this._Company_InvoiceCompanyId.Entity = null;
                        previousValue.Company_InvoiceCompanyId1.Remove(this);
                    }
                    this._Company_InvoiceCompanyId.Entity = value;
                    if (value != null)
                    {
                        this._InvoiceCompanyId = value.Id;
                        value.Company_InvoiceCompanyId1.Add(this);
                    }
                    else
                    {
                        this._InvoiceCompanyId = default(int?);
                    }
                    this.SendPropertyChanged("Company_InvoiceCompanyId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_ParentCompanyId1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Company1", Storage="_Company_ParentCompanyId1", ThisKey="Id", OtherKey="ParentCompanyId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_ParentCompanyId1
        {
            get
            {
                return this._Company_ParentCompanyId1;
            }
            set
            {
                this._Company_ParentCompanyId1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_ParentCompanyId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Company1", Storage="_Company_ParentCompanyId", ThisKey="ParentCompanyId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_ParentCompanyId
        {
            get
            {
                return this._Company_ParentCompanyId.Entity;
            }
            set
            {
                Company previousValue = this._Company_ParentCompanyId.Entity;
                if ((previousValue != value) || (this._Company_ParentCompanyId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_ParentCompanyId");
                    if (previousValue != null)
                    {
                        this._Company_ParentCompanyId.Entity = null;
                        previousValue.Company_ParentCompanyId1.Remove(this);
                    }
                    this._Company_ParentCompanyId.Entity = value;
                    if (value != null)
                    {
                        this._ParentCompanyId = value.Id;
                        value.Company_ParentCompanyId1.Add(this);
                    }
                    else
                    {
                        this._ParentCompanyId = default(int?);
                    }
                    this.SendPropertyChanged("Company_ParentCompanyId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyStatusCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanyStatusCode_Company", Storage="_CompanyStatusCode", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
        public CompanyStatusCode CompanyStatusCode
        {
            get
            {
                return this._CompanyStatusCode.Entity;
            }
            set
            {
                CompanyStatusCode previousValue = this._CompanyStatusCode.Entity;
                if ((previousValue != value) || (this._CompanyStatusCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanyStatusCode");
                    if (previousValue != null)
                    {
                        this._CompanyStatusCode.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._CompanyStatusCode.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(int?);
                    }
                    this.SendPropertyChanged("CompanyStatusCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyTypeCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanyTypeCode_Company", Storage="_CompanyTypeCode", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
        public CompanyTypeCode CompanyTypeCode
        {
            get
            {
                return this._CompanyTypeCode.Entity;
            }
            set
            {
                CompanyTypeCode previousValue = this._CompanyTypeCode.Entity;
                if ((previousValue != value) || (this._CompanyTypeCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CompanyTypeCode");
                    if (previousValue != null)
                    {
                        this._CompanyTypeCode.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._CompanyTypeCode.Entity = value;
                    if (value != null)
                    {
                        this._TypeId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._TypeId = default(int?);
                    }
                    this.SendPropertyChanged("CompanyTypeCode");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact_CompanyId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Contact", Storage="_Contact_CompanyId", ThisKey="Id", OtherKey="CompanyId", DeleteRule="NO ACTION")]
        public EntitySet<Contact> Contact_CompanyId
        {
            get
            {
                return this._Contact_CompanyId;
            }
            set
            {
                this._Contact_CompanyId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_CustomerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Branch", Storage="_Branch_CustomerId", ThisKey="Id", OtherKey="CustomerId", DeleteRule="NO ACTION")]
        public EntitySet<Branch> Branch_CustomerId
        {
            get
            {
                return this._Branch_CustomerId;
            }
            set
            {
                this._Branch_CustomerId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyNoteTemplate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyNoteTemplate", Storage="_CompanyNoteTemplate", ThisKey="Id", OtherKey="CompanyId", DeleteRule="NO ACTION")]
        public EntitySet<CompanyNoteTemplate> CompanyNoteTemplate
        {
            get
            {
                return this._CompanyNoteTemplate;
            }
            set
            {
                this._CompanyNoteTemplate.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CompanySubAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanySubAddress", Storage="_CompanySubAddress", ThisKey="Id", OtherKey="CompanyId", DeleteRule="NO ACTION")]
        public EntitySet<CompanySubAddress> CompanySubAddress
        {
            get
            {
                return this._CompanySubAddress;
            }
            set
            {
                this._CompanySubAddress.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CertificationRequirement in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CertificationRequirement_Company", Storage="_CertificationRequirement", ThisKey="CertificationsId", OtherKey="Id", IsForeignKey=true)]
        public CertificationRequirement CertificationRequirement
        {
            get
            {
                return this._CertificationRequirement.Entity;
            }
            set
            {
                CertificationRequirement previousValue = this._CertificationRequirement.Entity;
                if ((previousValue != value) || (this._CertificationRequirement.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CertificationRequirement");
                    if (previousValue != null)
                    {
                        this._CertificationRequirement.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._CertificationRequirement.Entity = value;
                    if (value != null)
                    {
                        this._CertificationsId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._CertificationsId = default(int?);
                    }
                    this.SendPropertyChanged("CertificationRequirement");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Term in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_Company", Storage="_Term", ThisKey="TermsId", OtherKey="Id", IsForeignKey=true)]
        public Term Term
        {
            get
            {
                return this._Term.Entity;
            }
            set
            {
                Term previousValue = this._Term.Entity;
                if ((previousValue != value) || (this._Term.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Term");
                    if (previousValue != null)
                    {
                        this._Term.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._Term.Entity = value;
                    if (value != null)
                    {
                        this._TermsId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._TermsId = default(int?);
                    }
                    this.SendPropertyChanged("Term");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesGroup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SalesGroup_Company", Storage="_SalesGroup", ThisKey="SalesGroupId", OtherKey="Id", IsForeignKey=true)]
        public SalesGroup SalesGroup
        {
            get
            {
                return this._SalesGroup.Entity;
            }
            set
            {
                SalesGroup previousValue = this._SalesGroup.Entity;
                if ((previousValue != value) || (this._SalesGroup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SalesGroup");
                    if (previousValue != null)
                    {
                        this._SalesGroup.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._SalesGroup.Entity = value;
                    if (value != null)
                    {
                        this._SalesGroupId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._SalesGroupId = default(int?);
                    }
                    this.SendPropertyChanged("SalesGroup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode5Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company4", Storage="_CustomerAnalysisCode_AnalysisCode5Id", ThisKey="AnalysisCode5Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode5Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode5Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode5Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode5Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode5Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode5Id.Entity = null;
                        previousValue.Company_AnalysisCode5Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode5Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode5Id = value.Id;
                        value.Company_AnalysisCode5Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode5Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode5Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerAnalysisCode_AnalysisCode6Id in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerAnalysisCode_Company5", Storage="_CustomerAnalysisCode_AnalysisCode6Id", ThisKey="AnalysisCode6Id", OtherKey="Id", IsForeignKey=true)]
        public CustomerAnalysisCode CustomerAnalysisCode_AnalysisCode6Id
        {
            get
            {
                return this._CustomerAnalysisCode_AnalysisCode6Id.Entity;
            }
            set
            {
                CustomerAnalysisCode previousValue = this._CustomerAnalysisCode_AnalysisCode6Id.Entity;
                if ((previousValue != value) || (this._CustomerAnalysisCode_AnalysisCode6Id.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CustomerAnalysisCode_AnalysisCode6Id");
                    if (previousValue != null)
                    {
                        this._CustomerAnalysisCode_AnalysisCode6Id.Entity = null;
                        previousValue.Company_AnalysisCode6Id.Remove(this);
                    }
                    this._CustomerAnalysisCode_AnalysisCode6Id.Entity = value;
                    if (value != null)
                    {
                        this._AnalysisCode6Id = value.Id;
                        value.Company_AnalysisCode6Id.Add(this);
                    }
                    else
                    {
                        this._AnalysisCode6Id = default(int?);
                    }
                    this.SendPropertyChanged("CustomerAnalysisCode_AnalysisCode6Id");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch_OutworkBranchId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Company1", Storage="_Branch_OutworkBranchId", ThisKey="OutworkBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch_OutworkBranchId
        {
            get
            {
                return this._Branch_OutworkBranchId.Entity;
            }
            set
            {
                Branch previousValue = this._Branch_OutworkBranchId.Entity;
                if ((previousValue != value) || (this._Branch_OutworkBranchId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch_OutworkBranchId");
                    if (previousValue != null)
                    {
                        this._Branch_OutworkBranchId.Entity = null;
                        previousValue.Company_OutworkBranchId.Remove(this);
                    }
                    this._Branch_OutworkBranchId.Entity = value;
                    if (value != null)
                    {
                        this._OutworkBranchId = value.Id;
                        value.Company_OutworkBranchId.Add(this);
                    }
                    else
                    {
                        this._OutworkBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch_OutworkBranchId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportTypeCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TransportTypeCode_Company", Storage="_TransportTypeCode", ThisKey="DefaultTransportTypeId", OtherKey="Id", IsForeignKey=true)]
        public TransportTypeCode TransportTypeCode
        {
            get
            {
                return this._TransportTypeCode.Entity;
            }
            set
            {
                TransportTypeCode previousValue = this._TransportTypeCode.Entity;
                if ((previousValue != value) || (this._TransportTypeCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TransportTypeCode");
                    if (previousValue != null)
                    {
                        this._TransportTypeCode.Entity = null;
                        previousValue.Company.Remove(this);
                    }
                    this._TransportTypeCode.Entity = value;
                    if (value != null)
                    {
                        this._DefaultTransportTypeId = value.Id;
                        value.Company.Add(this);
                    }
                    else
                    {
                        this._DefaultTransportTypeId = default(int?);
                    }
                    this.SendPropertyChanged("TransportTypeCode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company_InvoiceCompanyId1(Company entity)
        {
            this.SendPropertyChanging("Company_InvoiceCompanyId1");
            entity.Company_InvoiceCompanyId = this;
        }
    
        private void detach_Company_InvoiceCompanyId1(Company entity)
        {
            this.SendPropertyChanging("Company_InvoiceCompanyId1");
            entity.Company_InvoiceCompanyId = null;
        }

        private void attach_Company_ParentCompanyId1(Company entity)
        {
            this.SendPropertyChanging("Company_ParentCompanyId1");
            entity.Company_ParentCompanyId = this;
        }
    
        private void detach_Company_ParentCompanyId1(Company entity)
        {
            this.SendPropertyChanging("Company_ParentCompanyId1");
            entity.Company_ParentCompanyId = null;
        }

        private void attach_Contact_CompanyId(Contact entity)
        {
            this.SendPropertyChanging("Contact_CompanyId");
            entity.Company_CompanyId = this;
        }
    
        private void detach_Contact_CompanyId(Contact entity)
        {
            this.SendPropertyChanging("Contact_CompanyId");
            entity.Company_CompanyId = null;
        }

        private void attach_Branch_CustomerId(Branch entity)
        {
            this.SendPropertyChanging("Branch_CustomerId");
            entity.Company_CustomerId = this;
        }
    
        private void detach_Branch_CustomerId(Branch entity)
        {
            this.SendPropertyChanging("Branch_CustomerId");
            entity.Company_CustomerId = null;
        }

        private void attach_CompanyNoteTemplate(CompanyNoteTemplate entity)
        {
            this.SendPropertyChanging("CompanyNoteTemplate");
            entity.Company = this;
        }
    
        private void detach_CompanyNoteTemplate(CompanyNoteTemplate entity)
        {
            this.SendPropertyChanging("CompanyNoteTemplate");
            entity.Company = null;
        }

        private void attach_CompanySubAddress(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress");
            entity.Company = this;
        }
    
        private void detach_CompanySubAddress(CompanySubAddress entity)
        {
            this.SendPropertyChanging("CompanySubAddress");
            entity.Company = null;
        }
    }

}
