//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/8/2019 10:47:06 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.CertificationRequirement in the schema.
    /// </summary>
    [Table(Name = @"public.certification_requirements")]
    public partial class CertificationRequirement : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private bool? _ChemicalCert;

        private bool? _MechanicalCert;

        private bool? _MillCert;

        private bool? _ComplianceCert;

        private int? _DeliveryCopy;

        private int? _InvoiceCopy;

        private int? _CertificateOfConformityRule = 1;

        private bool? _SeparateCertificatesRequired = false;
        #pragma warning restore 0649

        private EntitySet<Company> _Company;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnChemicalCertChanging(bool? value);
        partial void OnChemicalCertChanged();
        partial void OnMechanicalCertChanging(bool? value);
        partial void OnMechanicalCertChanged();
        partial void OnMillCertChanging(bool? value);
        partial void OnMillCertChanged();
        partial void OnComplianceCertChanging(bool? value);
        partial void OnComplianceCertChanged();
        partial void OnDeliveryCopyChanging(int? value);
        partial void OnDeliveryCopyChanged();
        partial void OnInvoiceCopyChanging(int? value);
        partial void OnInvoiceCopyChanged();
        partial void OnCertificateOfConformityRuleChanging(int? value);
        partial void OnCertificateOfConformityRuleChanged();
        partial void OnSeparateCertificatesRequiredChanging(bool? value);
        partial void OnSeparateCertificatesRequiredChanged();
        #endregion

        public CertificationRequirement()
        {
            this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChemicalCert in the schema.
        /// </summary>
        [Column(Name = @"chemical_cert", Storage = "_ChemicalCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? ChemicalCert
        {
            get
            {
                return this._ChemicalCert;
            }
            set
            {
                if (this._ChemicalCert != value)
                {
                    this.OnChemicalCertChanging(value);
                    this.SendPropertyChanging("ChemicalCert");
                    this._ChemicalCert = value;
                    this.SendPropertyChanged("ChemicalCert");
                    this.OnChemicalCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MechanicalCert in the schema.
        /// </summary>
        [Column(Name = @"mechanical_cert", Storage = "_MechanicalCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? MechanicalCert
        {
            get
            {
                return this._MechanicalCert;
            }
            set
            {
                if (this._MechanicalCert != value)
                {
                    this.OnMechanicalCertChanging(value);
                    this.SendPropertyChanging("MechanicalCert");
                    this._MechanicalCert = value;
                    this.SendPropertyChanged("MechanicalCert");
                    this.OnMechanicalCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MillCert in the schema.
        /// </summary>
        [Column(Name = @"mill_cert", Storage = "_MillCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? MillCert
        {
            get
            {
                return this._MillCert;
            }
            set
            {
                if (this._MillCert != value)
                {
                    this.OnMillCertChanging(value);
                    this.SendPropertyChanging("MillCert");
                    this._MillCert = value;
                    this.SendPropertyChanged("MillCert");
                    this.OnMillCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComplianceCert in the schema.
        /// </summary>
        [Column(Name = @"compliance_cert", Storage = "_ComplianceCert", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? ComplianceCert
        {
            get
            {
                return this._ComplianceCert;
            }
            set
            {
                if (this._ComplianceCert != value)
                {
                    this.OnComplianceCertChanging(value);
                    this.SendPropertyChanging("ComplianceCert");
                    this._ComplianceCert = value;
                    this.SendPropertyChanged("ComplianceCert");
                    this.OnComplianceCertChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryCopy in the schema.
        /// </summary>
        [Column(Name = @"delivery_copies", Storage = "_DeliveryCopy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryCopy
        {
            get
            {
                return this._DeliveryCopy;
            }
            set
            {
                if (this._DeliveryCopy != value)
                {
                    this.OnDeliveryCopyChanging(value);
                    this.SendPropertyChanging("DeliveryCopy");
                    this._DeliveryCopy = value;
                    this.SendPropertyChanged("DeliveryCopy");
                    this.OnDeliveryCopyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceCopy in the schema.
        /// </summary>
        [Column(Name = @"invoice_copies", Storage = "_InvoiceCopy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? InvoiceCopy
        {
            get
            {
                return this._InvoiceCopy;
            }
            set
            {
                if (this._InvoiceCopy != value)
                {
                    this.OnInvoiceCopyChanging(value);
                    this.SendPropertyChanging("InvoiceCopy");
                    this._InvoiceCopy = value;
                    this.SendPropertyChanged("InvoiceCopy");
                    this.OnInvoiceCopyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificateOfConformityRule in the schema.
        /// </summary>
        [Column(Name = @"certificate_of_conformity_rule", Storage = "_CertificateOfConformityRule", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CertificateOfConformityRule
        {
            get
            {
                return this._CertificateOfConformityRule;
            }
            set
            {
                if (this._CertificateOfConformityRule != value)
                {
                    this.OnCertificateOfConformityRuleChanging(value);
                    this.SendPropertyChanging("CertificateOfConformityRule");
                    this._CertificateOfConformityRule = value;
                    this.SendPropertyChanged("CertificateOfConformityRule");
                    this.OnCertificateOfConformityRuleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SeparateCertificatesRequired in the schema.
        /// </summary>
        [Column(Name = @"separate_certificates_required", Storage = "_SeparateCertificatesRequired", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? SeparateCertificatesRequired
        {
            get
            {
                return this._SeparateCertificatesRequired;
            }
            set
            {
                if (this._SeparateCertificatesRequired != value)
                {
                    this.OnSeparateCertificatesRequiredChanging(value);
                    this.SendPropertyChanging("SeparateCertificatesRequired");
                    this._SeparateCertificatesRequired = value;
                    this.SendPropertyChanged("SeparateCertificatesRequired");
                    this.OnSeparateCertificatesRequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CertificationRequirement_Company", Storage="_Company", ThisKey="Id", OtherKey="CertificationsId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                this._Company.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CertificationRequirement = this;
        }
    
        private void detach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CertificationRequirement = null;
        }
    }

}
