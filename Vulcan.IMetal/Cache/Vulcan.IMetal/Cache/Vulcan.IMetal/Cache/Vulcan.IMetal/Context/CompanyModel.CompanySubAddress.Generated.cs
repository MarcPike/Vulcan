//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/8/2019 10:47:06 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.CompanySubAddress in the schema.
    /// </summary>
    [Table(Name = @"public.company_sub_addresses")]
    public partial class CompanySubAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private System.DateTime? _Mdate;

        private int? _CuserId;

        private int? _MuserId;

        private string _Status;

        private int? _CompanyId;

        private string _Code;

        private string _Name;

        private int? _AddressId;

        private int? _TerritoryId;

        private string _Telephone;

        private string _FastDial;

        private string _Fax;

        private string _Email;

        private string _WebAddress;

        private string _PartnerCode;

        private string _TransportRateCode;

        private int? _ConsignmentBranchId;

        private int? _ConsignmentWarehouseId;

        private bool? _UseCompanyTax = true;

        private int? _TaxClass1;

        private int? _TaxClass2;

        private int? _TaxClass3;

        private int? _TaxClass4;

        private int? _TaxClass5;

        private bool? _CommercialTermsMandatory = false;

        private int? _DefaultCommercialTermsId;

        private string _TaxGroup;

        private string _TaxAuthority1;

        private string _TaxAuthority2;

        private string _TaxAuthority3;

        private string _TaxAuthority4;

        private string _TaxAuthority5;

        private string _TaxRegistration1;

        private string _TaxRegistration2;

        private string _TaxRegistration3;

        private string _TaxRegistration4;

        private string _TaxRegistration5;

        private bool? _DefaultAddress = false;

        private bool _TestCertificateUseCompany = true;

        private string _TestCertificateSendMethod = @"D";

        private string _TestCertificateDestination;

        private string _TestCertificateHold = @"";

        private int? _DefaultItemClass1;

        private int? _DefaultItemClass2;

        private int? _DefaultItemClass3;

        private int? _DefaultItemClass4;

        private int? _DefaultItemClass5;

        private int? _OutworkWarehouseId;

        private int? _DefaultTransportTypeId;
        #pragma warning restore 0649

        private EntityRef<Company> _Company;

        private EntityRef<Branch> _Branch;

        private EntityRef<Address> _Address;

        private EntitySet<CompanyNoteTemplate> _CompanyNoteTemplate;

        private EntityRef<TransportTypeCode> _TransportTypeCode;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCompanyIdChanging(int? value);
        partial void OnCompanyIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnAddressIdChanging(int? value);
        partial void OnAddressIdChanged();
        partial void OnTerritoryIdChanging(int? value);
        partial void OnTerritoryIdChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFastDialChanging(string value);
        partial void OnFastDialChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnWebAddressChanging(string value);
        partial void OnWebAddressChanged();
        partial void OnPartnerCodeChanging(string value);
        partial void OnPartnerCodeChanged();
        partial void OnTransportRateCodeChanging(string value);
        partial void OnTransportRateCodeChanged();
        partial void OnConsignmentBranchIdChanging(int? value);
        partial void OnConsignmentBranchIdChanged();
        partial void OnConsignmentWarehouseIdChanging(int? value);
        partial void OnConsignmentWarehouseIdChanged();
        partial void OnUseCompanyTaxChanging(bool? value);
        partial void OnUseCompanyTaxChanged();
        partial void OnTaxClass1Changing(int? value);
        partial void OnTaxClass1Changed();
        partial void OnTaxClass2Changing(int? value);
        partial void OnTaxClass2Changed();
        partial void OnTaxClass3Changing(int? value);
        partial void OnTaxClass3Changed();
        partial void OnTaxClass4Changing(int? value);
        partial void OnTaxClass4Changed();
        partial void OnTaxClass5Changing(int? value);
        partial void OnTaxClass5Changed();
        partial void OnCommercialTermsMandatoryChanging(bool? value);
        partial void OnCommercialTermsMandatoryChanged();
        partial void OnDefaultCommercialTermsIdChanging(int? value);
        partial void OnDefaultCommercialTermsIdChanged();
        partial void OnTaxGroupChanging(string value);
        partial void OnTaxGroupChanged();
        partial void OnTaxAuthority1Changing(string value);
        partial void OnTaxAuthority1Changed();
        partial void OnTaxAuthority2Changing(string value);
        partial void OnTaxAuthority2Changed();
        partial void OnTaxAuthority3Changing(string value);
        partial void OnTaxAuthority3Changed();
        partial void OnTaxAuthority4Changing(string value);
        partial void OnTaxAuthority4Changed();
        partial void OnTaxAuthority5Changing(string value);
        partial void OnTaxAuthority5Changed();
        partial void OnTaxRegistration1Changing(string value);
        partial void OnTaxRegistration1Changed();
        partial void OnTaxRegistration2Changing(string value);
        partial void OnTaxRegistration2Changed();
        partial void OnTaxRegistration3Changing(string value);
        partial void OnTaxRegistration3Changed();
        partial void OnTaxRegistration4Changing(string value);
        partial void OnTaxRegistration4Changed();
        partial void OnTaxRegistration5Changing(string value);
        partial void OnTaxRegistration5Changed();
        partial void OnDefaultAddressChanging(bool? value);
        partial void OnDefaultAddressChanged();
        partial void OnTestCertificateUseCompanyChanging(bool value);
        partial void OnTestCertificateUseCompanyChanged();
        partial void OnTestCertificateSendMethodChanging(string value);
        partial void OnTestCertificateSendMethodChanged();
        partial void OnTestCertificateDestinationChanging(string value);
        partial void OnTestCertificateDestinationChanged();
        partial void OnTestCertificateHoldChanging(string value);
        partial void OnTestCertificateHoldChanged();
        partial void OnDefaultItemClass1Changing(int? value);
        partial void OnDefaultItemClass1Changed();
        partial void OnDefaultItemClass2Changing(int? value);
        partial void OnDefaultItemClass2Changed();
        partial void OnDefaultItemClass3Changing(int? value);
        partial void OnDefaultItemClass3Changed();
        partial void OnDefaultItemClass4Changing(int? value);
        partial void OnDefaultItemClass4Changed();
        partial void OnDefaultItemClass5Changing(int? value);
        partial void OnDefaultItemClass5Changed();
        partial void OnOutworkWarehouseIdChanging(int? value);
        partial void OnOutworkWarehouseIdChanged();
        partial void OnDefaultTransportTypeIdChanging(int? value);
        partial void OnDefaultTransportTypeIdChanged();
        #endregion

        public CompanySubAddress()
        {
            this._Company  = default(EntityRef<Company>);
            this._Branch  = default(EntityRef<Branch>);
            this._Address  = default(EntityRef<Address>);
            this._CompanyNoteTemplate = new EntitySet<CompanyNoteTemplate>(new Action<CompanyNoteTemplate>(this.attach_CompanyNoteTemplate), new Action<CompanyNoteTemplate>(this.detach_CompanyNoteTemplate));
            this._TransportTypeCode  = default(EntityRef<TransportTypeCode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyId in the schema.
        /// </summary>
        [Column(Name = @"company_id", Storage = "_CompanyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CompanyId
        {
            get
            {
                return this._CompanyId;
            }
            set
            {
                if (this._CompanyId != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIdChanging(value);
                    this.SendPropertyChanging("CompanyId");
                    this._CompanyId = value;
                    this.SendPropertyChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    if (this._Address.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryId in the schema.
        /// </summary>
        [Column(Name = @"territory_id", Storage = "_TerritoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TerritoryId
        {
            get
            {
                return this._TerritoryId;
            }
            set
            {
                if (this._TerritoryId != value)
                {
                    this.OnTerritoryIdChanging(value);
                    this.SendPropertyChanging("TerritoryId");
                    this._TerritoryId = value;
                    this.SendPropertyChanged("TerritoryId");
                    this.OnTerritoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FastDial in the schema.
        /// </summary>
        [Column(Name = @"fast_dial", Storage = "_FastDial", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string FastDial
        {
            get
            {
                return this._FastDial;
            }
            set
            {
                if (this._FastDial != value)
                {
                    this.OnFastDialChanging(value);
                    this.SendPropertyChanging("FastDial");
                    this._FastDial = value;
                    this.SendPropertyChanged("FastDial");
                    this.OnFastDialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WebAddress in the schema.
        /// </summary>
        [Column(Name = @"web_address", Storage = "_WebAddress", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string WebAddress
        {
            get
            {
                return this._WebAddress;
            }
            set
            {
                if (this._WebAddress != value)
                {
                    this.OnWebAddressChanging(value);
                    this.SendPropertyChanging("WebAddress");
                    this._WebAddress = value;
                    this.SendPropertyChanged("WebAddress");
                    this.OnWebAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartnerCode in the schema.
        /// </summary>
        [Column(Name = @"partner_code", Storage = "_PartnerCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PartnerCode
        {
            get
            {
                return this._PartnerCode;
            }
            set
            {
                if (this._PartnerCode != value)
                {
                    this.OnPartnerCodeChanging(value);
                    this.SendPropertyChanging("PartnerCode");
                    this._PartnerCode = value;
                    this.SendPropertyChanged("PartnerCode");
                    this.OnPartnerCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransportRateCode in the schema.
        /// </summary>
        [Column(Name = @"transport_rate_code", Storage = "_TransportRateCode", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string TransportRateCode
        {
            get
            {
                return this._TransportRateCode;
            }
            set
            {
                if (this._TransportRateCode != value)
                {
                    this.OnTransportRateCodeChanging(value);
                    this.SendPropertyChanging("TransportRateCode");
                    this._TransportRateCode = value;
                    this.SendPropertyChanged("TransportRateCode");
                    this.OnTransportRateCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConsignmentBranchId in the schema.
        /// </summary>
        [Column(Name = @"consignment_branch_id", Storage = "_ConsignmentBranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ConsignmentBranchId
        {
            get
            {
                return this._ConsignmentBranchId;
            }
            set
            {
                if (this._ConsignmentBranchId != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnConsignmentBranchIdChanging(value);
                    this.SendPropertyChanging("ConsignmentBranchId");
                    this._ConsignmentBranchId = value;
                    this.SendPropertyChanged("ConsignmentBranchId");
                    this.OnConsignmentBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConsignmentWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"consignment_warehouse_id", Storage = "_ConsignmentWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? ConsignmentWarehouseId
        {
            get
            {
                return this._ConsignmentWarehouseId;
            }
            set
            {
                if (this._ConsignmentWarehouseId != value)
                {
                    this.OnConsignmentWarehouseIdChanging(value);
                    this.SendPropertyChanging("ConsignmentWarehouseId");
                    this._ConsignmentWarehouseId = value;
                    this.SendPropertyChanged("ConsignmentWarehouseId");
                    this.OnConsignmentWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UseCompanyTax in the schema.
        /// </summary>
        [Column(Name = @"use_company_taxes", Storage = "_UseCompanyTax", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? UseCompanyTax
        {
            get
            {
                return this._UseCompanyTax;
            }
            set
            {
                if (this._UseCompanyTax != value)
                {
                    this.OnUseCompanyTaxChanging(value);
                    this.SendPropertyChanging("UseCompanyTax");
                    this._UseCompanyTax = value;
                    this.SendPropertyChanged("UseCompanyTax");
                    this.OnUseCompanyTaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass1 in the schema.
        /// </summary>
        [Column(Name = @"tax_class1", Storage = "_TaxClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass1
        {
            get
            {
                return this._TaxClass1;
            }
            set
            {
                if (this._TaxClass1 != value)
                {
                    this.OnTaxClass1Changing(value);
                    this.SendPropertyChanging("TaxClass1");
                    this._TaxClass1 = value;
                    this.SendPropertyChanged("TaxClass1");
                    this.OnTaxClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass2 in the schema.
        /// </summary>
        [Column(Name = @"tax_class2", Storage = "_TaxClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass2
        {
            get
            {
                return this._TaxClass2;
            }
            set
            {
                if (this._TaxClass2 != value)
                {
                    this.OnTaxClass2Changing(value);
                    this.SendPropertyChanging("TaxClass2");
                    this._TaxClass2 = value;
                    this.SendPropertyChanged("TaxClass2");
                    this.OnTaxClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass3 in the schema.
        /// </summary>
        [Column(Name = @"tax_class3", Storage = "_TaxClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass3
        {
            get
            {
                return this._TaxClass3;
            }
            set
            {
                if (this._TaxClass3 != value)
                {
                    this.OnTaxClass3Changing(value);
                    this.SendPropertyChanging("TaxClass3");
                    this._TaxClass3 = value;
                    this.SendPropertyChanged("TaxClass3");
                    this.OnTaxClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass4 in the schema.
        /// </summary>
        [Column(Name = @"tax_class4", Storage = "_TaxClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass4
        {
            get
            {
                return this._TaxClass4;
            }
            set
            {
                if (this._TaxClass4 != value)
                {
                    this.OnTaxClass4Changing(value);
                    this.SendPropertyChanging("TaxClass4");
                    this._TaxClass4 = value;
                    this.SendPropertyChanged("TaxClass4");
                    this.OnTaxClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxClass5 in the schema.
        /// </summary>
        [Column(Name = @"tax_class5", Storage = "_TaxClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? TaxClass5
        {
            get
            {
                return this._TaxClass5;
            }
            set
            {
                if (this._TaxClass5 != value)
                {
                    this.OnTaxClass5Changing(value);
                    this.SendPropertyChanging("TaxClass5");
                    this._TaxClass5 = value;
                    this.SendPropertyChanged("TaxClass5");
                    this.OnTaxClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommercialTermsMandatory in the schema.
        /// </summary>
        [Column(Name = @"commercial_terms_mandatory", Storage = "_CommercialTermsMandatory", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? CommercialTermsMandatory
        {
            get
            {
                return this._CommercialTermsMandatory;
            }
            set
            {
                if (this._CommercialTermsMandatory != value)
                {
                    this.OnCommercialTermsMandatoryChanging(value);
                    this.SendPropertyChanging("CommercialTermsMandatory");
                    this._CommercialTermsMandatory = value;
                    this.SendPropertyChanged("CommercialTermsMandatory");
                    this.OnCommercialTermsMandatoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultCommercialTermsId in the schema.
        /// </summary>
        [Column(Name = @"default_commercial_terms_id", Storage = "_DefaultCommercialTermsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultCommercialTermsId
        {
            get
            {
                return this._DefaultCommercialTermsId;
            }
            set
            {
                if (this._DefaultCommercialTermsId != value)
                {
                    this.OnDefaultCommercialTermsIdChanging(value);
                    this.SendPropertyChanging("DefaultCommercialTermsId");
                    this._DefaultCommercialTermsId = value;
                    this.SendPropertyChanged("DefaultCommercialTermsId");
                    this.OnDefaultCommercialTermsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxGroup in the schema.
        /// </summary>
        [Column(Name = @"tax_group", Storage = "_TaxGroup", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxGroup
        {
            get
            {
                return this._TaxGroup;
            }
            set
            {
                if (this._TaxGroup != value)
                {
                    this.OnTaxGroupChanging(value);
                    this.SendPropertyChanging("TaxGroup");
                    this._TaxGroup = value;
                    this.SendPropertyChanged("TaxGroup");
                    this.OnTaxGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority1 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority1", Storage = "_TaxAuthority1", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority1
        {
            get
            {
                return this._TaxAuthority1;
            }
            set
            {
                if (this._TaxAuthority1 != value)
                {
                    this.OnTaxAuthority1Changing(value);
                    this.SendPropertyChanging("TaxAuthority1");
                    this._TaxAuthority1 = value;
                    this.SendPropertyChanged("TaxAuthority1");
                    this.OnTaxAuthority1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority2 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority2", Storage = "_TaxAuthority2", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority2
        {
            get
            {
                return this._TaxAuthority2;
            }
            set
            {
                if (this._TaxAuthority2 != value)
                {
                    this.OnTaxAuthority2Changing(value);
                    this.SendPropertyChanging("TaxAuthority2");
                    this._TaxAuthority2 = value;
                    this.SendPropertyChanged("TaxAuthority2");
                    this.OnTaxAuthority2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority3 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority3", Storage = "_TaxAuthority3", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority3
        {
            get
            {
                return this._TaxAuthority3;
            }
            set
            {
                if (this._TaxAuthority3 != value)
                {
                    this.OnTaxAuthority3Changing(value);
                    this.SendPropertyChanging("TaxAuthority3");
                    this._TaxAuthority3 = value;
                    this.SendPropertyChanged("TaxAuthority3");
                    this.OnTaxAuthority3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority4 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority4", Storage = "_TaxAuthority4", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority4
        {
            get
            {
                return this._TaxAuthority4;
            }
            set
            {
                if (this._TaxAuthority4 != value)
                {
                    this.OnTaxAuthority4Changing(value);
                    this.SendPropertyChanging("TaxAuthority4");
                    this._TaxAuthority4 = value;
                    this.SendPropertyChanged("TaxAuthority4");
                    this.OnTaxAuthority4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxAuthority5 in the schema.
        /// </summary>
        [Column(Name = @"tax_authority5", Storage = "_TaxAuthority5", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string TaxAuthority5
        {
            get
            {
                return this._TaxAuthority5;
            }
            set
            {
                if (this._TaxAuthority5 != value)
                {
                    this.OnTaxAuthority5Changing(value);
                    this.SendPropertyChanging("TaxAuthority5");
                    this._TaxAuthority5 = value;
                    this.SendPropertyChanged("TaxAuthority5");
                    this.OnTaxAuthority5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration1 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration1", Storage = "_TaxRegistration1", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration1
        {
            get
            {
                return this._TaxRegistration1;
            }
            set
            {
                if (this._TaxRegistration1 != value)
                {
                    this.OnTaxRegistration1Changing(value);
                    this.SendPropertyChanging("TaxRegistration1");
                    this._TaxRegistration1 = value;
                    this.SendPropertyChanged("TaxRegistration1");
                    this.OnTaxRegistration1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration2 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration2", Storage = "_TaxRegistration2", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration2
        {
            get
            {
                return this._TaxRegistration2;
            }
            set
            {
                if (this._TaxRegistration2 != value)
                {
                    this.OnTaxRegistration2Changing(value);
                    this.SendPropertyChanging("TaxRegistration2");
                    this._TaxRegistration2 = value;
                    this.SendPropertyChanged("TaxRegistration2");
                    this.OnTaxRegistration2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration3 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration3", Storage = "_TaxRegistration3", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration3
        {
            get
            {
                return this._TaxRegistration3;
            }
            set
            {
                if (this._TaxRegistration3 != value)
                {
                    this.OnTaxRegistration3Changing(value);
                    this.SendPropertyChanging("TaxRegistration3");
                    this._TaxRegistration3 = value;
                    this.SendPropertyChanged("TaxRegistration3");
                    this.OnTaxRegistration3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration4 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration4", Storage = "_TaxRegistration4", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration4
        {
            get
            {
                return this._TaxRegistration4;
            }
            set
            {
                if (this._TaxRegistration4 != value)
                {
                    this.OnTaxRegistration4Changing(value);
                    this.SendPropertyChanging("TaxRegistration4");
                    this._TaxRegistration4 = value;
                    this.SendPropertyChanged("TaxRegistration4");
                    this.OnTaxRegistration4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxRegistration5 in the schema.
        /// </summary>
        [Column(Name = @"tax_registration5", Storage = "_TaxRegistration5", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string TaxRegistration5
        {
            get
            {
                return this._TaxRegistration5;
            }
            set
            {
                if (this._TaxRegistration5 != value)
                {
                    this.OnTaxRegistration5Changing(value);
                    this.SendPropertyChanging("TaxRegistration5");
                    this._TaxRegistration5 = value;
                    this.SendPropertyChanged("TaxRegistration5");
                    this.OnTaxRegistration5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultAddress in the schema.
        /// </summary>
        [Column(Name = @"default_address", Storage = "_DefaultAddress", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? DefaultAddress
        {
            get
            {
                return this._DefaultAddress;
            }
            set
            {
                if (this._DefaultAddress != value)
                {
                    this.OnDefaultAddressChanging(value);
                    this.SendPropertyChanging("DefaultAddress");
                    this._DefaultAddress = value;
                    this.SendPropertyChanged("DefaultAddress");
                    this.OnDefaultAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateUseCompany in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_use_company", Storage = "_TestCertificateUseCompany", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool TestCertificateUseCompany
        {
            get
            {
                return this._TestCertificateUseCompany;
            }
            set
            {
                if (this._TestCertificateUseCompany != value)
                {
                    this.OnTestCertificateUseCompanyChanging(value);
                    this.SendPropertyChanging("TestCertificateUseCompany");
                    this._TestCertificateUseCompany = value;
                    this.SendPropertyChanged("TestCertificateUseCompany");
                    this.OnTestCertificateUseCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateSendMethod in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_send_method", Storage = "_TestCertificateSendMethod", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateSendMethod
        {
            get
            {
                return this._TestCertificateSendMethod;
            }
            set
            {
                if (this._TestCertificateSendMethod != value)
                {
                    this.OnTestCertificateSendMethodChanging(value);
                    this.SendPropertyChanging("TestCertificateSendMethod");
                    this._TestCertificateSendMethod = value;
                    this.SendPropertyChanged("TestCertificateSendMethod");
                    this.OnTestCertificateSendMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateDestination in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_destination", Storage = "_TestCertificateDestination", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateDestination
        {
            get
            {
                return this._TestCertificateDestination;
            }
            set
            {
                if (this._TestCertificateDestination != value)
                {
                    this.OnTestCertificateDestinationChanging(value);
                    this.SendPropertyChanging("TestCertificateDestination");
                    this._TestCertificateDestination = value;
                    this.SendPropertyChanged("TestCertificateDestination");
                    this.OnTestCertificateDestinationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TestCertificateHold in the schema.
        /// </summary>
        [Column(Name = @"test_certificate_hold", Storage = "_TestCertificateHold", CanBeNull = false, DbType = "VARCHAR(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TestCertificateHold
        {
            get
            {
                return this._TestCertificateHold;
            }
            set
            {
                if (this._TestCertificateHold != value)
                {
                    this.OnTestCertificateHoldChanging(value);
                    this.SendPropertyChanging("TestCertificateHold");
                    this._TestCertificateHold = value;
                    this.SendPropertyChanged("TestCertificateHold");
                    this.OnTestCertificateHoldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass1 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class1", Storage = "_DefaultItemClass1", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass1
        {
            get
            {
                return this._DefaultItemClass1;
            }
            set
            {
                if (this._DefaultItemClass1 != value)
                {
                    this.OnDefaultItemClass1Changing(value);
                    this.SendPropertyChanging("DefaultItemClass1");
                    this._DefaultItemClass1 = value;
                    this.SendPropertyChanged("DefaultItemClass1");
                    this.OnDefaultItemClass1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass2 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class2", Storage = "_DefaultItemClass2", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass2
        {
            get
            {
                return this._DefaultItemClass2;
            }
            set
            {
                if (this._DefaultItemClass2 != value)
                {
                    this.OnDefaultItemClass2Changing(value);
                    this.SendPropertyChanging("DefaultItemClass2");
                    this._DefaultItemClass2 = value;
                    this.SendPropertyChanged("DefaultItemClass2");
                    this.OnDefaultItemClass2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass3 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class3", Storage = "_DefaultItemClass3", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass3
        {
            get
            {
                return this._DefaultItemClass3;
            }
            set
            {
                if (this._DefaultItemClass3 != value)
                {
                    this.OnDefaultItemClass3Changing(value);
                    this.SendPropertyChanging("DefaultItemClass3");
                    this._DefaultItemClass3 = value;
                    this.SendPropertyChanged("DefaultItemClass3");
                    this.OnDefaultItemClass3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass4 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class4", Storage = "_DefaultItemClass4", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass4
        {
            get
            {
                return this._DefaultItemClass4;
            }
            set
            {
                if (this._DefaultItemClass4 != value)
                {
                    this.OnDefaultItemClass4Changing(value);
                    this.SendPropertyChanging("DefaultItemClass4");
                    this._DefaultItemClass4 = value;
                    this.SendPropertyChanged("DefaultItemClass4");
                    this.OnDefaultItemClass4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultItemClass5 in the schema.
        /// </summary>
        [Column(Name = @"default_item_class5", Storage = "_DefaultItemClass5", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultItemClass5
        {
            get
            {
                return this._DefaultItemClass5;
            }
            set
            {
                if (this._DefaultItemClass5 != value)
                {
                    this.OnDefaultItemClass5Changing(value);
                    this.SendPropertyChanging("DefaultItemClass5");
                    this._DefaultItemClass5 = value;
                    this.SendPropertyChanged("DefaultItemClass5");
                    this.OnDefaultItemClass5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutworkWarehouseId in the schema.
        /// </summary>
        [Column(Name = @"outwork_warehouse_id", Storage = "_OutworkWarehouseId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? OutworkWarehouseId
        {
            get
            {
                return this._OutworkWarehouseId;
            }
            set
            {
                if (this._OutworkWarehouseId != value)
                {
                    this.OnOutworkWarehouseIdChanging(value);
                    this.SendPropertyChanging("OutworkWarehouseId");
                    this._OutworkWarehouseId = value;
                    this.SendPropertyChanged("OutworkWarehouseId");
                    this.OnOutworkWarehouseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultTransportTypeId in the schema.
        /// </summary>
        [Column(Name = @"default_transport_type_id", Storage = "_DefaultTransportTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? DefaultTransportTypeId
        {
            get
            {
                return this._DefaultTransportTypeId;
            }
            set
            {
                if (this._DefaultTransportTypeId != value)
                {
                    if (this._TransportTypeCode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefaultTransportTypeIdChanging(value);
                    this.SendPropertyChanging("DefaultTransportTypeId");
                    this._DefaultTransportTypeId = value;
                    this.SendPropertyChanged("DefaultTransportTypeId");
                    this.OnDefaultTransportTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanySubAddress", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company");
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.CompanySubAddress.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        this._CompanyId = value.Id;
                        value.CompanySubAddress.Add(this);
                    }
                    else
                    {
                        this._CompanyId = default(int?);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_CompanySubAddress", Storage="_Branch", ThisKey="ConsignmentBranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.CompanySubAddress.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._ConsignmentBranchId = value.Id;
                        value.CompanySubAddress.Add(this);
                    }
                    else
                    {
                        this._ConsignmentBranchId = default(int?);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_CompanySubAddress", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address
        {
            get
            {
                return this._Address.Entity;
            }
            set
            {
                Address previousValue = this._Address.Entity;
                if ((previousValue != value) || (this._Address.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address");
                    if (previousValue != null)
                    {
                        this._Address.Entity = null;
                        previousValue.CompanySubAddress.Remove(this);
                    }
                    this._Address.Entity = value;
                    if (value != null)
                    {
                        this._AddressId = value.Id;
                        value.CompanySubAddress.Add(this);
                    }
                    else
                    {
                        this._AddressId = default(int?);
                    }
                    this.SendPropertyChanged("Address");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyNoteTemplate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompanySubAddress_CompanyNoteTemplate", Storage="_CompanyNoteTemplate", ThisKey="Id", OtherKey="CompanySubAddressId", DeleteRule="NO ACTION")]
        public EntitySet<CompanyNoteTemplate> CompanyNoteTemplate
        {
            get
            {
                return this._CompanyNoteTemplate;
            }
            set
            {
                this._CompanyNoteTemplate.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for TransportTypeCode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TransportTypeCode_CompanySubAddress", Storage="_TransportTypeCode", ThisKey="DefaultTransportTypeId", OtherKey="Id", IsForeignKey=true)]
        public TransportTypeCode TransportTypeCode
        {
            get
            {
                return this._TransportTypeCode.Entity;
            }
            set
            {
                TransportTypeCode previousValue = this._TransportTypeCode.Entity;
                if ((previousValue != value) || (this._TransportTypeCode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TransportTypeCode");
                    if (previousValue != null)
                    {
                        this._TransportTypeCode.Entity = null;
                        previousValue.CompanySubAddress.Remove(this);
                    }
                    this._TransportTypeCode.Entity = value;
                    if (value != null)
                    {
                        this._DefaultTransportTypeId = value.Id;
                        value.CompanySubAddress.Add(this);
                    }
                    else
                    {
                        this._DefaultTransportTypeId = default(int?);
                    }
                    this.SendPropertyChanged("TransportTypeCode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CompanyNoteTemplate(CompanyNoteTemplate entity)
        {
            this.SendPropertyChanging("CompanyNoteTemplate");
            entity.CompanySubAddress = this;
        }
    
        private void detach_CompanyNoteTemplate(CompanyNoteTemplate entity)
        {
            this.SendPropertyChanging("CompanyNoteTemplate");
            entity.CompanySubAddress = null;
        }
    }

}
