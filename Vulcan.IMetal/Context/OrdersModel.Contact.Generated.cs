//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.Contact in the schema.
    /// </summary>
    [Table(Name = @"public.contacts")]
    public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Nickname;

        private string _Forename;

        private string _Surname;

        private string _Position;

        private System.Nullable<int> _TitleId;

        private System.Nullable<int> _BranchId;

        private System.Nullable<int> _PersonnelId;

        private System.Nullable<int> _RelationshipId;

        private System.Nullable<int> _CompanyId;

        private System.Nullable<int> _TypeId;

        private System.Nullable<int> _TerritoryId;

        private string _Telephone;

        private string _FastDial;

        private string _Mobile;

        private string _Fax;

        private string _Email;

        private string _WebAddress;

        private System.Nullable<int> _ContactFrequency;

        private System.Nullable<System.DateTime> _LastContactDate;

        private System.Nullable<bool> _AcceptMail;

        private System.Nullable<bool> _AcceptEmail;

        private System.Nullable<bool> _AcceptFax;

        private System.Nullable<bool> _AcceptCall;

        private System.Nullable<bool> _AcceptVisit;

        private string _GeneralNote;

        private string _ProductsNote;

        private string _PersonalNote;

        private string _InterestsNote;

        private string _EmploymentNote;

        private string _Category;

        private string _Idxfti;

        private System.Nullable<int> _StatusId;

        private System.Nullable<int> _AddressId;
        #pragma warning restore 0649

        private EntitySet<Company> _Company_DefaultContactId;

        private EntityRef<Company> _Company_CompanyId;

        private EntityRef<Address> _Address;

        private EntityRef<Branch> _Branch;

        private EntityRef<Personnel> _Personnel;

        private EntitySet<SalesHeader> _SalesHeader;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnNicknameChanging(string value);
        partial void OnNicknameChanged();
        partial void OnForenameChanging(string value);
        partial void OnForenameChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnTitleIdChanging(System.Nullable<int> value);
        partial void OnTitleIdChanged();
        partial void OnBranchIdChanging(System.Nullable<int> value);
        partial void OnBranchIdChanged();
        partial void OnPersonnelIdChanging(System.Nullable<int> value);
        partial void OnPersonnelIdChanged();
        partial void OnRelationshipIdChanging(System.Nullable<int> value);
        partial void OnRelationshipIdChanged();
        partial void OnCompanyIdChanging(System.Nullable<int> value);
        partial void OnCompanyIdChanged();
        partial void OnTypeIdChanging(System.Nullable<int> value);
        partial void OnTypeIdChanged();
        partial void OnTerritoryIdChanging(System.Nullable<int> value);
        partial void OnTerritoryIdChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnFastDialChanging(string value);
        partial void OnFastDialChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnWebAddressChanging(string value);
        partial void OnWebAddressChanged();
        partial void OnContactFrequencyChanging(System.Nullable<int> value);
        partial void OnContactFrequencyChanged();
        partial void OnLastContactDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastContactDateChanged();
        partial void OnAcceptMailChanging(System.Nullable<bool> value);
        partial void OnAcceptMailChanged();
        partial void OnAcceptEmailChanging(System.Nullable<bool> value);
        partial void OnAcceptEmailChanged();
        partial void OnAcceptFaxChanging(System.Nullable<bool> value);
        partial void OnAcceptFaxChanged();
        partial void OnAcceptCallChanging(System.Nullable<bool> value);
        partial void OnAcceptCallChanged();
        partial void OnAcceptVisitChanging(System.Nullable<bool> value);
        partial void OnAcceptVisitChanged();
        partial void OnGeneralNoteChanging(string value);
        partial void OnGeneralNoteChanged();
        partial void OnProductsNoteChanging(string value);
        partial void OnProductsNoteChanged();
        partial void OnPersonalNoteChanging(string value);
        partial void OnPersonalNoteChanged();
        partial void OnInterestsNoteChanging(string value);
        partial void OnInterestsNoteChanged();
        partial void OnEmploymentNoteChanging(string value);
        partial void OnEmploymentNoteChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnIdxftiChanging(string value);
        partial void OnIdxftiChanged();
        partial void OnStatusIdChanging(System.Nullable<int> value);
        partial void OnStatusIdChanged();
        partial void OnAddressIdChanging(System.Nullable<int> value);
        partial void OnAddressIdChanged();
        #endregion

        public Contact()
        {
            this._Company_DefaultContactId = new EntitySet<Company>(new Action<Company>(this.attach_Company_DefaultContactId), new Action<Company>(this.detach_Company_DefaultContactId));
            this._Company_CompanyId  = default(EntityRef<Company>);
            this._Address  = default(EntityRef<Address>);
            this._Branch  = default(EntityRef<Branch>);
            this._Personnel  = default(EntityRef<Personnel>);
            this._SalesHeader = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeader), new Action<SalesHeader>(this.detach_SalesHeader));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nickname in the schema.
        /// </summary>
        [Column(Name = @"nickname", Storage = "_Nickname", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Nickname
        {
            get
            {
                return this._Nickname;
            }
            set
            {
                if (this._Nickname != value)
                {
                    this.OnNicknameChanging(value);
                    this.SendPropertyChanging("Nickname");
                    this._Nickname = value;
                    this.SendPropertyChanged("Nickname");
                    this.OnNicknameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Forename in the schema.
        /// </summary>
        [Column(Name = @"forename", Storage = "_Forename", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Forename
        {
            get
            {
                return this._Forename;
            }
            set
            {
                if (this._Forename != value)
                {
                    this.OnForenameChanging(value);
                    this.SendPropertyChanging("Forename");
                    this._Forename = value;
                    this.SendPropertyChanged("Forename");
                    this.OnForenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Surname in the schema.
        /// </summary>
        [Column(Name = @"surname", Storage = "_Surname", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Surname
        {
            get
            {
                return this._Surname;
            }
            set
            {
                if (this._Surname != value)
                {
                    this.OnSurnameChanging(value);
                    this.SendPropertyChanging("Surname");
                    this._Surname = value;
                    this.SendPropertyChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"""position""", Storage = "_Position", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging("Position");
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TitleId in the schema.
        /// </summary>
        [Column(Name = @"title_id", Storage = "_TitleId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TitleId
        {
            get
            {
                return this._TitleId;
            }
            set
            {
                if (this._TitleId != value)
                {
                    this.OnTitleIdChanging(value);
                    this.SendPropertyChanging("TitleId");
                    this._TitleId = value;
                    this.SendPropertyChanged("TitleId");
                    this.OnTitleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Name = @"branch_id", Storage = "_BranchId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonnelId in the schema.
        /// </summary>
        [Column(Name = @"personnel_id", Storage = "_PersonnelId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PersonnelId
        {
            get
            {
                return this._PersonnelId;
            }
            set
            {
                if (this._PersonnelId != value)
                {
                    if (this._Personnel.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonnelIdChanging(value);
                    this.SendPropertyChanging("PersonnelId");
                    this._PersonnelId = value;
                    this.SendPropertyChanged("PersonnelId");
                    this.OnPersonnelIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelationshipId in the schema.
        /// </summary>
        [Column(Name = @"relationship_id", Storage = "_RelationshipId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RelationshipId
        {
            get
            {
                return this._RelationshipId;
            }
            set
            {
                if (this._RelationshipId != value)
                {
                    this.OnRelationshipIdChanging(value);
                    this.SendPropertyChanging("RelationshipId");
                    this._RelationshipId = value;
                    this.SendPropertyChanged("RelationshipId");
                    this.OnRelationshipIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyId in the schema.
        /// </summary>
        [Column(Name = @"company_id", Storage = "_CompanyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CompanyId
        {
            get
            {
                return this._CompanyId;
            }
            set
            {
                if (this._CompanyId != value)
                {
                    if (this._Company_CompanyId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIdChanging(value);
                    this.SendPropertyChanging("CompanyId");
                    this._CompanyId = value;
                    this.SendPropertyChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"type_id", Storage = "_TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryId in the schema.
        /// </summary>
        [Column(Name = @"territory_id", Storage = "_TerritoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TerritoryId
        {
            get
            {
                return this._TerritoryId;
            }
            set
            {
                if (this._TerritoryId != value)
                {
                    this.OnTerritoryIdChanging(value);
                    this.SendPropertyChanging("TerritoryId");
                    this._TerritoryId = value;
                    this.SendPropertyChanged("TerritoryId");
                    this.OnTerritoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telephone in the schema.
        /// </summary>
        [Column(Name = @"telephone", Storage = "_Telephone", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telephone
        {
            get
            {
                return this._Telephone;
            }
            set
            {
                if (this._Telephone != value)
                {
                    this.OnTelephoneChanging(value);
                    this.SendPropertyChanging("Telephone");
                    this._Telephone = value;
                    this.SendPropertyChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FastDial in the schema.
        /// </summary>
        [Column(Name = @"fast_dial", Storage = "_FastDial", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string FastDial
        {
            get
            {
                return this._FastDial;
            }
            set
            {
                if (this._FastDial != value)
                {
                    this.OnFastDialChanging(value);
                    this.SendPropertyChanging("FastDial");
                    this._FastDial = value;
                    this.SendPropertyChanged("FastDial");
                    this.OnFastDialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mobile in the schema.
        /// </summary>
        [Column(Name = @"mobile", Storage = "_Mobile", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if (this._Mobile != value)
                {
                    this.OnMobileChanging(value);
                    this.SendPropertyChanging("Mobile");
                    this._Mobile = value;
                    this.SendPropertyChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WebAddress in the schema.
        /// </summary>
        [Column(Name = @"web_address", Storage = "_WebAddress", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string WebAddress
        {
            get
            {
                return this._WebAddress;
            }
            set
            {
                if (this._WebAddress != value)
                {
                    this.OnWebAddressChanging(value);
                    this.SendPropertyChanging("WebAddress");
                    this._WebAddress = value;
                    this.SendPropertyChanged("WebAddress");
                    this.OnWebAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactFrequency in the schema.
        /// </summary>
        [Column(Name = @"contact_frequency", Storage = "_ContactFrequency", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ContactFrequency
        {
            get
            {
                return this._ContactFrequency;
            }
            set
            {
                if (this._ContactFrequency != value)
                {
                    this.OnContactFrequencyChanging(value);
                    this.SendPropertyChanging("ContactFrequency");
                    this._ContactFrequency = value;
                    this.SendPropertyChanged("ContactFrequency");
                    this.OnContactFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastContactDate in the schema.
        /// </summary>
        [Column(Name = @"last_contact_date", Storage = "_LastContactDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastContactDate
        {
            get
            {
                return this._LastContactDate;
            }
            set
            {
                if (this._LastContactDate != value)
                {
                    this.OnLastContactDateChanging(value);
                    this.SendPropertyChanging("LastContactDate");
                    this._LastContactDate = value;
                    this.SendPropertyChanged("LastContactDate");
                    this.OnLastContactDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptMail in the schema.
        /// </summary>
        [Column(Name = @"accept_mail", Storage = "_AcceptMail", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AcceptMail
        {
            get
            {
                return this._AcceptMail;
            }
            set
            {
                if (this._AcceptMail != value)
                {
                    this.OnAcceptMailChanging(value);
                    this.SendPropertyChanging("AcceptMail");
                    this._AcceptMail = value;
                    this.SendPropertyChanged("AcceptMail");
                    this.OnAcceptMailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptEmail in the schema.
        /// </summary>
        [Column(Name = @"accept_email", Storage = "_AcceptEmail", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AcceptEmail
        {
            get
            {
                return this._AcceptEmail;
            }
            set
            {
                if (this._AcceptEmail != value)
                {
                    this.OnAcceptEmailChanging(value);
                    this.SendPropertyChanging("AcceptEmail");
                    this._AcceptEmail = value;
                    this.SendPropertyChanged("AcceptEmail");
                    this.OnAcceptEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptFax in the schema.
        /// </summary>
        [Column(Name = @"accept_fax", Storage = "_AcceptFax", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AcceptFax
        {
            get
            {
                return this._AcceptFax;
            }
            set
            {
                if (this._AcceptFax != value)
                {
                    this.OnAcceptFaxChanging(value);
                    this.SendPropertyChanging("AcceptFax");
                    this._AcceptFax = value;
                    this.SendPropertyChanged("AcceptFax");
                    this.OnAcceptFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptCall in the schema.
        /// </summary>
        [Column(Name = @"accept_calls", Storage = "_AcceptCall", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AcceptCall
        {
            get
            {
                return this._AcceptCall;
            }
            set
            {
                if (this._AcceptCall != value)
                {
                    this.OnAcceptCallChanging(value);
                    this.SendPropertyChanging("AcceptCall");
                    this._AcceptCall = value;
                    this.SendPropertyChanged("AcceptCall");
                    this.OnAcceptCallChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptVisit in the schema.
        /// </summary>
        [Column(Name = @"accept_visits", Storage = "_AcceptVisit", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AcceptVisit
        {
            get
            {
                return this._AcceptVisit;
            }
            set
            {
                if (this._AcceptVisit != value)
                {
                    this.OnAcceptVisitChanging(value);
                    this.SendPropertyChanging("AcceptVisit");
                    this._AcceptVisit = value;
                    this.SendPropertyChanged("AcceptVisit");
                    this.OnAcceptVisitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GeneralNote in the schema.
        /// </summary>
        [Column(Name = @"general_note", Storage = "_GeneralNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GeneralNote
        {
            get
            {
                return this._GeneralNote;
            }
            set
            {
                if (this._GeneralNote != value)
                {
                    this.OnGeneralNoteChanging(value);
                    this.SendPropertyChanging("GeneralNote");
                    this._GeneralNote = value;
                    this.SendPropertyChanged("GeneralNote");
                    this.OnGeneralNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductsNote in the schema.
        /// </summary>
        [Column(Name = @"products_note", Storage = "_ProductsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ProductsNote
        {
            get
            {
                return this._ProductsNote;
            }
            set
            {
                if (this._ProductsNote != value)
                {
                    this.OnProductsNoteChanging(value);
                    this.SendPropertyChanging("ProductsNote");
                    this._ProductsNote = value;
                    this.SendPropertyChanged("ProductsNote");
                    this.OnProductsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonalNote in the schema.
        /// </summary>
        [Column(Name = @"personal_note", Storage = "_PersonalNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PersonalNote
        {
            get
            {
                return this._PersonalNote;
            }
            set
            {
                if (this._PersonalNote != value)
                {
                    this.OnPersonalNoteChanging(value);
                    this.SendPropertyChanging("PersonalNote");
                    this._PersonalNote = value;
                    this.SendPropertyChanged("PersonalNote");
                    this.OnPersonalNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InterestsNote in the schema.
        /// </summary>
        [Column(Name = @"interests_note", Storage = "_InterestsNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InterestsNote
        {
            get
            {
                return this._InterestsNote;
            }
            set
            {
                if (this._InterestsNote != value)
                {
                    this.OnInterestsNoteChanging(value);
                    this.SendPropertyChanging("InterestsNote");
                    this._InterestsNote = value;
                    this.SendPropertyChanged("InterestsNote");
                    this.OnInterestsNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmploymentNote in the schema.
        /// </summary>
        [Column(Name = @"employment_note", Storage = "_EmploymentNote", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string EmploymentNote
        {
            get
            {
                return this._EmploymentNote;
            }
            set
            {
                if (this._EmploymentNote != value)
                {
                    this.OnEmploymentNoteChanging(value);
                    this.SendPropertyChanging("EmploymentNote");
                    this._EmploymentNote = value;
                    this.SendPropertyChanged("EmploymentNote");
                    this.OnEmploymentNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Name = @"categories", Storage = "_Category", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging("Category");
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Idxfti in the schema.
        /// </summary>
        [Column(Name = @"idxfti", Storage = "_Idxfti", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Idxfti
        {
            get
            {
                return this._Idxfti;
            }
            set
            {
                if (this._Idxfti != value)
                {
                    this.OnIdxftiChanging(value);
                    this.SendPropertyChanging("Idxfti");
                    this._Idxfti = value;
                    this.SendPropertyChanged("Idxfti");
                    this.OnIdxftiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Name = @"status_id", Storage = "_StatusId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Name = @"address_id", Storage = "_AddressId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    if (this._Address.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_DefaultContactId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contact_Company", Storage="_Company_DefaultContactId", ThisKey="Id", OtherKey="DefaultContactId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company_DefaultContactId
        {
            get
            {
                return this._Company_DefaultContactId;
            }
            set
            {
                this._Company_DefaultContactId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_Contact", Storage="_Company_CompanyId", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
        public Company Company_CompanyId
        {
            get
            {
                return this._Company_CompanyId.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyId.Entity;
                if ((previousValue != value) || (this._Company_CompanyId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Company_CompanyId");
                    if (previousValue != null)
                    {
                        this._Company_CompanyId.Entity = null;
                        previousValue.Contact_CompanyId.Remove(this);
                    }
                    this._Company_CompanyId.Entity = value;
                    if (value != null)
                    {
                        this._CompanyId = value.Id;
                        value.Contact_CompanyId.Add(this);
                    }
                    else
                    {
                        this._CompanyId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Address_Contact", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
        public Address Address
        {
            get
            {
                return this._Address.Entity;
            }
            set
            {
                Address previousValue = this._Address.Entity;
                if ((previousValue != value) || (this._Address.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Address");
                    if (previousValue != null)
                    {
                        this._Address.Entity = null;
                        previousValue.Contact.Remove(this);
                    }
                    this._Address.Entity = value;
                    if (value != null)
                    {
                        this._AddressId = value.Id;
                        value.Contact.Add(this);
                    }
                    else
                    {
                        this._AddressId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Address");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Contact", Storage="_Branch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.Contact.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.Id;
                        value.Contact.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personnel in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Personnel_Contact", Storage="_Personnel", ThisKey="PersonnelId", OtherKey="Id", IsForeignKey=true)]
        public Personnel Personnel
        {
            get
            {
                return this._Personnel.Entity;
            }
            set
            {
                Personnel previousValue = this._Personnel.Entity;
                if ((previousValue != value) || (this._Personnel.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Personnel");
                    if (previousValue != null)
                    {
                        this._Personnel.Entity = null;
                        previousValue.Contact.Remove(this);
                    }
                    this._Personnel.Entity = value;
                    if (value != null)
                    {
                        this._PersonnelId = value.Id;
                        value.Contact.Add(this);
                    }
                    else
                    {
                        this._PersonnelId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Personnel");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SalesHeader in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contact_SalesHeader", Storage="_SalesHeader", ThisKey="Id", OtherKey="ContactId", DeleteRule="NO ACTION")]
        public EntitySet<SalesHeader> SalesHeader
        {
            get
            {
                return this._SalesHeader;
            }
            set
            {
                this._SalesHeader.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company_DefaultContactId(Company entity)
        {
            this.SendPropertyChanging("Company_DefaultContactId");
            entity.Contact_DefaultContactId = this;
        }
    
        private void detach_Company_DefaultContactId(Company entity)
        {
            this.SendPropertyChanging("Company_DefaultContactId");
            entity.Contact_DefaultContactId = null;
        }

        private void attach_SalesHeader(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader");
            entity.Contact = this;
        }
    
        private void detach_SalesHeader(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeader");
            entity.Contact = null;
        }
    }

}
