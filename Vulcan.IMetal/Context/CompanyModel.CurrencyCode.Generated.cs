//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/8/2019 10:47:06 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Company
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Company.CurrencyCode in the schema.
    /// </summary>
    [Table(Name = @"public.currency_codes")]
    public partial class CurrencyCode : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _Version;

        private System.DateTime? _Cdate;

        private int? _CuserId;

        private System.DateTime? _Mdate;

        private int? _MuserId;

        private string _Status;

        private string _Code;

        private string _Name;

        private string _Symbol;

        private decimal? _ExchangeRate;

        private string _SymbolCodeLocation = @"P";

        private decimal? _InvoiceBaseCurrencyExchangeRate = 0m;

        private System.DateTime? _DateLastSynchronised;

        private string _ExchangeRateOperator = @"D";
        #pragma warning restore 0649

        private EntitySet<Company> _Company;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(int? value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.DateTime? value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(int? value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.DateTime? value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(int? value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSymbolChanging(string value);
        partial void OnSymbolChanged();
        partial void OnExchangeRateChanging(decimal? value);
        partial void OnExchangeRateChanged();
        partial void OnSymbolCodeLocationChanging(string value);
        partial void OnSymbolCodeLocationChanged();
        partial void OnInvoiceBaseCurrencyExchangeRateChanging(decimal? value);
        partial void OnInvoiceBaseCurrencyExchangeRateChanged();
        partial void OnDateLastSynchronisedChanging(System.DateTime? value);
        partial void OnDateLastSynchronisedChanged();
        partial void OnExchangeRateOperatorChanging(string value);
        partial void OnExchangeRateOperatorChanged();
        #endregion

        public CurrencyCode()
        {
            this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Symbol in the schema.
        /// </summary>
        [Column(Name = @"symbol", Storage = "_Symbol", DbType = "VARCHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string Symbol
        {
            get
            {
                return this._Symbol;
            }
            set
            {
                if (this._Symbol != value)
                {
                    this.OnSymbolChanging(value);
                    this.SendPropertyChanging("Symbol");
                    this._Symbol = value;
                    this.SendPropertyChanged("Symbol");
                    this.OnSymbolChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate", Storage = "_ExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? ExchangeRate
        {
            get
            {
                return this._ExchangeRate;
            }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this.OnExchangeRateChanging(value);
                    this.SendPropertyChanging("ExchangeRate");
                    this._ExchangeRate = value;
                    this.SendPropertyChanged("ExchangeRate");
                    this.OnExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymbolCodeLocation in the schema.
        /// </summary>
        [Column(Name = @"symbol_code_location", Storage = "_SymbolCodeLocation", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string SymbolCodeLocation
        {
            get
            {
                return this._SymbolCodeLocation;
            }
            set
            {
                if (this._SymbolCodeLocation != value)
                {
                    this.OnSymbolCodeLocationChanging(value);
                    this.SendPropertyChanging("SymbolCodeLocation");
                    this._SymbolCodeLocation = value;
                    this.SendPropertyChanged("SymbolCodeLocation");
                    this.OnSymbolCodeLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceBaseCurrencyExchangeRate in the schema.
        /// </summary>
        [Column(Name = @"invoice_base_currency_exchange_rate", Storage = "_InvoiceBaseCurrencyExchangeRate", DbType = "NUMERIC(14,8)", UpdateCheck = UpdateCheck.Never)]
        public decimal? InvoiceBaseCurrencyExchangeRate
        {
            get
            {
                return this._InvoiceBaseCurrencyExchangeRate;
            }
            set
            {
                if (this._InvoiceBaseCurrencyExchangeRate != value)
                {
                    this.OnInvoiceBaseCurrencyExchangeRateChanging(value);
                    this.SendPropertyChanging("InvoiceBaseCurrencyExchangeRate");
                    this._InvoiceBaseCurrencyExchangeRate = value;
                    this.SendPropertyChanged("InvoiceBaseCurrencyExchangeRate");
                    this.OnInvoiceBaseCurrencyExchangeRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateLastSynchronised in the schema.
        /// </summary>
        [Column(Name = @"date_last_synchronised", Storage = "_DateLastSynchronised", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateLastSynchronised
        {
            get
            {
                return this._DateLastSynchronised;
            }
            set
            {
                if (this._DateLastSynchronised != value)
                {
                    this.OnDateLastSynchronisedChanging(value);
                    this.SendPropertyChanging("DateLastSynchronised");
                    this._DateLastSynchronised = value;
                    this.SendPropertyChanged("DateLastSynchronised");
                    this.OnDateLastSynchronisedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExchangeRateOperator in the schema.
        /// </summary>
        [Column(Name = @"exchange_rate_operator", Storage = "_ExchangeRateOperator", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ExchangeRateOperator
        {
            get
            {
                return this._ExchangeRateOperator;
            }
            set
            {
                if (this._ExchangeRateOperator != value)
                {
                    this.OnExchangeRateOperatorChanging(value);
                    this.SendPropertyChanging("ExchangeRateOperator");
                    this._ExchangeRateOperator = value;
                    this.SendPropertyChanged("ExchangeRateOperator");
                    this.OnExchangeRateOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CurrencyCode_Company", Storage="_Company", ThisKey="Id", OtherKey="CurrencyId", DeleteRule="NO ACTION")]
        public EntitySet<Company> Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                this._Company.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CurrencyCode = this;
        }
    
        private void detach_Company(Company entity)
        {
            this.SendPropertyChanging("Company");
            entity.CurrencyCode = null;
        }
    }

}
