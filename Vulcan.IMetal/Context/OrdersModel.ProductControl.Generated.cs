//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/19/2017 10:27:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Vulcan.IMetal.Context.Orders
{

    /// <summary>
    /// There are no comments for Vulcan.IMetal.Context.Orders.ProductControl in the schema.
    /// </summary>
    [Table(Name = @"public.product_controls")]
    public partial class ProductControl : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _Version;

        private System.Nullable<System.DateTime> _Cdate;

        private System.Nullable<int> _CuserId;

        private System.Nullable<System.DateTime> _Mdate;

        private System.Nullable<int> _MuserId;

        private string _Status;

        private string _Code;

        private string _Description;

        private System.Nullable<int> _WeightUnitId;

        private System.Nullable<int> _QuantityUnitId;

        private System.Nullable<int> _WeightDecimal;

        private string _ControlQuantity;

        private System.Nullable<bool> _ControlPiece;

        private System.Nullable<int> _Specification1Id;

        private System.Nullable<int> _Specification2Id;

        private System.Nullable<int> _Specification3Id;

        private System.Nullable<int> _Specification4Id;

        private System.Nullable<int> _Specification5Id;

        private string _Pcs2qtyCalc;

        private string _Wgt2qtyCalc;

        private string _Qty2pcsCalc;

        private string _Wgt2pcsCalc;

        private string _Qty2wgtCalc;

        private string _Pcs2wgtCalc;

        private string _WidthCalc;

        private string _LengthCalc;

        private string _HeightCalc;

        private string _DiameterCalc;

        private string _ZeroStockTrigger;

        private System.Nullable<int> _Dim1TypeId;

        private System.Nullable<bool> _Dim1Locked = false;

        private System.Nullable<int> _Dim1UnitsId;

        private System.Nullable<int> _Dim2TypeId;

        private System.Nullable<bool> _Dim2Locked = false;

        private System.Nullable<int> _Dim2UnitsId;

        private System.Nullable<int> _Dim3TypeId;

        private System.Nullable<bool> _Dim3Locked = false;

        private System.Nullable<int> _Dim3UnitsId;

        private System.Nullable<int> _Dim4TypeId;

        private System.Nullable<bool> _Dim4Locked = false;

        private System.Nullable<int> _Dim4UnitsId;

        private System.Nullable<int> _Dim5TypeId;

        private System.Nullable<bool> _Dim5Locked = false;

        private System.Nullable<int> _Dim5UnitsId;

        private string _DensityLabel;

        private System.Nullable<int> _PiecesUnitId;

        private string _DensityCalc = @"";

        private System.Nullable<int> _Dim1ToleranceUnitsId;

        private System.Nullable<int> _Dim2ToleranceUnitsId;

        private System.Nullable<int> _Dim3ToleranceUnitsId;

        private System.Nullable<int> _Dim4ToleranceUnitsId;

        private System.Nullable<int> _Dim5ToleranceUnitsId;

        private System.Nullable<int> _Specification6Id;

        private System.Nullable<int> _Specification7Id;

        private System.Nullable<int> _Specification8Id;

        private System.Nullable<int> _Specification9Id;

        private System.Nullable<int> _Specification10Id;

        private System.Nullable<int> _FirstOptimisableDimension;

        private System.Nullable<int> _SecondOptimisableDimension;

        private System.Nullable<int> _QuantityDecimal = 3;

        private System.Nullable<decimal> _DensityFactor = 1.0m;

        private string _Length2weightCalc;

        private string _Area2weightCalc;
        #pragma warning restore 0649

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim1ToleranceUnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim1UnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim2ToleranceUnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim2UnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim3ToleranceUnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim3UnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim4ToleranceUnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim4UnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim5ToleranceUnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_Dim5UnitsId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_PiecesUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_QuantityUnitId;

        private EntityRef<UnitsOfMeasure> _UnitsOfMeasure_WeightUnitId;

        private EntitySet<ProductCategory> _ProductCategory;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVersionChanging(System.Nullable<int> value);
        partial void OnVersionChanged();
        partial void OnCdateChanging(System.Nullable<System.DateTime> value);
        partial void OnCdateChanged();
        partial void OnCuserIdChanging(System.Nullable<int> value);
        partial void OnCuserIdChanged();
        partial void OnMdateChanging(System.Nullable<System.DateTime> value);
        partial void OnMdateChanged();
        partial void OnMuserIdChanging(System.Nullable<int> value);
        partial void OnMuserIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnWeightUnitIdChanging(System.Nullable<int> value);
        partial void OnWeightUnitIdChanged();
        partial void OnQuantityUnitIdChanging(System.Nullable<int> value);
        partial void OnQuantityUnitIdChanged();
        partial void OnWeightDecimalChanging(System.Nullable<int> value);
        partial void OnWeightDecimalChanged();
        partial void OnControlQuantityChanging(string value);
        partial void OnControlQuantityChanged();
        partial void OnControlPieceChanging(System.Nullable<bool> value);
        partial void OnControlPieceChanged();
        partial void OnSpecification1IdChanging(System.Nullable<int> value);
        partial void OnSpecification1IdChanged();
        partial void OnSpecification2IdChanging(System.Nullable<int> value);
        partial void OnSpecification2IdChanged();
        partial void OnSpecification3IdChanging(System.Nullable<int> value);
        partial void OnSpecification3IdChanged();
        partial void OnSpecification4IdChanging(System.Nullable<int> value);
        partial void OnSpecification4IdChanged();
        partial void OnSpecification5IdChanging(System.Nullable<int> value);
        partial void OnSpecification5IdChanged();
        partial void OnPcs2qtyCalcChanging(string value);
        partial void OnPcs2qtyCalcChanged();
        partial void OnWgt2qtyCalcChanging(string value);
        partial void OnWgt2qtyCalcChanged();
        partial void OnQty2pcsCalcChanging(string value);
        partial void OnQty2pcsCalcChanged();
        partial void OnWgt2pcsCalcChanging(string value);
        partial void OnWgt2pcsCalcChanged();
        partial void OnQty2wgtCalcChanging(string value);
        partial void OnQty2wgtCalcChanged();
        partial void OnPcs2wgtCalcChanging(string value);
        partial void OnPcs2wgtCalcChanged();
        partial void OnWidthCalcChanging(string value);
        partial void OnWidthCalcChanged();
        partial void OnLengthCalcChanging(string value);
        partial void OnLengthCalcChanged();
        partial void OnHeightCalcChanging(string value);
        partial void OnHeightCalcChanged();
        partial void OnDiameterCalcChanging(string value);
        partial void OnDiameterCalcChanged();
        partial void OnZeroStockTriggerChanging(string value);
        partial void OnZeroStockTriggerChanged();
        partial void OnDim1TypeIdChanging(System.Nullable<int> value);
        partial void OnDim1TypeIdChanged();
        partial void OnDim1LockedChanging(System.Nullable<bool> value);
        partial void OnDim1LockedChanged();
        partial void OnDim1UnitsIdChanging(System.Nullable<int> value);
        partial void OnDim1UnitsIdChanged();
        partial void OnDim2TypeIdChanging(System.Nullable<int> value);
        partial void OnDim2TypeIdChanged();
        partial void OnDim2LockedChanging(System.Nullable<bool> value);
        partial void OnDim2LockedChanged();
        partial void OnDim2UnitsIdChanging(System.Nullable<int> value);
        partial void OnDim2UnitsIdChanged();
        partial void OnDim3TypeIdChanging(System.Nullable<int> value);
        partial void OnDim3TypeIdChanged();
        partial void OnDim3LockedChanging(System.Nullable<bool> value);
        partial void OnDim3LockedChanged();
        partial void OnDim3UnitsIdChanging(System.Nullable<int> value);
        partial void OnDim3UnitsIdChanged();
        partial void OnDim4TypeIdChanging(System.Nullable<int> value);
        partial void OnDim4TypeIdChanged();
        partial void OnDim4LockedChanging(System.Nullable<bool> value);
        partial void OnDim4LockedChanged();
        partial void OnDim4UnitsIdChanging(System.Nullable<int> value);
        partial void OnDim4UnitsIdChanged();
        partial void OnDim5TypeIdChanging(System.Nullable<int> value);
        partial void OnDim5TypeIdChanged();
        partial void OnDim5LockedChanging(System.Nullable<bool> value);
        partial void OnDim5LockedChanged();
        partial void OnDim5UnitsIdChanging(System.Nullable<int> value);
        partial void OnDim5UnitsIdChanged();
        partial void OnDensityLabelChanging(string value);
        partial void OnDensityLabelChanged();
        partial void OnPiecesUnitIdChanging(System.Nullable<int> value);
        partial void OnPiecesUnitIdChanged();
        partial void OnDensityCalcChanging(string value);
        partial void OnDensityCalcChanged();
        partial void OnDim1ToleranceUnitsIdChanging(System.Nullable<int> value);
        partial void OnDim1ToleranceUnitsIdChanged();
        partial void OnDim2ToleranceUnitsIdChanging(System.Nullable<int> value);
        partial void OnDim2ToleranceUnitsIdChanged();
        partial void OnDim3ToleranceUnitsIdChanging(System.Nullable<int> value);
        partial void OnDim3ToleranceUnitsIdChanged();
        partial void OnDim4ToleranceUnitsIdChanging(System.Nullable<int> value);
        partial void OnDim4ToleranceUnitsIdChanged();
        partial void OnDim5ToleranceUnitsIdChanging(System.Nullable<int> value);
        partial void OnDim5ToleranceUnitsIdChanged();
        partial void OnSpecification6IdChanging(System.Nullable<int> value);
        partial void OnSpecification6IdChanged();
        partial void OnSpecification7IdChanging(System.Nullable<int> value);
        partial void OnSpecification7IdChanged();
        partial void OnSpecification8IdChanging(System.Nullable<int> value);
        partial void OnSpecification8IdChanged();
        partial void OnSpecification9IdChanging(System.Nullable<int> value);
        partial void OnSpecification9IdChanged();
        partial void OnSpecification10IdChanging(System.Nullable<int> value);
        partial void OnSpecification10IdChanged();
        partial void OnFirstOptimisableDimensionChanging(System.Nullable<int> value);
        partial void OnFirstOptimisableDimensionChanged();
        partial void OnSecondOptimisableDimensionChanging(System.Nullable<int> value);
        partial void OnSecondOptimisableDimensionChanged();
        partial void OnQuantityDecimalChanging(System.Nullable<int> value);
        partial void OnQuantityDecimalChanged();
        partial void OnDensityFactorChanging(System.Nullable<decimal> value);
        partial void OnDensityFactorChanged();
        partial void OnLength2weightCalcChanging(string value);
        partial void OnLength2weightCalcChanged();
        partial void OnArea2weightCalcChanging(string value);
        partial void OnArea2weightCalcChanged();
        #endregion

        public ProductControl()
        {
            this._UnitsOfMeasure_Dim1ToleranceUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim1UnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim2ToleranceUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim2UnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim3ToleranceUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim3UnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim4ToleranceUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim4UnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim5ToleranceUnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_Dim5UnitsId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_PiecesUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_QuantityUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._UnitsOfMeasure_WeightUnitId  = default(EntityRef<UnitsOfMeasure>);
            this._ProductCategory = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategory), new Action<ProductCategory>(this.detach_ProductCategory));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"""version""", Storage = "_Version", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cdate in the schema.
        /// </summary>
        [Column(Name = @"cdate", Storage = "_Cdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Cdate
        {
            get
            {
                return this._Cdate;
            }
            set
            {
                if (this._Cdate != value)
                {
                    this.OnCdateChanging(value);
                    this.SendPropertyChanging("Cdate");
                    this._Cdate = value;
                    this.SendPropertyChanged("Cdate");
                    this.OnCdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CuserId in the schema.
        /// </summary>
        [Column(Name = @"cuser_id", Storage = "_CuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CuserId
        {
            get
            {
                return this._CuserId;
            }
            set
            {
                if (this._CuserId != value)
                {
                    this.OnCuserIdChanging(value);
                    this.SendPropertyChanging("CuserId");
                    this._CuserId = value;
                    this.SendPropertyChanged("CuserId");
                    this.OnCuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdate in the schema.
        /// </summary>
        [Column(Name = @"mdate", Storage = "_Mdate", DbType = "TIMESTAMPTZ", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Mdate
        {
            get
            {
                return this._Mdate;
            }
            set
            {
                if (this._Mdate != value)
                {
                    this.OnMdateChanging(value);
                    this.SendPropertyChanging("Mdate");
                    this._Mdate = value;
                    this.SendPropertyChanged("Mdate");
                    this.OnMdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MuserId in the schema.
        /// </summary>
        [Column(Name = @"muser_id", Storage = "_MuserId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MuserId
        {
            get
            {
                return this._MuserId;
            }
            set
            {
                if (this._MuserId != value)
                {
                    this.OnMuserIdChanging(value);
                    this.SendPropertyChanging("MuserId");
                    this._MuserId = value;
                    this.SendPropertyChanged("MuserId");
                    this.OnMuserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", DbType = "VARCHAR(6)", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightUnitId in the schema.
        /// </summary>
        [Column(Name = @"weight_unit_id", Storage = "_WeightUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WeightUnitId
        {
            get
            {
                return this._WeightUnitId;
            }
            set
            {
                if (this._WeightUnitId != value)
                {
                    if (this._UnitsOfMeasure_WeightUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWeightUnitIdChanging(value);
                    this.SendPropertyChanging("WeightUnitId");
                    this._WeightUnitId = value;
                    this.SendPropertyChanged("WeightUnitId");
                    this.OnWeightUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityUnitId in the schema.
        /// </summary>
        [Column(Name = @"quantity_unit_id", Storage = "_QuantityUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> QuantityUnitId
        {
            get
            {
                return this._QuantityUnitId;
            }
            set
            {
                if (this._QuantityUnitId != value)
                {
                    if (this._UnitsOfMeasure_QuantityUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnQuantityUnitIdChanging(value);
                    this.SendPropertyChanging("QuantityUnitId");
                    this._QuantityUnitId = value;
                    this.SendPropertyChanged("QuantityUnitId");
                    this.OnQuantityUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeightDecimal in the schema.
        /// </summary>
        [Column(Name = @"weight_decimals", Storage = "_WeightDecimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> WeightDecimal
        {
            get
            {
                return this._WeightDecimal;
            }
            set
            {
                if (this._WeightDecimal != value)
                {
                    this.OnWeightDecimalChanging(value);
                    this.SendPropertyChanging("WeightDecimal");
                    this._WeightDecimal = value;
                    this.SendPropertyChanged("WeightDecimal");
                    this.OnWeightDecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlQuantity in the schema.
        /// </summary>
        [Column(Name = @"control_quantity", Storage = "_ControlQuantity", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ControlQuantity
        {
            get
            {
                return this._ControlQuantity;
            }
            set
            {
                if (this._ControlQuantity != value)
                {
                    this.OnControlQuantityChanging(value);
                    this.SendPropertyChanging("ControlQuantity");
                    this._ControlQuantity = value;
                    this.SendPropertyChanged("ControlQuantity");
                    this.OnControlQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlPiece in the schema.
        /// </summary>
        [Column(Name = @"control_pieces", Storage = "_ControlPiece", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> ControlPiece
        {
            get
            {
                return this._ControlPiece;
            }
            set
            {
                if (this._ControlPiece != value)
                {
                    this.OnControlPieceChanging(value);
                    this.SendPropertyChanging("ControlPiece");
                    this._ControlPiece = value;
                    this.SendPropertyChanged("ControlPiece");
                    this.OnControlPieceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification1Id in the schema.
        /// </summary>
        [Column(Name = @"specification1_id", Storage = "_Specification1Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification1Id
        {
            get
            {
                return this._Specification1Id;
            }
            set
            {
                if (this._Specification1Id != value)
                {
                    this.OnSpecification1IdChanging(value);
                    this.SendPropertyChanging("Specification1Id");
                    this._Specification1Id = value;
                    this.SendPropertyChanged("Specification1Id");
                    this.OnSpecification1IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification2Id in the schema.
        /// </summary>
        [Column(Name = @"specification2_id", Storage = "_Specification2Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification2Id
        {
            get
            {
                return this._Specification2Id;
            }
            set
            {
                if (this._Specification2Id != value)
                {
                    this.OnSpecification2IdChanging(value);
                    this.SendPropertyChanging("Specification2Id");
                    this._Specification2Id = value;
                    this.SendPropertyChanged("Specification2Id");
                    this.OnSpecification2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification3Id in the schema.
        /// </summary>
        [Column(Name = @"specification3_id", Storage = "_Specification3Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification3Id
        {
            get
            {
                return this._Specification3Id;
            }
            set
            {
                if (this._Specification3Id != value)
                {
                    this.OnSpecification3IdChanging(value);
                    this.SendPropertyChanging("Specification3Id");
                    this._Specification3Id = value;
                    this.SendPropertyChanged("Specification3Id");
                    this.OnSpecification3IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification4Id in the schema.
        /// </summary>
        [Column(Name = @"specification4_id", Storage = "_Specification4Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification4Id
        {
            get
            {
                return this._Specification4Id;
            }
            set
            {
                if (this._Specification4Id != value)
                {
                    this.OnSpecification4IdChanging(value);
                    this.SendPropertyChanging("Specification4Id");
                    this._Specification4Id = value;
                    this.SendPropertyChanged("Specification4Id");
                    this.OnSpecification4IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification5Id in the schema.
        /// </summary>
        [Column(Name = @"specification5_id", Storage = "_Specification5Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification5Id
        {
            get
            {
                return this._Specification5Id;
            }
            set
            {
                if (this._Specification5Id != value)
                {
                    this.OnSpecification5IdChanging(value);
                    this.SendPropertyChanging("Specification5Id");
                    this._Specification5Id = value;
                    this.SendPropertyChanged("Specification5Id");
                    this.OnSpecification5IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pcs2qtyCalc in the schema.
        /// </summary>
        [Column(Name = @"pcs2qty_calc", Storage = "_Pcs2qtyCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Pcs2qtyCalc
        {
            get
            {
                return this._Pcs2qtyCalc;
            }
            set
            {
                if (this._Pcs2qtyCalc != value)
                {
                    this.OnPcs2qtyCalcChanging(value);
                    this.SendPropertyChanging("Pcs2qtyCalc");
                    this._Pcs2qtyCalc = value;
                    this.SendPropertyChanged("Pcs2qtyCalc");
                    this.OnPcs2qtyCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Wgt2qtyCalc in the schema.
        /// </summary>
        [Column(Name = @"wgt2qty_calc", Storage = "_Wgt2qtyCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Wgt2qtyCalc
        {
            get
            {
                return this._Wgt2qtyCalc;
            }
            set
            {
                if (this._Wgt2qtyCalc != value)
                {
                    this.OnWgt2qtyCalcChanging(value);
                    this.SendPropertyChanging("Wgt2qtyCalc");
                    this._Wgt2qtyCalc = value;
                    this.SendPropertyChanged("Wgt2qtyCalc");
                    this.OnWgt2qtyCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Qty2pcsCalc in the schema.
        /// </summary>
        [Column(Name = @"qty2pcs_calc", Storage = "_Qty2pcsCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Qty2pcsCalc
        {
            get
            {
                return this._Qty2pcsCalc;
            }
            set
            {
                if (this._Qty2pcsCalc != value)
                {
                    this.OnQty2pcsCalcChanging(value);
                    this.SendPropertyChanging("Qty2pcsCalc");
                    this._Qty2pcsCalc = value;
                    this.SendPropertyChanged("Qty2pcsCalc");
                    this.OnQty2pcsCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Wgt2pcsCalc in the schema.
        /// </summary>
        [Column(Name = @"wgt2pcs_calc", Storage = "_Wgt2pcsCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Wgt2pcsCalc
        {
            get
            {
                return this._Wgt2pcsCalc;
            }
            set
            {
                if (this._Wgt2pcsCalc != value)
                {
                    this.OnWgt2pcsCalcChanging(value);
                    this.SendPropertyChanging("Wgt2pcsCalc");
                    this._Wgt2pcsCalc = value;
                    this.SendPropertyChanged("Wgt2pcsCalc");
                    this.OnWgt2pcsCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Qty2wgtCalc in the schema.
        /// </summary>
        [Column(Name = @"qty2wgt_calc", Storage = "_Qty2wgtCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Qty2wgtCalc
        {
            get
            {
                return this._Qty2wgtCalc;
            }
            set
            {
                if (this._Qty2wgtCalc != value)
                {
                    this.OnQty2wgtCalcChanging(value);
                    this.SendPropertyChanging("Qty2wgtCalc");
                    this._Qty2wgtCalc = value;
                    this.SendPropertyChanged("Qty2wgtCalc");
                    this.OnQty2wgtCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pcs2wgtCalc in the schema.
        /// </summary>
        [Column(Name = @"pcs2wgt_calc", Storage = "_Pcs2wgtCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Pcs2wgtCalc
        {
            get
            {
                return this._Pcs2wgtCalc;
            }
            set
            {
                if (this._Pcs2wgtCalc != value)
                {
                    this.OnPcs2wgtCalcChanging(value);
                    this.SendPropertyChanging("Pcs2wgtCalc");
                    this._Pcs2wgtCalc = value;
                    this.SendPropertyChanged("Pcs2wgtCalc");
                    this.OnPcs2wgtCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidthCalc in the schema.
        /// </summary>
        [Column(Name = @"width_calc", Storage = "_WidthCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string WidthCalc
        {
            get
            {
                return this._WidthCalc;
            }
            set
            {
                if (this._WidthCalc != value)
                {
                    this.OnWidthCalcChanging(value);
                    this.SendPropertyChanging("WidthCalc");
                    this._WidthCalc = value;
                    this.SendPropertyChanged("WidthCalc");
                    this.OnWidthCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LengthCalc in the schema.
        /// </summary>
        [Column(Name = @"length_calc", Storage = "_LengthCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string LengthCalc
        {
            get
            {
                return this._LengthCalc;
            }
            set
            {
                if (this._LengthCalc != value)
                {
                    this.OnLengthCalcChanging(value);
                    this.SendPropertyChanging("LengthCalc");
                    this._LengthCalc = value;
                    this.SendPropertyChanged("LengthCalc");
                    this.OnLengthCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeightCalc in the schema.
        /// </summary>
        [Column(Name = @"height_calc", Storage = "_HeightCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string HeightCalc
        {
            get
            {
                return this._HeightCalc;
            }
            set
            {
                if (this._HeightCalc != value)
                {
                    this.OnHeightCalcChanging(value);
                    this.SendPropertyChanging("HeightCalc");
                    this._HeightCalc = value;
                    this.SendPropertyChanged("HeightCalc");
                    this.OnHeightCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiameterCalc in the schema.
        /// </summary>
        [Column(Name = @"diameter_calc", Storage = "_DiameterCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string DiameterCalc
        {
            get
            {
                return this._DiameterCalc;
            }
            set
            {
                if (this._DiameterCalc != value)
                {
                    this.OnDiameterCalcChanging(value);
                    this.SendPropertyChanging("DiameterCalc");
                    this._DiameterCalc = value;
                    this.SendPropertyChanged("DiameterCalc");
                    this.OnDiameterCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZeroStockTrigger in the schema.
        /// </summary>
        [Column(Name = @"zero_stock_trigger", Storage = "_ZeroStockTrigger", DbType = "CHAR(1)", UpdateCheck = UpdateCheck.Never)]
        public string ZeroStockTrigger
        {
            get
            {
                return this._ZeroStockTrigger;
            }
            set
            {
                if (this._ZeroStockTrigger != value)
                {
                    this.OnZeroStockTriggerChanging(value);
                    this.SendPropertyChanging("ZeroStockTrigger");
                    this._ZeroStockTrigger = value;
                    this.SendPropertyChanged("ZeroStockTrigger");
                    this.OnZeroStockTriggerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim1_type_id", Storage = "_Dim1TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1TypeId
        {
            get
            {
                return this._Dim1TypeId;
            }
            set
            {
                if (this._Dim1TypeId != value)
                {
                    this.OnDim1TypeIdChanging(value);
                    this.SendPropertyChanging("Dim1TypeId");
                    this._Dim1TypeId = value;
                    this.SendPropertyChanged("Dim1TypeId");
                    this.OnDim1TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1Locked in the schema.
        /// </summary>
        [Column(Name = @"dim1_locked", Storage = "_Dim1Locked", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim1Locked
        {
            get
            {
                return this._Dim1Locked;
            }
            set
            {
                if (this._Dim1Locked != value)
                {
                    this.OnDim1LockedChanging(value);
                    this.SendPropertyChanging("Dim1Locked");
                    this._Dim1Locked = value;
                    this.SendPropertyChanged("Dim1Locked");
                    this.OnDim1LockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1UnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim1_units_id", Storage = "_Dim1UnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1UnitsId
        {
            get
            {
                return this._Dim1UnitsId;
            }
            set
            {
                if (this._Dim1UnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim1UnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim1UnitsIdChanging(value);
                    this.SendPropertyChanging("Dim1UnitsId");
                    this._Dim1UnitsId = value;
                    this.SendPropertyChanged("Dim1UnitsId");
                    this.OnDim1UnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim2_type_id", Storage = "_Dim2TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2TypeId
        {
            get
            {
                return this._Dim2TypeId;
            }
            set
            {
                if (this._Dim2TypeId != value)
                {
                    this.OnDim2TypeIdChanging(value);
                    this.SendPropertyChanging("Dim2TypeId");
                    this._Dim2TypeId = value;
                    this.SendPropertyChanged("Dim2TypeId");
                    this.OnDim2TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2Locked in the schema.
        /// </summary>
        [Column(Name = @"dim2_locked", Storage = "_Dim2Locked", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim2Locked
        {
            get
            {
                return this._Dim2Locked;
            }
            set
            {
                if (this._Dim2Locked != value)
                {
                    this.OnDim2LockedChanging(value);
                    this.SendPropertyChanging("Dim2Locked");
                    this._Dim2Locked = value;
                    this.SendPropertyChanged("Dim2Locked");
                    this.OnDim2LockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2UnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim2_units_id", Storage = "_Dim2UnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2UnitsId
        {
            get
            {
                return this._Dim2UnitsId;
            }
            set
            {
                if (this._Dim2UnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim2UnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim2UnitsIdChanging(value);
                    this.SendPropertyChanging("Dim2UnitsId");
                    this._Dim2UnitsId = value;
                    this.SendPropertyChanged("Dim2UnitsId");
                    this.OnDim2UnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim3_type_id", Storage = "_Dim3TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3TypeId
        {
            get
            {
                return this._Dim3TypeId;
            }
            set
            {
                if (this._Dim3TypeId != value)
                {
                    this.OnDim3TypeIdChanging(value);
                    this.SendPropertyChanging("Dim3TypeId");
                    this._Dim3TypeId = value;
                    this.SendPropertyChanged("Dim3TypeId");
                    this.OnDim3TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3Locked in the schema.
        /// </summary>
        [Column(Name = @"dim3_locked", Storage = "_Dim3Locked", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim3Locked
        {
            get
            {
                return this._Dim3Locked;
            }
            set
            {
                if (this._Dim3Locked != value)
                {
                    this.OnDim3LockedChanging(value);
                    this.SendPropertyChanging("Dim3Locked");
                    this._Dim3Locked = value;
                    this.SendPropertyChanged("Dim3Locked");
                    this.OnDim3LockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3UnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim3_units_id", Storage = "_Dim3UnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3UnitsId
        {
            get
            {
                return this._Dim3UnitsId;
            }
            set
            {
                if (this._Dim3UnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim3UnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim3UnitsIdChanging(value);
                    this.SendPropertyChanging("Dim3UnitsId");
                    this._Dim3UnitsId = value;
                    this.SendPropertyChanged("Dim3UnitsId");
                    this.OnDim3UnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim4_type_id", Storage = "_Dim4TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4TypeId
        {
            get
            {
                return this._Dim4TypeId;
            }
            set
            {
                if (this._Dim4TypeId != value)
                {
                    this.OnDim4TypeIdChanging(value);
                    this.SendPropertyChanging("Dim4TypeId");
                    this._Dim4TypeId = value;
                    this.SendPropertyChanged("Dim4TypeId");
                    this.OnDim4TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4Locked in the schema.
        /// </summary>
        [Column(Name = @"dim4_locked", Storage = "_Dim4Locked", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim4Locked
        {
            get
            {
                return this._Dim4Locked;
            }
            set
            {
                if (this._Dim4Locked != value)
                {
                    this.OnDim4LockedChanging(value);
                    this.SendPropertyChanging("Dim4Locked");
                    this._Dim4Locked = value;
                    this.SendPropertyChanged("Dim4Locked");
                    this.OnDim4LockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4UnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim4_units_id", Storage = "_Dim4UnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4UnitsId
        {
            get
            {
                return this._Dim4UnitsId;
            }
            set
            {
                if (this._Dim4UnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim4UnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim4UnitsIdChanging(value);
                    this.SendPropertyChanging("Dim4UnitsId");
                    this._Dim4UnitsId = value;
                    this.SendPropertyChanged("Dim4UnitsId");
                    this.OnDim4UnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5TypeId in the schema.
        /// </summary>
        [Column(Name = @"dim5_type_id", Storage = "_Dim5TypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5TypeId
        {
            get
            {
                return this._Dim5TypeId;
            }
            set
            {
                if (this._Dim5TypeId != value)
                {
                    this.OnDim5TypeIdChanging(value);
                    this.SendPropertyChanging("Dim5TypeId");
                    this._Dim5TypeId = value;
                    this.SendPropertyChanged("Dim5TypeId");
                    this.OnDim5TypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5Locked in the schema.
        /// </summary>
        [Column(Name = @"dim5_locked", Storage = "_Dim5Locked", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Dim5Locked
        {
            get
            {
                return this._Dim5Locked;
            }
            set
            {
                if (this._Dim5Locked != value)
                {
                    this.OnDim5LockedChanging(value);
                    this.SendPropertyChanging("Dim5Locked");
                    this._Dim5Locked = value;
                    this.SendPropertyChanged("Dim5Locked");
                    this.OnDim5LockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5UnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim5_units_id", Storage = "_Dim5UnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5UnitsId
        {
            get
            {
                return this._Dim5UnitsId;
            }
            set
            {
                if (this._Dim5UnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim5UnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim5UnitsIdChanging(value);
                    this.SendPropertyChanging("Dim5UnitsId");
                    this._Dim5UnitsId = value;
                    this.SendPropertyChanged("Dim5UnitsId");
                    this.OnDim5UnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DensityLabel in the schema.
        /// </summary>
        [Column(Name = @"density_label", Storage = "_DensityLabel", DbType = "VARCHAR(16)", UpdateCheck = UpdateCheck.Never)]
        public string DensityLabel
        {
            get
            {
                return this._DensityLabel;
            }
            set
            {
                if (this._DensityLabel != value)
                {
                    this.OnDensityLabelChanging(value);
                    this.SendPropertyChanging("DensityLabel");
                    this._DensityLabel = value;
                    this.SendPropertyChanged("DensityLabel");
                    this.OnDensityLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PiecesUnitId in the schema.
        /// </summary>
        [Column(Name = @"pieces_unit_id", Storage = "_PiecesUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PiecesUnitId
        {
            get
            {
                return this._PiecesUnitId;
            }
            set
            {
                if (this._PiecesUnitId != value)
                {
                    if (this._UnitsOfMeasure_PiecesUnitId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPiecesUnitIdChanging(value);
                    this.SendPropertyChanging("PiecesUnitId");
                    this._PiecesUnitId = value;
                    this.SendPropertyChanged("PiecesUnitId");
                    this.OnPiecesUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DensityCalc in the schema.
        /// </summary>
        [Column(Name = @"density_calc", Storage = "_DensityCalc", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DensityCalc
        {
            get
            {
                return this._DensityCalc;
            }
            set
            {
                if (this._DensityCalc != value)
                {
                    this.OnDensityCalcChanging(value);
                    this.SendPropertyChanging("DensityCalc");
                    this._DensityCalc = value;
                    this.SendPropertyChanged("DensityCalc");
                    this.OnDensityCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim1ToleranceUnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim1_tolerance_units_id", Storage = "_Dim1ToleranceUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim1ToleranceUnitsId
        {
            get
            {
                return this._Dim1ToleranceUnitsId;
            }
            set
            {
                if (this._Dim1ToleranceUnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim1ToleranceUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim1ToleranceUnitsIdChanging(value);
                    this.SendPropertyChanging("Dim1ToleranceUnitsId");
                    this._Dim1ToleranceUnitsId = value;
                    this.SendPropertyChanged("Dim1ToleranceUnitsId");
                    this.OnDim1ToleranceUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim2ToleranceUnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim2_tolerance_units_id", Storage = "_Dim2ToleranceUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim2ToleranceUnitsId
        {
            get
            {
                return this._Dim2ToleranceUnitsId;
            }
            set
            {
                if (this._Dim2ToleranceUnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim2ToleranceUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim2ToleranceUnitsIdChanging(value);
                    this.SendPropertyChanging("Dim2ToleranceUnitsId");
                    this._Dim2ToleranceUnitsId = value;
                    this.SendPropertyChanged("Dim2ToleranceUnitsId");
                    this.OnDim2ToleranceUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim3ToleranceUnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim3_tolerance_units_id", Storage = "_Dim3ToleranceUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim3ToleranceUnitsId
        {
            get
            {
                return this._Dim3ToleranceUnitsId;
            }
            set
            {
                if (this._Dim3ToleranceUnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim3ToleranceUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim3ToleranceUnitsIdChanging(value);
                    this.SendPropertyChanging("Dim3ToleranceUnitsId");
                    this._Dim3ToleranceUnitsId = value;
                    this.SendPropertyChanged("Dim3ToleranceUnitsId");
                    this.OnDim3ToleranceUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim4ToleranceUnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim4_tolerance_units_id", Storage = "_Dim4ToleranceUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim4ToleranceUnitsId
        {
            get
            {
                return this._Dim4ToleranceUnitsId;
            }
            set
            {
                if (this._Dim4ToleranceUnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim4ToleranceUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim4ToleranceUnitsIdChanging(value);
                    this.SendPropertyChanging("Dim4ToleranceUnitsId");
                    this._Dim4ToleranceUnitsId = value;
                    this.SendPropertyChanged("Dim4ToleranceUnitsId");
                    this.OnDim4ToleranceUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dim5ToleranceUnitsId in the schema.
        /// </summary>
        [Column(Name = @"dim5_tolerance_units_id", Storage = "_Dim5ToleranceUnitsId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Dim5ToleranceUnitsId
        {
            get
            {
                return this._Dim5ToleranceUnitsId;
            }
            set
            {
                if (this._Dim5ToleranceUnitsId != value)
                {
                    if (this._UnitsOfMeasure_Dim5ToleranceUnitsId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDim5ToleranceUnitsIdChanging(value);
                    this.SendPropertyChanging("Dim5ToleranceUnitsId");
                    this._Dim5ToleranceUnitsId = value;
                    this.SendPropertyChanged("Dim5ToleranceUnitsId");
                    this.OnDim5ToleranceUnitsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification6Id in the schema.
        /// </summary>
        [Column(Name = @"specification6_id", Storage = "_Specification6Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification6Id
        {
            get
            {
                return this._Specification6Id;
            }
            set
            {
                if (this._Specification6Id != value)
                {
                    this.OnSpecification6IdChanging(value);
                    this.SendPropertyChanging("Specification6Id");
                    this._Specification6Id = value;
                    this.SendPropertyChanged("Specification6Id");
                    this.OnSpecification6IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification7Id in the schema.
        /// </summary>
        [Column(Name = @"specification7_id", Storage = "_Specification7Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification7Id
        {
            get
            {
                return this._Specification7Id;
            }
            set
            {
                if (this._Specification7Id != value)
                {
                    this.OnSpecification7IdChanging(value);
                    this.SendPropertyChanging("Specification7Id");
                    this._Specification7Id = value;
                    this.SendPropertyChanged("Specification7Id");
                    this.OnSpecification7IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification8Id in the schema.
        /// </summary>
        [Column(Name = @"specification8_id", Storage = "_Specification8Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification8Id
        {
            get
            {
                return this._Specification8Id;
            }
            set
            {
                if (this._Specification8Id != value)
                {
                    this.OnSpecification8IdChanging(value);
                    this.SendPropertyChanging("Specification8Id");
                    this._Specification8Id = value;
                    this.SendPropertyChanged("Specification8Id");
                    this.OnSpecification8IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification9Id in the schema.
        /// </summary>
        [Column(Name = @"specification9_id", Storage = "_Specification9Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification9Id
        {
            get
            {
                return this._Specification9Id;
            }
            set
            {
                if (this._Specification9Id != value)
                {
                    this.OnSpecification9IdChanging(value);
                    this.SendPropertyChanging("Specification9Id");
                    this._Specification9Id = value;
                    this.SendPropertyChanged("Specification9Id");
                    this.OnSpecification9IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specification10Id in the schema.
        /// </summary>
        [Column(Name = @"specification10_id", Storage = "_Specification10Id", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Specification10Id
        {
            get
            {
                return this._Specification10Id;
            }
            set
            {
                if (this._Specification10Id != value)
                {
                    this.OnSpecification10IdChanging(value);
                    this.SendPropertyChanging("Specification10Id");
                    this._Specification10Id = value;
                    this.SendPropertyChanged("Specification10Id");
                    this.OnSpecification10IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstOptimisableDimension in the schema.
        /// </summary>
        [Column(Name = @"first_optimisable_dimension", Storage = "_FirstOptimisableDimension", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> FirstOptimisableDimension
        {
            get
            {
                return this._FirstOptimisableDimension;
            }
            set
            {
                if (this._FirstOptimisableDimension != value)
                {
                    this.OnFirstOptimisableDimensionChanging(value);
                    this.SendPropertyChanging("FirstOptimisableDimension");
                    this._FirstOptimisableDimension = value;
                    this.SendPropertyChanged("FirstOptimisableDimension");
                    this.OnFirstOptimisableDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecondOptimisableDimension in the schema.
        /// </summary>
        [Column(Name = @"second_optimisable_dimension", Storage = "_SecondOptimisableDimension", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SecondOptimisableDimension
        {
            get
            {
                return this._SecondOptimisableDimension;
            }
            set
            {
                if (this._SecondOptimisableDimension != value)
                {
                    this.OnSecondOptimisableDimensionChanging(value);
                    this.SendPropertyChanging("SecondOptimisableDimension");
                    this._SecondOptimisableDimension = value;
                    this.SendPropertyChanged("SecondOptimisableDimension");
                    this.OnSecondOptimisableDimensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityDecimal in the schema.
        /// </summary>
        [Column(Name = @"quantity_decimals", Storage = "_QuantityDecimal", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> QuantityDecimal
        {
            get
            {
                return this._QuantityDecimal;
            }
            set
            {
                if (this._QuantityDecimal != value)
                {
                    this.OnQuantityDecimalChanging(value);
                    this.SendPropertyChanging("QuantityDecimal");
                    this._QuantityDecimal = value;
                    this.SendPropertyChanged("QuantityDecimal");
                    this.OnQuantityDecimalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DensityFactor in the schema.
        /// </summary>
        [Column(Name = @"density_factor", Storage = "_DensityFactor", DbType = "NUMERIC(12,6)", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> DensityFactor
        {
            get
            {
                return this._DensityFactor;
            }
            set
            {
                if (this._DensityFactor != value)
                {
                    this.OnDensityFactorChanging(value);
                    this.SendPropertyChanging("DensityFactor");
                    this._DensityFactor = value;
                    this.SendPropertyChanged("DensityFactor");
                    this.OnDensityFactorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Length2weightCalc in the schema.
        /// </summary>
        [Column(Name = @"length2weight_calc", Storage = "_Length2weightCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Length2weightCalc
        {
            get
            {
                return this._Length2weightCalc;
            }
            set
            {
                if (this._Length2weightCalc != value)
                {
                    this.OnLength2weightCalcChanging(value);
                    this.SendPropertyChanging("Length2weightCalc");
                    this._Length2weightCalc = value;
                    this.SendPropertyChanged("Length2weightCalc");
                    this.OnLength2weightCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Area2weightCalc in the schema.
        /// </summary>
        [Column(Name = @"area2weight_calc", Storage = "_Area2weightCalc", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string Area2weightCalc
        {
            get
            {
                return this._Area2weightCalc;
            }
            set
            {
                if (this._Area2weightCalc != value)
                {
                    this.OnArea2weightCalcChanging(value);
                    this.SendPropertyChanging("Area2weightCalc");
                    this._Area2weightCalc = value;
                    this.SendPropertyChanged("Area2weightCalc");
                    this.OnArea2weightCalcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim1ToleranceUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl", Storage="_UnitsOfMeasure_Dim1ToleranceUnitsId", ThisKey="Dim1ToleranceUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim1ToleranceUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim1ToleranceUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim1ToleranceUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim1ToleranceUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim1ToleranceUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim1ToleranceUnitsId.Entity = null;
                        previousValue.ProductControl_Dim1ToleranceUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim1ToleranceUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim1ToleranceUnitsId = value.Id;
                        value.ProductControl_Dim1ToleranceUnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim1ToleranceUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim1ToleranceUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim1UnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl1", Storage="_UnitsOfMeasure_Dim1UnitsId", ThisKey="Dim1UnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim1UnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim1UnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim1UnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim1UnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim1UnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim1UnitsId.Entity = null;
                        previousValue.ProductControl_Dim1UnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim1UnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim1UnitsId = value.Id;
                        value.ProductControl_Dim1UnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim1UnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim1UnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim2ToleranceUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl2", Storage="_UnitsOfMeasure_Dim2ToleranceUnitsId", ThisKey="Dim2ToleranceUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim2ToleranceUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim2ToleranceUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim2ToleranceUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim2ToleranceUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim2ToleranceUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim2ToleranceUnitsId.Entity = null;
                        previousValue.ProductControl_Dim2ToleranceUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim2ToleranceUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim2ToleranceUnitsId = value.Id;
                        value.ProductControl_Dim2ToleranceUnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim2ToleranceUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim2ToleranceUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim2UnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl3", Storage="_UnitsOfMeasure_Dim2UnitsId", ThisKey="Dim2UnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim2UnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim2UnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim2UnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim2UnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim2UnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim2UnitsId.Entity = null;
                        previousValue.ProductControl_Dim2UnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim2UnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim2UnitsId = value.Id;
                        value.ProductControl_Dim2UnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim2UnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim2UnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim3ToleranceUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl4", Storage="_UnitsOfMeasure_Dim3ToleranceUnitsId", ThisKey="Dim3ToleranceUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim3ToleranceUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim3ToleranceUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim3ToleranceUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim3ToleranceUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim3ToleranceUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim3ToleranceUnitsId.Entity = null;
                        previousValue.ProductControl_Dim3ToleranceUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim3ToleranceUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim3ToleranceUnitsId = value.Id;
                        value.ProductControl_Dim3ToleranceUnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim3ToleranceUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim3ToleranceUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim3UnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl5", Storage="_UnitsOfMeasure_Dim3UnitsId", ThisKey="Dim3UnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim3UnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim3UnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim3UnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim3UnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim3UnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim3UnitsId.Entity = null;
                        previousValue.ProductControl_Dim3UnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim3UnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim3UnitsId = value.Id;
                        value.ProductControl_Dim3UnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim3UnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim3UnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim4ToleranceUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl6", Storage="_UnitsOfMeasure_Dim4ToleranceUnitsId", ThisKey="Dim4ToleranceUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim4ToleranceUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim4ToleranceUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim4ToleranceUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim4ToleranceUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim4ToleranceUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim4ToleranceUnitsId.Entity = null;
                        previousValue.ProductControl_Dim4ToleranceUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim4ToleranceUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim4ToleranceUnitsId = value.Id;
                        value.ProductControl_Dim4ToleranceUnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim4ToleranceUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim4ToleranceUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim4UnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl7", Storage="_UnitsOfMeasure_Dim4UnitsId", ThisKey="Dim4UnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim4UnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim4UnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim4UnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim4UnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim4UnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim4UnitsId.Entity = null;
                        previousValue.ProductControl_Dim4UnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim4UnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim4UnitsId = value.Id;
                        value.ProductControl_Dim4UnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim4UnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim4UnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim5ToleranceUnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl8", Storage="_UnitsOfMeasure_Dim5ToleranceUnitsId", ThisKey="Dim5ToleranceUnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim5ToleranceUnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim5ToleranceUnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim5ToleranceUnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim5ToleranceUnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim5ToleranceUnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim5ToleranceUnitsId.Entity = null;
                        previousValue.ProductControl_Dim5ToleranceUnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim5ToleranceUnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim5ToleranceUnitsId = value.Id;
                        value.ProductControl_Dim5ToleranceUnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim5ToleranceUnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim5ToleranceUnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_Dim5UnitsId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl9", Storage="_UnitsOfMeasure_Dim5UnitsId", ThisKey="Dim5UnitsId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_Dim5UnitsId
        {
            get
            {
                return this._UnitsOfMeasure_Dim5UnitsId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_Dim5UnitsId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_Dim5UnitsId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_Dim5UnitsId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_Dim5UnitsId.Entity = null;
                        previousValue.ProductControl_Dim5UnitsId.Remove(this);
                    }
                    this._UnitsOfMeasure_Dim5UnitsId.Entity = value;
                    if (value != null)
                    {
                        this._Dim5UnitsId = value.Id;
                        value.ProductControl_Dim5UnitsId.Add(this);
                    }
                    else
                    {
                        this._Dim5UnitsId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_Dim5UnitsId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_PiecesUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl10", Storage="_UnitsOfMeasure_PiecesUnitId", ThisKey="PiecesUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_PiecesUnitId
        {
            get
            {
                return this._UnitsOfMeasure_PiecesUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_PiecesUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_PiecesUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_PiecesUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_PiecesUnitId.Entity = null;
                        previousValue.ProductControl_PiecesUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_PiecesUnitId.Entity = value;
                    if (value != null)
                    {
                        this._PiecesUnitId = value.Id;
                        value.ProductControl_PiecesUnitId.Add(this);
                    }
                    else
                    {
                        this._PiecesUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_PiecesUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_QuantityUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl11", Storage="_UnitsOfMeasure_QuantityUnitId", ThisKey="QuantityUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_QuantityUnitId
        {
            get
            {
                return this._UnitsOfMeasure_QuantityUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_QuantityUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_QuantityUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_QuantityUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_QuantityUnitId.Entity = null;
                        previousValue.ProductControl_QuantityUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_QuantityUnitId.Entity = value;
                    if (value != null)
                    {
                        this._QuantityUnitId = value.Id;
                        value.ProductControl_QuantityUnitId.Add(this);
                    }
                    else
                    {
                        this._QuantityUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_QuantityUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOfMeasure_WeightUnitId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitsOfMeasure_ProductControl12", Storage="_UnitsOfMeasure_WeightUnitId", ThisKey="WeightUnitId", OtherKey="Id", IsForeignKey=true)]
        public UnitsOfMeasure UnitsOfMeasure_WeightUnitId
        {
            get
            {
                return this._UnitsOfMeasure_WeightUnitId.Entity;
            }
            set
            {
                UnitsOfMeasure previousValue = this._UnitsOfMeasure_WeightUnitId.Entity;
                if ((previousValue != value) || (this._UnitsOfMeasure_WeightUnitId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitsOfMeasure_WeightUnitId");
                    if (previousValue != null)
                    {
                        this._UnitsOfMeasure_WeightUnitId.Entity = null;
                        previousValue.ProductControl_WeightUnitId.Remove(this);
                    }
                    this._UnitsOfMeasure_WeightUnitId.Entity = value;
                    if (value != null)
                    {
                        this._WeightUnitId = value.Id;
                        value.ProductControl_WeightUnitId.Add(this);
                    }
                    else
                    {
                        this._WeightUnitId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("UnitsOfMeasure_WeightUnitId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductControl_ProductCategory", Storage="_ProductCategory", ThisKey="Id", OtherKey="ProductControlId", DeleteRule="NO ACTION")]
        public EntitySet<ProductCategory> ProductCategory
        {
            get
            {
                return this._ProductCategory;
            }
            set
            {
                this._ProductCategory.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductCategory(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategory");
            entity.ProductControl = this;
        }
    
        private void detach_ProductCategory(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategory");
            entity.ProductControl = null;
        }
    }

}
